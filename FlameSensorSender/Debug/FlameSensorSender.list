
FlameSensorSender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072ec  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  080073f8  080073f8  000083f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076c8  080076c8  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080076c8  080076c8  000086c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076d0  080076d0  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076d0  080076d0  000086d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076d4  080076d4  000086d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080076d8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  2000005c  08007734  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08007734  0000937c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e7c  00000000  00000000  00009085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003679  00000000  00000000  0001cf01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00020580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb9  00000000  00000000  00021898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a72f  00000000  00000000  00022751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e99  00000000  00000000  0003ce80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092759  00000000  00000000  00054d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7472  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000561c  00000000  00000000  000e74b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000ecad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080073e0 	.word	0x080073e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080073e0 	.word	0x080073e0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	@ 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__aeabi_d2iz>:
 80008f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008fc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000900:	d215      	bcs.n	800092e <__aeabi_d2iz+0x36>
 8000902:	d511      	bpl.n	8000928 <__aeabi_d2iz+0x30>
 8000904:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800090c:	d912      	bls.n	8000934 <__aeabi_d2iz+0x3c>
 800090e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000912:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	bf18      	it	ne
 8000924:	4240      	negne	r0, r0
 8000926:	4770      	bx	lr
 8000928:	f04f 0000 	mov.w	r0, #0
 800092c:	4770      	bx	lr
 800092e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000932:	d105      	bne.n	8000940 <__aeabi_d2iz+0x48>
 8000934:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000938:	bf08      	it	eq
 800093a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800093e:	4770      	bx	lr
 8000940:	f04f 0000 	mov.w	r0, #0
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <__aeabi_frsub>:
 8000948:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800094c:	e002      	b.n	8000954 <__addsf3>
 800094e:	bf00      	nop

08000950 <__aeabi_fsub>:
 8000950:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000954 <__addsf3>:
 8000954:	0042      	lsls	r2, r0, #1
 8000956:	bf1f      	itttt	ne
 8000958:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800095c:	ea92 0f03 	teqne	r2, r3
 8000960:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000964:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000968:	d06a      	beq.n	8000a40 <__addsf3+0xec>
 800096a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800096e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000972:	bfc1      	itttt	gt
 8000974:	18d2      	addgt	r2, r2, r3
 8000976:	4041      	eorgt	r1, r0
 8000978:	4048      	eorgt	r0, r1
 800097a:	4041      	eorgt	r1, r0
 800097c:	bfb8      	it	lt
 800097e:	425b      	neglt	r3, r3
 8000980:	2b19      	cmp	r3, #25
 8000982:	bf88      	it	hi
 8000984:	4770      	bxhi	lr
 8000986:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800098a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800098e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000992:	bf18      	it	ne
 8000994:	4240      	negne	r0, r0
 8000996:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800099a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800099e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009a2:	bf18      	it	ne
 80009a4:	4249      	negne	r1, r1
 80009a6:	ea92 0f03 	teq	r2, r3
 80009aa:	d03f      	beq.n	8000a2c <__addsf3+0xd8>
 80009ac:	f1a2 0201 	sub.w	r2, r2, #1
 80009b0:	fa41 fc03 	asr.w	ip, r1, r3
 80009b4:	eb10 000c 	adds.w	r0, r0, ip
 80009b8:	f1c3 0320 	rsb	r3, r3, #32
 80009bc:	fa01 f103 	lsl.w	r1, r1, r3
 80009c0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009c4:	d502      	bpl.n	80009cc <__addsf3+0x78>
 80009c6:	4249      	negs	r1, r1
 80009c8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009cc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009d0:	d313      	bcc.n	80009fa <__addsf3+0xa6>
 80009d2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009d6:	d306      	bcc.n	80009e6 <__addsf3+0x92>
 80009d8:	0840      	lsrs	r0, r0, #1
 80009da:	ea4f 0131 	mov.w	r1, r1, rrx
 80009de:	f102 0201 	add.w	r2, r2, #1
 80009e2:	2afe      	cmp	r2, #254	@ 0xfe
 80009e4:	d251      	bcs.n	8000a8a <__addsf3+0x136>
 80009e6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80009ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ee:	bf08      	it	eq
 80009f0:	f020 0001 	biceq.w	r0, r0, #1
 80009f4:	ea40 0003 	orr.w	r0, r0, r3
 80009f8:	4770      	bx	lr
 80009fa:	0049      	lsls	r1, r1, #1
 80009fc:	eb40 0000 	adc.w	r0, r0, r0
 8000a00:	3a01      	subs	r2, #1
 8000a02:	bf28      	it	cs
 8000a04:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a08:	d2ed      	bcs.n	80009e6 <__addsf3+0x92>
 8000a0a:	fab0 fc80 	clz	ip, r0
 8000a0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a12:	ebb2 020c 	subs.w	r2, r2, ip
 8000a16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a1a:	bfaa      	itet	ge
 8000a1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a20:	4252      	neglt	r2, r2
 8000a22:	4318      	orrge	r0, r3
 8000a24:	bfbc      	itt	lt
 8000a26:	40d0      	lsrlt	r0, r2
 8000a28:	4318      	orrlt	r0, r3
 8000a2a:	4770      	bx	lr
 8000a2c:	f092 0f00 	teq	r2, #0
 8000a30:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a34:	bf06      	itte	eq
 8000a36:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a3a:	3201      	addeq	r2, #1
 8000a3c:	3b01      	subne	r3, #1
 8000a3e:	e7b5      	b.n	80009ac <__addsf3+0x58>
 8000a40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a4e:	d021      	beq.n	8000a94 <__addsf3+0x140>
 8000a50:	ea92 0f03 	teq	r2, r3
 8000a54:	d004      	beq.n	8000a60 <__addsf3+0x10c>
 8000a56:	f092 0f00 	teq	r2, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	4608      	moveq	r0, r1
 8000a5e:	4770      	bx	lr
 8000a60:	ea90 0f01 	teq	r0, r1
 8000a64:	bf1c      	itt	ne
 8000a66:	2000      	movne	r0, #0
 8000a68:	4770      	bxne	lr
 8000a6a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a6e:	d104      	bne.n	8000a7a <__addsf3+0x126>
 8000a70:	0040      	lsls	r0, r0, #1
 8000a72:	bf28      	it	cs
 8000a74:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a78:	4770      	bx	lr
 8000a7a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a7e:	bf3c      	itt	cc
 8000a80:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a84:	4770      	bxcc	lr
 8000a86:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a8a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a92:	4770      	bx	lr
 8000a94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a98:	bf16      	itet	ne
 8000a9a:	4608      	movne	r0, r1
 8000a9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000aa0:	4601      	movne	r1, r0
 8000aa2:	0242      	lsls	r2, r0, #9
 8000aa4:	bf06      	itte	eq
 8000aa6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aaa:	ea90 0f01 	teqeq	r0, r1
 8000aae:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_ui2f>:
 8000ab4:	f04f 0300 	mov.w	r3, #0
 8000ab8:	e004      	b.n	8000ac4 <__aeabi_i2f+0x8>
 8000aba:	bf00      	nop

08000abc <__aeabi_i2f>:
 8000abc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ac0:	bf48      	it	mi
 8000ac2:	4240      	negmi	r0, r0
 8000ac4:	ea5f 0c00 	movs.w	ip, r0
 8000ac8:	bf08      	it	eq
 8000aca:	4770      	bxeq	lr
 8000acc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ad0:	4601      	mov	r1, r0
 8000ad2:	f04f 0000 	mov.w	r0, #0
 8000ad6:	e01c      	b.n	8000b12 <__aeabi_l2f+0x2a>

08000ad8 <__aeabi_ul2f>:
 8000ad8:	ea50 0201 	orrs.w	r2, r0, r1
 8000adc:	bf08      	it	eq
 8000ade:	4770      	bxeq	lr
 8000ae0:	f04f 0300 	mov.w	r3, #0
 8000ae4:	e00a      	b.n	8000afc <__aeabi_l2f+0x14>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_l2f>:
 8000ae8:	ea50 0201 	orrs.w	r2, r0, r1
 8000aec:	bf08      	it	eq
 8000aee:	4770      	bxeq	lr
 8000af0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000af4:	d502      	bpl.n	8000afc <__aeabi_l2f+0x14>
 8000af6:	4240      	negs	r0, r0
 8000af8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000afc:	ea5f 0c01 	movs.w	ip, r1
 8000b00:	bf02      	ittt	eq
 8000b02:	4684      	moveq	ip, r0
 8000b04:	4601      	moveq	r1, r0
 8000b06:	2000      	moveq	r0, #0
 8000b08:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b12:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b16:	fabc f28c 	clz	r2, ip
 8000b1a:	3a08      	subs	r2, #8
 8000b1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b20:	db10      	blt.n	8000b44 <__aeabi_l2f+0x5c>
 8000b22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b26:	4463      	add	r3, ip
 8000b28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b2c:	f1c2 0220 	rsb	r2, r2, #32
 8000b30:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b34:	fa20 f202 	lsr.w	r2, r0, r2
 8000b38:	eb43 0002 	adc.w	r0, r3, r2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f102 0220 	add.w	r2, r2, #32
 8000b48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b4c:	f1c2 0220 	rsb	r2, r2, #32
 8000b50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b54:	fa21 f202 	lsr.w	r2, r1, r2
 8000b58:	eb43 0002 	adc.w	r0, r3, r2
 8000b5c:	bf08      	it	eq
 8000b5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_fmul>:
 8000b64:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b72:	ea92 0f0c 	teqne	r2, ip
 8000b76:	ea93 0f0c 	teqne	r3, ip
 8000b7a:	d06f      	beq.n	8000c5c <__aeabi_fmul+0xf8>
 8000b7c:	441a      	add	r2, r3
 8000b7e:	ea80 0c01 	eor.w	ip, r0, r1
 8000b82:	0240      	lsls	r0, r0, #9
 8000b84:	bf18      	it	ne
 8000b86:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b8a:	d01e      	beq.n	8000bca <__aeabi_fmul+0x66>
 8000b8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b94:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b98:	fba0 3101 	umull	r3, r1, r0, r1
 8000b9c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ba0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ba4:	bf3e      	ittt	cc
 8000ba6:	0049      	lslcc	r1, r1, #1
 8000ba8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bac:	005b      	lslcc	r3, r3, #1
 8000bae:	ea40 0001 	orr.w	r0, r0, r1
 8000bb2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bb6:	2afd      	cmp	r2, #253	@ 0xfd
 8000bb8:	d81d      	bhi.n	8000bf6 <__aeabi_fmul+0x92>
 8000bba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000bbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc2:	bf08      	it	eq
 8000bc4:	f020 0001 	biceq.w	r0, r0, #1
 8000bc8:	4770      	bx	lr
 8000bca:	f090 0f00 	teq	r0, #0
 8000bce:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bd2:	bf08      	it	eq
 8000bd4:	0249      	lsleq	r1, r1, #9
 8000bd6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bda:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bde:	3a7f      	subs	r2, #127	@ 0x7f
 8000be0:	bfc2      	ittt	gt
 8000be2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000be6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bea:	4770      	bxgt	lr
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	f04f 0300 	mov.w	r3, #0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	dc5d      	bgt.n	8000cb4 <__aeabi_fmul+0x150>
 8000bf8:	f112 0f19 	cmn.w	r2, #25
 8000bfc:	bfdc      	itt	le
 8000bfe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c02:	4770      	bxle	lr
 8000c04:	f1c2 0200 	rsb	r2, r2, #0
 8000c08:	0041      	lsls	r1, r0, #1
 8000c0a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c0e:	f1c2 0220 	rsb	r2, r2, #32
 8000c12:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c16:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c1a:	f140 0000 	adc.w	r0, r0, #0
 8000c1e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c22:	bf08      	it	eq
 8000c24:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c28:	4770      	bx	lr
 8000c2a:	f092 0f00 	teq	r2, #0
 8000c2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c32:	bf02      	ittt	eq
 8000c34:	0040      	lsleq	r0, r0, #1
 8000c36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c3a:	3a01      	subeq	r2, #1
 8000c3c:	d0f9      	beq.n	8000c32 <__aeabi_fmul+0xce>
 8000c3e:	ea40 000c 	orr.w	r0, r0, ip
 8000c42:	f093 0f00 	teq	r3, #0
 8000c46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c4a:	bf02      	ittt	eq
 8000c4c:	0049      	lsleq	r1, r1, #1
 8000c4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c52:	3b01      	subeq	r3, #1
 8000c54:	d0f9      	beq.n	8000c4a <__aeabi_fmul+0xe6>
 8000c56:	ea41 010c 	orr.w	r1, r1, ip
 8000c5a:	e78f      	b.n	8000b7c <__aeabi_fmul+0x18>
 8000c5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c60:	ea92 0f0c 	teq	r2, ip
 8000c64:	bf18      	it	ne
 8000c66:	ea93 0f0c 	teqne	r3, ip
 8000c6a:	d00a      	beq.n	8000c82 <__aeabi_fmul+0x11e>
 8000c6c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c70:	bf18      	it	ne
 8000c72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c76:	d1d8      	bne.n	8000c2a <__aeabi_fmul+0xc6>
 8000c78:	ea80 0001 	eor.w	r0, r0, r1
 8000c7c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f090 0f00 	teq	r0, #0
 8000c86:	bf17      	itett	ne
 8000c88:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c8c:	4608      	moveq	r0, r1
 8000c8e:	f091 0f00 	teqne	r1, #0
 8000c92:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c96:	d014      	beq.n	8000cc2 <__aeabi_fmul+0x15e>
 8000c98:	ea92 0f0c 	teq	r2, ip
 8000c9c:	d101      	bne.n	8000ca2 <__aeabi_fmul+0x13e>
 8000c9e:	0242      	lsls	r2, r0, #9
 8000ca0:	d10f      	bne.n	8000cc2 <__aeabi_fmul+0x15e>
 8000ca2:	ea93 0f0c 	teq	r3, ip
 8000ca6:	d103      	bne.n	8000cb0 <__aeabi_fmul+0x14c>
 8000ca8:	024b      	lsls	r3, r1, #9
 8000caa:	bf18      	it	ne
 8000cac:	4608      	movne	r0, r1
 8000cae:	d108      	bne.n	8000cc2 <__aeabi_fmul+0x15e>
 8000cb0:	ea80 0001 	eor.w	r0, r0, r1
 8000cb4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cb8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cbc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc0:	4770      	bx	lr
 8000cc2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_fdiv>:
 8000ccc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd4:	bf1e      	ittt	ne
 8000cd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cda:	ea92 0f0c 	teqne	r2, ip
 8000cde:	ea93 0f0c 	teqne	r3, ip
 8000ce2:	d069      	beq.n	8000db8 <__aeabi_fdiv+0xec>
 8000ce4:	eba2 0203 	sub.w	r2, r2, r3
 8000ce8:	ea80 0c01 	eor.w	ip, r0, r1
 8000cec:	0249      	lsls	r1, r1, #9
 8000cee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cf2:	d037      	beq.n	8000d64 <__aeabi_fdiv+0x98>
 8000cf4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cf8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cfc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d00:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d04:	428b      	cmp	r3, r1
 8000d06:	bf38      	it	cc
 8000d08:	005b      	lslcc	r3, r3, #1
 8000d0a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d0e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d12:	428b      	cmp	r3, r1
 8000d14:	bf24      	itt	cs
 8000d16:	1a5b      	subcs	r3, r3, r1
 8000d18:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d1c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d20:	bf24      	itt	cs
 8000d22:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d26:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d2a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d2e:	bf24      	itt	cs
 8000d30:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d38:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d3c:	bf24      	itt	cs
 8000d3e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d42:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d46:	011b      	lsls	r3, r3, #4
 8000d48:	bf18      	it	ne
 8000d4a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d4e:	d1e0      	bne.n	8000d12 <__aeabi_fdiv+0x46>
 8000d50:	2afd      	cmp	r2, #253	@ 0xfd
 8000d52:	f63f af50 	bhi.w	8000bf6 <__aeabi_fmul+0x92>
 8000d56:	428b      	cmp	r3, r1
 8000d58:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d68:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6c:	327f      	adds	r2, #127	@ 0x7f
 8000d6e:	bfc2      	ittt	gt
 8000d70:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d74:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d78:	4770      	bxgt	lr
 8000d7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d7e:	f04f 0300 	mov.w	r3, #0
 8000d82:	3a01      	subs	r2, #1
 8000d84:	e737      	b.n	8000bf6 <__aeabi_fmul+0x92>
 8000d86:	f092 0f00 	teq	r2, #0
 8000d8a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d8e:	bf02      	ittt	eq
 8000d90:	0040      	lsleq	r0, r0, #1
 8000d92:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d96:	3a01      	subeq	r2, #1
 8000d98:	d0f9      	beq.n	8000d8e <__aeabi_fdiv+0xc2>
 8000d9a:	ea40 000c 	orr.w	r0, r0, ip
 8000d9e:	f093 0f00 	teq	r3, #0
 8000da2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000da6:	bf02      	ittt	eq
 8000da8:	0049      	lsleq	r1, r1, #1
 8000daa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dae:	3b01      	subeq	r3, #1
 8000db0:	d0f9      	beq.n	8000da6 <__aeabi_fdiv+0xda>
 8000db2:	ea41 010c 	orr.w	r1, r1, ip
 8000db6:	e795      	b.n	8000ce4 <__aeabi_fdiv+0x18>
 8000db8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dbc:	ea92 0f0c 	teq	r2, ip
 8000dc0:	d108      	bne.n	8000dd4 <__aeabi_fdiv+0x108>
 8000dc2:	0242      	lsls	r2, r0, #9
 8000dc4:	f47f af7d 	bne.w	8000cc2 <__aeabi_fmul+0x15e>
 8000dc8:	ea93 0f0c 	teq	r3, ip
 8000dcc:	f47f af70 	bne.w	8000cb0 <__aeabi_fmul+0x14c>
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	e776      	b.n	8000cc2 <__aeabi_fmul+0x15e>
 8000dd4:	ea93 0f0c 	teq	r3, ip
 8000dd8:	d104      	bne.n	8000de4 <__aeabi_fdiv+0x118>
 8000dda:	024b      	lsls	r3, r1, #9
 8000ddc:	f43f af4c 	beq.w	8000c78 <__aeabi_fmul+0x114>
 8000de0:	4608      	mov	r0, r1
 8000de2:	e76e      	b.n	8000cc2 <__aeabi_fmul+0x15e>
 8000de4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000de8:	bf18      	it	ne
 8000dea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dee:	d1ca      	bne.n	8000d86 <__aeabi_fdiv+0xba>
 8000df0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000df4:	f47f af5c 	bne.w	8000cb0 <__aeabi_fmul+0x14c>
 8000df8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000dfc:	f47f af3c 	bne.w	8000c78 <__aeabi_fmul+0x114>
 8000e00:	e75f      	b.n	8000cc2 <__aeabi_fmul+0x15e>
 8000e02:	bf00      	nop

08000e04 <__gesf2>:
 8000e04:	f04f 3cff 	mov.w	ip, #4294967295
 8000e08:	e006      	b.n	8000e18 <__cmpsf2+0x4>
 8000e0a:	bf00      	nop

08000e0c <__lesf2>:
 8000e0c:	f04f 0c01 	mov.w	ip, #1
 8000e10:	e002      	b.n	8000e18 <__cmpsf2+0x4>
 8000e12:	bf00      	nop

08000e14 <__cmpsf2>:
 8000e14:	f04f 0c01 	mov.w	ip, #1
 8000e18:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e28:	bf18      	it	ne
 8000e2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e2e:	d011      	beq.n	8000e54 <__cmpsf2+0x40>
 8000e30:	b001      	add	sp, #4
 8000e32:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e36:	bf18      	it	ne
 8000e38:	ea90 0f01 	teqne	r0, r1
 8000e3c:	bf58      	it	pl
 8000e3e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e42:	bf88      	it	hi
 8000e44:	17c8      	asrhi	r0, r1, #31
 8000e46:	bf38      	it	cc
 8000e48:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e4c:	bf18      	it	ne
 8000e4e:	f040 0001 	orrne.w	r0, r0, #1
 8000e52:	4770      	bx	lr
 8000e54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e58:	d102      	bne.n	8000e60 <__cmpsf2+0x4c>
 8000e5a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e5e:	d105      	bne.n	8000e6c <__cmpsf2+0x58>
 8000e60:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e64:	d1e4      	bne.n	8000e30 <__cmpsf2+0x1c>
 8000e66:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e6a:	d0e1      	beq.n	8000e30 <__cmpsf2+0x1c>
 8000e6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <__aeabi_cfrcmple>:
 8000e74:	4684      	mov	ip, r0
 8000e76:	4608      	mov	r0, r1
 8000e78:	4661      	mov	r1, ip
 8000e7a:	e7ff      	b.n	8000e7c <__aeabi_cfcmpeq>

08000e7c <__aeabi_cfcmpeq>:
 8000e7c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e7e:	f7ff ffc9 	bl	8000e14 <__cmpsf2>
 8000e82:	2800      	cmp	r0, #0
 8000e84:	bf48      	it	mi
 8000e86:	f110 0f00 	cmnmi.w	r0, #0
 8000e8a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e8c <__aeabi_fcmpeq>:
 8000e8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e90:	f7ff fff4 	bl	8000e7c <__aeabi_cfcmpeq>
 8000e94:	bf0c      	ite	eq
 8000e96:	2001      	moveq	r0, #1
 8000e98:	2000      	movne	r0, #0
 8000e9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_fcmplt>:
 8000ea0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea4:	f7ff ffea 	bl	8000e7c <__aeabi_cfcmpeq>
 8000ea8:	bf34      	ite	cc
 8000eaa:	2001      	movcc	r0, #1
 8000eac:	2000      	movcs	r0, #0
 8000eae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_fcmple>:
 8000eb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb8:	f7ff ffe0 	bl	8000e7c <__aeabi_cfcmpeq>
 8000ebc:	bf94      	ite	ls
 8000ebe:	2001      	movls	r0, #1
 8000ec0:	2000      	movhi	r0, #0
 8000ec2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec6:	bf00      	nop

08000ec8 <__aeabi_fcmpge>:
 8000ec8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ecc:	f7ff ffd2 	bl	8000e74 <__aeabi_cfrcmple>
 8000ed0:	bf94      	ite	ls
 8000ed2:	2001      	movls	r0, #1
 8000ed4:	2000      	movhi	r0, #0
 8000ed6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eda:	bf00      	nop

08000edc <__aeabi_fcmpgt>:
 8000edc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee0:	f7ff ffc8 	bl	8000e74 <__aeabi_cfrcmple>
 8000ee4:	bf34      	ite	cc
 8000ee6:	2001      	movcc	r0, #1
 8000ee8:	2000      	movcs	r0, #0
 8000eea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eee:	bf00      	nop

08000ef0 <__aeabi_f2uiz>:
 8000ef0:	0042      	lsls	r2, r0, #1
 8000ef2:	d20e      	bcs.n	8000f12 <__aeabi_f2uiz+0x22>
 8000ef4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ef8:	d30b      	bcc.n	8000f12 <__aeabi_f2uiz+0x22>
 8000efa:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000efe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f02:	d409      	bmi.n	8000f18 <__aeabi_f2uiz+0x28>
 8000f04:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f0c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f10:	4770      	bx	lr
 8000f12:	f04f 0000 	mov.w	r0, #0
 8000f16:	4770      	bx	lr
 8000f18:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f1c:	d101      	bne.n	8000f22 <__aeabi_f2uiz+0x32>
 8000f1e:	0242      	lsls	r2, r0, #9
 8000f20:	d102      	bne.n	8000f28 <__aeabi_f2uiz+0x38>
 8000f22:	f04f 30ff 	mov.w	r0, #4294967295
 8000f26:	4770      	bx	lr
 8000f28:	f04f 0000 	mov.w	r0, #0
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b089      	sub	sp, #36	@ 0x24
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f36:	f000 fe0b 	bl	8001b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3a:	f000 f91f 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3e:	f000 fae5 	bl	800150c <MX_GPIO_Init>
  MX_RTC_Init();
 8000f42:	f000 f9ed 	bl	8001320 <MX_RTC_Init>
  MX_TIM2_Init();
 8000f46:	f000 fa6b 	bl	8001420 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000f4a:	f000 fab5 	bl	80014b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	// Dummy data
	settings.alarm_level = 1.0f;
 8000f4e:	4b76      	ldr	r3, [pc, #472]	@ (8001128 <main+0x1f8>)
 8000f50:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000f54:	601a      	str	r2, [r3, #0]
	settings.time_to_heartbeat_s = 3;
 8000f56:	4b74      	ldr	r3, [pc, #464]	@ (8001128 <main+0x1f8>)
 8000f58:	2203      	movs	r2, #3
 8000f5a:	809a      	strh	r2, [r3, #4]

	debug_init(&huart1);
 8000f5c:	4873      	ldr	r0, [pc, #460]	@ (800112c <main+0x1fc>)
 8000f5e:	f005 f80b 	bl	8005f78 <debug_init>

	debug("========================");
 8000f62:	4873      	ldr	r0, [pc, #460]	@ (8001130 <main+0x200>)
 8000f64:	f005 f816 	bl	8005f94 <debug>
	debug("The device has woken up!");
 8000f68:	4872      	ldr	r0, [pc, #456]	@ (8001134 <main+0x204>)
 8000f6a:	f005 f813 	bl	8005f94 <debug>
	debug("\tAlarm level: %d.%02d", (uint8_t) settings.alarm_level,
 8000f6e:	4b6e      	ldr	r3, [pc, #440]	@ (8001128 <main+0x1f8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ffbc 	bl	8000ef0 <__aeabi_f2uiz>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	461c      	mov	r4, r3
			(uint8_t) (settings.alarm_level * 100) % 100);
 8000f7e:	4b6a      	ldr	r3, [pc, #424]	@ (8001128 <main+0x1f8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	496d      	ldr	r1, [pc, #436]	@ (8001138 <main+0x208>)
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fded 	bl	8000b64 <__aeabi_fmul>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ffaf 	bl	8000ef0 <__aeabi_f2uiz>
 8000f92:	4603      	mov	r3, r0
 8000f94:	b2db      	uxtb	r3, r3
	debug("\tAlarm level: %d.%02d", (uint8_t) settings.alarm_level,
 8000f96:	4a69      	ldr	r2, [pc, #420]	@ (800113c <main+0x20c>)
 8000f98:	fba2 1203 	umull	r1, r2, r2, r3
 8000f9c:	0952      	lsrs	r2, r2, #5
 8000f9e:	2164      	movs	r1, #100	@ 0x64
 8000fa0:	fb01 f202 	mul.w	r2, r1, r2
 8000fa4:	1a9b      	subs	r3, r3, r2
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4621      	mov	r1, r4
 8000fac:	4864      	ldr	r0, [pc, #400]	@ (8001140 <main+0x210>)
 8000fae:	f004 fff1 	bl	8005f94 <debug>
	debug("\tHeartbeat every: %d.%02d sec\n\r", settings.time_to_heartbeat_s,
 8000fb2:	4b5d      	ldr	r3, [pc, #372]	@ (8001128 <main+0x1f8>)
 8000fb4:	889b      	ldrh	r3, [r3, #4]
 8000fb6:	4618      	mov	r0, r3
			(uint16_t) (settings.time_to_heartbeat_s * 100) % 100);
 8000fb8:	4b5b      	ldr	r3, [pc, #364]	@ (8001128 <main+0x1f8>)
 8000fba:	889b      	ldrh	r3, [r3, #4]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	0091      	lsls	r1, r2, #2
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4413      	add	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	b29b      	uxth	r3, r3
	debug("\tHeartbeat every: %d.%02d sec\n\r", settings.time_to_heartbeat_s,
 8000fd0:	4a5a      	ldr	r2, [pc, #360]	@ (800113c <main+0x20c>)
 8000fd2:	fba2 1203 	umull	r1, r2, r2, r3
 8000fd6:	0952      	lsrs	r2, r2, #5
 8000fd8:	2164      	movs	r1, #100	@ 0x64
 8000fda:	fb01 f202 	mul.w	r2, r1, r2
 8000fde:	1a9b      	subs	r3, r3, r2
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4601      	mov	r1, r0
 8000fe6:	4857      	ldr	r0, [pc, #348]	@ (8001144 <main+0x214>)
 8000fe8:	f004 ffd4 	bl	8005f94 <debug>

	MX_ADC1_Init();
 8000fec:	f000 f91c 	bl	8001228 <MX_ADC1_Init>
	Battery = get_battery_level(&hadc1);
 8000ff0:	4c55      	ldr	r4, [pc, #340]	@ (8001148 <main+0x218>)
 8000ff2:	f107 0310 	add.w	r3, r7, #16
 8000ff6:	4955      	ldr	r1, [pc, #340]	@ (800114c <main+0x21c>)
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f004 fe9d 	bl	8005d38 <get_battery_level>
 8000ffe:	4622      	mov	r2, r4
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001008:	e882 0003 	stmia.w	r2, {r0, r1}
	HAL_ADC_DeInit(&hadc1);
 800100c:	484f      	ldr	r0, [pc, #316]	@ (800114c <main+0x21c>)
 800100e:	f000 ff1b 	bl	8001e48 <HAL_ADC_DeInit>

	hw_serial = get_serial_number();
 8001012:	4c4f      	ldr	r4, [pc, #316]	@ (8001150 <main+0x220>)
 8001014:	463b      	mov	r3, r7
 8001016:	4618      	mov	r0, r3
 8001018:	f005 fcb8 	bl	800698c <get_serial_number>
 800101c:	463b      	mov	r3, r7
 800101e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001022:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// Enabling VCC to Smoke Sensor and polling for data
	HAL_GPIO_WritePin(GPIOB, MOSFET_GATE_SENSOR_Pin, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800102c:	4849      	ldr	r0, [pc, #292]	@ (8001154 <main+0x224>)
 800102e:	f001 ff39 	bl	8002ea4 <HAL_GPIO_WritePin>
	MX_ADC2_Init();
 8001032:	f000 f937 	bl	80012a4 <MX_ADC2_Init>
	float sensor_data = get_infra_sensor_data(&hadc2);
 8001036:	4848      	ldr	r0, [pc, #288]	@ (8001158 <main+0x228>)
 8001038:	f005 f864 	bl	8006104 <get_infra_sensor_data>
 800103c:	61f8      	str	r0, [r7, #28]
	HAL_ADC_DeInit(&hadc2);
 800103e:	4846      	ldr	r0, [pc, #280]	@ (8001158 <main+0x228>)
 8001040:	f000 ff02 	bl	8001e48 <HAL_ADC_DeInit>
	HAL_GPIO_WritePin(GPIOB, MOSFET_GATE_SENSOR_Pin, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800104a:	4842      	ldr	r0, [pc, #264]	@ (8001154 <main+0x224>)
 800104c:	f001 ff2a 	bl	8002ea4 <HAL_GPIO_WritePin>

	packet.ID = hw_serial.byte_2;
 8001050:	4b3f      	ldr	r3, [pc, #252]	@ (8001150 <main+0x220>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	4a41      	ldr	r2, [pc, #260]	@ (800115c <main+0x22c>)
 8001056:	6013      	str	r3, [r2, #0]
	packet.battery_level = Battery.charge_percent;
 8001058:	4b3b      	ldr	r3, [pc, #236]	@ (8001148 <main+0x218>)
 800105a:	791a      	ldrb	r2, [r3, #4]
 800105c:	4b3f      	ldr	r3, [pc, #252]	@ (800115c <main+0x22c>)
 800105e:	721a      	strb	r2, [r3, #8]
	packet.sensor_data = sensor_data;
 8001060:	4a3e      	ldr	r2, [pc, #248]	@ (800115c <main+0x22c>)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	6053      	str	r3, [r2, #4]
	debug("Formed packet:");
 8001066:	483e      	ldr	r0, [pc, #248]	@ (8001160 <main+0x230>)
 8001068:	f004 ff94 	bl	8005f94 <debug>
	debug("\tID: %d", (uint8_t) packet.ID);
 800106c:	4b3b      	ldr	r3, [pc, #236]	@ (800115c <main+0x22c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	4619      	mov	r1, r3
 8001074:	483b      	ldr	r0, [pc, #236]	@ (8001164 <main+0x234>)
 8001076:	f004 ff8d 	bl	8005f94 <debug>
	debug("\tbattery_level: %d%%", (uint8_t) Battery.charge_percent);
 800107a:	4b33      	ldr	r3, [pc, #204]	@ (8001148 <main+0x218>)
 800107c:	791b      	ldrb	r3, [r3, #4]
 800107e:	4619      	mov	r1, r3
 8001080:	4839      	ldr	r0, [pc, #228]	@ (8001168 <main+0x238>)
 8001082:	f004 ff87 	bl	8005f94 <debug>
	debug("\tsensor_data: %d.%02d\n\r", (uint8_t) sensor_data,
 8001086:	69f8      	ldr	r0, [r7, #28]
 8001088:	f7ff ff32 	bl	8000ef0 <__aeabi_f2uiz>
 800108c:	4603      	mov	r3, r0
 800108e:	b2db      	uxtb	r3, r3
 8001090:	461c      	mov	r4, r3
			(uint16_t) (sensor_data * 100) % 100);
 8001092:	4929      	ldr	r1, [pc, #164]	@ (8001138 <main+0x208>)
 8001094:	69f8      	ldr	r0, [r7, #28]
 8001096:	f7ff fd65 	bl	8000b64 <__aeabi_fmul>
 800109a:	4603      	mov	r3, r0
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff27 	bl	8000ef0 <__aeabi_f2uiz>
 80010a2:	4603      	mov	r3, r0
 80010a4:	b29b      	uxth	r3, r3
	debug("\tsensor_data: %d.%02d\n\r", (uint8_t) sensor_data,
 80010a6:	4a25      	ldr	r2, [pc, #148]	@ (800113c <main+0x20c>)
 80010a8:	fba2 1203 	umull	r1, r2, r2, r3
 80010ac:	0952      	lsrs	r2, r2, #5
 80010ae:	2164      	movs	r1, #100	@ 0x64
 80010b0:	fb01 f202 	mul.w	r2, r1, r2
 80010b4:	1a9b      	subs	r3, r3, r2
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	461a      	mov	r2, r3
 80010ba:	4621      	mov	r1, r4
 80010bc:	482b      	ldr	r0, [pc, #172]	@ (800116c <main+0x23c>)
 80010be:	f004 ff69 	bl	8005f94 <debug>

	HAL_GPIO_WritePin(GPIOB, MOSFET_GATE_LORA_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010c8:	4822      	ldr	r0, [pc, #136]	@ (8001154 <main+0x224>)
 80010ca:	f001 feeb 	bl	8002ea4 <HAL_GPIO_WritePin>
	MX_SPI1_Init();
 80010ce:	f000 f971 	bl	80013b4 <MX_SPI1_Init>
	HAL_Delay(100);
 80010d2:	2064      	movs	r0, #100	@ 0x64
 80010d4:	f000 fd9e 	bl	8001c14 <HAL_Delay>
	send_packet(&hspi1, packet);
 80010d8:	4b20      	ldr	r3, [pc, #128]	@ (800115c <main+0x22c>)
 80010da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010dc:	4824      	ldr	r0, [pc, #144]	@ (8001170 <main+0x240>)
 80010de:	f005 fc15 	bl	800690c <send_packet>
	HAL_GPIO_WritePin(GPIOB, MOSFET_GATE_LORA_Pin, GPIO_PIN_SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010e8:	481a      	ldr	r0, [pc, #104]	@ (8001154 <main+0x224>)
 80010ea:	f001 fedb 	bl	8002ea4 <HAL_GPIO_WritePin>

	//  Toggling RED LED
	HAL_GPIO_WritePin(INFO_LED_GPIO_Port, INFO_LED_Pin, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010f4:	4817      	ldr	r0, [pc, #92]	@ (8001154 <main+0x224>)
 80010f6:	f001 fed5 	bl	8002ea4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80010fa:	2001      	movs	r0, #1
 80010fc:	f000 fd8a 	bl	8001c14 <HAL_Delay>
	HAL_GPIO_WritePin(INFO_LED_GPIO_Port, INFO_LED_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001106:	4813      	ldr	r0, [pc, #76]	@ (8001154 <main+0x224>)
 8001108:	f001 fecc 	bl	8002ea4 <HAL_GPIO_WritePin>

	// Sleeping
	set_alarm(&hrtc, settings.time_to_heartbeat_s);
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <main+0x1f8>)
 800110e:	889b      	ldrh	r3, [r3, #4]
 8001110:	4619      	mov	r1, r3
 8001112:	4818      	ldr	r0, [pc, #96]	@ (8001174 <main+0x244>)
 8001114:	f004 fdcc 	bl	8005cb0 <set_alarm>

	debug("Going STANDBY MODE\n\r\n\r");
 8001118:	4817      	ldr	r0, [pc, #92]	@ (8001178 <main+0x248>)
 800111a:	f004 ff3b 	bl	8005f94 <debug>
	HAL_PWR_EnterSTANDBYMode();
 800111e:	f001 fee5 	bl	8002eec <HAL_PWR_EnterSTANDBYMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001122:	bf00      	nop
 8001124:	e7fd      	b.n	8001122 <main+0x1f2>
 8001126:	bf00      	nop
 8001128:	200001d4 	.word	0x200001d4
 800112c:	2000018c 	.word	0x2000018c
 8001130:	080073f8 	.word	0x080073f8
 8001134:	08007414 	.word	0x08007414
 8001138:	42c80000 	.word	0x42c80000
 800113c:	51eb851f 	.word	0x51eb851f
 8001140:	08007430 	.word	0x08007430
 8001144:	08007448 	.word	0x08007448
 8001148:	200001e8 	.word	0x200001e8
 800114c:	20000078 	.word	0x20000078
 8001150:	200001dc 	.word	0x200001dc
 8001154:	40010c00 	.word	0x40010c00
 8001158:	200000a8 	.word	0x200000a8
 800115c:	200001f0 	.word	0x200001f0
 8001160:	08007468 	.word	0x08007468
 8001164:	08007478 	.word	0x08007478
 8001168:	08007480 	.word	0x08007480
 800116c:	08007498 	.word	0x08007498
 8001170:	200000ec 	.word	0x200000ec
 8001174:	200000d8 	.word	0x200000d8
 8001178:	080074b0 	.word	0x080074b0

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b094      	sub	sp, #80	@ 0x50
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001186:	2228      	movs	r2, #40	@ 0x28
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f005 fc9a 	bl	8006ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80011ac:	230a      	movs	r3, #10
 80011ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b0:	2301      	movs	r3, #1
 80011b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b4:	2310      	movs	r3, #16
 80011b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011b8:	2301      	movs	r3, #1
 80011ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011bc:	2300      	movs	r3, #0
 80011be:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 fea9 	bl	8002f1c <HAL_RCC_OscConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011d0:	f000 fa7a 	bl	80016c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d4:	230f      	movs	r3, #15
 80011d6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011d8:	2300      	movs	r3, #0
 80011da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 f916 	bl	8003420 <HAL_RCC_ClockConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011fa:	f000 fa65 	bl	80016c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80011fe:	2303      	movs	r3, #3
 8001200:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001202:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001206:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4618      	mov	r0, r3
 8001210:	f002 fa94 	bl	800373c <HAL_RCCEx_PeriphCLKConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800121a:	f000 fa55 	bl	80016c8 <Error_Handler>
  }
}
 800121e:	bf00      	nop
 8001220:	3750      	adds	r7, #80	@ 0x50
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001238:	4b18      	ldr	r3, [pc, #96]	@ (800129c <MX_ADC1_Init+0x74>)
 800123a:	4a19      	ldr	r2, [pc, #100]	@ (80012a0 <MX_ADC1_Init+0x78>)
 800123c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800123e:	4b17      	ldr	r3, [pc, #92]	@ (800129c <MX_ADC1_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001244:	4b15      	ldr	r3, [pc, #84]	@ (800129c <MX_ADC1_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800124a:	4b14      	ldr	r3, [pc, #80]	@ (800129c <MX_ADC1_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <MX_ADC1_Init+0x74>)
 8001252:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001256:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001258:	4b10      	ldr	r3, [pc, #64]	@ (800129c <MX_ADC1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800125e:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <MX_ADC1_Init+0x74>)
 8001260:	2201      	movs	r2, #1
 8001262:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001264:	480d      	ldr	r0, [pc, #52]	@ (800129c <MX_ADC1_Init+0x74>)
 8001266:	f000 fd17 	bl	8001c98 <HAL_ADC_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001270:	f000 fa2a 	bl	80016c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001274:	2301      	movs	r3, #1
 8001276:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001278:	2301      	movs	r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800127c:	2307      	movs	r3, #7
 800127e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	@ (800129c <MX_ADC1_Init+0x74>)
 8001286:	f001 f88d 	bl	80023a4 <HAL_ADC_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001290:	f000 fa1a 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000078 	.word	0x20000078
 80012a0:	40012400 	.word	0x40012400

080012a4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80012b4:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <MX_ADC2_Init+0x74>)
 80012b6:	4a19      	ldr	r2, [pc, #100]	@ (800131c <MX_ADC2_Init+0x78>)
 80012b8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012ba:	4b17      	ldr	r3, [pc, #92]	@ (8001318 <MX_ADC2_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80012c0:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <MX_ADC2_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80012c6:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <MX_ADC2_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012cc:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <MX_ADC2_Init+0x74>)
 80012ce:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80012d2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012d4:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <MX_ADC2_Init+0x74>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80012da:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <MX_ADC2_Init+0x74>)
 80012dc:	2201      	movs	r2, #1
 80012de:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012e0:	480d      	ldr	r0, [pc, #52]	@ (8001318 <MX_ADC2_Init+0x74>)
 80012e2:	f000 fcd9 	bl	8001c98 <HAL_ADC_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80012ec:	f000 f9ec 	bl	80016c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012f4:	2301      	movs	r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80012f8:	2302      	movs	r3, #2
 80012fa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	@ (8001318 <MX_ADC2_Init+0x74>)
 8001302:	f001 f84f 	bl	80023a4 <HAL_ADC_ConfigChannel>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800130c:	f000 f9dc 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200000a8 	.word	0x200000a8
 800131c:	40012800 	.word	0x40012800

08001320 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2100      	movs	r1, #0
 800132a:	460a      	mov	r2, r1
 800132c:	801a      	strh	r2, [r3, #0]
 800132e:	460a      	mov	r2, r1
 8001330:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001336:	4b1d      	ldr	r3, [pc, #116]	@ (80013ac <MX_RTC_Init+0x8c>)
 8001338:	4a1d      	ldr	r2, [pc, #116]	@ (80013b0 <MX_RTC_Init+0x90>)
 800133a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800133c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ac <MX_RTC_Init+0x8c>)
 800133e:	f04f 32ff 	mov.w	r2, #4294967295
 8001342:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8001344:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <MX_RTC_Init+0x8c>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800134a:	4818      	ldr	r0, [pc, #96]	@ (80013ac <MX_RTC_Init+0x8c>)
 800134c:	f002 fb62 	bl	8003a14 <HAL_RTC_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8001356:	f000 f9b7 	bl	80016c8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2200      	movs	r2, #0
 800136a:	4619      	mov	r1, r3
 800136c:	480f      	ldr	r0, [pc, #60]	@ (80013ac <MX_RTC_Init+0x8c>)
 800136e:	f002 fbdd 	bl	8003b2c <HAL_RTC_SetTime>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001378:	f000 f9a6 	bl	80016c8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800137c:	2301      	movs	r3, #1
 800137e:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001380:	2301      	movs	r3, #1
 8001382:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 8001384:	2301      	movs	r3, #1
 8001386:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	2200      	movs	r2, #0
 8001390:	4619      	mov	r1, r3
 8001392:	4806      	ldr	r0, [pc, #24]	@ (80013ac <MX_RTC_Init+0x8c>)
 8001394:	f002 fd3a 	bl	8003e0c <HAL_RTC_SetDate>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800139e:	f000 f993 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200000d8 	.word	0x200000d8
 80013b0:	40002800 	.word	0x40002800

080013b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013b8:	4b17      	ldr	r3, [pc, #92]	@ (8001418 <MX_SPI1_Init+0x64>)
 80013ba:	4a18      	ldr	r2, [pc, #96]	@ (800141c <MX_SPI1_Init+0x68>)
 80013bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013be:	4b16      	ldr	r3, [pc, #88]	@ (8001418 <MX_SPI1_Init+0x64>)
 80013c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013c6:	4b14      	ldr	r3, [pc, #80]	@ (8001418 <MX_SPI1_Init+0x64>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <MX_SPI1_Init+0x64>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013d2:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <MX_SPI1_Init+0x64>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <MX_SPI1_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <MX_SPI1_Init+0x64>)
 80013e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <MX_SPI1_Init+0x64>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <MX_SPI1_Init+0x64>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <MX_SPI1_Init+0x64>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f8:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <MX_SPI1_Init+0x64>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <MX_SPI1_Init+0x64>)
 8001400:	220a      	movs	r2, #10
 8001402:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001404:	4804      	ldr	r0, [pc, #16]	@ (8001418 <MX_SPI1_Init+0x64>)
 8001406:	f003 f9ba 	bl	800477e <HAL_SPI_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001410:	f000 f95a 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200000ec 	.word	0x200000ec
 800141c:	40013000 	.word	0x40013000

08001420 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001426:	f107 0308 	add.w	r3, r7, #8
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001434:	463b      	mov	r3, r7
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800143c:	4b1d      	ldr	r3, [pc, #116]	@ (80014b4 <MX_TIM2_Init+0x94>)
 800143e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001442:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001444:	4b1b      	ldr	r3, [pc, #108]	@ (80014b4 <MX_TIM2_Init+0x94>)
 8001446:	2207      	movs	r2, #7
 8001448:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144a:	4b1a      	ldr	r3, [pc, #104]	@ (80014b4 <MX_TIM2_Init+0x94>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001450:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <MX_TIM2_Init+0x94>)
 8001452:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001456:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001458:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <MX_TIM2_Init+0x94>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145e:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <MX_TIM2_Init+0x94>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001464:	4813      	ldr	r0, [pc, #76]	@ (80014b4 <MX_TIM2_Init+0x94>)
 8001466:	f003 ff2c 	bl	80052c2 <HAL_TIM_Base_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001470:	f000 f92a 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001474:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001478:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	4619      	mov	r1, r3
 8001480:	480c      	ldr	r0, [pc, #48]	@ (80014b4 <MX_TIM2_Init+0x94>)
 8001482:	f003 ffd7 	bl	8005434 <HAL_TIM_ConfigClockSource>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800148c:	f000 f91c 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001490:	2300      	movs	r3, #0
 8001492:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001498:	463b      	mov	r3, r7
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	@ (80014b4 <MX_TIM2_Init+0x94>)
 800149e:	f004 f98b 	bl	80057b8 <HAL_TIMEx_MasterConfigSynchronization>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014a8:	f000 f90e 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000144 	.word	0x20000144

080014b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014bc:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <MX_USART1_UART_Init+0x4c>)
 80014be:	4a12      	ldr	r2, [pc, #72]	@ (8001508 <MX_USART1_UART_Init+0x50>)
 80014c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014c2:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <MX_USART1_UART_Init+0x4c>)
 80014c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <MX_USART1_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <MX_USART1_UART_Init+0x4c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <MX_USART1_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014dc:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <MX_USART1_UART_Init+0x4c>)
 80014de:	220c      	movs	r2, #12
 80014e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <MX_USART1_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <MX_USART1_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	@ (8001504 <MX_USART1_UART_Init+0x4c>)
 80014f0:	f004 f9ba 	bl	8005868 <HAL_UART_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014fa:	f000 f8e5 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000018c 	.word	0x2000018c
 8001508:	40013800 	.word	0x40013800

0800150c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	@ 0x28
 8001510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001520:	4b62      	ldr	r3, [pc, #392]	@ (80016ac <MX_GPIO_Init+0x1a0>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	4a61      	ldr	r2, [pc, #388]	@ (80016ac <MX_GPIO_Init+0x1a0>)
 8001526:	f043 0310 	orr.w	r3, r3, #16
 800152a:	6193      	str	r3, [r2, #24]
 800152c:	4b5f      	ldr	r3, [pc, #380]	@ (80016ac <MX_GPIO_Init+0x1a0>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	f003 0310 	and.w	r3, r3, #16
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001538:	4b5c      	ldr	r3, [pc, #368]	@ (80016ac <MX_GPIO_Init+0x1a0>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	4a5b      	ldr	r2, [pc, #364]	@ (80016ac <MX_GPIO_Init+0x1a0>)
 800153e:	f043 0320 	orr.w	r3, r3, #32
 8001542:	6193      	str	r3, [r2, #24]
 8001544:	4b59      	ldr	r3, [pc, #356]	@ (80016ac <MX_GPIO_Init+0x1a0>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0320 	and.w	r3, r3, #32
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001550:	4b56      	ldr	r3, [pc, #344]	@ (80016ac <MX_GPIO_Init+0x1a0>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a55      	ldr	r2, [pc, #340]	@ (80016ac <MX_GPIO_Init+0x1a0>)
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b53      	ldr	r3, [pc, #332]	@ (80016ac <MX_GPIO_Init+0x1a0>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001568:	4b50      	ldr	r3, [pc, #320]	@ (80016ac <MX_GPIO_Init+0x1a0>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a4f      	ldr	r2, [pc, #316]	@ (80016ac <MX_GPIO_Init+0x1a0>)
 800156e:	f043 0308 	orr.w	r3, r3, #8
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b4d      	ldr	r3, [pc, #308]	@ (80016ac <MX_GPIO_Init+0x1a0>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_SIGNAL_GPIO_Port, NSS_SIGNAL_Pin, GPIO_PIN_SET);
 8001580:	2201      	movs	r2, #1
 8001582:	2110      	movs	r1, #16
 8001584:	484a      	ldr	r0, [pc, #296]	@ (80016b0 <MX_GPIO_Init+0x1a4>)
 8001586:	f001 fc8d 	bl	8002ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_SIGNAL_Pin|MOSFET_GATE_LORA_Pin|V_LED_Pin, GPIO_PIN_SET);
 800158a:	2201      	movs	r2, #1
 800158c:	f641 0102 	movw	r1, #6146	@ 0x1802
 8001590:	4848      	ldr	r0, [pc, #288]	@ (80016b4 <MX_GPIO_Init+0x1a8>)
 8001592:	f001 fc87 	bl	8002ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOSFET_GATE_SENSOR_Pin|INFO_LED_Pin, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 4104 	mov.w	r1, #33792	@ 0x8400
 800159c:	4845      	ldr	r0, [pc, #276]	@ (80016b4 <MX_GPIO_Init+0x1a8>)
 800159e:	f001 fc81 	bl	8002ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a8:	2303      	movs	r3, #3
 80015aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	4841      	ldr	r0, [pc, #260]	@ (80016b8 <MX_GPIO_Init+0x1ac>)
 80015b4:	f001 fa46 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015b8:	2303      	movs	r3, #3
 80015ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015bc:	2303      	movs	r3, #3
 80015be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	483d      	ldr	r0, [pc, #244]	@ (80016bc <MX_GPIO_Init+0x1b0>)
 80015c8:	f001 fa3c 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_11
 80015cc:	f649 130c 	movw	r3, #39180	@ 0x990c
 80015d0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d2:	2303      	movs	r3, #3
 80015d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	4834      	ldr	r0, [pc, #208]	@ (80016b0 <MX_GPIO_Init+0x1a4>)
 80015de:	f001 fa31 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_SIGNAL_Pin */
  GPIO_InitStruct.Pin = NSS_SIGNAL_Pin;
 80015e2:	2310      	movs	r3, #16
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2302      	movs	r3, #2
 80015f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	482d      	ldr	r0, [pc, #180]	@ (80016b0 <MX_GPIO_Init+0x1a4>)
 80015fa:	f001 fa23 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_INT_Pin */
  GPIO_InitStruct.Pin = DIO0_INT_Pin;
 80015fe:	2301      	movs	r3, #1
 8001600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001602:	4b2f      	ldr	r3, [pc, #188]	@ (80016c0 <MX_GPIO_Init+0x1b4>)
 8001604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_INT_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	4828      	ldr	r0, [pc, #160]	@ (80016b4 <MX_GPIO_Init+0x1a8>)
 8001612:	f001 fa17 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_SIGNAL_Pin MOSFET_GATE_SENSOR_Pin INFO_LED_Pin */
  GPIO_InitStruct.Pin = RST_SIGNAL_Pin|MOSFET_GATE_SENSOR_Pin|INFO_LED_Pin;
 8001616:	f248 4302 	movw	r3, #33794	@ 0x8402
 800161a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161c:	2301      	movs	r3, #1
 800161e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001620:	2302      	movs	r3, #2
 8001622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2302      	movs	r3, #2
 8001626:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	4821      	ldr	r0, [pc, #132]	@ (80016b4 <MX_GPIO_Init+0x1a8>)
 8001630:	f001 fa08 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB14 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3
 8001634:	f246 33fc 	movw	r3, #25596	@ 0x63fc
 8001638:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163a:	2303      	movs	r3, #3
 800163c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	481b      	ldr	r0, [pc, #108]	@ (80016b4 <MX_GPIO_Init+0x1a8>)
 8001646:	f001 f9fd 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOSFET_GATE_LORA_Pin */
  GPIO_InitStruct.Pin = MOSFET_GATE_LORA_Pin;
 800164a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800164e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001650:	2301      	movs	r3, #1
 8001652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001654:	2301      	movs	r3, #1
 8001656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2302      	movs	r3, #2
 800165a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOSFET_GATE_LORA_GPIO_Port, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	4814      	ldr	r0, [pc, #80]	@ (80016b4 <MX_GPIO_Init+0x1a8>)
 8001664:	f001 f9ee 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : V_LED_Pin */
  GPIO_InitStruct.Pin = V_LED_Pin;
 8001668:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800166c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	2301      	movs	r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(V_LED_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	480c      	ldr	r0, [pc, #48]	@ (80016b4 <MX_GPIO_Init+0x1a8>)
 8001682:	f001 f9df 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8001686:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <MX_GPIO_Init+0x1b8>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
 800168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
 8001694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
 800169c:	4a09      	ldr	r2, [pc, #36]	@ (80016c4 <MX_GPIO_Init+0x1b8>)
 800169e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80016a2:	bf00      	nop
 80016a4:	3728      	adds	r7, #40	@ 0x28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010800 	.word	0x40010800
 80016b4:	40010c00 	.word	0x40010c00
 80016b8:	40011000 	.word	0x40011000
 80016bc:	40011400 	.word	0x40011400
 80016c0:	10110000 	.word	0x10110000
 80016c4:	40010000 	.word	0x40010000

080016c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <Error_Handler+0x8>

080016d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016da:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <HAL_MspInit+0x5c>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	4a14      	ldr	r2, [pc, #80]	@ (8001730 <HAL_MspInit+0x5c>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6193      	str	r3, [r2, #24]
 80016e6:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <HAL_MspInit+0x5c>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <HAL_MspInit+0x5c>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001730 <HAL_MspInit+0x5c>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016fc:	61d3      	str	r3, [r2, #28]
 80016fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <HAL_MspInit+0x5c>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_MspInit+0x60>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	4a04      	ldr	r2, [pc, #16]	@ (8001734 <HAL_MspInit+0x60>)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	40021000 	.word	0x40021000
 8001734:	40010000 	.word	0x40010000

08001738 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	@ 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0318 	add.w	r3, r7, #24
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a28      	ldr	r2, [pc, #160]	@ (80017f4 <HAL_ADC_MspInit+0xbc>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d122      	bne.n	800179e <HAL_ADC_MspInit+0x66>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001758:	4b27      	ldr	r3, [pc, #156]	@ (80017f8 <HAL_ADC_MspInit+0xc0>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a26      	ldr	r2, [pc, #152]	@ (80017f8 <HAL_ADC_MspInit+0xc0>)
 800175e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b24      	ldr	r3, [pc, #144]	@ (80017f8 <HAL_ADC_MspInit+0xc0>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	4b21      	ldr	r3, [pc, #132]	@ (80017f8 <HAL_ADC_MspInit+0xc0>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a20      	ldr	r2, [pc, #128]	@ (80017f8 <HAL_ADC_MspInit+0xc0>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b1e      	ldr	r3, [pc, #120]	@ (80017f8 <HAL_ADC_MspInit+0xc0>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = VCC_BAT_Pin;
 8001788:	2302      	movs	r3, #2
 800178a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178c:	2303      	movs	r3, #3
 800178e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCC_BAT_GPIO_Port, &GPIO_InitStruct);
 8001790:	f107 0318 	add.w	r3, r7, #24
 8001794:	4619      	mov	r1, r3
 8001796:	4819      	ldr	r0, [pc, #100]	@ (80017fc <HAL_ADC_MspInit+0xc4>)
 8001798:	f001 f954 	bl	8002a44 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 800179c:	e026      	b.n	80017ec <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a17      	ldr	r2, [pc, #92]	@ (8001800 <HAL_ADC_MspInit+0xc8>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d121      	bne.n	80017ec <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80017a8:	4b13      	ldr	r3, [pc, #76]	@ (80017f8 <HAL_ADC_MspInit+0xc0>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4a12      	ldr	r2, [pc, #72]	@ (80017f8 <HAL_ADC_MspInit+0xc0>)
 80017ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017b2:	6193      	str	r3, [r2, #24]
 80017b4:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <HAL_ADC_MspInit+0xc0>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c0:	4b0d      	ldr	r3, [pc, #52]	@ (80017f8 <HAL_ADC_MspInit+0xc0>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a0c      	ldr	r2, [pc, #48]	@ (80017f8 <HAL_ADC_MspInit+0xc0>)
 80017c6:	f043 0304 	orr.w	r3, r3, #4
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <HAL_ADC_MspInit+0xc0>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = V0_Pin;
 80017d8:	2301      	movs	r3, #1
 80017da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017dc:	2303      	movs	r3, #3
 80017de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V0_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f107 0318 	add.w	r3, r7, #24
 80017e4:	4619      	mov	r1, r3
 80017e6:	4805      	ldr	r0, [pc, #20]	@ (80017fc <HAL_ADC_MspInit+0xc4>)
 80017e8:	f001 f92c 	bl	8002a44 <HAL_GPIO_Init>
}
 80017ec:	bf00      	nop
 80017ee:	3728      	adds	r7, #40	@ 0x28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40012400 	.word	0x40012400
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010800 	.word	0x40010800
 8001800:	40012800 	.word	0x40012800

08001804 <HAL_ADC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a10      	ldr	r2, [pc, #64]	@ (8001854 <HAL_ADC_MspDeInit+0x50>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d10a      	bne.n	800182c <HAL_ADC_MspDeInit+0x28>
  {
    /* USER CODE BEGIN ADC1_MspDeInit 0 */

    /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <HAL_ADC_MspDeInit+0x54>)
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	4a0f      	ldr	r2, [pc, #60]	@ (8001858 <HAL_ADC_MspDeInit+0x54>)
 800181c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001820:	6193      	str	r3, [r2, #24]

    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    HAL_GPIO_DeInit(VCC_BAT_GPIO_Port, VCC_BAT_Pin);
 8001822:	2102      	movs	r1, #2
 8001824:	480d      	ldr	r0, [pc, #52]	@ (800185c <HAL_ADC_MspDeInit+0x58>)
 8001826:	f001 fa89 	bl	8002d3c <HAL_GPIO_DeInit>
    /* USER CODE BEGIN ADC2_MspDeInit 1 */

    /* USER CODE END ADC2_MspDeInit 1 */
  }

}
 800182a:	e00e      	b.n	800184a <HAL_ADC_MspDeInit+0x46>
  else if(hadc->Instance==ADC2)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0b      	ldr	r2, [pc, #44]	@ (8001860 <HAL_ADC_MspDeInit+0x5c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d109      	bne.n	800184a <HAL_ADC_MspDeInit+0x46>
    __HAL_RCC_ADC2_CLK_DISABLE();
 8001836:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <HAL_ADC_MspDeInit+0x54>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	4a07      	ldr	r2, [pc, #28]	@ (8001858 <HAL_ADC_MspDeInit+0x54>)
 800183c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001840:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(V0_GPIO_Port, V0_Pin);
 8001842:	2101      	movs	r1, #1
 8001844:	4805      	ldr	r0, [pc, #20]	@ (800185c <HAL_ADC_MspDeInit+0x58>)
 8001846:	f001 fa79 	bl	8002d3c <HAL_GPIO_DeInit>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40012400 	.word	0x40012400
 8001858:	40021000 	.word	0x40021000
 800185c:	40010800 	.word	0x40010800
 8001860:	40012800 	.word	0x40012800

08001864 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0f      	ldr	r2, [pc, #60]	@ (80018b0 <HAL_RTC_MspInit+0x4c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d118      	bne.n	80018a8 <HAL_RTC_MspInit+0x44>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001876:	f001 fb2d 	bl	8002ed4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800187a:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <HAL_RTC_MspInit+0x50>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a0d      	ldr	r2, [pc, #52]	@ (80018b4 <HAL_RTC_MspInit+0x50>)
 8001880:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001884:	61d3      	str	r3, [r2, #28]
 8001886:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <HAL_RTC_MspInit+0x50>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001892:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <HAL_RTC_MspInit+0x54>)
 8001894:	2201      	movs	r2, #1
 8001896:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001898:	2200      	movs	r2, #0
 800189a:	2100      	movs	r1, #0
 800189c:	2003      	movs	r0, #3
 800189e:	f001 f89a 	bl	80029d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80018a2:	2003      	movs	r0, #3
 80018a4:	f001 f8b3 	bl	8002a0e <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80018a8:	bf00      	nop
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40002800 	.word	0x40002800
 80018b4:	40021000 	.word	0x40021000
 80018b8:	4242043c 	.word	0x4242043c

080018bc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001944 <HAL_SPI_MspInit+0x88>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d12f      	bne.n	800193c <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <HAL_SPI_MspInit+0x8c>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	4a19      	ldr	r2, [pc, #100]	@ (8001948 <HAL_SPI_MspInit+0x8c>)
 80018e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018e6:	6193      	str	r3, [r2, #24]
 80018e8:	4b17      	ldr	r3, [pc, #92]	@ (8001948 <HAL_SPI_MspInit+0x8c>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	4b14      	ldr	r3, [pc, #80]	@ (8001948 <HAL_SPI_MspInit+0x8c>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a13      	ldr	r2, [pc, #76]	@ (8001948 <HAL_SPI_MspInit+0x8c>)
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <HAL_SPI_MspInit+0x8c>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800190c:	23a0      	movs	r3, #160	@ 0xa0
 800190e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001914:	2303      	movs	r3, #3
 8001916:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	4619      	mov	r1, r3
 800191e:	480b      	ldr	r0, [pc, #44]	@ (800194c <HAL_SPI_MspInit+0x90>)
 8001920:	f001 f890 	bl	8002a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001924:	2340      	movs	r3, #64	@ 0x40
 8001926:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	4619      	mov	r1, r3
 8001936:	4805      	ldr	r0, [pc, #20]	@ (800194c <HAL_SPI_MspInit+0x90>)
 8001938:	f001 f884 	bl	8002a44 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800193c:	bf00      	nop
 800193e:	3720      	adds	r7, #32
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40013000 	.word	0x40013000
 8001948:	40021000 	.word	0x40021000
 800194c:	40010800 	.word	0x40010800

08001950 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001960:	d10b      	bne.n	800197a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001962:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <HAL_TIM_Base_MspInit+0x34>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	4a07      	ldr	r2, [pc, #28]	@ (8001984 <HAL_TIM_Base_MspInit+0x34>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	61d3      	str	r3, [r2, #28]
 800196e:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <HAL_TIM_Base_MspInit+0x34>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	40021000 	.word	0x40021000

08001988 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a14 <HAL_UART_MspInit+0x8c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d131      	bne.n	8001a0c <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a18 <HAL_UART_MspInit+0x90>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001a18 <HAL_UART_MspInit+0x90>)
 80019ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b2:	6193      	str	r3, [r2, #24]
 80019b4:	4b18      	ldr	r3, [pc, #96]	@ (8001a18 <HAL_UART_MspInit+0x90>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c0:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <HAL_UART_MspInit+0x90>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	4a14      	ldr	r2, [pc, #80]	@ (8001a18 <HAL_UART_MspInit+0x90>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	6193      	str	r3, [r2, #24]
 80019cc:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <HAL_UART_MspInit+0x90>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e2:	2303      	movs	r3, #3
 80019e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e6:	f107 0310 	add.w	r3, r7, #16
 80019ea:	4619      	mov	r1, r3
 80019ec:	480b      	ldr	r0, [pc, #44]	@ (8001a1c <HAL_UART_MspInit+0x94>)
 80019ee:	f001 f829 	bl	8002a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	4619      	mov	r1, r3
 8001a06:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <HAL_UART_MspInit+0x94>)
 8001a08:	f001 f81c 	bl	8002a44 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a0c:	bf00      	nop
 8001a0e:	3720      	adds	r7, #32
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40013800 	.word	0x40013800
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40010800 	.word	0x40010800

08001a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <NMI_Handler+0x4>

08001a28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <HardFault_Handler+0x4>

08001a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <MemManage_Handler+0x4>

08001a38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <BusFault_Handler+0x4>

08001a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <UsageFault_Handler+0x4>

08001a48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a70:	f000 f8b4 	bl	8001bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8001a7c:	4802      	ldr	r0, [pc, #8]	@ (8001a88 <RTC_IRQHandler+0x10>)
 8001a7e:	f002 fe35 	bl	80046ec <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//	HAL_Delay(50);
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  /* USER CODE END RTC_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200000d8 	.word	0x200000d8

08001a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a94:	4a14      	ldr	r2, [pc, #80]	@ (8001ae8 <_sbrk+0x5c>)
 8001a96:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <_sbrk+0x60>)
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa0:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d102      	bne.n	8001aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <_sbrk+0x64>)
 8001aaa:	4a12      	ldr	r2, [pc, #72]	@ (8001af4 <_sbrk+0x68>)
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aae:	4b10      	ldr	r3, [pc, #64]	@ (8001af0 <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d207      	bcs.n	8001acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001abc:	f005 f80a 	bl	8006ad4 <__errno>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aca:	e009      	b.n	8001ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001acc:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <_sbrk+0x64>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ad2:	4b07      	ldr	r3, [pc, #28]	@ (8001af0 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	4a05      	ldr	r2, [pc, #20]	@ (8001af0 <_sbrk+0x64>)
 8001adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ade:	68fb      	ldr	r3, [r7, #12]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20002800 	.word	0x20002800
 8001aec:	00000400 	.word	0x00000400
 8001af0:	200001fc 	.word	0x200001fc
 8001af4:	20000380 	.word	0x20000380

08001af8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b04:	f7ff fff8 	bl	8001af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b08:	480b      	ldr	r0, [pc, #44]	@ (8001b38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b0a:	490c      	ldr	r1, [pc, #48]	@ (8001b3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b10:	e002      	b.n	8001b18 <LoopCopyDataInit>

08001b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b16:	3304      	adds	r3, #4

08001b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b1c:	d3f9      	bcc.n	8001b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1e:	4a09      	ldr	r2, [pc, #36]	@ (8001b44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b20:	4c09      	ldr	r4, [pc, #36]	@ (8001b48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b24:	e001      	b.n	8001b2a <LoopFillZerobss>

08001b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b28:	3204      	adds	r2, #4

08001b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b2c:	d3fb      	bcc.n	8001b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b2e:	f004 ffd7 	bl	8006ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b32:	f7ff f9fd 	bl	8000f30 <main>
  bx lr
 8001b36:	4770      	bx	lr
  ldr r0, =_sdata
 8001b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b3c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001b40:	080076d8 	.word	0x080076d8
  ldr r2, =_sbss
 8001b44:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001b48:	2000037c 	.word	0x2000037c

08001b4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b4c:	e7fe      	b.n	8001b4c <ADC1_2_IRQHandler>
	...

08001b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b54:	4b08      	ldr	r3, [pc, #32]	@ (8001b78 <HAL_Init+0x28>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a07      	ldr	r2, [pc, #28]	@ (8001b78 <HAL_Init+0x28>)
 8001b5a:	f043 0310 	orr.w	r3, r3, #16
 8001b5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b60:	2003      	movs	r0, #3
 8001b62:	f000 ff2d 	bl	80029c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b66:	200f      	movs	r0, #15
 8001b68:	f000 f808 	bl	8001b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b6c:	f7ff fdb2 	bl	80016d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40022000 	.word	0x40022000

08001b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b84:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <HAL_InitTick+0x54>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <HAL_InitTick+0x58>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 ff45 	bl	8002a2a <HAL_SYSTICK_Config>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e00e      	b.n	8001bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b0f      	cmp	r3, #15
 8001bae:	d80a      	bhi.n	8001bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb8:	f000 ff0d 	bl	80029d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bbc:	4a06      	ldr	r2, [pc, #24]	@ (8001bd8 <HAL_InitTick+0x5c>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	e000      	b.n	8001bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	20000008 	.word	0x20000008
 8001bd8:	20000004 	.word	0x20000004

08001bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be0:	4b05      	ldr	r3, [pc, #20]	@ (8001bf8 <HAL_IncTick+0x1c>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <HAL_IncTick+0x20>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	4a03      	ldr	r2, [pc, #12]	@ (8001bfc <HAL_IncTick+0x20>)
 8001bee:	6013      	str	r3, [r2, #0]
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	20000008 	.word	0x20000008
 8001bfc:	20000200 	.word	0x20000200

08001c00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return uwTick;
 8001c04:	4b02      	ldr	r3, [pc, #8]	@ (8001c10 <HAL_GetTick+0x10>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	20000200 	.word	0x20000200

08001c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c1c:	f7ff fff0 	bl	8001c00 <HAL_GetTick>
 8001c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2c:	d005      	beq.n	8001c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <HAL_Delay+0x44>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c3a:	bf00      	nop
 8001c3c:	f7ff ffe0 	bl	8001c00 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d8f7      	bhi.n	8001c3c <HAL_Delay+0x28>
  {
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000008 	.word	0x20000008

08001c5c <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8001c60:	4b02      	ldr	r3, [pc, #8]	@ (8001c6c <HAL_GetUIDw0+0x10>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	1ffff7e8 	.word	0x1ffff7e8

08001c70 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001c74:	4b02      	ldr	r3, [pc, #8]	@ (8001c80 <HAL_GetUIDw1+0x10>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	1ffff7ec 	.word	0x1ffff7ec

08001c84 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001c88:	4b02      	ldr	r3, [pc, #8]	@ (8001c94 <HAL_GetUIDw2+0x10>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	1ffff7f0 	.word	0x1ffff7f0

08001c98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e0be      	b.n	8001e38 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d109      	bne.n	8001cdc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff fd2e 	bl	8001738 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 fcb3 	bl	8002648 <ADC_ConversionStop_Disable>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f040 8099 	bne.w	8001e26 <HAL_ADC_Init+0x18e>
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f040 8095 	bne.w	8001e26 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d00:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d04:	f023 0302 	bic.w	r3, r3, #2
 8001d08:	f043 0202 	orr.w	r2, r3, #2
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d18:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7b1b      	ldrb	r3, [r3, #12]
 8001d1e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d20:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d30:	d003      	beq.n	8001d3a <HAL_ADC_Init+0xa2>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d102      	bne.n	8001d40 <HAL_ADC_Init+0xa8>
 8001d3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d3e:	e000      	b.n	8001d42 <HAL_ADC_Init+0xaa>
 8001d40:	2300      	movs	r3, #0
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	7d1b      	ldrb	r3, [r3, #20]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d119      	bne.n	8001d84 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	7b1b      	ldrb	r3, [r3, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d109      	bne.n	8001d6c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	035a      	lsls	r2, r3, #13
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	e00b      	b.n	8001d84 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d70:	f043 0220 	orr.w	r2, r3, #32
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7c:	f043 0201 	orr.w	r2, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	4b28      	ldr	r3, [pc, #160]	@ (8001e40 <HAL_ADC_Init+0x1a8>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	68b9      	ldr	r1, [r7, #8]
 8001da8:	430b      	orrs	r3, r1
 8001daa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001db4:	d003      	beq.n	8001dbe <HAL_ADC_Init+0x126>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d104      	bne.n	8001dc8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	051b      	lsls	r3, r3, #20
 8001dc6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dce:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	4b18      	ldr	r3, [pc, #96]	@ (8001e44 <HAL_ADC_Init+0x1ac>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d10b      	bne.n	8001e04 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df6:	f023 0303 	bic.w	r3, r3, #3
 8001dfa:	f043 0201 	orr.w	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e02:	e018      	b.n	8001e36 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e08:	f023 0312 	bic.w	r3, r3, #18
 8001e0c:	f043 0210 	orr.w	r2, r3, #16
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e18:	f043 0201 	orr.w	r2, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e24:	e007      	b.n	8001e36 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2a:	f043 0210 	orr.w	r2, r3, #16
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	ffe1f7fd 	.word	0xffe1f7fd
 8001e44:	ff1f0efe 	.word	0xff1f0efe

08001e48 <HAL_ADC_DeInit>:
  *         function HAL_ADC_MspDeInit().
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_DeInit+0x16>
  {
     return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e0ad      	b.n	8001fba <HAL_ADC_DeInit+0x172>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e62:	f043 0202 	orr.w	r2, r3, #2
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 fbec 	bl	8002648 <ADC_ConversionStop_Disable>
 8001e70:	4603      	mov	r3, r0
 8001e72:	73fb      	strb	r3, [r7, #15]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status == HAL_OK)
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f040 809a 	bne.w	8001fb0 <HAL_ADC_DeInit+0x168>




    /* Reset register SR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 021f 	mvn.w	r2, #31
 8001e84:	601a      	str	r2, [r3, #0]
                                ADC_FLAG_JSTRT | ADC_FLAG_STRT));
                         
    /* Reset register CR1 */
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6859      	ldr	r1, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b4c      	ldr	r3, [pc, #304]	@ (8001fc4 <HAL_ADC_DeInit+0x17c>)
 8001e92:	400b      	ands	r3, r1
 8001e94:	6053      	str	r3, [r2, #4]
                                    ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
                                    ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
                                    ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
    
    /* Reset register CR2 */
    CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6899      	ldr	r1, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b49      	ldr	r3, [pc, #292]	@ (8001fc8 <HAL_ADC_DeInit+0x180>)
 8001ea2:	400b      	ands	r3, r1
 8001ea4:	6093      	str	r3, [r2, #8]
                                    ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
                                    ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |          
                                    ADC_CR2_ADON                                          ));
    
    /* Reset register SMPR1 */
    CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8001eb4:	60da      	str	r2, [r3, #12]
                                      ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
                                      ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10                    ));
    
    /* Reset register SMPR2 */
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8001ec4:	611a      	str	r2, [r3, #16]
                                      ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
                                      ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
                                      ADC_SMPR2_SMP0                                    ));

    /* Reset register JOFR1 */
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001ed4:	f023 030f 	bic.w	r3, r3, #15
 8001ed8:	6153      	str	r3, [r2, #20]
    /* Reset register JOFR2 */
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001ee8:	f023 030f 	bic.w	r3, r3, #15
 8001eec:	6193      	str	r3, [r2, #24]
    /* Reset register JOFR3 */
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001efc:	f023 030f 	bic.w	r3, r3, #15
 8001f00:	61d3      	str	r3, [r2, #28]
    /* Reset register JOFR4 */
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001f10:	f023 030f 	bic.w	r3, r3, #15
 8001f14:	6213      	str	r3, [r2, #32]
    
    /* Reset register HTR */
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001f24:	f023 030f 	bic.w	r3, r3, #15
 8001f28:	6253      	str	r3, [r2, #36]	@ 0x24
    /* Reset register LTR */
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001f38:	f023 030f 	bic.w	r3, r3, #15
 8001f3c:	6293      	str	r3, [r2, #40]	@ 0x28
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8001f4c:	62da      	str	r2, [r3, #44]	@ 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8001f5c:	62da      	str	r2, [r3, #44]	@ 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR2 */
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8001f6c:	631a      	str	r2, [r3, #48]	@ 0x30
                                    ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
    
    /* Reset register SQR3 */
    CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8001f7c:	635a      	str	r2, [r3, #52]	@ 0x34
                                    ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	0d9b      	lsrs	r3, r3, #22
 8001f8a:	059b      	lsls	r3, r3, #22
 8001f8c:	6393      	str	r3, [r2, #56]	@ 0x38
                                    ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
                                    ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	0d9b      	lsrs	r3, r3, #22
 8001f9a:	059b      	lsls	r3, r3, #22
 8001f9c:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff fc30 	bl	8001804 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET; 
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	629a      	str	r2, [r3, #40]	@ 0x28
  
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	ff3f0000 	.word	0xff3f0000
 8001fc8:	ff0106f0 	.word	0xff0106f0

08001fcc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_ADC_Start+0x1a>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e098      	b.n	8002118 <HAL_ADC_Start+0x14c>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 fad0 	bl	8002594 <ADC_Enable>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f040 8087 	bne.w	800210e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002004:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002008:	f023 0301 	bic.w	r3, r3, #1
 800200c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a41      	ldr	r2, [pc, #260]	@ (8002120 <HAL_ADC_Start+0x154>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d105      	bne.n	800202a <HAL_ADC_Start+0x5e>
 800201e:	4b41      	ldr	r3, [pc, #260]	@ (8002124 <HAL_ADC_Start+0x158>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d115      	bne.n	8002056 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002040:	2b00      	cmp	r3, #0
 8002042:	d026      	beq.n	8002092 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002048:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800204c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002054:	e01d      	b.n	8002092 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a2f      	ldr	r2, [pc, #188]	@ (8002124 <HAL_ADC_Start+0x158>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d004      	beq.n	8002076 <HAL_ADC_Start+0xaa>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a2b      	ldr	r2, [pc, #172]	@ (8002120 <HAL_ADC_Start+0x154>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d10d      	bne.n	8002092 <HAL_ADC_Start+0xc6>
 8002076:	4b2b      	ldr	r3, [pc, #172]	@ (8002124 <HAL_ADC_Start+0x158>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002086:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800208a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002096:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d006      	beq.n	80020ac <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a2:	f023 0206 	bic.w	r2, r3, #6
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020aa:	e002      	b.n	80020b2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f06f 0202 	mvn.w	r2, #2
 80020c2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80020ce:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80020d2:	d113      	bne.n	80020fc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020d8:	4a11      	ldr	r2, [pc, #68]	@ (8002120 <HAL_ADC_Start+0x154>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d105      	bne.n	80020ea <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80020de:	4b11      	ldr	r3, [pc, #68]	@ (8002124 <HAL_ADC_Start+0x158>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d108      	bne.n	80020fc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	e00c      	b.n	8002116 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	e003      	b.n	8002116 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002116:	7bfb      	ldrb	r3, [r7, #15]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40012800 	.word	0x40012800
 8002124:	40012400 	.word	0x40012400

08002128 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_ADC_Stop+0x1a>
 800213e:	2302      	movs	r3, #2
 8002140:	e01a      	b.n	8002178 <HAL_ADC_Stop+0x50>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fa7c 	bl	8002648 <ADC_ConversionStop_Disable>
 8002150:	4603      	mov	r3, r0
 8002152:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d109      	bne.n	800216e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002162:	f023 0301 	bic.w	r3, r3, #1
 8002166:	f043 0201 	orr.w	r2, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002176:	7bfb      	ldrb	r3, [r7, #15]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002196:	f7ff fd33 	bl	8001c00 <HAL_GetTick>
 800219a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00b      	beq.n	80021c2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ae:	f043 0220 	orr.w	r2, r3, #32
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0d3      	b.n	800236a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d131      	bne.n	8002234 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d12a      	bne.n	8002234 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021de:	e021      	b.n	8002224 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e6:	d01d      	beq.n	8002224 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d007      	beq.n	80021fe <HAL_ADC_PollForConversion+0x7e>
 80021ee:	f7ff fd07 	bl	8001c00 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d212      	bcs.n	8002224 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10b      	bne.n	8002224 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002210:	f043 0204 	orr.w	r2, r3, #4
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e0a2      	b.n	800236a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0d6      	beq.n	80021e0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002232:	e070      	b.n	8002316 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002234:	4b4f      	ldr	r3, [pc, #316]	@ (8002374 <HAL_ADC_PollForConversion+0x1f4>)
 8002236:	681c      	ldr	r4, [r3, #0]
 8002238:	2002      	movs	r0, #2
 800223a:	f001 fb35 	bl	80038a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800223e:	4603      	mov	r3, r0
 8002240:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6919      	ldr	r1, [r3, #16]
 800224a:	4b4b      	ldr	r3, [pc, #300]	@ (8002378 <HAL_ADC_PollForConversion+0x1f8>)
 800224c:	400b      	ands	r3, r1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d118      	bne.n	8002284 <HAL_ADC_PollForConversion+0x104>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68d9      	ldr	r1, [r3, #12]
 8002258:	4b48      	ldr	r3, [pc, #288]	@ (800237c <HAL_ADC_PollForConversion+0x1fc>)
 800225a:	400b      	ands	r3, r1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d111      	bne.n	8002284 <HAL_ADC_PollForConversion+0x104>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6919      	ldr	r1, [r3, #16]
 8002266:	4b46      	ldr	r3, [pc, #280]	@ (8002380 <HAL_ADC_PollForConversion+0x200>)
 8002268:	400b      	ands	r3, r1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d108      	bne.n	8002280 <HAL_ADC_PollForConversion+0x100>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68d9      	ldr	r1, [r3, #12]
 8002274:	4b43      	ldr	r3, [pc, #268]	@ (8002384 <HAL_ADC_PollForConversion+0x204>)
 8002276:	400b      	ands	r3, r1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_ADC_PollForConversion+0x100>
 800227c:	2314      	movs	r3, #20
 800227e:	e020      	b.n	80022c2 <HAL_ADC_PollForConversion+0x142>
 8002280:	2329      	movs	r3, #41	@ 0x29
 8002282:	e01e      	b.n	80022c2 <HAL_ADC_PollForConversion+0x142>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6919      	ldr	r1, [r3, #16]
 800228a:	4b3d      	ldr	r3, [pc, #244]	@ (8002380 <HAL_ADC_PollForConversion+0x200>)
 800228c:	400b      	ands	r3, r1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d106      	bne.n	80022a0 <HAL_ADC_PollForConversion+0x120>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68d9      	ldr	r1, [r3, #12]
 8002298:	4b3a      	ldr	r3, [pc, #232]	@ (8002384 <HAL_ADC_PollForConversion+0x204>)
 800229a:	400b      	ands	r3, r1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00d      	beq.n	80022bc <HAL_ADC_PollForConversion+0x13c>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6919      	ldr	r1, [r3, #16]
 80022a6:	4b38      	ldr	r3, [pc, #224]	@ (8002388 <HAL_ADC_PollForConversion+0x208>)
 80022a8:	400b      	ands	r3, r1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d108      	bne.n	80022c0 <HAL_ADC_PollForConversion+0x140>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68d9      	ldr	r1, [r3, #12]
 80022b4:	4b34      	ldr	r3, [pc, #208]	@ (8002388 <HAL_ADC_PollForConversion+0x208>)
 80022b6:	400b      	ands	r3, r1
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_PollForConversion+0x140>
 80022bc:	2354      	movs	r3, #84	@ 0x54
 80022be:	e000      	b.n	80022c2 <HAL_ADC_PollForConversion+0x142>
 80022c0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80022c2:	fb02 f303 	mul.w	r3, r2, r3
 80022c6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80022c8:	e021      	b.n	800230e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d0:	d01a      	beq.n	8002308 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d007      	beq.n	80022e8 <HAL_ADC_PollForConversion+0x168>
 80022d8:	f7ff fc92 	bl	8001c00 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d20f      	bcs.n	8002308 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d90b      	bls.n	8002308 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f4:	f043 0204 	orr.w	r2, r3, #4
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e030      	b.n	800236a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	3301      	adds	r3, #1
 800230c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	429a      	cmp	r2, r3
 8002314:	d8d9      	bhi.n	80022ca <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f06f 0212 	mvn.w	r2, #18
 800231e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002324:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002336:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800233a:	d115      	bne.n	8002368 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002340:	2b00      	cmp	r3, #0
 8002342:	d111      	bne.n	8002368 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002348:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002354:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d105      	bne.n	8002368 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	371c      	adds	r7, #28
 800236e:	46bd      	mov	sp, r7
 8002370:	bd90      	pop	{r4, r7, pc}
 8002372:	bf00      	nop
 8002374:	20000000 	.word	0x20000000
 8002378:	24924924 	.word	0x24924924
 800237c:	00924924 	.word	0x00924924
 8002380:	12492492 	.word	0x12492492
 8002384:	00492492 	.word	0x00492492
 8002388:	00249249 	.word	0x00249249

0800238c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x20>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e0dc      	b.n	800257e <HAL_ADC_ConfigChannel+0x1da>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b06      	cmp	r3, #6
 80023d2:	d81c      	bhi.n	800240e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	3b05      	subs	r3, #5
 80023e6:	221f      	movs	r2, #31
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	4019      	ands	r1, r3
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	3b05      	subs	r3, #5
 8002400:	fa00 f203 	lsl.w	r2, r0, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	635a      	str	r2, [r3, #52]	@ 0x34
 800240c:	e03c      	b.n	8002488 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b0c      	cmp	r3, #12
 8002414:	d81c      	bhi.n	8002450 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	3b23      	subs	r3, #35	@ 0x23
 8002428:	221f      	movs	r2, #31
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	4019      	ands	r1, r3
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	3b23      	subs	r3, #35	@ 0x23
 8002442:	fa00 f203 	lsl.w	r2, r0, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	631a      	str	r2, [r3, #48]	@ 0x30
 800244e:	e01b      	b.n	8002488 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	3b41      	subs	r3, #65	@ 0x41
 8002462:	221f      	movs	r2, #31
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	4019      	ands	r1, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	3b41      	subs	r3, #65	@ 0x41
 800247c:	fa00 f203 	lsl.w	r2, r0, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b09      	cmp	r3, #9
 800248e:	d91c      	bls.n	80024ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68d9      	ldr	r1, [r3, #12]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	4613      	mov	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4413      	add	r3, r2
 80024a0:	3b1e      	subs	r3, #30
 80024a2:	2207      	movs	r2, #7
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	4019      	ands	r1, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	6898      	ldr	r0, [r3, #8]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4613      	mov	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	3b1e      	subs	r3, #30
 80024bc:	fa00 f203 	lsl.w	r2, r0, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	60da      	str	r2, [r3, #12]
 80024c8:	e019      	b.n	80024fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6919      	ldr	r1, [r3, #16]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	2207      	movs	r2, #7
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	4019      	ands	r1, r3
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	6898      	ldr	r0, [r3, #8]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	fa00 f203 	lsl.w	r2, r0, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b10      	cmp	r3, #16
 8002504:	d003      	beq.n	800250e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800250a:	2b11      	cmp	r3, #17
 800250c:	d132      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a1d      	ldr	r2, [pc, #116]	@ (8002588 <HAL_ADC_ConfigChannel+0x1e4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d125      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d126      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002534:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b10      	cmp	r3, #16
 800253c:	d11a      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800253e:	4b13      	ldr	r3, [pc, #76]	@ (800258c <HAL_ADC_ConfigChannel+0x1e8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a13      	ldr	r2, [pc, #76]	@ (8002590 <HAL_ADC_ConfigChannel+0x1ec>)
 8002544:	fba2 2303 	umull	r2, r3, r2, r3
 8002548:	0c9a      	lsrs	r2, r3, #18
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002554:	e002      	b.n	800255c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	3b01      	subs	r3, #1
 800255a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f9      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x1b2>
 8002562:	e007      	b.n	8002574 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002568:	f043 0220 	orr.w	r2, r3, #32
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800257c:	7bfb      	ldrb	r3, [r7, #15]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	40012400 	.word	0x40012400
 800258c:	20000000 	.word	0x20000000
 8002590:	431bde83 	.word	0x431bde83

08002594 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d040      	beq.n	8002634 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0201 	orr.w	r2, r2, #1
 80025c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002640 <ADC_Enable+0xac>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002644 <ADC_Enable+0xb0>)
 80025c8:	fba2 2303 	umull	r2, r3, r2, r3
 80025cc:	0c9b      	lsrs	r3, r3, #18
 80025ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025d0:	e002      	b.n	80025d8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f9      	bne.n	80025d2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025de:	f7ff fb0f 	bl	8001c00 <HAL_GetTick>
 80025e2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025e4:	e01f      	b.n	8002626 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025e6:	f7ff fb0b 	bl	8001c00 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d918      	bls.n	8002626 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d011      	beq.n	8002626 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002606:	f043 0210 	orr.w	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002612:	f043 0201 	orr.w	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e007      	b.n	8002636 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b01      	cmp	r3, #1
 8002632:	d1d8      	bne.n	80025e6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000000 	.word	0x20000000
 8002644:	431bde83 	.word	0x431bde83

08002648 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b01      	cmp	r3, #1
 8002660:	d12e      	bne.n	80026c0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0201 	bic.w	r2, r2, #1
 8002670:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002672:	f7ff fac5 	bl	8001c00 <HAL_GetTick>
 8002676:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002678:	e01b      	b.n	80026b2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800267a:	f7ff fac1 	bl	8001c00 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d914      	bls.n	80026b2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b01      	cmp	r3, #1
 8002694:	d10d      	bne.n	80026b2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269a:	f043 0210 	orr.w	r2, r3, #16
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a6:	f043 0201 	orr.w	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e007      	b.n	80026c2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d0dc      	beq.n	800267a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80026cc:	b590      	push	{r4, r7, lr}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_ADCEx_Calibration_Start+0x1e>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e097      	b.n	800281a <HAL_ADCEx_Calibration_Start+0x14e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff ffa8 	bl	8002648 <ADC_ConversionStop_Disable>
 80026f8:	4603      	mov	r3, r0
 80026fa:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff49 	bl	8002594 <ADC_Enable>
 8002702:	4603      	mov	r3, r0
 8002704:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	2b00      	cmp	r3, #0
 800270a:	f040 8081 	bne.w	8002810 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002712:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002716:	f023 0302 	bic.w	r3, r3, #2
 800271a:	f043 0202 	orr.w	r2, r3, #2
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002722:	4b40      	ldr	r3, [pc, #256]	@ (8002824 <HAL_ADCEx_Calibration_Start+0x158>)
 8002724:	681c      	ldr	r4, [r3, #0]
 8002726:	2002      	movs	r0, #2
 8002728:	f001 f8be 	bl	80038a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800272c:	4603      	mov	r3, r0
 800272e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002732:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002734:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002736:	e002      	b.n	800273e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3b01      	subs	r3, #1
 800273c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f9      	bne.n	8002738 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0208 	orr.w	r2, r2, #8
 8002752:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002754:	f7ff fa54 	bl	8001c00 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800275a:	e01b      	b.n	8002794 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800275c:	f7ff fa50 	bl	8001c00 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b0a      	cmp	r3, #10
 8002768:	d914      	bls.n	8002794 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00d      	beq.n	8002794 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277c:	f023 0312 	bic.w	r3, r3, #18
 8002780:	f043 0210 	orr.w	r2, r3, #16
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e042      	b.n	800281a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1dc      	bne.n	800275c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0204 	orr.w	r2, r2, #4
 80027b0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80027b2:	f7ff fa25 	bl	8001c00 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80027b8:	e01b      	b.n	80027f2 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80027ba:	f7ff fa21 	bl	8001c00 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b0a      	cmp	r3, #10
 80027c6:	d914      	bls.n	80027f2 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00d      	beq.n	80027f2 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027da:	f023 0312 	bic.w	r3, r3, #18
 80027de:	f043 0210 	orr.w	r2, r3, #16
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e013      	b.n	800281a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1dc      	bne.n	80027ba <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002804:	f023 0303 	bic.w	r3, r3, #3
 8002808:	f043 0201 	orr.w	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002818:	7dfb      	ldrb	r3, [r7, #23]
}
 800281a:	4618      	mov	r0, r3
 800281c:	371c      	adds	r7, #28
 800281e:	46bd      	mov	sp, r7
 8002820:	bd90      	pop	{r4, r7, pc}
 8002822:	bf00      	nop
 8002824:	20000000 	.word	0x20000000

08002828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002838:	4b0c      	ldr	r3, [pc, #48]	@ (800286c <__NVIC_SetPriorityGrouping+0x44>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002844:	4013      	ands	r3, r2
 8002846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002850:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002854:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800285a:	4a04      	ldr	r2, [pc, #16]	@ (800286c <__NVIC_SetPriorityGrouping+0x44>)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	60d3      	str	r3, [r2, #12]
}
 8002860:	bf00      	nop
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002874:	4b04      	ldr	r3, [pc, #16]	@ (8002888 <__NVIC_GetPriorityGrouping+0x18>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	0a1b      	lsrs	r3, r3, #8
 800287a:	f003 0307 	and.w	r3, r3, #7
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	2b00      	cmp	r3, #0
 800289c:	db0b      	blt.n	80028b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	f003 021f 	and.w	r2, r3, #31
 80028a4:	4906      	ldr	r1, [pc, #24]	@ (80028c0 <__NVIC_EnableIRQ+0x34>)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	2001      	movs	r0, #1
 80028ae:	fa00 f202 	lsl.w	r2, r0, r2
 80028b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	e000e100 	.word	0xe000e100

080028c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	6039      	str	r1, [r7, #0]
 80028ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	db0a      	blt.n	80028ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	490c      	ldr	r1, [pc, #48]	@ (8002910 <__NVIC_SetPriority+0x4c>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	0112      	lsls	r2, r2, #4
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	440b      	add	r3, r1
 80028e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028ec:	e00a      	b.n	8002904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	4908      	ldr	r1, [pc, #32]	@ (8002914 <__NVIC_SetPriority+0x50>)
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	3b04      	subs	r3, #4
 80028fc:	0112      	lsls	r2, r2, #4
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	440b      	add	r3, r1
 8002902:	761a      	strb	r2, [r3, #24]
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000e100 	.word	0xe000e100
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002918:	b480      	push	{r7}
 800291a:	b089      	sub	sp, #36	@ 0x24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f1c3 0307 	rsb	r3, r3, #7
 8002932:	2b04      	cmp	r3, #4
 8002934:	bf28      	it	cs
 8002936:	2304      	movcs	r3, #4
 8002938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3304      	adds	r3, #4
 800293e:	2b06      	cmp	r3, #6
 8002940:	d902      	bls.n	8002948 <NVIC_EncodePriority+0x30>
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3b03      	subs	r3, #3
 8002946:	e000      	b.n	800294a <NVIC_EncodePriority+0x32>
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800294c:	f04f 32ff 	mov.w	r2, #4294967295
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43da      	mvns	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	401a      	ands	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002960:	f04f 31ff 	mov.w	r1, #4294967295
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	fa01 f303 	lsl.w	r3, r1, r3
 800296a:	43d9      	mvns	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002970:	4313      	orrs	r3, r2
         );
}
 8002972:	4618      	mov	r0, r3
 8002974:	3724      	adds	r7, #36	@ 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800298c:	d301      	bcc.n	8002992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800298e:	2301      	movs	r3, #1
 8002990:	e00f      	b.n	80029b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002992:	4a0a      	ldr	r2, [pc, #40]	@ (80029bc <SysTick_Config+0x40>)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3b01      	subs	r3, #1
 8002998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800299a:	210f      	movs	r1, #15
 800299c:	f04f 30ff 	mov.w	r0, #4294967295
 80029a0:	f7ff ff90 	bl	80028c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a4:	4b05      	ldr	r3, [pc, #20]	@ (80029bc <SysTick_Config+0x40>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029aa:	4b04      	ldr	r3, [pc, #16]	@ (80029bc <SysTick_Config+0x40>)
 80029ac:	2207      	movs	r2, #7
 80029ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	e000e010 	.word	0xe000e010

080029c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff ff2d 	bl	8002828 <__NVIC_SetPriorityGrouping>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b086      	sub	sp, #24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	4603      	mov	r3, r0
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e8:	f7ff ff42 	bl	8002870 <__NVIC_GetPriorityGrouping>
 80029ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	6978      	ldr	r0, [r7, #20]
 80029f4:	f7ff ff90 	bl	8002918 <NVIC_EncodePriority>
 80029f8:	4602      	mov	r2, r0
 80029fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff5f 	bl	80028c4 <__NVIC_SetPriority>
}
 8002a06:	bf00      	nop
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	4603      	mov	r3, r0
 8002a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff35 	bl	800288c <__NVIC_EnableIRQ>
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff ffa2 	bl	800297c <SysTick_Config>
 8002a38:	4603      	mov	r3, r0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b08b      	sub	sp, #44	@ 0x2c
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a52:	2300      	movs	r3, #0
 8002a54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a56:	e161      	b.n	8002d1c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a58:	2201      	movs	r2, #1
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	f040 8150 	bne.w	8002d16 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4a97      	ldr	r2, [pc, #604]	@ (8002cd8 <HAL_GPIO_Init+0x294>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d05e      	beq.n	8002b3e <HAL_GPIO_Init+0xfa>
 8002a80:	4a95      	ldr	r2, [pc, #596]	@ (8002cd8 <HAL_GPIO_Init+0x294>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d875      	bhi.n	8002b72 <HAL_GPIO_Init+0x12e>
 8002a86:	4a95      	ldr	r2, [pc, #596]	@ (8002cdc <HAL_GPIO_Init+0x298>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d058      	beq.n	8002b3e <HAL_GPIO_Init+0xfa>
 8002a8c:	4a93      	ldr	r2, [pc, #588]	@ (8002cdc <HAL_GPIO_Init+0x298>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d86f      	bhi.n	8002b72 <HAL_GPIO_Init+0x12e>
 8002a92:	4a93      	ldr	r2, [pc, #588]	@ (8002ce0 <HAL_GPIO_Init+0x29c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d052      	beq.n	8002b3e <HAL_GPIO_Init+0xfa>
 8002a98:	4a91      	ldr	r2, [pc, #580]	@ (8002ce0 <HAL_GPIO_Init+0x29c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d869      	bhi.n	8002b72 <HAL_GPIO_Init+0x12e>
 8002a9e:	4a91      	ldr	r2, [pc, #580]	@ (8002ce4 <HAL_GPIO_Init+0x2a0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d04c      	beq.n	8002b3e <HAL_GPIO_Init+0xfa>
 8002aa4:	4a8f      	ldr	r2, [pc, #572]	@ (8002ce4 <HAL_GPIO_Init+0x2a0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d863      	bhi.n	8002b72 <HAL_GPIO_Init+0x12e>
 8002aaa:	4a8f      	ldr	r2, [pc, #572]	@ (8002ce8 <HAL_GPIO_Init+0x2a4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d046      	beq.n	8002b3e <HAL_GPIO_Init+0xfa>
 8002ab0:	4a8d      	ldr	r2, [pc, #564]	@ (8002ce8 <HAL_GPIO_Init+0x2a4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d85d      	bhi.n	8002b72 <HAL_GPIO_Init+0x12e>
 8002ab6:	2b12      	cmp	r3, #18
 8002ab8:	d82a      	bhi.n	8002b10 <HAL_GPIO_Init+0xcc>
 8002aba:	2b12      	cmp	r3, #18
 8002abc:	d859      	bhi.n	8002b72 <HAL_GPIO_Init+0x12e>
 8002abe:	a201      	add	r2, pc, #4	@ (adr r2, 8002ac4 <HAL_GPIO_Init+0x80>)
 8002ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac4:	08002b3f 	.word	0x08002b3f
 8002ac8:	08002b19 	.word	0x08002b19
 8002acc:	08002b2b 	.word	0x08002b2b
 8002ad0:	08002b6d 	.word	0x08002b6d
 8002ad4:	08002b73 	.word	0x08002b73
 8002ad8:	08002b73 	.word	0x08002b73
 8002adc:	08002b73 	.word	0x08002b73
 8002ae0:	08002b73 	.word	0x08002b73
 8002ae4:	08002b73 	.word	0x08002b73
 8002ae8:	08002b73 	.word	0x08002b73
 8002aec:	08002b73 	.word	0x08002b73
 8002af0:	08002b73 	.word	0x08002b73
 8002af4:	08002b73 	.word	0x08002b73
 8002af8:	08002b73 	.word	0x08002b73
 8002afc:	08002b73 	.word	0x08002b73
 8002b00:	08002b73 	.word	0x08002b73
 8002b04:	08002b73 	.word	0x08002b73
 8002b08:	08002b21 	.word	0x08002b21
 8002b0c:	08002b35 	.word	0x08002b35
 8002b10:	4a76      	ldr	r2, [pc, #472]	@ (8002cec <HAL_GPIO_Init+0x2a8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d013      	beq.n	8002b3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b16:	e02c      	b.n	8002b72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	623b      	str	r3, [r7, #32]
          break;
 8002b1e:	e029      	b.n	8002b74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	3304      	adds	r3, #4
 8002b26:	623b      	str	r3, [r7, #32]
          break;
 8002b28:	e024      	b.n	8002b74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	3308      	adds	r3, #8
 8002b30:	623b      	str	r3, [r7, #32]
          break;
 8002b32:	e01f      	b.n	8002b74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	330c      	adds	r3, #12
 8002b3a:	623b      	str	r3, [r7, #32]
          break;
 8002b3c:	e01a      	b.n	8002b74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d102      	bne.n	8002b4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b46:	2304      	movs	r3, #4
 8002b48:	623b      	str	r3, [r7, #32]
          break;
 8002b4a:	e013      	b.n	8002b74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d105      	bne.n	8002b60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b54:	2308      	movs	r3, #8
 8002b56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69fa      	ldr	r2, [r7, #28]
 8002b5c:	611a      	str	r2, [r3, #16]
          break;
 8002b5e:	e009      	b.n	8002b74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b60:	2308      	movs	r3, #8
 8002b62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	615a      	str	r2, [r3, #20]
          break;
 8002b6a:	e003      	b.n	8002b74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	623b      	str	r3, [r7, #32]
          break;
 8002b70:	e000      	b.n	8002b74 <HAL_GPIO_Init+0x130>
          break;
 8002b72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2bff      	cmp	r3, #255	@ 0xff
 8002b78:	d801      	bhi.n	8002b7e <HAL_GPIO_Init+0x13a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	e001      	b.n	8002b82 <HAL_GPIO_Init+0x13e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3304      	adds	r3, #4
 8002b82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2bff      	cmp	r3, #255	@ 0xff
 8002b88:	d802      	bhi.n	8002b90 <HAL_GPIO_Init+0x14c>
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	e002      	b.n	8002b96 <HAL_GPIO_Init+0x152>
 8002b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b92:	3b08      	subs	r3, #8
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	210f      	movs	r1, #15
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	6a39      	ldr	r1, [r7, #32]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 80a9 	beq.w	8002d16 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bc4:	4b4a      	ldr	r3, [pc, #296]	@ (8002cf0 <HAL_GPIO_Init+0x2ac>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	4a49      	ldr	r2, [pc, #292]	@ (8002cf0 <HAL_GPIO_Init+0x2ac>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	6193      	str	r3, [r2, #24]
 8002bd0:	4b47      	ldr	r3, [pc, #284]	@ (8002cf0 <HAL_GPIO_Init+0x2ac>)
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bdc:	4a45      	ldr	r2, [pc, #276]	@ (8002cf4 <HAL_GPIO_Init+0x2b0>)
 8002bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	3302      	adds	r3, #2
 8002be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	220f      	movs	r2, #15
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a3d      	ldr	r2, [pc, #244]	@ (8002cf8 <HAL_GPIO_Init+0x2b4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00d      	beq.n	8002c24 <HAL_GPIO_Init+0x1e0>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a3c      	ldr	r2, [pc, #240]	@ (8002cfc <HAL_GPIO_Init+0x2b8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d007      	beq.n	8002c20 <HAL_GPIO_Init+0x1dc>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a3b      	ldr	r2, [pc, #236]	@ (8002d00 <HAL_GPIO_Init+0x2bc>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d101      	bne.n	8002c1c <HAL_GPIO_Init+0x1d8>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e004      	b.n	8002c26 <HAL_GPIO_Init+0x1e2>
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e002      	b.n	8002c26 <HAL_GPIO_Init+0x1e2>
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <HAL_GPIO_Init+0x1e2>
 8002c24:	2300      	movs	r3, #0
 8002c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c28:	f002 0203 	and.w	r2, r2, #3
 8002c2c:	0092      	lsls	r2, r2, #2
 8002c2e:	4093      	lsls	r3, r2
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c36:	492f      	ldr	r1, [pc, #188]	@ (8002cf4 <HAL_GPIO_Init+0x2b0>)
 8002c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3a:	089b      	lsrs	r3, r3, #2
 8002c3c:	3302      	adds	r3, #2
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d006      	beq.n	8002c5e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c50:	4b2c      	ldr	r3, [pc, #176]	@ (8002d04 <HAL_GPIO_Init+0x2c0>)
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	492b      	ldr	r1, [pc, #172]	@ (8002d04 <HAL_GPIO_Init+0x2c0>)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	608b      	str	r3, [r1, #8]
 8002c5c:	e006      	b.n	8002c6c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c5e:	4b29      	ldr	r3, [pc, #164]	@ (8002d04 <HAL_GPIO_Init+0x2c0>)
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	43db      	mvns	r3, r3
 8002c66:	4927      	ldr	r1, [pc, #156]	@ (8002d04 <HAL_GPIO_Init+0x2c0>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d006      	beq.n	8002c86 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c78:	4b22      	ldr	r3, [pc, #136]	@ (8002d04 <HAL_GPIO_Init+0x2c0>)
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	4921      	ldr	r1, [pc, #132]	@ (8002d04 <HAL_GPIO_Init+0x2c0>)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	60cb      	str	r3, [r1, #12]
 8002c84:	e006      	b.n	8002c94 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c86:	4b1f      	ldr	r3, [pc, #124]	@ (8002d04 <HAL_GPIO_Init+0x2c0>)
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	491d      	ldr	r1, [pc, #116]	@ (8002d04 <HAL_GPIO_Init+0x2c0>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d006      	beq.n	8002cae <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ca0:	4b18      	ldr	r3, [pc, #96]	@ (8002d04 <HAL_GPIO_Init+0x2c0>)
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	4917      	ldr	r1, [pc, #92]	@ (8002d04 <HAL_GPIO_Init+0x2c0>)
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	604b      	str	r3, [r1, #4]
 8002cac:	e006      	b.n	8002cbc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cae:	4b15      	ldr	r3, [pc, #84]	@ (8002d04 <HAL_GPIO_Init+0x2c0>)
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	4913      	ldr	r1, [pc, #76]	@ (8002d04 <HAL_GPIO_Init+0x2c0>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d01f      	beq.n	8002d08 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002d04 <HAL_GPIO_Init+0x2c0>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	490d      	ldr	r1, [pc, #52]	@ (8002d04 <HAL_GPIO_Init+0x2c0>)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	600b      	str	r3, [r1, #0]
 8002cd4:	e01f      	b.n	8002d16 <HAL_GPIO_Init+0x2d2>
 8002cd6:	bf00      	nop
 8002cd8:	10320000 	.word	0x10320000
 8002cdc:	10310000 	.word	0x10310000
 8002ce0:	10220000 	.word	0x10220000
 8002ce4:	10210000 	.word	0x10210000
 8002ce8:	10120000 	.word	0x10120000
 8002cec:	10110000 	.word	0x10110000
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40010000 	.word	0x40010000
 8002cf8:	40010800 	.word	0x40010800
 8002cfc:	40010c00 	.word	0x40010c00
 8002d00:	40011000 	.word	0x40011000
 8002d04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d08:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <HAL_GPIO_Init+0x2f4>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	4909      	ldr	r1, [pc, #36]	@ (8002d38 <HAL_GPIO_Init+0x2f4>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	3301      	adds	r3, #1
 8002d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d22:	fa22 f303 	lsr.w	r3, r2, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f47f ae96 	bne.w	8002a58 <HAL_GPIO_Init+0x14>
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	372c      	adds	r7, #44	@ 0x2c
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr
 8002d38:	40010400 	.word	0x40010400

08002d3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b089      	sub	sp, #36	@ 0x24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8002d4a:	e094      	b.n	8002e76 <HAL_GPIO_DeInit+0x13a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	4013      	ands	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 8087 	beq.w	8002e70 <HAL_GPIO_DeInit+0x134>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002d62:	4a4b      	ldr	r2, [pc, #300]	@ (8002e90 <HAL_GPIO_DeInit+0x154>)
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	3302      	adds	r3, #2
 8002d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	220f      	movs	r2, #15
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4013      	ands	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a43      	ldr	r2, [pc, #268]	@ (8002e94 <HAL_GPIO_DeInit+0x158>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d00d      	beq.n	8002da8 <HAL_GPIO_DeInit+0x6c>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a42      	ldr	r2, [pc, #264]	@ (8002e98 <HAL_GPIO_DeInit+0x15c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d007      	beq.n	8002da4 <HAL_GPIO_DeInit+0x68>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a41      	ldr	r2, [pc, #260]	@ (8002e9c <HAL_GPIO_DeInit+0x160>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d101      	bne.n	8002da0 <HAL_GPIO_DeInit+0x64>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e004      	b.n	8002daa <HAL_GPIO_DeInit+0x6e>
 8002da0:	2303      	movs	r3, #3
 8002da2:	e002      	b.n	8002daa <HAL_GPIO_DeInit+0x6e>
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <HAL_GPIO_DeInit+0x6e>
 8002da8:	2300      	movs	r3, #0
 8002daa:	69fa      	ldr	r2, [r7, #28]
 8002dac:	f002 0203 	and.w	r2, r2, #3
 8002db0:	0092      	lsls	r2, r2, #2
 8002db2:	4093      	lsls	r3, r2
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d132      	bne.n	8002e20 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002dba:	4b39      	ldr	r3, [pc, #228]	@ (8002ea0 <HAL_GPIO_DeInit+0x164>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	4937      	ldr	r1, [pc, #220]	@ (8002ea0 <HAL_GPIO_DeInit+0x164>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002dc8:	4b35      	ldr	r3, [pc, #212]	@ (8002ea0 <HAL_GPIO_DeInit+0x164>)
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	4933      	ldr	r1, [pc, #204]	@ (8002ea0 <HAL_GPIO_DeInit+0x164>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002dd6:	4b32      	ldr	r3, [pc, #200]	@ (8002ea0 <HAL_GPIO_DeInit+0x164>)
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	4930      	ldr	r1, [pc, #192]	@ (8002ea0 <HAL_GPIO_DeInit+0x164>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002de4:	4b2e      	ldr	r3, [pc, #184]	@ (8002ea0 <HAL_GPIO_DeInit+0x164>)
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	43db      	mvns	r3, r3
 8002dec:	492c      	ldr	r1, [pc, #176]	@ (8002ea0 <HAL_GPIO_DeInit+0x164>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	220f      	movs	r2, #15
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8002e02:	4a23      	ldr	r2, [pc, #140]	@ (8002e90 <HAL_GPIO_DeInit+0x154>)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	089b      	lsrs	r3, r3, #2
 8002e08:	3302      	adds	r3, #2
 8002e0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	43da      	mvns	r2, r3
 8002e12:	481f      	ldr	r0, [pc, #124]	@ (8002e90 <HAL_GPIO_DeInit+0x154>)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	400a      	ands	r2, r1
 8002e1a:	3302      	adds	r3, #2
 8002e1c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	2bff      	cmp	r3, #255	@ 0xff
 8002e24:	d801      	bhi.n	8002e2a <HAL_GPIO_DeInit+0xee>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	e001      	b.n	8002e2e <HAL_GPIO_DeInit+0xf2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2bff      	cmp	r3, #255	@ 0xff
 8002e34:	d802      	bhi.n	8002e3c <HAL_GPIO_DeInit+0x100>
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	e002      	b.n	8002e42 <HAL_GPIO_DeInit+0x106>
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	3b08      	subs	r3, #8
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	210f      	movs	r1, #15
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	401a      	ands	r2, r3
 8002e54:	2104      	movs	r1, #4
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	3301      	adds	r3, #1
 8002e74:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f47f af64 	bne.w	8002d4c <HAL_GPIO_DeInit+0x10>
  }
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	3724      	adds	r7, #36	@ 0x24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr
 8002e90:	40010000 	.word	0x40010000
 8002e94:	40010800 	.word	0x40010800
 8002e98:	40010c00 	.word	0x40010c00
 8002e9c:	40011000 	.word	0x40011000
 8002ea0:	40010400 	.word	0x40010400

08002ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	807b      	strh	r3, [r7, #2]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eb4:	787b      	ldrb	r3, [r7, #1]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eba:	887a      	ldrh	r2, [r7, #2]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ec0:	e003      	b.n	8002eca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ec2:	887b      	ldrh	r3, [r7, #2]
 8002ec4:	041a      	lsls	r2, r3, #16
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	611a      	str	r2, [r3, #16]
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	@ (8002ee8 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	601a      	str	r2, [r3, #0]
}
 8002ede:	bf00      	nop
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	420e0020 	.word	0x420e0020

08002eec <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8002ef0:	4b08      	ldr	r3, [pc, #32]	@ (8002f14 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a07      	ldr	r2, [pc, #28]	@ (8002f14 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002ef6:	f043 0302 	orr.w	r3, r3, #2
 8002efa:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002efc:	4b06      	ldr	r3, [pc, #24]	@ (8002f18 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	4a05      	ldr	r2, [pc, #20]	@ (8002f18 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002f02:	f043 0304 	orr.w	r3, r3, #4
 8002f06:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8002f08:	bf30      	wfi
}
 8002f0a:	bf00      	nop
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40007000 	.word	0x40007000
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e272      	b.n	8003414 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 8087 	beq.w	800304a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f3c:	4b92      	ldr	r3, [pc, #584]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d00c      	beq.n	8002f62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f48:	4b8f      	ldr	r3, [pc, #572]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d112      	bne.n	8002f7a <HAL_RCC_OscConfig+0x5e>
 8002f54:	4b8c      	ldr	r3, [pc, #560]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f60:	d10b      	bne.n	8002f7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f62:	4b89      	ldr	r3, [pc, #548]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d06c      	beq.n	8003048 <HAL_RCC_OscConfig+0x12c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d168      	bne.n	8003048 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e24c      	b.n	8003414 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f82:	d106      	bne.n	8002f92 <HAL_RCC_OscConfig+0x76>
 8002f84:	4b80      	ldr	r3, [pc, #512]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a7f      	ldr	r2, [pc, #508]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8002f8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	e02e      	b.n	8002ff0 <HAL_RCC_OscConfig+0xd4>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x98>
 8002f9a:	4b7b      	ldr	r3, [pc, #492]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a7a      	ldr	r2, [pc, #488]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	4b78      	ldr	r3, [pc, #480]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a77      	ldr	r2, [pc, #476]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	e01d      	b.n	8002ff0 <HAL_RCC_OscConfig+0xd4>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0xbc>
 8002fbe:	4b72      	ldr	r3, [pc, #456]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a71      	ldr	r2, [pc, #452]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	4b6f      	ldr	r3, [pc, #444]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a6e      	ldr	r2, [pc, #440]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	e00b      	b.n	8002ff0 <HAL_RCC_OscConfig+0xd4>
 8002fd8:	4b6b      	ldr	r3, [pc, #428]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a6a      	ldr	r2, [pc, #424]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8002fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	4b68      	ldr	r3, [pc, #416]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a67      	ldr	r2, [pc, #412]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8002fea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d013      	beq.n	8003020 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fe02 	bl	8001c00 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003000:	f7fe fdfe 	bl	8001c00 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b64      	cmp	r3, #100	@ 0x64
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e200      	b.n	8003414 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003012:	4b5d      	ldr	r3, [pc, #372]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCC_OscConfig+0xe4>
 800301e:	e014      	b.n	800304a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003020:	f7fe fdee 	bl	8001c00 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003028:	f7fe fdea 	bl	8001c00 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b64      	cmp	r3, #100	@ 0x64
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e1ec      	b.n	8003414 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800303a:	4b53      	ldr	r3, [pc, #332]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0x10c>
 8003046:	e000      	b.n	800304a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d063      	beq.n	800311e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003056:	4b4c      	ldr	r3, [pc, #304]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00b      	beq.n	800307a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003062:	4b49      	ldr	r3, [pc, #292]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 030c 	and.w	r3, r3, #12
 800306a:	2b08      	cmp	r3, #8
 800306c:	d11c      	bne.n	80030a8 <HAL_RCC_OscConfig+0x18c>
 800306e:	4b46      	ldr	r3, [pc, #280]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d116      	bne.n	80030a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307a:	4b43      	ldr	r3, [pc, #268]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d005      	beq.n	8003092 <HAL_RCC_OscConfig+0x176>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d001      	beq.n	8003092 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e1c0      	b.n	8003414 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003092:	4b3d      	ldr	r3, [pc, #244]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4939      	ldr	r1, [pc, #228]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030a6:	e03a      	b.n	800311e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d020      	beq.n	80030f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030b0:	4b36      	ldr	r3, [pc, #216]	@ (800318c <HAL_RCC_OscConfig+0x270>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b6:	f7fe fda3 	bl	8001c00 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030be:	f7fe fd9f 	bl	8001c00 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e1a1      	b.n	8003414 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f0      	beq.n	80030be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4927      	ldr	r1, [pc, #156]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	600b      	str	r3, [r1, #0]
 80030f0:	e015      	b.n	800311e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030f2:	4b26      	ldr	r3, [pc, #152]	@ (800318c <HAL_RCC_OscConfig+0x270>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7fe fd82 	bl	8001c00 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003100:	f7fe fd7e 	bl	8001c00 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e180      	b.n	8003414 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003112:	4b1d      	ldr	r3, [pc, #116]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d03a      	beq.n	80031a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d019      	beq.n	8003166 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003132:	4b17      	ldr	r3, [pc, #92]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8003134:	2201      	movs	r2, #1
 8003136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003138:	f7fe fd62 	bl	8001c00 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003140:	f7fe fd5e 	bl	8001c00 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e160      	b.n	8003414 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003152:	4b0d      	ldr	r3, [pc, #52]	@ (8003188 <HAL_RCC_OscConfig+0x26c>)
 8003154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800315e:	2001      	movs	r0, #1
 8003160:	f000 face 	bl	8003700 <RCC_Delay>
 8003164:	e01c      	b.n	80031a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003166:	4b0a      	ldr	r3, [pc, #40]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316c:	f7fe fd48 	bl	8001c00 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003172:	e00f      	b.n	8003194 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003174:	f7fe fd44 	bl	8001c00 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d908      	bls.n	8003194 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e146      	b.n	8003414 <HAL_RCC_OscConfig+0x4f8>
 8003186:	bf00      	nop
 8003188:	40021000 	.word	0x40021000
 800318c:	42420000 	.word	0x42420000
 8003190:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003194:	4b92      	ldr	r3, [pc, #584]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 8003196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1e9      	bne.n	8003174 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80a6 	beq.w	80032fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ae:	2300      	movs	r3, #0
 80031b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b2:	4b8b      	ldr	r3, [pc, #556]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10d      	bne.n	80031da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031be:	4b88      	ldr	r3, [pc, #544]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	4a87      	ldr	r2, [pc, #540]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 80031c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031c8:	61d3      	str	r3, [r2, #28]
 80031ca:	4b85      	ldr	r3, [pc, #532]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031d2:	60bb      	str	r3, [r7, #8]
 80031d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031d6:	2301      	movs	r3, #1
 80031d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031da:	4b82      	ldr	r3, [pc, #520]	@ (80033e4 <HAL_RCC_OscConfig+0x4c8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d118      	bne.n	8003218 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031e6:	4b7f      	ldr	r3, [pc, #508]	@ (80033e4 <HAL_RCC_OscConfig+0x4c8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a7e      	ldr	r2, [pc, #504]	@ (80033e4 <HAL_RCC_OscConfig+0x4c8>)
 80031ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f2:	f7fe fd05 	bl	8001c00 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031fa:	f7fe fd01 	bl	8001c00 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b64      	cmp	r3, #100	@ 0x64
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e103      	b.n	8003414 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320c:	4b75      	ldr	r3, [pc, #468]	@ (80033e4 <HAL_RCC_OscConfig+0x4c8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f0      	beq.n	80031fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d106      	bne.n	800322e <HAL_RCC_OscConfig+0x312>
 8003220:	4b6f      	ldr	r3, [pc, #444]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	4a6e      	ldr	r2, [pc, #440]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6213      	str	r3, [r2, #32]
 800322c:	e02d      	b.n	800328a <HAL_RCC_OscConfig+0x36e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10c      	bne.n	8003250 <HAL_RCC_OscConfig+0x334>
 8003236:	4b6a      	ldr	r3, [pc, #424]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	4a69      	ldr	r2, [pc, #420]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	6213      	str	r3, [r2, #32]
 8003242:	4b67      	ldr	r3, [pc, #412]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	4a66      	ldr	r2, [pc, #408]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 8003248:	f023 0304 	bic.w	r3, r3, #4
 800324c:	6213      	str	r3, [r2, #32]
 800324e:	e01c      	b.n	800328a <HAL_RCC_OscConfig+0x36e>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b05      	cmp	r3, #5
 8003256:	d10c      	bne.n	8003272 <HAL_RCC_OscConfig+0x356>
 8003258:	4b61      	ldr	r3, [pc, #388]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	4a60      	ldr	r2, [pc, #384]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 800325e:	f043 0304 	orr.w	r3, r3, #4
 8003262:	6213      	str	r3, [r2, #32]
 8003264:	4b5e      	ldr	r3, [pc, #376]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	4a5d      	ldr	r2, [pc, #372]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	6213      	str	r3, [r2, #32]
 8003270:	e00b      	b.n	800328a <HAL_RCC_OscConfig+0x36e>
 8003272:	4b5b      	ldr	r3, [pc, #364]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	4a5a      	ldr	r2, [pc, #360]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 8003278:	f023 0301 	bic.w	r3, r3, #1
 800327c:	6213      	str	r3, [r2, #32]
 800327e:	4b58      	ldr	r3, [pc, #352]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	4a57      	ldr	r2, [pc, #348]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 8003284:	f023 0304 	bic.w	r3, r3, #4
 8003288:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d015      	beq.n	80032be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003292:	f7fe fcb5 	bl	8001c00 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003298:	e00a      	b.n	80032b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329a:	f7fe fcb1 	bl	8001c00 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e0b1      	b.n	8003414 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b0:	4b4b      	ldr	r3, [pc, #300]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0ee      	beq.n	800329a <HAL_RCC_OscConfig+0x37e>
 80032bc:	e014      	b.n	80032e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032be:	f7fe fc9f 	bl	8001c00 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c4:	e00a      	b.n	80032dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c6:	f7fe fc9b 	bl	8001c00 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e09b      	b.n	8003414 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032dc:	4b40      	ldr	r3, [pc, #256]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1ee      	bne.n	80032c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032e8:	7dfb      	ldrb	r3, [r7, #23]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d105      	bne.n	80032fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ee:	4b3c      	ldr	r3, [pc, #240]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	4a3b      	ldr	r2, [pc, #236]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 80032f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 8087 	beq.w	8003412 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003304:	4b36      	ldr	r3, [pc, #216]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 030c 	and.w	r3, r3, #12
 800330c:	2b08      	cmp	r3, #8
 800330e:	d061      	beq.n	80033d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d146      	bne.n	80033a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003318:	4b33      	ldr	r3, [pc, #204]	@ (80033e8 <HAL_RCC_OscConfig+0x4cc>)
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331e:	f7fe fc6f 	bl	8001c00 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003326:	f7fe fc6b 	bl	8001c00 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e06d      	b.n	8003414 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003338:	4b29      	ldr	r3, [pc, #164]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1f0      	bne.n	8003326 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800334c:	d108      	bne.n	8003360 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800334e:	4b24      	ldr	r3, [pc, #144]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	4921      	ldr	r1, [pc, #132]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	4313      	orrs	r3, r2
 800335e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003360:	4b1f      	ldr	r3, [pc, #124]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a19      	ldr	r1, [r3, #32]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003370:	430b      	orrs	r3, r1
 8003372:	491b      	ldr	r1, [pc, #108]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 8003374:	4313      	orrs	r3, r2
 8003376:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003378:	4b1b      	ldr	r3, [pc, #108]	@ (80033e8 <HAL_RCC_OscConfig+0x4cc>)
 800337a:	2201      	movs	r2, #1
 800337c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337e:	f7fe fc3f 	bl	8001c00 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003386:	f7fe fc3b 	bl	8001c00 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e03d      	b.n	8003414 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003398:	4b11      	ldr	r3, [pc, #68]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f0      	beq.n	8003386 <HAL_RCC_OscConfig+0x46a>
 80033a4:	e035      	b.n	8003412 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a6:	4b10      	ldr	r3, [pc, #64]	@ (80033e8 <HAL_RCC_OscConfig+0x4cc>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ac:	f7fe fc28 	bl	8001c00 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b4:	f7fe fc24 	bl	8001c00 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e026      	b.n	8003414 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033c6:	4b06      	ldr	r3, [pc, #24]	@ (80033e0 <HAL_RCC_OscConfig+0x4c4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x498>
 80033d2:	e01e      	b.n	8003412 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d107      	bne.n	80033ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e019      	b.n	8003414 <HAL_RCC_OscConfig+0x4f8>
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40007000 	.word	0x40007000
 80033e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033ec:	4b0b      	ldr	r3, [pc, #44]	@ (800341c <HAL_RCC_OscConfig+0x500>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d106      	bne.n	800340e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800340a:	429a      	cmp	r2, r3
 800340c:	d001      	beq.n	8003412 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40021000 	.word	0x40021000

08003420 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0d0      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003434:	4b6a      	ldr	r3, [pc, #424]	@ (80035e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d910      	bls.n	8003464 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b67      	ldr	r3, [pc, #412]	@ (80035e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 0207 	bic.w	r2, r3, #7
 800344a:	4965      	ldr	r1, [pc, #404]	@ (80035e0 <HAL_RCC_ClockConfig+0x1c0>)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	4313      	orrs	r3, r2
 8003450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003452:	4b63      	ldr	r3, [pc, #396]	@ (80035e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d001      	beq.n	8003464 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0b8      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d020      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800347c:	4b59      	ldr	r3, [pc, #356]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	4a58      	ldr	r2, [pc, #352]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003486:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003494:	4b53      	ldr	r3, [pc, #332]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	4a52      	ldr	r2, [pc, #328]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 800349a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800349e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a0:	4b50      	ldr	r3, [pc, #320]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	494d      	ldr	r1, [pc, #308]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d040      	beq.n	8003540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	4b47      	ldr	r3, [pc, #284]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d115      	bne.n	80034fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e07f      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d107      	bne.n	80034ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034de:	4b41      	ldr	r3, [pc, #260]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e073      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ee:	4b3d      	ldr	r3, [pc, #244]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e06b      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034fe:	4b39      	ldr	r3, [pc, #228]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f023 0203 	bic.w	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4936      	ldr	r1, [pc, #216]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 800350c:	4313      	orrs	r3, r2
 800350e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003510:	f7fe fb76 	bl	8001c00 <HAL_GetTick>
 8003514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	e00a      	b.n	800352e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003518:	f7fe fb72 	bl	8001c00 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e053      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352e:	4b2d      	ldr	r3, [pc, #180]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f003 020c 	and.w	r2, r3, #12
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	429a      	cmp	r2, r3
 800353e:	d1eb      	bne.n	8003518 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003540:	4b27      	ldr	r3, [pc, #156]	@ (80035e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d210      	bcs.n	8003570 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354e:	4b24      	ldr	r3, [pc, #144]	@ (80035e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f023 0207 	bic.w	r2, r3, #7
 8003556:	4922      	ldr	r1, [pc, #136]	@ (80035e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	4313      	orrs	r3, r2
 800355c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800355e:	4b20      	ldr	r3, [pc, #128]	@ (80035e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d001      	beq.n	8003570 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e032      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800357c:	4b19      	ldr	r3, [pc, #100]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4916      	ldr	r1, [pc, #88]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 800358a:	4313      	orrs	r3, r2
 800358c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800359a:	4b12      	ldr	r3, [pc, #72]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	490e      	ldr	r1, [pc, #56]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035ae:	f000 f821 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 80035b2:	4602      	mov	r2, r0
 80035b4:	4b0b      	ldr	r3, [pc, #44]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	490a      	ldr	r1, [pc, #40]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 80035c0:	5ccb      	ldrb	r3, [r1, r3]
 80035c2:	fa22 f303 	lsr.w	r3, r2, r3
 80035c6:	4a09      	ldr	r2, [pc, #36]	@ (80035ec <HAL_RCC_ClockConfig+0x1cc>)
 80035c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035ca:	4b09      	ldr	r3, [pc, #36]	@ (80035f0 <HAL_RCC_ClockConfig+0x1d0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe fad4 	bl	8001b7c <HAL_InitTick>

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40022000 	.word	0x40022000
 80035e4:	40021000 	.word	0x40021000
 80035e8:	08007654 	.word	0x08007654
 80035ec:	20000000 	.word	0x20000000
 80035f0:	20000004 	.word	0x20000004

080035f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	2300      	movs	r3, #0
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	2300      	movs	r3, #0
 8003608:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800360e:	4b1e      	ldr	r3, [pc, #120]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x94>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 030c 	and.w	r3, r3, #12
 800361a:	2b04      	cmp	r3, #4
 800361c:	d002      	beq.n	8003624 <HAL_RCC_GetSysClockFreq+0x30>
 800361e:	2b08      	cmp	r3, #8
 8003620:	d003      	beq.n	800362a <HAL_RCC_GetSysClockFreq+0x36>
 8003622:	e027      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003624:	4b19      	ldr	r3, [pc, #100]	@ (800368c <HAL_RCC_GetSysClockFreq+0x98>)
 8003626:	613b      	str	r3, [r7, #16]
      break;
 8003628:	e027      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	0c9b      	lsrs	r3, r3, #18
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	4a17      	ldr	r2, [pc, #92]	@ (8003690 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003634:	5cd3      	ldrb	r3, [r2, r3]
 8003636:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d010      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003642:	4b11      	ldr	r3, [pc, #68]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x94>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	0c5b      	lsrs	r3, r3, #17
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	4a11      	ldr	r2, [pc, #68]	@ (8003694 <HAL_RCC_GetSysClockFreq+0xa0>)
 800364e:	5cd3      	ldrb	r3, [r2, r3]
 8003650:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a0d      	ldr	r2, [pc, #52]	@ (800368c <HAL_RCC_GetSysClockFreq+0x98>)
 8003656:	fb03 f202 	mul.w	r2, r3, r2
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	e004      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a0c      	ldr	r2, [pc, #48]	@ (8003698 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003668:	fb02 f303 	mul.w	r3, r2, r3
 800366c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	613b      	str	r3, [r7, #16]
      break;
 8003672:	e002      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003674:	4b05      	ldr	r3, [pc, #20]	@ (800368c <HAL_RCC_GetSysClockFreq+0x98>)
 8003676:	613b      	str	r3, [r7, #16]
      break;
 8003678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800367a:	693b      	ldr	r3, [r7, #16]
}
 800367c:	4618      	mov	r0, r3
 800367e:	371c      	adds	r7, #28
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40021000 	.word	0x40021000
 800368c:	007a1200 	.word	0x007a1200
 8003690:	0800766c 	.word	0x0800766c
 8003694:	0800767c 	.word	0x0800767c
 8003698:	003d0900 	.word	0x003d0900

0800369c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a0:	4b02      	ldr	r3, [pc, #8]	@ (80036ac <HAL_RCC_GetHCLKFreq+0x10>)
 80036a2:	681b      	ldr	r3, [r3, #0]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr
 80036ac:	20000000 	.word	0x20000000

080036b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036b4:	f7ff fff2 	bl	800369c <HAL_RCC_GetHCLKFreq>
 80036b8:	4602      	mov	r2, r0
 80036ba:	4b05      	ldr	r3, [pc, #20]	@ (80036d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	0a1b      	lsrs	r3, r3, #8
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	4903      	ldr	r1, [pc, #12]	@ (80036d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036c6:	5ccb      	ldrb	r3, [r1, r3]
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40021000 	.word	0x40021000
 80036d4:	08007664 	.word	0x08007664

080036d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036dc:	f7ff ffde 	bl	800369c <HAL_RCC_GetHCLKFreq>
 80036e0:	4602      	mov	r2, r0
 80036e2:	4b05      	ldr	r3, [pc, #20]	@ (80036f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	0adb      	lsrs	r3, r3, #11
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	4903      	ldr	r1, [pc, #12]	@ (80036fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ee:	5ccb      	ldrb	r3, [r1, r3]
 80036f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40021000 	.word	0x40021000
 80036fc:	08007664 	.word	0x08007664

08003700 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003708:	4b0a      	ldr	r3, [pc, #40]	@ (8003734 <RCC_Delay+0x34>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a0a      	ldr	r2, [pc, #40]	@ (8003738 <RCC_Delay+0x38>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	0a5b      	lsrs	r3, r3, #9
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	fb02 f303 	mul.w	r3, r2, r3
 800371a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800371c:	bf00      	nop
  }
  while (Delay --);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1e5a      	subs	r2, r3, #1
 8003722:	60fa      	str	r2, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1f9      	bne.n	800371c <RCC_Delay+0x1c>
}
 8003728:	bf00      	nop
 800372a:	bf00      	nop
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr
 8003734:	20000000 	.word	0x20000000
 8003738:	10624dd3 	.word	0x10624dd3

0800373c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	2300      	movs	r3, #0
 800374a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d07d      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003758:	2300      	movs	r3, #0
 800375a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375c:	4b4f      	ldr	r3, [pc, #316]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10d      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003768:	4b4c      	ldr	r3, [pc, #304]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	4a4b      	ldr	r2, [pc, #300]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003772:	61d3      	str	r3, [r2, #28]
 8003774:	4b49      	ldr	r3, [pc, #292]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003780:	2301      	movs	r3, #1
 8003782:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003784:	4b46      	ldr	r3, [pc, #280]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378c:	2b00      	cmp	r3, #0
 800378e:	d118      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003790:	4b43      	ldr	r3, [pc, #268]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a42      	ldr	r2, [pc, #264]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800379a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800379c:	f7fe fa30 	bl	8001c00 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a2:	e008      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a4:	f7fe fa2c 	bl	8001c00 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b64      	cmp	r3, #100	@ 0x64
 80037b0:	d901      	bls.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e06d      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b6:	4b3a      	ldr	r3, [pc, #232]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f0      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037c2:	4b36      	ldr	r3, [pc, #216]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d02e      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d027      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037e0:	4b2e      	ldr	r3, [pc, #184]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037ea:	4b2e      	ldr	r3, [pc, #184]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037f0:	4b2c      	ldr	r3, [pc, #176]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037f6:	4a29      	ldr	r2, [pc, #164]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d014      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003806:	f7fe f9fb 	bl	8001c00 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380c:	e00a      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380e:	f7fe f9f7 	bl	8001c00 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381c:	4293      	cmp	r3, r2
 800381e:	d901      	bls.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e036      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003824:	4b1d      	ldr	r3, [pc, #116]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0ee      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003830:	4b1a      	ldr	r3, [pc, #104]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4917      	ldr	r1, [pc, #92]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383e:	4313      	orrs	r3, r2
 8003840:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003842:	7dfb      	ldrb	r3, [r7, #23]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d105      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003848:	4b14      	ldr	r3, [pc, #80]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	4a13      	ldr	r2, [pc, #76]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003852:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003860:	4b0e      	ldr	r3, [pc, #56]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	490b      	ldr	r1, [pc, #44]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386e:	4313      	orrs	r3, r2
 8003870:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0310 	and.w	r3, r3, #16
 800387a:	2b00      	cmp	r3, #0
 800387c:	d008      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800387e:	4b07      	ldr	r3, [pc, #28]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	4904      	ldr	r1, [pc, #16]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388c:	4313      	orrs	r3, r2
 800388e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40021000 	.word	0x40021000
 80038a0:	40007000 	.word	0x40007000
 80038a4:	42420440 	.word	0x42420440

080038a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	2300      	movs	r3, #0
 80038ba:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	2300      	movs	r3, #0
 80038c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b10      	cmp	r3, #16
 80038c8:	d00a      	beq.n	80038e0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b10      	cmp	r3, #16
 80038ce:	f200 808a 	bhi.w	80039e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d045      	beq.n	8003964 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d075      	beq.n	80039ca <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80038de:	e082      	b.n	80039e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80038e0:	4b46      	ldr	r3, [pc, #280]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80038e6:	4b45      	ldr	r3, [pc, #276]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d07b      	beq.n	80039ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	0c9b      	lsrs	r3, r3, #18
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	4a41      	ldr	r2, [pc, #260]	@ (8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80038fc:	5cd3      	ldrb	r3, [r2, r3]
 80038fe:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d015      	beq.n	8003936 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800390a:	4b3c      	ldr	r3, [pc, #240]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	0c5b      	lsrs	r3, r3, #17
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	4a3b      	ldr	r2, [pc, #236]	@ (8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003916:	5cd3      	ldrb	r3, [r2, r3]
 8003918:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00d      	beq.n	8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003924:	4a38      	ldr	r2, [pc, #224]	@ (8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	fbb2 f2f3 	udiv	r2, r2, r3
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	fb02 f303 	mul.w	r3, r2, r3
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	e004      	b.n	8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4a34      	ldr	r2, [pc, #208]	@ (8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800393a:	fb02 f303 	mul.w	r3, r2, r3
 800393e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003940:	4b2e      	ldr	r3, [pc, #184]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003948:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800394c:	d102      	bne.n	8003954 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	61bb      	str	r3, [r7, #24]
      break;
 8003952:	e04a      	b.n	80039ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	4a2d      	ldr	r2, [pc, #180]	@ (8003a10 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	085b      	lsrs	r3, r3, #1
 8003960:	61bb      	str	r3, [r7, #24]
      break;
 8003962:	e042      	b.n	80039ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003964:	4b25      	ldr	r3, [pc, #148]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003970:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003974:	d108      	bne.n	8003988 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003980:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003984:	61bb      	str	r3, [r7, #24]
 8003986:	e01f      	b.n	80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800398e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003992:	d109      	bne.n	80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003994:	4b19      	ldr	r3, [pc, #100]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80039a0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	e00f      	b.n	80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039b2:	d11c      	bne.n	80039ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80039b4:	4b11      	ldr	r3, [pc, #68]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d016      	beq.n	80039ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80039c0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80039c4:	61bb      	str	r3, [r7, #24]
      break;
 80039c6:	e012      	b.n	80039ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80039c8:	e011      	b.n	80039ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80039ca:	f7ff fe85 	bl	80036d8 <HAL_RCC_GetPCLK2Freq>
 80039ce:	4602      	mov	r2, r0
 80039d0:	4b0a      	ldr	r3, [pc, #40]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	0b9b      	lsrs	r3, r3, #14
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	3301      	adds	r3, #1
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e2:	61bb      	str	r3, [r7, #24]
      break;
 80039e4:	e004      	b.n	80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80039e6:	bf00      	nop
 80039e8:	e002      	b.n	80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80039ea:	bf00      	nop
 80039ec:	e000      	b.n	80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80039ee:	bf00      	nop
    }
  }
  return (frequency);
 80039f0:	69bb      	ldr	r3, [r7, #24]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3720      	adds	r7, #32
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	08007680 	.word	0x08007680
 8003a04:	08007690 	.word	0x08007690
 8003a08:	007a1200 	.word	0x007a1200
 8003a0c:	003d0900 	.word	0x003d0900
 8003a10:	aaaaaaab 	.word	0xaaaaaaab

08003a14 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e07a      	b.n	8003b20 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	7c5b      	ldrb	r3, [r3, #17]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d105      	bne.n	8003a40 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fd ff12 	bl	8001864 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fbae 	bl	80041a8 <HAL_RTC_WaitForSynchro>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d004      	beq.n	8003a5c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2204      	movs	r2, #4
 8003a56:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e061      	b.n	8003b20 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fc67 	bl	8004330 <RTC_EnterInitMode>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d004      	beq.n	8003a72 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e056      	b.n	8003b20 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0207 	bic.w	r2, r2, #7
 8003a80:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d005      	beq.n	8003a96 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003a8a:	4b27      	ldr	r3, [pc, #156]	@ (8003b28 <HAL_RTC_Init+0x114>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8e:	4a26      	ldr	r2, [pc, #152]	@ (8003b28 <HAL_RTC_Init+0x114>)
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003a96:	4b24      	ldr	r3, [pc, #144]	@ (8003b28 <HAL_RTC_Init+0x114>)
 8003a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9a:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	4921      	ldr	r1, [pc, #132]	@ (8003b28 <HAL_RTC_Init+0x114>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab0:	d003      	beq.n	8003aba <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	e00e      	b.n	8003ad8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003aba:	2001      	movs	r0, #1
 8003abc:	f7ff fef4 	bl	80038a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ac0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d104      	bne.n	8003ad2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2204      	movs	r2, #4
 8003acc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e026      	b.n	8003b20 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	0c1a      	lsrs	r2, r3, #16
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f002 020f 	and.w	r2, r2, #15
 8003ae4:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	b292      	uxth	r2, r2
 8003aee:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fc45 	bl	8004380 <RTC_ExitInitMode>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d004      	beq.n	8003b06 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2204      	movs	r2, #4
 8003b00:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e00c      	b.n	8003b20 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
  }
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40006c00 	.word	0x40006c00

08003b2c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003b2c:	b590      	push	{r4, r7, lr}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <HAL_RTC_SetTime+0x20>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e080      	b.n	8003c52 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	7c1b      	ldrb	r3, [r3, #16]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_RTC_SetTime+0x30>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e07a      	b.n	8003c52 <HAL_RTC_SetTime+0x126>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2202      	movs	r2, #2
 8003b66:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d113      	bne.n	8003b96 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003b78:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	785b      	ldrb	r3, [r3, #1]
 8003b80:	4619      	mov	r1, r3
 8003b82:	460b      	mov	r3, r1
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	1a5b      	subs	r3, r3, r1
 8003b88:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003b8a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003b90:	4413      	add	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	e01e      	b.n	8003bd4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 fc35 	bl	800440a <RTC_Bcd2ToByte>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003ba8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	785b      	ldrb	r3, [r3, #1]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 fc2a 	bl	800440a <RTC_Bcd2ToByte>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4613      	mov	r3, r2
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	1a9b      	subs	r3, r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003bc2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	789b      	ldrb	r3, [r3, #2]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fc1e 	bl	800440a <RTC_Bcd2ToByte>
 8003bce:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003bd0:	4423      	add	r3, r4
 8003bd2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003bd4:	6979      	ldr	r1, [r7, #20]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 fb43 	bl	8004262 <RTC_WriteTimeCounter>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d007      	beq.n	8003bf2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2204      	movs	r2, #4
 8003be6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e02f      	b.n	8003c52 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0205 	bic.w	r2, r2, #5
 8003c00:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 fb54 	bl	80042b0 <RTC_ReadAlarmCounter>
 8003c08:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c10:	d018      	beq.n	8003c44 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d214      	bcs.n	8003c44 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003c20:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003c24:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003c26:	6939      	ldr	r1, [r7, #16]
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 fb5a 	bl	80042e2 <RTC_WriteAlarmCounter>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2204      	movs	r2, #4
 8003c38:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e006      	b.n	8003c52 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003c50:	2300      	movs	r3, #0
  }
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd90      	pop	{r4, r7, pc}
	...

08003c5c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61bb      	str	r3, [r7, #24]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61fb      	str	r3, [r7, #28]
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	2300      	movs	r3, #0
 8003c76:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <HAL_RTC_GetTime+0x28>
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0b5      	b.n	8003df4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e0ac      	b.n	8003df4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 fab1 	bl	8004202 <RTC_ReadTimeCounter>
 8003ca0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	4a55      	ldr	r2, [pc, #340]	@ (8003dfc <HAL_RTC_GetTime+0x1a0>)
 8003ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8003caa:	0adb      	lsrs	r3, r3, #11
 8003cac:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4b52      	ldr	r3, [pc, #328]	@ (8003dfc <HAL_RTC_GetTime+0x1a0>)
 8003cb2:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb6:	0adb      	lsrs	r3, r3, #11
 8003cb8:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8003cbc:	fb01 f303 	mul.w	r3, r1, r3
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	4a4f      	ldr	r2, [pc, #316]	@ (8003e00 <HAL_RTC_GetTime+0x1a4>)
 8003cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	4a4a      	ldr	r2, [pc, #296]	@ (8003dfc <HAL_RTC_GetTime+0x1a0>)
 8003cd4:	fba2 1203 	umull	r1, r2, r2, r3
 8003cd8:	0ad2      	lsrs	r2, r2, #11
 8003cda:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8003cde:	fb01 f202 	mul.w	r2, r1, r2
 8003ce2:	1a9a      	subs	r2, r3, r2
 8003ce4:	4b46      	ldr	r3, [pc, #280]	@ (8003e00 <HAL_RTC_GetTime+0x1a4>)
 8003ce6:	fba3 1302 	umull	r1, r3, r3, r2
 8003cea:	0959      	lsrs	r1, r3, #5
 8003cec:	460b      	mov	r3, r1
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	1a5b      	subs	r3, r3, r1
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	1ad1      	subs	r1, r2, r3
 8003cf6:	b2ca      	uxtb	r2, r1
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	2b17      	cmp	r3, #23
 8003d00:	d955      	bls.n	8003dae <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4a3f      	ldr	r2, [pc, #252]	@ (8003e04 <HAL_RTC_GetTime+0x1a8>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	091b      	lsrs	r3, r3, #4
 8003d0c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003d0e:	6939      	ldr	r1, [r7, #16]
 8003d10:	4b3c      	ldr	r3, [pc, #240]	@ (8003e04 <HAL_RTC_GetTime+0x1a8>)
 8003d12:	fba3 2301 	umull	r2, r3, r3, r1
 8003d16:	091a      	lsrs	r2, r3, #4
 8003d18:	4613      	mov	r3, r2
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	4413      	add	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	1aca      	subs	r2, r1, r3
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 fac1 	bl	80042b0 <RTC_ReadAlarmCounter>
 8003d2e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d36:	d008      	beq.n	8003d4a <HAL_RTC_GetTime+0xee>
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d904      	bls.n	8003d4a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003d40:	69fa      	ldr	r2, [r7, #28]
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	61fb      	str	r3, [r7, #28]
 8003d48:	e002      	b.n	8003d50 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	4a2d      	ldr	r2, [pc, #180]	@ (8003e08 <HAL_RTC_GetTime+0x1ac>)
 8003d54:	fb02 f303 	mul.w	r3, r2, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003d5e:	69b9      	ldr	r1, [r7, #24]
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 fa7e 	bl	8004262 <RTC_WriteTimeCounter>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e041      	b.n	8003df4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d76:	d00c      	beq.n	8003d92 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003d78:	69fa      	ldr	r2, [r7, #28]
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003d80:	69f9      	ldr	r1, [r7, #28]
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 faad 	bl	80042e2 <RTC_WriteAlarmCounter>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e030      	b.n	8003df4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003d92:	69f9      	ldr	r1, [r7, #28]
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 faa4 	bl	80042e2 <RTC_WriteAlarmCounter>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e027      	b.n	8003df4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003da4:	6979      	ldr	r1, [r7, #20]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 fb4c 	bl	8004444 <RTC_DateUpdate>
 8003dac:	e003      	b.n	8003db6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d01a      	beq.n	8003df2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 fb05 	bl	80043d0 <RTC_ByteToBcd2>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	461a      	mov	r2, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	785b      	ldrb	r3, [r3, #1]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fafc 	bl	80043d0 <RTC_ByteToBcd2>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	789b      	ldrb	r3, [r3, #2]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 faf3 	bl	80043d0 <RTC_ByteToBcd2>
 8003dea:	4603      	mov	r3, r0
 8003dec:	461a      	mov	r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3720      	adds	r7, #32
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	91a2b3c5 	.word	0x91a2b3c5
 8003e00:	88888889 	.word	0x88888889
 8003e04:	aaaaaaab 	.word	0xaaaaaaab
 8003e08:	00015180 	.word	0x00015180

08003e0c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61fb      	str	r3, [r7, #28]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	61bb      	str	r3, [r7, #24]
 8003e20:	2300      	movs	r3, #0
 8003e22:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <HAL_RTC_SetDate+0x24>
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e097      	b.n	8003f64 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	7c1b      	ldrb	r3, [r3, #16]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_RTC_SetDate+0x34>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e091      	b.n	8003f64 <HAL_RTC_SetDate+0x158>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2201      	movs	r2, #1
 8003e44:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2202      	movs	r2, #2
 8003e4a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10c      	bne.n	8003e6c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	78da      	ldrb	r2, [r3, #3]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	785a      	ldrb	r2, [r3, #1]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	789a      	ldrb	r2, [r3, #2]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	739a      	strb	r2, [r3, #14]
 8003e6a:	e01a      	b.n	8003ea2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	78db      	ldrb	r3, [r3, #3]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 faca 	bl	800440a <RTC_Bcd2ToByte>
 8003e76:	4603      	mov	r3, r0
 8003e78:	461a      	mov	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	785b      	ldrb	r3, [r3, #1]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fac1 	bl	800440a <RTC_Bcd2ToByte>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	789b      	ldrb	r3, [r3, #2]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 fab8 	bl	800440a <RTC_Bcd2ToByte>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	7bdb      	ldrb	r3, [r3, #15]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	7b59      	ldrb	r1, [r3, #13]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	7b9b      	ldrb	r3, [r3, #14]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f000 fba3 	bl	80045fc <RTC_WeekDayNum>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	461a      	mov	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	7b1a      	ldrb	r2, [r3, #12]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 f99b 	bl	8004202 <RTC_ReadTimeCounter>
 8003ecc:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	4a26      	ldr	r2, [pc, #152]	@ (8003f6c <HAL_RTC_SetDate+0x160>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	0adb      	lsrs	r3, r3, #11
 8003ed8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2b18      	cmp	r3, #24
 8003ede:	d93a      	bls.n	8003f56 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	4a23      	ldr	r2, [pc, #140]	@ (8003f70 <HAL_RTC_SetDate+0x164>)
 8003ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	4a22      	ldr	r2, [pc, #136]	@ (8003f74 <HAL_RTC_SetDate+0x168>)
 8003eec:	fb02 f303 	mul.w	r3, r2, r3
 8003ef0:	69fa      	ldr	r2, [r7, #28]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003ef6:	69f9      	ldr	r1, [r7, #28]
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f9b2 	bl	8004262 <RTC_WriteTimeCounter>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2204      	movs	r2, #4
 8003f08:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e027      	b.n	8003f64 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 f9cb 	bl	80042b0 <RTC_ReadAlarmCounter>
 8003f1a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d018      	beq.n	8003f56 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d214      	bcs.n	8003f56 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003f32:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003f36:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003f38:	69b9      	ldr	r1, [r7, #24]
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 f9d1 	bl	80042e2 <RTC_WriteAlarmCounter>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2204      	movs	r2, #4
 8003f4a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e006      	b.n	8003f64 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3720      	adds	r7, #32
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	91a2b3c5 	.word	0x91a2b3c5
 8003f70:	aaaaaaab 	.word	0xaaaaaaab
 8003f74:	00015180 	.word	0x00015180

08003f78 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003f78:	b590      	push	{r4, r7, lr}
 8003f7a:	b089      	sub	sp, #36	@ 0x24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8003f88:	f107 0314 	add.w	r3, r7, #20
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	460a      	mov	r2, r1
 8003f90:	801a      	strh	r2, [r3, #0]
 8003f92:	460a      	mov	r2, r1
 8003f94:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_RTC_SetAlarm_IT+0x2a>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e099      	b.n	80040da <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	7c1b      	ldrb	r3, [r3, #16]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_RTC_SetAlarm_IT+0x3a>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e093      	b.n	80040da <HAL_RTC_SetAlarm_IT+0x162>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003fbe:	f107 0314 	add.w	r3, r7, #20
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f7ff fe48 	bl	8003c5c <HAL_RTC_GetTime>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e081      	b.n	80040da <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003fd6:	7d3b      	ldrb	r3, [r7, #20]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003fde:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8003fe2:	7d7b      	ldrb	r3, [r7, #21]
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	1a5b      	subs	r3, r3, r1
 8003fec:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003fee:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8003ff0:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003ff2:	4413      	add	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d113      	bne.n	8004024 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	461a      	mov	r2, r3
 8004002:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8004006:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	785b      	ldrb	r3, [r3, #1]
 800400e:	4619      	mov	r1, r3
 8004010:	460b      	mov	r3, r1
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	1a5b      	subs	r3, r3, r1
 8004016:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004018:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800401e:	4413      	add	r3, r2
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	e01e      	b.n	8004062 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f000 f9ee 	bl	800440a <RTC_Bcd2ToByte>
 800402e:	4603      	mov	r3, r0
 8004030:	461a      	mov	r2, r3
 8004032:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8004036:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	785b      	ldrb	r3, [r3, #1]
 800403e:	4618      	mov	r0, r3
 8004040:	f000 f9e3 	bl	800440a <RTC_Bcd2ToByte>
 8004044:	4603      	mov	r3, r0
 8004046:	461a      	mov	r2, r3
 8004048:	4613      	mov	r3, r2
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004050:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	789b      	ldrb	r3, [r3, #2]
 8004056:	4618      	mov	r0, r3
 8004058:	f000 f9d7 	bl	800440a <RTC_Bcd2ToByte>
 800405c:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800405e:	4423      	add	r3, r4
 8004060:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8004062:	69fa      	ldr	r2, [r7, #28]
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	429a      	cmp	r2, r3
 8004068:	d205      	bcs.n	8004076 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8004070:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004074:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004076:	69f9      	ldr	r1, [r7, #28]
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 f932 	bl	80042e2 <RTC_WriteAlarmCounter>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d007      	beq.n	8004094 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2204      	movs	r2, #4
 8004088:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e022      	b.n	80040da <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0202 	bic.w	r2, r2, #2
 80040a2:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0202 	orr.w	r2, r2, #2
 80040b2:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80040b4:	4b0b      	ldr	r3, [pc, #44]	@ (80040e4 <HAL_RTC_SetAlarm_IT+0x16c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a0a      	ldr	r2, [pc, #40]	@ (80040e4 <HAL_RTC_SetAlarm_IT+0x16c>)
 80040ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040be:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80040c0:	4b08      	ldr	r3, [pc, #32]	@ (80040e4 <HAL_RTC_SetAlarm_IT+0x16c>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	4a07      	ldr	r2, [pc, #28]	@ (80040e4 <HAL_RTC_SetAlarm_IT+0x16c>)
 80040c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ca:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2201      	movs	r2, #1
 80040d0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80040d8:	2300      	movs	r3, #0
  }
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3724      	adds	r7, #36	@ 0x24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd90      	pop	{r4, r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40010400 	.word	0x40010400

080040e8 <HAL_RTC_DeactivateAlarm>:
  *          This parameter can be one of the following values:
  *            @arg RTC_ALARM_A:  AlarmA
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Check input parameters */
  if (hrtc == NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_RTC_DeactivateAlarm+0x14>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e04e      	b.n	800419a <HAL_RTC_DeactivateAlarm+0xb2>
  }

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	7c1b      	ldrb	r3, [r3, #16]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_RTC_DeactivateAlarm+0x20>
 8004104:	2302      	movs	r3, #2
 8004106:	e048      	b.n	800419a <HAL_RTC_DeactivateAlarm+0xb2>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2202      	movs	r2, #2
 8004112:	745a      	strb	r2, [r3, #17]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0202 	bic.w	r2, r2, #2
 8004122:	601a      	str	r2, [r3, #0]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f903 	bl	8004330 <RTC_EnterInitMode>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <HAL_RTC_DeactivateAlarm+0x58>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2204      	movs	r2, #4
 8004134:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e02c      	b.n	800419a <HAL_RTC_DeactivateAlarm+0xb2>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0202 	bic.w	r2, r2, #2
 800414e:	605a      	str	r2, [r3, #4]

    /* Set to default values ALRH & ALRL registers */
    WRITE_REG(hrtc->Instance->ALRH, RTC_ALARM_RESETVALUE_REGISTER);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004158:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, RTC_ALARM_RESETVALUE_REGISTER);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004162:	625a      	str	r2, [r3, #36]	@ 0x24

    /* RTC Alarm Interrupt Configuration: Disable EXTI configuration */
    __HAL_RTC_ALARM_EXTI_DISABLE_IT();
 8004164:	4b0f      	ldr	r3, [pc, #60]	@ (80041a4 <HAL_RTC_DeactivateAlarm+0xbc>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a0e      	ldr	r2, [pc, #56]	@ (80041a4 <HAL_RTC_DeactivateAlarm+0xbc>)
 800416a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800416e:	6013      	str	r3, [r2, #0]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f905 	bl	8004380 <RTC_ExitInitMode>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <HAL_RTC_DeactivateAlarm+0xa4>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2204      	movs	r2, #4
 8004180:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e006      	b.n	800419a <HAL_RTC_DeactivateAlarm+0xb2>
    }
  }
  hrtc->State = HAL_RTC_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40010400 	.word	0x40010400

080041a8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e01d      	b.n	80041fa <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0208 	bic.w	r2, r2, #8
 80041cc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80041ce:	f7fd fd17 	bl	8001c00 <HAL_GetTick>
 80041d2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80041d4:	e009      	b.n	80041ea <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80041d6:	f7fd fd13 	bl	8001c00 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041e4:	d901      	bls.n	80041ea <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e007      	b.n	80041fa <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0ee      	beq.n	80041d6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004202:	b480      	push	{r7}
 8004204:	b087      	sub	sp, #28
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	827b      	strh	r3, [r7, #18]
 800420e:	2300      	movs	r3, #0
 8004210:	823b      	strh	r3, [r7, #16]
 8004212:	2300      	movs	r3, #0
 8004214:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004232:	8a7a      	ldrh	r2, [r7, #18]
 8004234:	8a3b      	ldrh	r3, [r7, #16]
 8004236:	429a      	cmp	r2, r3
 8004238:	d008      	beq.n	800424c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800423a:	8a3b      	ldrh	r3, [r7, #16]
 800423c:	041a      	lsls	r2, r3, #16
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	b29b      	uxth	r3, r3
 8004246:	4313      	orrs	r3, r2
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	e004      	b.n	8004256 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800424c:	8a7b      	ldrh	r3, [r7, #18]
 800424e:	041a      	lsls	r2, r3, #16
 8004250:	89fb      	ldrh	r3, [r7, #14]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004256:	697b      	ldr	r3, [r7, #20]
}
 8004258:	4618      	mov	r0, r3
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr

08004262 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f85d 	bl	8004330 <RTC_EnterInitMode>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	73fb      	strb	r3, [r7, #15]
 8004280:	e011      	b.n	80042a6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	0c12      	lsrs	r2, r2, #16
 800428a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	b292      	uxth	r2, r2
 8004294:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f872 	bl	8004380 <RTC_ExitInitMode>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	81fb      	strh	r3, [r7, #14]
 80042bc:	2300      	movs	r3, #0
 80042be:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ce:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80042d0:	89fb      	ldrh	r3, [r7, #14]
 80042d2:	041a      	lsls	r2, r3, #16
 80042d4:	89bb      	ldrh	r3, [r7, #12]
 80042d6:	4313      	orrs	r3, r2
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr

080042e2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f81d 	bl	8004330 <RTC_EnterInitMode>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	73fb      	strb	r3, [r7, #15]
 8004300:	e011      	b.n	8004326 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	0c12      	lsrs	r2, r2, #16
 800430a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	b292      	uxth	r2, r2
 8004314:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f832 	bl	8004380 <RTC_ExitInitMode>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004326:	7bfb      	ldrb	r3, [r7, #15]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800433c:	f7fd fc60 	bl	8001c00 <HAL_GetTick>
 8004340:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004342:	e009      	b.n	8004358 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004344:	f7fd fc5c 	bl	8001c00 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004352:	d901      	bls.n	8004358 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e00f      	b.n	8004378 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 0320 	and.w	r3, r3, #32
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0ee      	beq.n	8004344 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f042 0210 	orr.w	r2, r2, #16
 8004374:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0210 	bic.w	r2, r2, #16
 800439a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800439c:	f7fd fc30 	bl	8001c00 <HAL_GetTick>
 80043a0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80043a2:	e009      	b.n	80043b8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80043a4:	f7fd fc2c 	bl	8001c00 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043b2:	d901      	bls.n	80043b8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e007      	b.n	80043c8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0ee      	beq.n	80043a4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80043de:	e005      	b.n	80043ec <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3301      	adds	r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	3b0a      	subs	r3, #10
 80043ea:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	2b09      	cmp	r3, #9
 80043f0:	d8f6      	bhi.n	80043e0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	79fb      	ldrb	r3, [r7, #7]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	b2db      	uxtb	r3, r3
}
 8004400:	4618      	mov	r0, r3
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	4770      	bx	lr

0800440a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	4603      	mov	r3, r0
 8004412:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004418:	79fb      	ldrb	r3, [r7, #7]
 800441a:	091b      	lsrs	r3, r3, #4
 800441c:	b2db      	uxtb	r3, r3
 800441e:	461a      	mov	r2, r3
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800442a:	79fb      	ldrb	r3, [r7, #7]
 800442c:	f003 030f 	and.w	r3, r3, #15
 8004430:	b2da      	uxtb	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	4413      	add	r3, r2
 8004438:	b2db      	uxtb	r3, r3
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr

08004444 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	2300      	movs	r3, #0
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800445a:	2300      	movs	r3, #0
 800445c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	7bdb      	ldrb	r3, [r3, #15]
 8004462:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	7b5b      	ldrb	r3, [r3, #13]
 8004468:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	7b9b      	ldrb	r3, [r3, #14]
 800446e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004470:	2300      	movs	r3, #0
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	e06f      	b.n	8004556 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d011      	beq.n	80044a0 <RTC_DateUpdate+0x5c>
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	2b03      	cmp	r3, #3
 8004480:	d00e      	beq.n	80044a0 <RTC_DateUpdate+0x5c>
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	2b05      	cmp	r3, #5
 8004486:	d00b      	beq.n	80044a0 <RTC_DateUpdate+0x5c>
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	2b07      	cmp	r3, #7
 800448c:	d008      	beq.n	80044a0 <RTC_DateUpdate+0x5c>
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b08      	cmp	r3, #8
 8004492:	d005      	beq.n	80044a0 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	2b0a      	cmp	r3, #10
 8004498:	d002      	beq.n	80044a0 <RTC_DateUpdate+0x5c>
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2b0c      	cmp	r3, #12
 800449e:	d117      	bne.n	80044d0 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b1e      	cmp	r3, #30
 80044a4:	d803      	bhi.n	80044ae <RTC_DateUpdate+0x6a>
      {
        day++;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3301      	adds	r3, #1
 80044aa:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80044ac:	e050      	b.n	8004550 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b0c      	cmp	r3, #12
 80044b2:	d005      	beq.n	80044c0 <RTC_DateUpdate+0x7c>
        {
          month++;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	3301      	adds	r3, #1
 80044b8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80044ba:	2301      	movs	r3, #1
 80044bc:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80044be:	e047      	b.n	8004550 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80044c0:	2301      	movs	r3, #1
 80044c2:	613b      	str	r3, [r7, #16]
          day = 1U;
 80044c4:	2301      	movs	r3, #1
 80044c6:	60fb      	str	r3, [r7, #12]
          year++;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	3301      	adds	r3, #1
 80044cc:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80044ce:	e03f      	b.n	8004550 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d008      	beq.n	80044e8 <RTC_DateUpdate+0xa4>
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	2b06      	cmp	r3, #6
 80044da:	d005      	beq.n	80044e8 <RTC_DateUpdate+0xa4>
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	2b09      	cmp	r3, #9
 80044e0:	d002      	beq.n	80044e8 <RTC_DateUpdate+0xa4>
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	2b0b      	cmp	r3, #11
 80044e6:	d10c      	bne.n	8004502 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b1d      	cmp	r3, #29
 80044ec:	d803      	bhi.n	80044f6 <RTC_DateUpdate+0xb2>
      {
        day++;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	3301      	adds	r3, #1
 80044f2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80044f4:	e02c      	b.n	8004550 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	3301      	adds	r3, #1
 80044fa:	613b      	str	r3, [r7, #16]
        day = 1U;
 80044fc:	2301      	movs	r3, #1
 80044fe:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004500:	e026      	b.n	8004550 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b02      	cmp	r3, #2
 8004506:	d123      	bne.n	8004550 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b1b      	cmp	r3, #27
 800450c:	d803      	bhi.n	8004516 <RTC_DateUpdate+0xd2>
      {
        day++;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3301      	adds	r3, #1
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	e01c      	b.n	8004550 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b1c      	cmp	r3, #28
 800451a:	d111      	bne.n	8004540 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	b29b      	uxth	r3, r3
 8004520:	4618      	mov	r0, r3
 8004522:	f000 f839 	bl	8004598 <RTC_IsLeapYear>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <RTC_DateUpdate+0xf0>
        {
          day++;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	3301      	adds	r3, #1
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	e00d      	b.n	8004550 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	3301      	adds	r3, #1
 8004538:	613b      	str	r3, [r7, #16]
          day = 1U;
 800453a:	2301      	movs	r3, #1
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	e007      	b.n	8004550 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b1d      	cmp	r3, #29
 8004544:	d104      	bne.n	8004550 <RTC_DateUpdate+0x10c>
      {
        month++;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	3301      	adds	r3, #1
 800454a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800454c:	2301      	movs	r3, #1
 800454e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	3301      	adds	r3, #1
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d38b      	bcc.n	8004476 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	b2da      	uxtb	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	b2da      	uxtb	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	b2da      	uxtb	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	b2db      	uxtb	r3, r3
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	4619      	mov	r1, r3
 8004580:	6978      	ldr	r0, [r7, #20]
 8004582:	f000 f83b 	bl	80045fc <RTC_WeekDayNum>
 8004586:	4603      	mov	r3, r0
 8004588:	461a      	mov	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	731a      	strb	r2, [r3, #12]
}
 800458e:	bf00      	nop
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	4603      	mov	r3, r0
 80045a0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80045a2:	88fb      	ldrh	r3, [r7, #6]
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e01d      	b.n	80045ee <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	4a10      	ldr	r2, [pc, #64]	@ (80045f8 <RTC_IsLeapYear+0x60>)
 80045b6:	fba2 1203 	umull	r1, r2, r2, r3
 80045ba:	0952      	lsrs	r2, r2, #5
 80045bc:	2164      	movs	r1, #100	@ 0x64
 80045be:	fb01 f202 	mul.w	r2, r1, r2
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e00f      	b.n	80045ee <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80045ce:	88fb      	ldrh	r3, [r7, #6]
 80045d0:	4a09      	ldr	r2, [pc, #36]	@ (80045f8 <RTC_IsLeapYear+0x60>)
 80045d2:	fba2 1203 	umull	r1, r2, r2, r3
 80045d6:	09d2      	lsrs	r2, r2, #7
 80045d8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80045dc:	fb01 f202 	mul.w	r2, r1, r2
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e000      	b.n	80045ee <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80045ec:	2300      	movs	r3, #0
  }
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr
 80045f8:	51eb851f 	.word	0x51eb851f

080045fc <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	70fb      	strb	r3, [r7, #3]
 8004608:	4613      	mov	r3, r2
 800460a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	60bb      	str	r3, [r7, #8]
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800461a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d82d      	bhi.n	800467e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004622:	78fa      	ldrb	r2, [r7, #3]
 8004624:	4613      	mov	r3, r2
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	4413      	add	r3, r2
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	1a9b      	subs	r3, r3, r2
 800462e:	4a2c      	ldr	r2, [pc, #176]	@ (80046e0 <RTC_WeekDayNum+0xe4>)
 8004630:	fba2 2303 	umull	r2, r3, r2, r3
 8004634:	085a      	lsrs	r2, r3, #1
 8004636:	78bb      	ldrb	r3, [r7, #2]
 8004638:	441a      	add	r2, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	441a      	add	r2, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	3b01      	subs	r3, #1
 8004642:	089b      	lsrs	r3, r3, #2
 8004644:	441a      	add	r2, r3
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	3b01      	subs	r3, #1
 800464a:	4926      	ldr	r1, [pc, #152]	@ (80046e4 <RTC_WeekDayNum+0xe8>)
 800464c:	fba1 1303 	umull	r1, r3, r1, r3
 8004650:	095b      	lsrs	r3, r3, #5
 8004652:	1ad2      	subs	r2, r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	3b01      	subs	r3, #1
 8004658:	4922      	ldr	r1, [pc, #136]	@ (80046e4 <RTC_WeekDayNum+0xe8>)
 800465a:	fba1 1303 	umull	r1, r3, r1, r3
 800465e:	09db      	lsrs	r3, r3, #7
 8004660:	4413      	add	r3, r2
 8004662:	1d1a      	adds	r2, r3, #4
 8004664:	4b20      	ldr	r3, [pc, #128]	@ (80046e8 <RTC_WeekDayNum+0xec>)
 8004666:	fba3 1302 	umull	r1, r3, r3, r2
 800466a:	1ad1      	subs	r1, r2, r3
 800466c:	0849      	lsrs	r1, r1, #1
 800466e:	440b      	add	r3, r1
 8004670:	0899      	lsrs	r1, r3, #2
 8004672:	460b      	mov	r3, r1
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	1a5b      	subs	r3, r3, r1
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	e029      	b.n	80046d2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800467e:	78fa      	ldrb	r2, [r7, #3]
 8004680:	4613      	mov	r3, r2
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	4413      	add	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	1a9b      	subs	r3, r3, r2
 800468a:	4a15      	ldr	r2, [pc, #84]	@ (80046e0 <RTC_WeekDayNum+0xe4>)
 800468c:	fba2 2303 	umull	r2, r3, r2, r3
 8004690:	085a      	lsrs	r2, r3, #1
 8004692:	78bb      	ldrb	r3, [r7, #2]
 8004694:	441a      	add	r2, r3
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	441a      	add	r2, r3
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	089b      	lsrs	r3, r3, #2
 800469e:	441a      	add	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4910      	ldr	r1, [pc, #64]	@ (80046e4 <RTC_WeekDayNum+0xe8>)
 80046a4:	fba1 1303 	umull	r1, r3, r1, r3
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	1ad2      	subs	r2, r2, r3
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	490d      	ldr	r1, [pc, #52]	@ (80046e4 <RTC_WeekDayNum+0xe8>)
 80046b0:	fba1 1303 	umull	r1, r3, r1, r3
 80046b4:	09db      	lsrs	r3, r3, #7
 80046b6:	4413      	add	r3, r2
 80046b8:	1c9a      	adds	r2, r3, #2
 80046ba:	4b0b      	ldr	r3, [pc, #44]	@ (80046e8 <RTC_WeekDayNum+0xec>)
 80046bc:	fba3 1302 	umull	r1, r3, r3, r2
 80046c0:	1ad1      	subs	r1, r2, r3
 80046c2:	0849      	lsrs	r1, r1, #1
 80046c4:	440b      	add	r3, r1
 80046c6:	0899      	lsrs	r1, r3, #2
 80046c8:	460b      	mov	r3, r1
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	1a5b      	subs	r3, r3, r1
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	b2db      	uxtb	r3, r3
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr
 80046e0:	38e38e39 	.word	0x38e38e39
 80046e4:	51eb851f 	.word	0x51eb851f
 80046e8:	24924925 	.word	0x24924925

080046ec <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d027      	beq.n	8004752 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d020      	beq.n	8004752 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00b      	beq.n	8004736 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f824 	bl	800476c <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f06f 0204 	mvn.w	r2, #4
 800472c:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2204      	movs	r2, #4
 8004732:	745a      	strb	r2, [r3, #17]
 8004734:	e005      	b.n	8004742 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f80f 	bl	800475a <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0201 	bic.w	r2, r2, #1
 8004750:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004752:	bf00      	nop
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr

0800476c <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr

0800477e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e076      	b.n	800487e <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	2b00      	cmp	r3, #0
 8004796:	d108      	bne.n	80047aa <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047a0:	d009      	beq.n	80047b6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	61da      	str	r2, [r3, #28]
 80047a8:	e005      	b.n	80047b6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7fd f873 	bl	80018bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2202      	movs	r2, #2
 80047da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800483a:	ea42 0103 	orr.w	r1, r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004842:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	0c1a      	lsrs	r2, r3, #16
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f002 0204 	and.w	r2, r2, #4
 800485c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800486c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b088      	sub	sp, #32
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	603b      	str	r3, [r7, #0]
 8004892:	4613      	mov	r3, r2
 8004894:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004896:	f7fd f9b3 	bl	8001c00 <HAL_GetTick>
 800489a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800489c:	88fb      	ldrh	r3, [r7, #6]
 800489e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d001      	beq.n	80048b0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80048ac:	2302      	movs	r3, #2
 80048ae:	e12a      	b.n	8004b06 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <HAL_SPI_Transmit+0x36>
 80048b6:	88fb      	ldrh	r3, [r7, #6]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e122      	b.n	8004b06 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d101      	bne.n	80048ce <HAL_SPI_Transmit+0x48>
 80048ca:	2302      	movs	r3, #2
 80048cc:	e11b      	b.n	8004b06 <HAL_SPI_Transmit+0x280>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2203      	movs	r2, #3
 80048da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	88fa      	ldrh	r2, [r7, #6]
 80048ee:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	88fa      	ldrh	r2, [r7, #6]
 80048f4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800491c:	d10f      	bne.n	800493e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800492c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800493c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004948:	2b40      	cmp	r3, #64	@ 0x40
 800494a:	d007      	beq.n	800495c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800495a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004964:	d152      	bne.n	8004a0c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <HAL_SPI_Transmit+0xee>
 800496e:	8b7b      	ldrh	r3, [r7, #26]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d145      	bne.n	8004a00 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004978:	881a      	ldrh	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004984:	1c9a      	adds	r2, r3, #2
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800498e:	b29b      	uxth	r3, r3
 8004990:	3b01      	subs	r3, #1
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004998:	e032      	b.n	8004a00 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d112      	bne.n	80049ce <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ac:	881a      	ldrh	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b8:	1c9a      	adds	r2, r3, #2
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	86da      	strh	r2, [r3, #54]	@ 0x36
 80049cc:	e018      	b.n	8004a00 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049ce:	f7fd f917 	bl	8001c00 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d803      	bhi.n	80049e6 <HAL_SPI_Transmit+0x160>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e4:	d102      	bne.n	80049ec <HAL_SPI_Transmit+0x166>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d109      	bne.n	8004a00 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e082      	b.n	8004b06 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1c7      	bne.n	800499a <HAL_SPI_Transmit+0x114>
 8004a0a:	e053      	b.n	8004ab4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <HAL_SPI_Transmit+0x194>
 8004a14:	8b7b      	ldrh	r3, [r7, #26]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d147      	bne.n	8004aaa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	330c      	adds	r3, #12
 8004a24:	7812      	ldrb	r2, [r2, #0]
 8004a26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a40:	e033      	b.n	8004aaa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d113      	bne.n	8004a78 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	330c      	adds	r3, #12
 8004a5a:	7812      	ldrb	r2, [r2, #0]
 8004a5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a76:	e018      	b.n	8004aaa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a78:	f7fd f8c2 	bl	8001c00 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d803      	bhi.n	8004a90 <HAL_SPI_Transmit+0x20a>
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8e:	d102      	bne.n	8004a96 <HAL_SPI_Transmit+0x210>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d109      	bne.n	8004aaa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e02d      	b.n	8004b06 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1c6      	bne.n	8004a42 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	6839      	ldr	r1, [r7, #0]
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 fbd1 	bl	8005260 <SPI_EndRxTxTransaction>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10a      	bne.n	8004ae8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	617b      	str	r3, [r7, #20]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e000      	b.n	8004b06 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004b04:	2300      	movs	r3, #0
  }
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3720      	adds	r7, #32
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b088      	sub	sp, #32
 8004b12:	af02      	add	r7, sp, #8
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	603b      	str	r3, [r7, #0]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d001      	beq.n	8004b2e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e104      	b.n	8004d38 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b36:	d112      	bne.n	8004b5e <HAL_SPI_Receive+0x50>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10e      	bne.n	8004b5e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2204      	movs	r2, #4
 8004b44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b48:	88fa      	ldrh	r2, [r7, #6]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 f8f3 	bl	8004d40 <HAL_SPI_TransmitReceive>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	e0ec      	b.n	8004d38 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b5e:	f7fd f84f 	bl	8001c00 <HAL_GetTick>
 8004b62:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <HAL_SPI_Receive+0x62>
 8004b6a:	88fb      	ldrh	r3, [r7, #6]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e0e1      	b.n	8004d38 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <HAL_SPI_Receive+0x74>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e0da      	b.n	8004d38 <HAL_SPI_Receive+0x22a>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2204      	movs	r2, #4
 8004b8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	88fa      	ldrh	r2, [r7, #6]
 8004ba2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	88fa      	ldrh	r2, [r7, #6]
 8004ba8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bd0:	d10f      	bne.n	8004bf2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004be0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004bf0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bfc:	2b40      	cmp	r3, #64	@ 0x40
 8004bfe:	d007      	beq.n	8004c10 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c0e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d170      	bne.n	8004cfa <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c18:	e035      	b.n	8004c86 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d115      	bne.n	8004c54 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f103 020c 	add.w	r2, r3, #12
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c34:	7812      	ldrb	r2, [r2, #0]
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c52:	e018      	b.n	8004c86 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c54:	f7fc ffd4 	bl	8001c00 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d803      	bhi.n	8004c6c <HAL_SPI_Receive+0x15e>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6a:	d102      	bne.n	8004c72 <HAL_SPI_Receive+0x164>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e058      	b.n	8004d38 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1c4      	bne.n	8004c1a <HAL_SPI_Receive+0x10c>
 8004c90:	e038      	b.n	8004d04 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d113      	bne.n	8004cc8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004caa:	b292      	uxth	r2, r2
 8004cac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb2:	1c9a      	adds	r2, r3, #2
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004cc6:	e018      	b.n	8004cfa <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cc8:	f7fc ff9a 	bl	8001c00 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d803      	bhi.n	8004ce0 <HAL_SPI_Receive+0x1d2>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cde:	d102      	bne.n	8004ce6 <HAL_SPI_Receive+0x1d8>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d109      	bne.n	8004cfa <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e01e      	b.n	8004d38 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1c6      	bne.n	8004c92 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	6839      	ldr	r1, [r7, #0]
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 fa57 	bl	80051bc <SPI_EndRxTransaction>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2220      	movs	r2, #32
 8004d18:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004d36:	2300      	movs	r3, #0
  }
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08a      	sub	sp, #40	@ 0x28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d52:	f7fc ff55 	bl	8001c00 <HAL_GetTick>
 8004d56:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d5e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004d66:	887b      	ldrh	r3, [r7, #2]
 8004d68:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d6a:	7ffb      	ldrb	r3, [r7, #31]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d00c      	beq.n	8004d8a <HAL_SPI_TransmitReceive+0x4a>
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d76:	d106      	bne.n	8004d86 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d102      	bne.n	8004d86 <HAL_SPI_TransmitReceive+0x46>
 8004d80:	7ffb      	ldrb	r3, [r7, #31]
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d001      	beq.n	8004d8a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004d86:	2302      	movs	r3, #2
 8004d88:	e17f      	b.n	800508a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d005      	beq.n	8004d9c <HAL_SPI_TransmitReceive+0x5c>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <HAL_SPI_TransmitReceive+0x5c>
 8004d96:	887b      	ldrh	r3, [r7, #2]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e174      	b.n	800508a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_SPI_TransmitReceive+0x6e>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e16d      	b.n	800508a <HAL_SPI_TransmitReceive+0x34a>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d003      	beq.n	8004dca <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2205      	movs	r2, #5
 8004dc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	887a      	ldrh	r2, [r7, #2]
 8004dda:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	887a      	ldrh	r2, [r7, #2]
 8004de0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	887a      	ldrh	r2, [r7, #2]
 8004dec:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	887a      	ldrh	r2, [r7, #2]
 8004df2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e0a:	2b40      	cmp	r3, #64	@ 0x40
 8004e0c:	d007      	beq.n	8004e1e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e26:	d17e      	bne.n	8004f26 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d002      	beq.n	8004e36 <HAL_SPI_TransmitReceive+0xf6>
 8004e30:	8afb      	ldrh	r3, [r7, #22]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d16c      	bne.n	8004f10 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3a:	881a      	ldrh	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e46:	1c9a      	adds	r2, r3, #2
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e5a:	e059      	b.n	8004f10 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d11b      	bne.n	8004ea2 <HAL_SPI_TransmitReceive+0x162>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d016      	beq.n	8004ea2 <HAL_SPI_TransmitReceive+0x162>
 8004e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d113      	bne.n	8004ea2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7e:	881a      	ldrh	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e8a:	1c9a      	adds	r2, r3, #2
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d119      	bne.n	8004ee4 <HAL_SPI_TransmitReceive+0x1a4>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d014      	beq.n	8004ee4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec4:	b292      	uxth	r2, r2
 8004ec6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ecc:	1c9a      	adds	r2, r3, #2
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ee4:	f7fc fe8c 	bl	8001c00 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d80d      	bhi.n	8004f10 <HAL_SPI_TransmitReceive+0x1d0>
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efa:	d009      	beq.n	8004f10 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e0bc      	b.n	800508a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1a0      	bne.n	8004e5c <HAL_SPI_TransmitReceive+0x11c>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d19b      	bne.n	8004e5c <HAL_SPI_TransmitReceive+0x11c>
 8004f24:	e082      	b.n	800502c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <HAL_SPI_TransmitReceive+0x1f4>
 8004f2e:	8afb      	ldrh	r3, [r7, #22]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d171      	bne.n	8005018 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	330c      	adds	r3, #12
 8004f3e:	7812      	ldrb	r2, [r2, #0]
 8004f40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f5a:	e05d      	b.n	8005018 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d11c      	bne.n	8004fa4 <HAL_SPI_TransmitReceive+0x264>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d017      	beq.n	8004fa4 <HAL_SPI_TransmitReceive+0x264>
 8004f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d114      	bne.n	8004fa4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	330c      	adds	r3, #12
 8004f84:	7812      	ldrb	r2, [r2, #0]
 8004f86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d119      	bne.n	8004fe6 <HAL_SPI_TransmitReceive+0x2a6>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d014      	beq.n	8004fe6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68da      	ldr	r2, [r3, #12]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fe6:	f7fc fe0b 	bl	8001c00 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d803      	bhi.n	8004ffe <HAL_SPI_TransmitReceive+0x2be>
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffc:	d102      	bne.n	8005004 <HAL_SPI_TransmitReceive+0x2c4>
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005000:	2b00      	cmp	r3, #0
 8005002:	d109      	bne.n	8005018 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e038      	b.n	800508a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d19c      	bne.n	8004f5c <HAL_SPI_TransmitReceive+0x21c>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d197      	bne.n	8004f5c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800502c:	6a3a      	ldr	r2, [r7, #32]
 800502e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 f915 	bl	8005260 <SPI_EndRxTxTransaction>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d008      	beq.n	800504e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e01d      	b.n	800508a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10a      	bne.n	800506c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005056:	2300      	movs	r3, #0
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	613b      	str	r3, [r7, #16]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	613b      	str	r3, [r7, #16]
 800506a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e000      	b.n	800508a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005088:	2300      	movs	r3, #0
  }
}
 800508a:	4618      	mov	r0, r3
 800508c:	3728      	adds	r7, #40	@ 0x28
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005092:	b480      	push	{r7}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050a0:	b2db      	uxtb	r3, r3
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr

080050ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b088      	sub	sp, #32
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	603b      	str	r3, [r7, #0]
 80050b8:	4613      	mov	r3, r2
 80050ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050bc:	f7fc fda0 	bl	8001c00 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c4:	1a9b      	subs	r3, r3, r2
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	4413      	add	r3, r2
 80050ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050cc:	f7fc fd98 	bl	8001c00 <HAL_GetTick>
 80050d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050d2:	4b39      	ldr	r3, [pc, #228]	@ (80051b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	015b      	lsls	r3, r3, #5
 80050d8:	0d1b      	lsrs	r3, r3, #20
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	fb02 f303 	mul.w	r3, r2, r3
 80050e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050e2:	e054      	b.n	800518e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ea:	d050      	beq.n	800518e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050ec:	f7fc fd88 	bl	8001c00 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d902      	bls.n	8005102 <SPI_WaitFlagStateUntilTimeout+0x56>
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d13d      	bne.n	800517e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005110:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800511a:	d111      	bne.n	8005140 <SPI_WaitFlagStateUntilTimeout+0x94>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005124:	d004      	beq.n	8005130 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800512e:	d107      	bne.n	8005140 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800513e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005144:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005148:	d10f      	bne.n	800516a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005168:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e017      	b.n	80051ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	3b01      	subs	r3, #1
 800518c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4013      	ands	r3, r2
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	429a      	cmp	r2, r3
 800519c:	bf0c      	ite	eq
 800519e:	2301      	moveq	r3, #1
 80051a0:	2300      	movne	r3, #0
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	461a      	mov	r2, r3
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d19b      	bne.n	80050e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3720      	adds	r7, #32
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	20000000 	.word	0x20000000

080051bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051d0:	d111      	bne.n	80051f6 <SPI_EndRxTransaction+0x3a>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051da:	d004      	beq.n	80051e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051e4:	d107      	bne.n	80051f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051f4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051fe:	d117      	bne.n	8005230 <SPI_EndRxTransaction+0x74>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005208:	d112      	bne.n	8005230 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2200      	movs	r2, #0
 8005212:	2101      	movs	r1, #1
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f7ff ff49 	bl	80050ac <SPI_WaitFlagStateUntilTimeout>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d01a      	beq.n	8005256 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005224:	f043 0220 	orr.w	r2, r3, #32
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e013      	b.n	8005258 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2200      	movs	r2, #0
 8005238:	2180      	movs	r1, #128	@ 0x80
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f7ff ff36 	bl	80050ac <SPI_WaitFlagStateUntilTimeout>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d007      	beq.n	8005256 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800524a:	f043 0220 	orr.w	r2, r3, #32
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e000      	b.n	8005258 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af02      	add	r7, sp, #8
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2201      	movs	r2, #1
 8005274:	2102      	movs	r1, #2
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f7ff ff18 	bl	80050ac <SPI_WaitFlagStateUntilTimeout>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d007      	beq.n	8005292 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005286:	f043 0220 	orr.w	r2, r3, #32
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e013      	b.n	80052ba <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2200      	movs	r2, #0
 800529a:	2180      	movs	r1, #128	@ 0x80
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f7ff ff05 	bl	80050ac <SPI_WaitFlagStateUntilTimeout>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d007      	beq.n	80052b8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ac:	f043 0220 	orr.w	r2, r3, #32
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e000      	b.n	80052ba <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b082      	sub	sp, #8
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e041      	b.n	8005358 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d106      	bne.n	80052ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7fc fb31 	bl	8001950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2202      	movs	r2, #2
 80052f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3304      	adds	r3, #4
 80052fe:	4619      	mov	r1, r3
 8005300:	4610      	mov	r0, r2
 8005302:	f000 f95f 	bl	80055c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b01      	cmp	r3, #1
 8005372:	d001      	beq.n	8005378 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e02d      	b.n	80053d4 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a16      	ldr	r2, [pc, #88]	@ (80053e0 <HAL_TIM_Base_Start+0x80>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d009      	beq.n	800539e <HAL_TIM_Base_Start+0x3e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005392:	d004      	beq.n	800539e <HAL_TIM_Base_Start+0x3e>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a12      	ldr	r2, [pc, #72]	@ (80053e4 <HAL_TIM_Base_Start+0x84>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d111      	bne.n	80053c2 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2b06      	cmp	r3, #6
 80053ae:	d010      	beq.n	80053d2 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0201 	orr.w	r2, r2, #1
 80053be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c0:	e007      	b.n	80053d2 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0201 	orr.w	r2, r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	bc80      	pop	{r7}
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	40012c00 	.word	0x40012c00
 80053e4:	40000400 	.word	0x40000400

080053e8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6a1a      	ldr	r2, [r3, #32]
 80053f6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10f      	bne.n	8005420 <HAL_TIM_Base_Stop+0x38>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6a1a      	ldr	r2, [r3, #32]
 8005406:	f240 4344 	movw	r3, #1092	@ 0x444
 800540a:	4013      	ands	r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d107      	bne.n	8005420 <HAL_TIM_Base_Stop+0x38>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0201 	bic.w	r2, r2, #1
 800541e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	bc80      	pop	{r7}
 8005432:	4770      	bx	lr

08005434 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_TIM_ConfigClockSource+0x1c>
 800544c:	2302      	movs	r3, #2
 800544e:	e0b4      	b.n	80055ba <HAL_TIM_ConfigClockSource+0x186>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800546e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005476:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005488:	d03e      	beq.n	8005508 <HAL_TIM_ConfigClockSource+0xd4>
 800548a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800548e:	f200 8087 	bhi.w	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 8005492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005496:	f000 8086 	beq.w	80055a6 <HAL_TIM_ConfigClockSource+0x172>
 800549a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800549e:	d87f      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054a0:	2b70      	cmp	r3, #112	@ 0x70
 80054a2:	d01a      	beq.n	80054da <HAL_TIM_ConfigClockSource+0xa6>
 80054a4:	2b70      	cmp	r3, #112	@ 0x70
 80054a6:	d87b      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054a8:	2b60      	cmp	r3, #96	@ 0x60
 80054aa:	d050      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x11a>
 80054ac:	2b60      	cmp	r3, #96	@ 0x60
 80054ae:	d877      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054b0:	2b50      	cmp	r3, #80	@ 0x50
 80054b2:	d03c      	beq.n	800552e <HAL_TIM_ConfigClockSource+0xfa>
 80054b4:	2b50      	cmp	r3, #80	@ 0x50
 80054b6:	d873      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054b8:	2b40      	cmp	r3, #64	@ 0x40
 80054ba:	d058      	beq.n	800556e <HAL_TIM_ConfigClockSource+0x13a>
 80054bc:	2b40      	cmp	r3, #64	@ 0x40
 80054be:	d86f      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054c0:	2b30      	cmp	r3, #48	@ 0x30
 80054c2:	d064      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15a>
 80054c4:	2b30      	cmp	r3, #48	@ 0x30
 80054c6:	d86b      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	d060      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15a>
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	d867      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d05c      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15a>
 80054d4:	2b10      	cmp	r3, #16
 80054d6:	d05a      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15a>
 80054d8:	e062      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054ea:	f000 f946 	bl	800577a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	609a      	str	r2, [r3, #8]
      break;
 8005506:	e04f      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005518:	f000 f92f 	bl	800577a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800552a:	609a      	str	r2, [r3, #8]
      break;
 800552c:	e03c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800553a:	461a      	mov	r2, r3
 800553c:	f000 f8a6 	bl	800568c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2150      	movs	r1, #80	@ 0x50
 8005546:	4618      	mov	r0, r3
 8005548:	f000 f8fd 	bl	8005746 <TIM_ITRx_SetConfig>
      break;
 800554c:	e02c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800555a:	461a      	mov	r2, r3
 800555c:	f000 f8c4 	bl	80056e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2160      	movs	r1, #96	@ 0x60
 8005566:	4618      	mov	r0, r3
 8005568:	f000 f8ed 	bl	8005746 <TIM_ITRx_SetConfig>
      break;
 800556c:	e01c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800557a:	461a      	mov	r2, r3
 800557c:	f000 f886 	bl	800568c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2140      	movs	r1, #64	@ 0x40
 8005586:	4618      	mov	r0, r3
 8005588:	f000 f8dd 	bl	8005746 <TIM_ITRx_SetConfig>
      break;
 800558c:	e00c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4619      	mov	r1, r3
 8005598:	4610      	mov	r0, r2
 800559a:	f000 f8d4 	bl	8005746 <TIM_ITRx_SetConfig>
      break;
 800559e:	e003      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	73fb      	strb	r3, [r7, #15]
      break;
 80055a4:	e000      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a2b      	ldr	r2, [pc, #172]	@ (8005684 <TIM_Base_SetConfig+0xc0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d007      	beq.n	80055ec <TIM_Base_SetConfig+0x28>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e2:	d003      	beq.n	80055ec <TIM_Base_SetConfig+0x28>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a28      	ldr	r2, [pc, #160]	@ (8005688 <TIM_Base_SetConfig+0xc4>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d108      	bne.n	80055fe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a20      	ldr	r2, [pc, #128]	@ (8005684 <TIM_Base_SetConfig+0xc0>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d007      	beq.n	8005616 <TIM_Base_SetConfig+0x52>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800560c:	d003      	beq.n	8005616 <TIM_Base_SetConfig+0x52>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a1d      	ldr	r2, [pc, #116]	@ (8005688 <TIM_Base_SetConfig+0xc4>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d108      	bne.n	8005628 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800561c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a0d      	ldr	r2, [pc, #52]	@ (8005684 <TIM_Base_SetConfig+0xc0>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d103      	bne.n	800565c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d005      	beq.n	800567a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f023 0201 	bic.w	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	611a      	str	r2, [r3, #16]
  }
}
 800567a:	bf00      	nop
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr
 8005684:	40012c00 	.word	0x40012c00
 8005688:	40000400 	.word	0x40000400

0800568c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	f023 0201 	bic.w	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4313      	orrs	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f023 030a 	bic.w	r3, r3, #10
 80056c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	621a      	str	r2, [r3, #32]
}
 80056de:	bf00      	nop
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr

080056e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f023 0210 	bic.w	r2, r3, #16
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	031b      	lsls	r3, r3, #12
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005724:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	621a      	str	r2, [r3, #32]
}
 800573c:	bf00      	nop
 800573e:	371c      	adds	r7, #28
 8005740:	46bd      	mov	sp, r7
 8005742:	bc80      	pop	{r7}
 8005744:	4770      	bx	lr

08005746 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005746:	b480      	push	{r7}
 8005748:	b085      	sub	sp, #20
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800575c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	f043 0307 	orr.w	r3, r3, #7
 8005768:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	609a      	str	r2, [r3, #8]
}
 8005770:	bf00      	nop
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	bc80      	pop	{r7}
 8005778:	4770      	bx	lr

0800577a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800577a:	b480      	push	{r7}
 800577c:	b087      	sub	sp, #28
 800577e:	af00      	add	r7, sp, #0
 8005780:	60f8      	str	r0, [r7, #12]
 8005782:	60b9      	str	r1, [r7, #8]
 8005784:	607a      	str	r2, [r7, #4]
 8005786:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005794:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	021a      	lsls	r2, r3, #8
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	431a      	orrs	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	609a      	str	r2, [r3, #8]
}
 80057ae:	bf00      	nop
 80057b0:	371c      	adds	r7, #28
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr

080057b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057cc:	2302      	movs	r3, #2
 80057ce:	e041      	b.n	8005854 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a14      	ldr	r2, [pc, #80]	@ (8005860 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d009      	beq.n	8005828 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800581c:	d004      	beq.n	8005828 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a10      	ldr	r2, [pc, #64]	@ (8005864 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d10c      	bne.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800582e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	4313      	orrs	r3, r2
 8005838:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	bc80      	pop	{r7}
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	40012c00 	.word	0x40012c00
 8005864:	40000400 	.word	0x40000400

08005868 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e042      	b.n	8005900 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7fc f87a 	bl	8001988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2224      	movs	r2, #36	@ 0x24
 8005898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f971 	bl	8005b94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	695a      	ldr	r2, [r3, #20]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08a      	sub	sp, #40	@ 0x28
 800590c:	af02      	add	r7, sp, #8
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	603b      	str	r3, [r7, #0]
 8005914:	4613      	mov	r3, r2
 8005916:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b20      	cmp	r3, #32
 8005926:	d175      	bne.n	8005a14 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <HAL_UART_Transmit+0x2c>
 800592e:	88fb      	ldrh	r3, [r7, #6]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e06e      	b.n	8005a16 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2221      	movs	r2, #33	@ 0x21
 8005942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005946:	f7fc f95b 	bl	8001c00 <HAL_GetTick>
 800594a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	88fa      	ldrh	r2, [r7, #6]
 8005950:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	88fa      	ldrh	r2, [r7, #6]
 8005956:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005960:	d108      	bne.n	8005974 <HAL_UART_Transmit+0x6c>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d104      	bne.n	8005974 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800596a:	2300      	movs	r3, #0
 800596c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	e003      	b.n	800597c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005978:	2300      	movs	r3, #0
 800597a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800597c:	e02e      	b.n	80059dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2200      	movs	r2, #0
 8005986:	2180      	movs	r1, #128	@ 0x80
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 f848 	bl	8005a1e <UART_WaitOnFlagUntilTimeout>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d005      	beq.n	80059a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e03a      	b.n	8005a16 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10b      	bne.n	80059be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	3302      	adds	r3, #2
 80059ba:	61bb      	str	r3, [r7, #24]
 80059bc:	e007      	b.n	80059ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	781a      	ldrb	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	3301      	adds	r3, #1
 80059cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	3b01      	subs	r3, #1
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1cb      	bne.n	800597e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2200      	movs	r2, #0
 80059ee:	2140      	movs	r1, #64	@ 0x40
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 f814 	bl	8005a1e <UART_WaitOnFlagUntilTimeout>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d005      	beq.n	8005a08 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e006      	b.n	8005a16 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	e000      	b.n	8005a16 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005a14:	2302      	movs	r3, #2
  }
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3720      	adds	r7, #32
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b086      	sub	sp, #24
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	603b      	str	r3, [r7, #0]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a2e:	e03b      	b.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a36:	d037      	beq.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a38:	f7fc f8e2 	bl	8001c00 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	6a3a      	ldr	r2, [r7, #32]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d302      	bcc.n	8005a4e <UART_WaitOnFlagUntilTimeout+0x30>
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e03a      	b.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d023      	beq.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b80      	cmp	r3, #128	@ 0x80
 8005a64:	d020      	beq.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b40      	cmp	r3, #64	@ 0x40
 8005a6a:	d01d      	beq.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0308 	and.w	r3, r3, #8
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	d116      	bne.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 f81d 	bl	8005ad0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2208      	movs	r2, #8
 8005a9a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e00f      	b.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	bf0c      	ite	eq
 8005ab8:	2301      	moveq	r3, #1
 8005aba:	2300      	movne	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	461a      	mov	r2, r3
 8005ac0:	79fb      	ldrb	r3, [r7, #7]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d0b4      	beq.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b095      	sub	sp, #84	@ 0x54
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	330c      	adds	r3, #12
 8005ade:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae2:	e853 3f00 	ldrex	r3, [r3]
 8005ae6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	330c      	adds	r3, #12
 8005af6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005af8:	643a      	str	r2, [r7, #64]	@ 0x40
 8005afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005afe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b00:	e841 2300 	strex	r3, r2, [r1]
 8005b04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1e5      	bne.n	8005ad8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3314      	adds	r3, #20
 8005b12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	e853 3f00 	ldrex	r3, [r3]
 8005b1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	f023 0301 	bic.w	r3, r3, #1
 8005b22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3314      	adds	r3, #20
 8005b2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b34:	e841 2300 	strex	r3, r2, [r1]
 8005b38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1e5      	bne.n	8005b0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d119      	bne.n	8005b7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	330c      	adds	r3, #12
 8005b4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	e853 3f00 	ldrex	r3, [r3]
 8005b56:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f023 0310 	bic.w	r3, r3, #16
 8005b5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	330c      	adds	r3, #12
 8005b66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b68:	61ba      	str	r2, [r7, #24]
 8005b6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6c:	6979      	ldr	r1, [r7, #20]
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	e841 2300 	strex	r3, r2, [r1]
 8005b74:	613b      	str	r3, [r7, #16]
   return(result);
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1e5      	bne.n	8005b48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b8a:	bf00      	nop
 8005b8c:	3754      	adds	r7, #84	@ 0x54
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bc80      	pop	{r7}
 8005b92:	4770      	bx	lr

08005b94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68da      	ldr	r2, [r3, #12]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005bce:	f023 030c 	bic.w	r3, r3, #12
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6812      	ldr	r2, [r2, #0]
 8005bd6:	68b9      	ldr	r1, [r7, #8]
 8005bd8:	430b      	orrs	r3, r1
 8005bda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699a      	ldr	r2, [r3, #24]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a2c      	ldr	r2, [pc, #176]	@ (8005ca8 <UART_SetConfig+0x114>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d103      	bne.n	8005c04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005bfc:	f7fd fd6c 	bl	80036d8 <HAL_RCC_GetPCLK2Freq>
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	e002      	b.n	8005c0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c04:	f7fd fd54 	bl	80036b0 <HAL_RCC_GetPCLK1Freq>
 8005c08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	009a      	lsls	r2, r3, #2
 8005c14:	441a      	add	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c20:	4a22      	ldr	r2, [pc, #136]	@ (8005cac <UART_SetConfig+0x118>)
 8005c22:	fba2 2303 	umull	r2, r3, r2, r3
 8005c26:	095b      	lsrs	r3, r3, #5
 8005c28:	0119      	lsls	r1, r3, #4
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	009a      	lsls	r2, r3, #2
 8005c34:	441a      	add	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c40:	4b1a      	ldr	r3, [pc, #104]	@ (8005cac <UART_SetConfig+0x118>)
 8005c42:	fba3 0302 	umull	r0, r3, r3, r2
 8005c46:	095b      	lsrs	r3, r3, #5
 8005c48:	2064      	movs	r0, #100	@ 0x64
 8005c4a:	fb00 f303 	mul.w	r3, r0, r3
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	011b      	lsls	r3, r3, #4
 8005c52:	3332      	adds	r3, #50	@ 0x32
 8005c54:	4a15      	ldr	r2, [pc, #84]	@ (8005cac <UART_SetConfig+0x118>)
 8005c56:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5a:	095b      	lsrs	r3, r3, #5
 8005c5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c60:	4419      	add	r1, r3
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	4613      	mov	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	009a      	lsls	r2, r3, #2
 8005c6c:	441a      	add	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c78:	4b0c      	ldr	r3, [pc, #48]	@ (8005cac <UART_SetConfig+0x118>)
 8005c7a:	fba3 0302 	umull	r0, r3, r3, r2
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	2064      	movs	r0, #100	@ 0x64
 8005c82:	fb00 f303 	mul.w	r3, r0, r3
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	011b      	lsls	r3, r3, #4
 8005c8a:	3332      	adds	r3, #50	@ 0x32
 8005c8c:	4a07      	ldr	r2, [pc, #28]	@ (8005cac <UART_SetConfig+0x118>)
 8005c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c92:	095b      	lsrs	r3, r3, #5
 8005c94:	f003 020f 	and.w	r2, r3, #15
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	440a      	add	r2, r1
 8005c9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ca0:	bf00      	nop
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40013800 	.word	0x40013800
 8005cac:	51eb851f 	.word	0x51eb851f

08005cb0 <set_alarm>:

#include "AlarmReset.h"
#include "main.h"
#include "DebugLog.h"

void set_alarm(RTC_HandleTypeDef *hrtc, uint16_t sec) {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	807b      	strh	r3, [r7, #2]

	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 8005cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8005d30 <set_alarm+0x80>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d10f      	bne.n	8005ce8 <set_alarm+0x38>
		// MCU проснулся из Standby
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8005cc8:	4b19      	ldr	r3, [pc, #100]	@ (8005d30 <set_alarm+0x80>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a18      	ldr	r2, [pc, #96]	@ (8005d30 <set_alarm+0x80>)
 8005cce:	f043 0308 	orr.w	r3, r3, #8
 8005cd2:	6013      	str	r3, [r2, #0]
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8005cd4:	4b16      	ldr	r3, [pc, #88]	@ (8005d30 <set_alarm+0x80>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a15      	ldr	r2, [pc, #84]	@ (8005d30 <set_alarm+0x80>)
 8005cda:	f043 0304 	orr.w	r3, r3, #4
 8005cde:	6013      	str	r3, [r2, #0]

		// ОЧИСТИТЬ БУДИЛЬНИК
		HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7fe fa00 	bl	80040e8 <HAL_RTC_DeactivateAlarm>
	}

	RTC_AlarmTypeDef sAlarm = { 0 };
 8005ce8:	f107 0308 	add.w	r3, r7, #8
 8005cec:	2200      	movs	r2, #0
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	605a      	str	r2, [r3, #4]

	sAlarm.AlarmTime.Hours = 0;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = 0;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = sec;
 8005cfa:	887b      	ldrh	r3, [r7, #2]
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	72bb      	strb	r3, [r7, #10]
	sAlarm.Alarm = RTC_ALARM_A;
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]
	if (HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 8005d04:	f107 0308 	add.w	r3, r7, #8
 8005d08:	2200      	movs	r2, #0
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7fe f933 	bl	8003f78 <HAL_RTC_SetAlarm_IT>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <set_alarm+0x6c>
		Error_Handler();
 8005d18:	f7fb fcd6 	bl	80016c8 <Error_Handler>
	}

	debug("Wake Up timer setup for %d sec\n\r", sec);
 8005d1c:	887b      	ldrh	r3, [r7, #2]
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4804      	ldr	r0, [pc, #16]	@ (8005d34 <set_alarm+0x84>)
 8005d22:	f000 f937 	bl	8005f94 <debug>

}
 8005d26:	bf00      	nop
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	40007000 	.word	0x40007000
 8005d34:	080074c8 	.word	0x080074c8

08005d38 <get_battery_level>:

extern Battery_t Battery;

static uint8_t battery_percent_from_voltage(float);

Battery_t get_battery_level(ADC_HandleTypeDef *hadc) {
 8005d38:	b590      	push	{r4, r7, lr}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]

	debug("Polling for battery status...");
 8005d42:	4841      	ldr	r0, [pc, #260]	@ (8005e48 <get_battery_level+0x110>)
 8005d44:	f000 f926 	bl	8005f94 <debug>

	uint16_t adc_val = 0;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	82fb      	strh	r3, [r7, #22]
	uint16_t temp_val;

	HAL_ADCEx_Calibration_Start(hadc);
 8005d4c:	6838      	ldr	r0, [r7, #0]
 8005d4e:	f7fc fcbd 	bl	80026cc <HAL_ADCEx_Calibration_Start>

	for (uint8_t i = 1; i <= 3; i++) {
 8005d52:	2301      	movs	r3, #1
 8005d54:	757b      	strb	r3, [r7, #21]
 8005d56:	e017      	b.n	8005d88 <get_battery_level+0x50>

		HAL_ADC_Start(hadc);
 8005d58:	6838      	ldr	r0, [r7, #0]
 8005d5a:	f7fc f937 	bl	8001fcc <HAL_ADC_Start>

		HAL_ADC_PollForConversion(hadc, 10);
 8005d5e:	210a      	movs	r1, #10
 8005d60:	6838      	ldr	r0, [r7, #0]
 8005d62:	f7fc fa0d 	bl	8002180 <HAL_ADC_PollForConversion>

		temp_val = (uint16_t) HAL_ADC_GetValue(hadc);
 8005d66:	6838      	ldr	r0, [r7, #0]
 8005d68:	f7fc fb10 	bl	800238c <HAL_ADC_GetValue>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	81fb      	strh	r3, [r7, #14]

		HAL_ADC_Stop(hadc);
 8005d70:	6838      	ldr	r0, [r7, #0]
 8005d72:	f7fc f9d9 	bl	8002128 <HAL_ADC_Stop>

		if (temp_val > adc_val)
 8005d76:	89fa      	ldrh	r2, [r7, #14]
 8005d78:	8afb      	ldrh	r3, [r7, #22]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d901      	bls.n	8005d82 <get_battery_level+0x4a>
			adc_val = temp_val;
 8005d7e:	89fb      	ldrh	r3, [r7, #14]
 8005d80:	82fb      	strh	r3, [r7, #22]
	for (uint8_t i = 1; i <= 3; i++) {
 8005d82:	7d7b      	ldrb	r3, [r7, #21]
 8005d84:	3301      	adds	r3, #1
 8005d86:	757b      	strb	r3, [r7, #21]
 8005d88:	7d7b      	ldrb	r3, [r7, #21]
 8005d8a:	2b03      	cmp	r3, #3
 8005d8c:	d9e4      	bls.n	8005d58 <get_battery_level+0x20>
	 *  R2=3.3K
	 *  k=1.675
	 *  => Vmax = 2.7V
	 */

	float vref = 3.3f;
 8005d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8005e4c <get_battery_level+0x114>)
 8005d90:	613b      	str	r3, [r7, #16]

	Battery.vdd = (vref / 2.7f) * vref * adc_val / 4095.0f;
 8005d92:	492f      	ldr	r1, [pc, #188]	@ (8005e50 <get_battery_level+0x118>)
 8005d94:	6938      	ldr	r0, [r7, #16]
 8005d96:	f7fa ff99 	bl	8000ccc <__aeabi_fdiv>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	6939      	ldr	r1, [r7, #16]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fa fee0 	bl	8000b64 <__aeabi_fmul>
 8005da4:	4603      	mov	r3, r0
 8005da6:	461c      	mov	r4, r3
 8005da8:	8afb      	ldrh	r3, [r7, #22]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fa fe86 	bl	8000abc <__aeabi_i2f>
 8005db0:	4603      	mov	r3, r0
 8005db2:	4619      	mov	r1, r3
 8005db4:	4620      	mov	r0, r4
 8005db6:	f7fa fed5 	bl	8000b64 <__aeabi_fmul>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	4925      	ldr	r1, [pc, #148]	@ (8005e54 <get_battery_level+0x11c>)
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fa ff84 	bl	8000ccc <__aeabi_fdiv>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	4b23      	ldr	r3, [pc, #140]	@ (8005e58 <get_battery_level+0x120>)
 8005dca:	601a      	str	r2, [r3, #0]

	Battery.charge_percent = battery_percent_from_voltage(Battery.vdd);
 8005dcc:	4b22      	ldr	r3, [pc, #136]	@ (8005e58 <get_battery_level+0x120>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 f84d 	bl	8005e70 <battery_percent_from_voltage>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4b1f      	ldr	r3, [pc, #124]	@ (8005e58 <get_battery_level+0x120>)
 8005ddc:	711a      	strb	r2, [r3, #4]

	debug("Battery status:");
 8005dde:	481f      	ldr	r0, [pc, #124]	@ (8005e5c <get_battery_level+0x124>)
 8005de0:	f000 f8d8 	bl	8005f94 <debug>
	debug("\tVDD: %d.%02d", (uint8_t) Battery.vdd,
 8005de4:	4b1c      	ldr	r3, [pc, #112]	@ (8005e58 <get_battery_level+0x120>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fb f881 	bl	8000ef0 <__aeabi_f2uiz>
 8005dee:	4603      	mov	r3, r0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	461c      	mov	r4, r3
			(uint16_t) (Battery.vdd * 100) % 100);
 8005df4:	4b18      	ldr	r3, [pc, #96]	@ (8005e58 <get_battery_level+0x120>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4919      	ldr	r1, [pc, #100]	@ (8005e60 <get_battery_level+0x128>)
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fa feb2 	bl	8000b64 <__aeabi_fmul>
 8005e00:	4603      	mov	r3, r0
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fb f874 	bl	8000ef0 <__aeabi_f2uiz>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	b29b      	uxth	r3, r3
	debug("\tVDD: %d.%02d", (uint8_t) Battery.vdd,
 8005e0c:	4a15      	ldr	r2, [pc, #84]	@ (8005e64 <get_battery_level+0x12c>)
 8005e0e:	fba2 1203 	umull	r1, r2, r2, r3
 8005e12:	0952      	lsrs	r2, r2, #5
 8005e14:	2164      	movs	r1, #100	@ 0x64
 8005e16:	fb01 f202 	mul.w	r2, r1, r2
 8005e1a:	1a9b      	subs	r3, r3, r2
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	461a      	mov	r2, r3
 8005e20:	4621      	mov	r1, r4
 8005e22:	4811      	ldr	r0, [pc, #68]	@ (8005e68 <get_battery_level+0x130>)
 8005e24:	f000 f8b6 	bl	8005f94 <debug>
	debug("\tPercent: %d\n\r", Battery.charge_percent);
 8005e28:	4b0b      	ldr	r3, [pc, #44]	@ (8005e58 <get_battery_level+0x120>)
 8005e2a:	791b      	ldrb	r3, [r3, #4]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	480f      	ldr	r0, [pc, #60]	@ (8005e6c <get_battery_level+0x134>)
 8005e30:	f000 f8b0 	bl	8005f94 <debug>

	return Battery;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a08      	ldr	r2, [pc, #32]	@ (8005e58 <get_battery_level+0x120>)
 8005e38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e3c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	371c      	adds	r7, #28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd90      	pop	{r4, r7, pc}
 8005e48:	080074ec 	.word	0x080074ec
 8005e4c:	40533333 	.word	0x40533333
 8005e50:	402ccccd 	.word	0x402ccccd
 8005e54:	457ff000 	.word	0x457ff000
 8005e58:	200001e8 	.word	0x200001e8
 8005e5c:	0800750c 	.word	0x0800750c
 8005e60:	42c80000 	.word	0x42c80000
 8005e64:	51eb851f 	.word	0x51eb851f
 8005e68:	0800751c 	.word	0x0800751c
 8005e6c:	0800752c 	.word	0x0800752c

08005e70 <battery_percent_from_voltage>:

static uint8_t battery_percent_from_voltage(float voltage) {
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]

	if (voltage >= 3.2f)
 8005e78:	4937      	ldr	r1, [pc, #220]	@ (8005f58 <battery_percent_from_voltage+0xe8>)
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7fb f824 	bl	8000ec8 <__aeabi_fcmpge>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <battery_percent_from_voltage+0x1a>
		return 100;
 8005e86:	2364      	movs	r3, #100	@ 0x64
 8005e88:	e061      	b.n	8005f4e <battery_percent_from_voltage+0xde>
	else if (voltage >= 2.9f)
 8005e8a:	4934      	ldr	r1, [pc, #208]	@ (8005f5c <battery_percent_from_voltage+0xec>)
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7fb f81b 	bl	8000ec8 <__aeabi_fcmpge>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d019      	beq.n	8005ecc <battery_percent_from_voltage+0x5c>
		return (uint8_t) (80 + (voltage - 2.9f) / 0.3f * 20);
 8005e98:	4930      	ldr	r1, [pc, #192]	@ (8005f5c <battery_percent_from_voltage+0xec>)
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7fa fd58 	bl	8000950 <__aeabi_fsub>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	492f      	ldr	r1, [pc, #188]	@ (8005f60 <battery_percent_from_voltage+0xf0>)
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fa ff11 	bl	8000ccc <__aeabi_fdiv>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	492d      	ldr	r1, [pc, #180]	@ (8005f64 <battery_percent_from_voltage+0xf4>)
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fa fe58 	bl	8000b64 <__aeabi_fmul>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	492c      	ldr	r1, [pc, #176]	@ (8005f68 <battery_percent_from_voltage+0xf8>)
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fa fd4b 	bl	8000954 <__addsf3>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fb f815 	bl	8000ef0 <__aeabi_f2uiz>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	e040      	b.n	8005f4e <battery_percent_from_voltage+0xde>
	else if (voltage >= 2.5f)
 8005ecc:	4927      	ldr	r1, [pc, #156]	@ (8005f6c <battery_percent_from_voltage+0xfc>)
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7fa fffa 	bl	8000ec8 <__aeabi_fcmpge>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d019      	beq.n	8005f0e <battery_percent_from_voltage+0x9e>
		return (uint8_t) (20 + (voltage - 2.5f) / 0.4f * 60);
 8005eda:	4924      	ldr	r1, [pc, #144]	@ (8005f6c <battery_percent_from_voltage+0xfc>)
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7fa fd37 	bl	8000950 <__aeabi_fsub>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	4922      	ldr	r1, [pc, #136]	@ (8005f70 <battery_percent_from_voltage+0x100>)
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fa fef0 	bl	8000ccc <__aeabi_fdiv>
 8005eec:	4603      	mov	r3, r0
 8005eee:	4921      	ldr	r1, [pc, #132]	@ (8005f74 <battery_percent_from_voltage+0x104>)
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fa fe37 	bl	8000b64 <__aeabi_fmul>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	491a      	ldr	r1, [pc, #104]	@ (8005f64 <battery_percent_from_voltage+0xf4>)
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fa fd2a 	bl	8000954 <__addsf3>
 8005f00:	4603      	mov	r3, r0
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fa fff4 	bl	8000ef0 <__aeabi_f2uiz>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	e01f      	b.n	8005f4e <battery_percent_from_voltage+0xde>
	else if (voltage >= 2.0f)
 8005f0e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fa ffd8 	bl	8000ec8 <__aeabi_fcmpge>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d016      	beq.n	8005f4c <battery_percent_from_voltage+0xdc>
		return (uint8_t) ((voltage - 2.0f) / 0.5f * 20);
 8005f1e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7fa fd14 	bl	8000950 <__aeabi_fsub>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fa fecc 	bl	8000ccc <__aeabi_fdiv>
 8005f34:	4603      	mov	r3, r0
 8005f36:	490b      	ldr	r1, [pc, #44]	@ (8005f64 <battery_percent_from_voltage+0xf4>)
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fa fe13 	bl	8000b64 <__aeabi_fmul>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fa ffd5 	bl	8000ef0 <__aeabi_f2uiz>
 8005f46:	4603      	mov	r3, r0
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	e000      	b.n	8005f4e <battery_percent_from_voltage+0xde>
	else
		return 0;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	404ccccd 	.word	0x404ccccd
 8005f5c:	4039999a 	.word	0x4039999a
 8005f60:	3e99999a 	.word	0x3e99999a
 8005f64:	41a00000 	.word	0x41a00000
 8005f68:	42a00000 	.word	0x42a00000
 8005f6c:	40200000 	.word	0x40200000
 8005f70:	3ecccccd 	.word	0x3ecccccd
 8005f74:	42700000 	.word	0x42700000

08005f78 <debug_init>:
#include <string.h>
#include "main.h"

static UART_HandleTypeDef *huart;

void debug_init(UART_HandleTypeDef *hu) {
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
	huart = hu;
 8005f80:	4a03      	ldr	r2, [pc, #12]	@ (8005f90 <debug_init+0x18>)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6013      	str	r3, [r2, #0]
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bc80      	pop	{r7}
 8005f8e:	4770      	bx	lr
 8005f90:	20000204 	.word	0x20000204

08005f94 <debug>:

void debug(const char *format, ...) {
 8005f94:	b40f      	push	{r0, r1, r2, r3}
 8005f96:	b590      	push	{r4, r7, lr}
 8005f98:	b0bd      	sub	sp, #244	@ 0xf4
 8005f9a:	af02      	add	r7, sp, #8
	char buffer[128];

	char msg[96];

	va_list args;
	va_start(args, format);
 8005f9c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8005fa0:	607b      	str	r3, [r7, #4]
	vsnprintf(msg, sizeof(msg), format, args);
 8005fa2:	f107 0008 	add.w	r0, r7, #8
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8005fac:	2160      	movs	r1, #96	@ 0x60
 8005fae:	f000 fd7b 	bl	8006aa8 <vsniprintf>
	va_end(args);

	snprintf(buffer, sizeof(buffer), "[%4lu ms] %s\n\r", HAL_GetTick(), msg);
 8005fb2:	f7fb fe25 	bl	8001c00 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8005fbc:	f107 0308 	add.w	r3, r7, #8
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8005ffc <debug+0x68>)
 8005fc6:	2180      	movs	r1, #128	@ 0x80
 8005fc8:	f000 fd0a 	bl	80069e0 <sniprintf>

	HAL_UART_Transmit(huart, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8005fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8006000 <debug+0x6c>)
 8005fce:	681c      	ldr	r4, [r3, #0]
 8005fd0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7fa f8b9 	bl	800014c <strlen>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8005fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f7ff fc8e 	bl	8005908 <HAL_UART_Transmit>
}
 8005fec:	bf00      	nop
 8005fee:	37ec      	adds	r7, #236	@ 0xec
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005ff6:	b004      	add	sp, #16
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	0800753c 	.word	0x0800753c
 8006000:	20000204 	.word	0x20000204

08006004 <TIM2_Delay_us>:
#include <stdint.h>
#include "stm32f1xx_hal.h"

extern TIM_HandleTypeDef htim2;

void TIM2_Delay_us(uint32_t us) {
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]

	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800600c:	4b0a      	ldr	r3, [pc, #40]	@ (8006038 <TIM2_Delay_us+0x34>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2200      	movs	r2, #0
 8006012:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_Base_Start(&htim2);
 8006014:	4808      	ldr	r0, [pc, #32]	@ (8006038 <TIM2_Delay_us+0x34>)
 8006016:	f7ff f9a3 	bl	8005360 <HAL_TIM_Base_Start>

	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 800601a:	bf00      	nop
 800601c:	4b06      	ldr	r3, [pc, #24]	@ (8006038 <TIM2_Delay_us+0x34>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	429a      	cmp	r2, r3
 8006026:	d8f9      	bhi.n	800601c <TIM2_Delay_us+0x18>
		;

	HAL_TIM_Base_Stop(&htim2);
 8006028:	4803      	ldr	r0, [pc, #12]	@ (8006038 <TIM2_Delay_us+0x34>)
 800602a:	f7ff f9dd 	bl	80053e8 <HAL_TIM_Base_Stop>
}
 800602e:	bf00      	nop
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20000144 	.word	0x20000144

0800603c <poll_sensor>:
#include "InfraSensor.h"
#include "main.h"
#include "Delay_ns.h"
#include "DebugLog.h"

static float poll_sensor(ADC_HandleTypeDef *hadc, uint8_t times) {
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	460b      	mov	r3, r1
 8006046:	70fb      	strb	r3, [r7, #3]

//	HAL_GPIO_WritePin(V_LED_GPIO_Port, V_LED_Pin, GPIO_PIN_RESET);
//	HAL_Delay(100);
//	HAL_GPIO_WritePin(V_LED_GPIO_Port, V_LED_Pin, GPIO_PIN_SET);

	uint16_t adc_V0 = 0;
 8006048:	2300      	movs	r3, #0
 800604a:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 1; i <= times; i++) {
 800604c:	2301      	movs	r3, #1
 800604e:	737b      	strb	r3, [r7, #13]
 8006050:	e031      	b.n	80060b6 <poll_sensor+0x7a>

		HAL_GPIO_WritePin(V_LED_GPIO_Port, V_LED_Pin, GPIO_PIN_RESET);
 8006052:	2200      	movs	r2, #0
 8006054:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006058:	4826      	ldr	r0, [pc, #152]	@ (80060f4 <poll_sensor+0xb8>)
 800605a:	f7fc ff23 	bl	8002ea4 <HAL_GPIO_WritePin>

		HAL_ADCEx_Calibration_Start(hadc); // 3-5 us на stm32f103 при 8Mhz at ADC
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7fc fb34 	bl	80026cc <HAL_ADCEx_Calibration_Start>

		TIM2_Delay_us(280);
 8006064:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8006068:	f7ff ffcc 	bl	8006004 <TIM2_Delay_us>

//		HAL_GPIO_WritePin(INFO_LED_GPIO_Port, INFO_LED_Pin, GPIO_PIN_SET);
//		HAL_Delay(1);
//		HAL_GPIO_WritePin(INFO_LED_GPIO_Port, INFO_LED_Pin, GPIO_PIN_RESET);

		HAL_ADC_Start(hadc);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7fb ffad 	bl	8001fcc <HAL_ADC_Start>

		HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8006072:	f04f 31ff 	mov.w	r1, #4294967295
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7fc f882 	bl	8002180 <HAL_ADC_PollForConversion>

		uint16_t v_temp = (uint16_t) HAL_ADC_GetValue(hadc);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7fc f985 	bl	800238c <HAL_ADC_GetValue>
 8006082:	4603      	mov	r3, r0
 8006084:	817b      	strh	r3, [r7, #10]

		HAL_ADC_Stop(hadc);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fc f84e 	bl	8002128 <HAL_ADC_Stop>

		if (v_temp > adc_V0)
 800608c:	897a      	ldrh	r2, [r7, #10]
 800608e:	89fb      	ldrh	r3, [r7, #14]
 8006090:	429a      	cmp	r2, r3
 8006092:	d901      	bls.n	8006098 <poll_sensor+0x5c>
			adc_V0 = v_temp;
 8006094:	897b      	ldrh	r3, [r7, #10]
 8006096:	81fb      	strh	r3, [r7, #14]

		TIM2_Delay_us(40);
 8006098:	2028      	movs	r0, #40	@ 0x28
 800609a:	f7ff ffb3 	bl	8006004 <TIM2_Delay_us>

		HAL_GPIO_WritePin(V_LED_GPIO_Port, V_LED_Pin, GPIO_PIN_SET);
 800609e:	2201      	movs	r2, #1
 80060a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80060a4:	4813      	ldr	r0, [pc, #76]	@ (80060f4 <poll_sensor+0xb8>)
 80060a6:	f7fc fefd 	bl	8002ea4 <HAL_GPIO_WritePin>

		HAL_Delay(10);
 80060aa:	200a      	movs	r0, #10
 80060ac:	f7fb fdb2 	bl	8001c14 <HAL_Delay>
	for (uint8_t i = 1; i <= times; i++) {
 80060b0:	7b7b      	ldrb	r3, [r7, #13]
 80060b2:	3301      	adds	r3, #1
 80060b4:	737b      	strb	r3, [r7, #13]
 80060b6:	7b7a      	ldrb	r2, [r7, #13]
 80060b8:	78fb      	ldrb	r3, [r7, #3]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d9c9      	bls.n	8006052 <poll_sensor+0x16>
	 *  R2=10k
	 *  k=2.0
	 *
	 */

	debug("\t...DONE\n\r");
 80060be:	480e      	ldr	r0, [pc, #56]	@ (80060f8 <poll_sensor+0xbc>)
 80060c0:	f7ff ff68 	bl	8005f94 <debug>

	return (adc_V0 * 3.3f) / 4095.0f * 2.0f;
 80060c4:	89fb      	ldrh	r3, [r7, #14]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fa fcf8 	bl	8000abc <__aeabi_i2f>
 80060cc:	4603      	mov	r3, r0
 80060ce:	490b      	ldr	r1, [pc, #44]	@ (80060fc <poll_sensor+0xc0>)
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fa fd47 	bl	8000b64 <__aeabi_fmul>
 80060d6:	4603      	mov	r3, r0
 80060d8:	4909      	ldr	r1, [pc, #36]	@ (8006100 <poll_sensor+0xc4>)
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fa fdf6 	bl	8000ccc <__aeabi_fdiv>
 80060e0:	4603      	mov	r3, r0
 80060e2:	4619      	mov	r1, r3
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fa fc35 	bl	8000954 <__addsf3>
 80060ea:	4603      	mov	r3, r0

}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	40010c00 	.word	0x40010c00
 80060f8:	0800754c 	.word	0x0800754c
 80060fc:	40533333 	.word	0x40533333
 8006100:	457ff000 	.word	0x457ff000

08006104 <get_infra_sensor_data>:

float get_infra_sensor_data(ADC_HandleTypeDef *hadc) {
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]

	debug("Polling for dust sensor data...");
 800610c:	4807      	ldr	r0, [pc, #28]	@ (800612c <get_infra_sensor_data+0x28>)
 800610e:	f7ff ff41 	bl	8005f94 <debug>

	HAL_Delay(100); // Sensor stabilization time (min 100ms)
 8006112:	2064      	movs	r0, #100	@ 0x64
 8006114:	f7fb fd7e 	bl	8001c14 <HAL_Delay>

	return poll_sensor(hadc, 3);
 8006118:	2103      	movs	r1, #3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff ff8e 	bl	800603c <poll_sensor>
 8006120:	4603      	mov	r3, r0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	08007558 	.word	0x08007558

08006130 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8006130:	b4b0      	push	{r4, r5, r7}
 8006132:	b08f      	sub	sp, #60	@ 0x3c
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8006138:	f240 13b1 	movw	r3, #433	@ 0x1b1
 800613c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800613e:	2307      	movs	r3, #7
 8006140:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8006144:	2307      	movs	r3, #7
 8006146:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 800614a:	2301      	movs	r3, #1
 800614c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8006150:	23ff      	movs	r3, #255	@ 0xff
 8006152:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8006156:	2364      	movs	r3, #100	@ 0x64
 8006158:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 800615c:	2308      	movs	r3, #8
 800615e:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	461d      	mov	r5, r3
 8006164:	f107 040c 	add.w	r4, r7, #12
 8006168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800616a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800616c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800616e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006170:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006174:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	373c      	adds	r7, #60	@ 0x3c
 800617c:	46bd      	mov	sp, r7
 800617e:	bcb0      	pop	{r4, r5, r7}
 8006180:	4770      	bx	lr

08006182 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8006182:	b580      	push	{r7, lr}
 8006184:	b084      	sub	sp, #16
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 800618c:	2101      	movs	r1, #1
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f9ff 	bl	8006592 <LoRa_read>
 8006194:	4603      	mov	r3, r0
 8006196:	73bb      	strb	r3, [r7, #14]
	data = read;
 8006198:	7bbb      	ldrb	r3, [r7, #14]
 800619a:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d107      	bne.n	80061b2 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80061a2:	7bbb      	ldrb	r3, [r7, #14]
 80061a4:	f023 0307 	bic.w	r3, r3, #7
 80061a8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	61da      	str	r2, [r3, #28]
 80061b0:	e03e      	b.n	8006230 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d10c      	bne.n	80061d2 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80061b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061bc:	f023 0307 	bic.w	r3, r3, #7
 80061c0:	b25b      	sxtb	r3, r3
 80061c2:	f043 0301 	orr.w	r3, r3, #1
 80061c6:	b25b      	sxtb	r3, r3
 80061c8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	61da      	str	r2, [r3, #28]
 80061d0:	e02e      	b.n	8006230 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b03      	cmp	r3, #3
 80061d6:	d10c      	bne.n	80061f2 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80061d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061dc:	f023 0307 	bic.w	r3, r3, #7
 80061e0:	b25b      	sxtb	r3, r3
 80061e2:	f043 0303 	orr.w	r3, r3, #3
 80061e6:	b25b      	sxtb	r3, r3
 80061e8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2203      	movs	r2, #3
 80061ee:	61da      	str	r2, [r3, #28]
 80061f0:	e01e      	b.n	8006230 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b05      	cmp	r3, #5
 80061f6:	d10c      	bne.n	8006212 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80061f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061fc:	f023 0307 	bic.w	r3, r3, #7
 8006200:	b25b      	sxtb	r3, r3
 8006202:	f043 0305 	orr.w	r3, r3, #5
 8006206:	b25b      	sxtb	r3, r3
 8006208:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2205      	movs	r2, #5
 800620e:	61da      	str	r2, [r3, #28]
 8006210:	e00e      	b.n	8006230 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b06      	cmp	r3, #6
 8006216:	d10b      	bne.n	8006230 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8006218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800621c:	f023 0307 	bic.w	r3, r3, #7
 8006220:	b25b      	sxtb	r3, r3
 8006222:	f043 0306 	orr.w	r3, r3, #6
 8006226:	b25b      	sxtb	r3, r3
 8006228:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2206      	movs	r2, #6
 800622e:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8006230:	7bfb      	ldrb	r3, [r7, #15]
 8006232:	461a      	mov	r2, r3
 8006234:	2101      	movs	r1, #1
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f9c5 	bl	80065c6 <LoRa_write>
	//HAL_Delay(10);
}
 800623c:	bf00      	nop
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	603b      	str	r3, [r7, #0]
 8006250:	4613      	mov	r3, r2
 8006252:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6818      	ldr	r0, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	889b      	ldrh	r3, [r3, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	4619      	mov	r1, r3
 8006260:	f7fc fe20 	bl	8002ea4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6998      	ldr	r0, [r3, #24]
 8006268:	88fa      	ldrh	r2, [r7, #6]
 800626a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800626e:	68b9      	ldr	r1, [r7, #8]
 8006270:	f7fe fb09 	bl	8004886 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8006274:	bf00      	nop
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	4618      	mov	r0, r3
 800627c:	f7fe ff09 	bl	8005092 <HAL_SPI_GetState>
 8006280:	4603      	mov	r3, r0
 8006282:	2b01      	cmp	r3, #1
 8006284:	d1f7      	bne.n	8006276 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6998      	ldr	r0, [r3, #24]
 800628a:	8b3a      	ldrh	r2, [r7, #24]
 800628c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	f7fe fc3c 	bl	8004b0e <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8006296:	bf00      	nop
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	4618      	mov	r0, r3
 800629e:	f7fe fef8 	bl	8005092 <HAL_SPI_GetState>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d1f7      	bne.n	8006298 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6818      	ldr	r0, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	889b      	ldrh	r3, [r3, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	4619      	mov	r1, r3
 80062b4:	f7fc fdf6 	bl	8002ea4 <HAL_GPIO_WritePin>
}
 80062b8:	bf00      	nop
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	603b      	str	r3, [r7, #0]
 80062cc:	4613      	mov	r3, r2
 80062ce:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6818      	ldr	r0, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	889b      	ldrh	r3, [r3, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	4619      	mov	r1, r3
 80062dc:	f7fc fde2 	bl	8002ea4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6998      	ldr	r0, [r3, #24]
 80062e4:	88fa      	ldrh	r2, [r7, #6]
 80062e6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80062ea:	68b9      	ldr	r1, [r7, #8]
 80062ec:	f7fe facb 	bl	8004886 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80062f0:	bf00      	nop
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fe fecb 	bl	8005092 <HAL_SPI_GetState>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d1f7      	bne.n	80062f2 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6998      	ldr	r0, [r3, #24]
 8006306:	8b3a      	ldrh	r2, [r7, #24]
 8006308:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800630c:	6839      	ldr	r1, [r7, #0]
 800630e:	f7fe faba 	bl	8004886 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8006312:	bf00      	nop
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	4618      	mov	r0, r3
 800631a:	f7fe feba 	bl	8005092 <HAL_SPI_GetState>
 800631e:	4603      	mov	r3, r0
 8006320:	2b01      	cmp	r3, #1
 8006322:	d1f7      	bne.n	8006314 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6818      	ldr	r0, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	889b      	ldrh	r3, [r3, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	4619      	mov	r1, r3
 8006330:	f7fc fdb8 	bl	8002ea4 <HAL_GPIO_WritePin>
}
 8006334:	bf00      	nop
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8006348:	2126      	movs	r1, #38	@ 0x26
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f921 	bl	8006592 <LoRa_read>
 8006350:	4603      	mov	r3, r0
 8006352:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8006354:	78fb      	ldrb	r3, [r7, #3]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d004      	beq.n	8006364 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 800635a:	7bbb      	ldrb	r3, [r7, #14]
 800635c:	f043 0308 	orr.w	r3, r3, #8
 8006360:	73fb      	strb	r3, [r7, #15]
 8006362:	e003      	b.n	800636c <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8006364:	7bbb      	ldrb	r3, [r7, #14]
 8006366:	f023 0308 	bic.w	r3, r3, #8
 800636a:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	461a      	mov	r2, r3
 8006370:	2126      	movs	r1, #38	@ 0x26
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f927 	bl	80065c6 <LoRa_write>
	HAL_Delay(10);
 8006378:	200a      	movs	r0, #10
 800637a:	f7fb fc4b 	bl	8001c14 <HAL_Delay>
}
 800637e:	bf00      	nop
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
	...

08006388 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8006388:	b580      	push	{r7, lr}
 800638a:	b096      	sub	sp, #88	@ 0x58
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8006390:	4a17      	ldr	r2, [pc, #92]	@ (80063f0 <LoRa_setAutoLDO+0x68>)
 8006392:	f107 0308 	add.w	r3, r7, #8
 8006396:	4611      	mov	r1, r2
 8006398:	2250      	movs	r2, #80	@ 0x50
 800639a:	4618      	mov	r0, r3
 800639c:	f000 fbc6 	bl	8006b2c <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80063a6:	461a      	mov	r2, r3
 80063a8:	2301      	movs	r3, #1
 80063aa:	4093      	lsls	r3, r2
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fa f827 	bl	8000400 <__aeabi_i2d>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80063b8:	00db      	lsls	r3, r3, #3
 80063ba:	3358      	adds	r3, #88	@ 0x58
 80063bc:	443b      	add	r3, r7
 80063be:	3b50      	subs	r3, #80	@ 0x50
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	f7fa f9b0 	bl	8000728 <__aeabi_ddiv>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4610      	mov	r0, r2
 80063ce:	4619      	mov	r1, r3
 80063d0:	f7fa fa92 	bl	80008f8 <__aeabi_d2iz>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b10      	cmp	r3, #16
 80063d8:	bfcc      	ite	gt
 80063da:	2301      	movgt	r3, #1
 80063dc:	2300      	movle	r3, #0
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	4619      	mov	r1, r3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7ff ffaa 	bl	800633c <LoRa_setLowDaraRateOptimization>
}
 80063e8:	bf00      	nop
 80063ea:	3758      	adds	r7, #88	@ 0x58
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	08007578 	.word	0x08007578

080063f4 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	04db      	lsls	r3, r3, #19
 8006402:	115b      	asrs	r3, r3, #5
 8006404:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	0c1b      	lsrs	r3, r3, #16
 800640a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800640c:	7afb      	ldrb	r3, [r7, #11]
 800640e:	461a      	mov	r2, r3
 8006410:	2106      	movs	r1, #6
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f8d7 	bl	80065c6 <LoRa_write>
	HAL_Delay(5);
 8006418:	2005      	movs	r0, #5
 800641a:	f7fb fbfb 	bl	8001c14 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	0a1b      	lsrs	r3, r3, #8
 8006422:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8006424:	7afb      	ldrb	r3, [r7, #11]
 8006426:	461a      	mov	r2, r3
 8006428:	2107      	movs	r1, #7
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f8cb 	bl	80065c6 <LoRa_write>
	HAL_Delay(5);
 8006430:	2005      	movs	r0, #5
 8006432:	f7fb fbef 	bl	8001c14 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800643a:	7afb      	ldrb	r3, [r7, #11]
 800643c:	461a      	mov	r2, r3
 800643e:	2108      	movs	r1, #8
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f8c0 	bl	80065c6 <LoRa_write>
	HAL_Delay(5);
 8006446:	2005      	movs	r0, #5
 8006448:	f7fb fbe4 	bl	8001c14 <HAL_Delay>
}
 800644c:	bf00      	nop
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b0c      	cmp	r3, #12
 8006462:	dd01      	ble.n	8006468 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8006464:	230c      	movs	r3, #12
 8006466:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	2b06      	cmp	r3, #6
 800646c:	dc01      	bgt.n	8006472 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800646e:	2307      	movs	r3, #7
 8006470:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8006472:	211e      	movs	r1, #30
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f88c 	bl	8006592 <LoRa_read>
 800647a:	4603      	mov	r3, r0
 800647c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800647e:	200a      	movs	r0, #10
 8006480:	f7fb fbc8 	bl	8001c14 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	b2db      	uxtb	r3, r3
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	b2da      	uxtb	r2, r3
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	f003 030f 	and.w	r3, r3, #15
 8006492:	b2db      	uxtb	r3, r3
 8006494:	4413      	add	r3, r2
 8006496:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8006498:	7bbb      	ldrb	r3, [r7, #14]
 800649a:	461a      	mov	r2, r3
 800649c:	211e      	movs	r1, #30
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f891 	bl	80065c6 <LoRa_write>
	HAL_Delay(10);
 80064a4:	200a      	movs	r0, #10
 80064a6:	f7fb fbb5 	bl	8001c14 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7ff ff6c 	bl	8006388 <LoRa_setAutoLDO>
}
 80064b0:	bf00      	nop
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	460b      	mov	r3, r1
 80064c2:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80064c4:	78fb      	ldrb	r3, [r7, #3]
 80064c6:	461a      	mov	r2, r3
 80064c8:	2109      	movs	r1, #9
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f87b 	bl	80065c6 <LoRa_write>
	HAL_Delay(10);
 80064d0:	200a      	movs	r0, #10
 80064d2:	f7fb fb9f 	bl	8001c14 <HAL_Delay>
}
 80064d6:	bf00      	nop
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	460b      	mov	r3, r1
 80064ea:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80064ec:	2300      	movs	r3, #0
 80064ee:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	2b2c      	cmp	r3, #44	@ 0x2c
 80064f4:	d801      	bhi.n	80064fa <LoRa_setOCP+0x1a>
		current = 45;
 80064f6:	232d      	movs	r3, #45	@ 0x2d
 80064f8:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80064fa:	78fb      	ldrb	r3, [r7, #3]
 80064fc:	2bf0      	cmp	r3, #240	@ 0xf0
 80064fe:	d901      	bls.n	8006504 <LoRa_setOCP+0x24>
		current = 240;
 8006500:	23f0      	movs	r3, #240	@ 0xf0
 8006502:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8006504:	78fb      	ldrb	r3, [r7, #3]
 8006506:	2b78      	cmp	r3, #120	@ 0x78
 8006508:	d809      	bhi.n	800651e <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800650a:	78fb      	ldrb	r3, [r7, #3]
 800650c:	3b2d      	subs	r3, #45	@ 0x2d
 800650e:	4a12      	ldr	r2, [pc, #72]	@ (8006558 <LoRa_setOCP+0x78>)
 8006510:	fb82 1203 	smull	r1, r2, r2, r3
 8006514:	1052      	asrs	r2, r2, #1
 8006516:	17db      	asrs	r3, r3, #31
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	73fb      	strb	r3, [r7, #15]
 800651c:	e00b      	b.n	8006536 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800651e:	78fb      	ldrb	r3, [r7, #3]
 8006520:	2bf0      	cmp	r3, #240	@ 0xf0
 8006522:	d808      	bhi.n	8006536 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8006524:	78fb      	ldrb	r3, [r7, #3]
 8006526:	331e      	adds	r3, #30
 8006528:	4a0b      	ldr	r2, [pc, #44]	@ (8006558 <LoRa_setOCP+0x78>)
 800652a:	fb82 1203 	smull	r1, r2, r2, r3
 800652e:	1092      	asrs	r2, r2, #2
 8006530:	17db      	asrs	r3, r3, #31
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8006536:	7bfb      	ldrb	r3, [r7, #15]
 8006538:	3320      	adds	r3, #32
 800653a:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 800653c:	7bfb      	ldrb	r3, [r7, #15]
 800653e:	461a      	mov	r2, r3
 8006540:	210b      	movs	r1, #11
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f83f 	bl	80065c6 <LoRa_write>
	HAL_Delay(10);
 8006548:	200a      	movs	r0, #10
 800654a:	f7fb fb63 	bl	8001c14 <HAL_Delay>
}
 800654e:	bf00      	nop
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	66666667 	.word	0x66666667

0800655c <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8006564:	211e      	movs	r1, #30
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f813 	bl	8006592 <LoRa_read>
 800656c:	4603      	mov	r3, r0
 800656e:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8006570:	7bfb      	ldrb	r3, [r7, #15]
 8006572:	f043 0307 	orr.w	r3, r3, #7
 8006576:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8006578:	7bbb      	ldrb	r3, [r7, #14]
 800657a:	461a      	mov	r2, r3
 800657c:	211e      	movs	r1, #30
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f821 	bl	80065c6 <LoRa_write>
	HAL_Delay(10);
 8006584:	200a      	movs	r0, #10
 8006586:	f7fb fb45 	bl	8001c14 <HAL_Delay>
}
 800658a:	bf00      	nop
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8006592:	b580      	push	{r7, lr}
 8006594:	b086      	sub	sp, #24
 8006596:	af02      	add	r7, sp, #8
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	460b      	mov	r3, r1
 800659c:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800659e:	78fb      	ldrb	r3, [r7, #3]
 80065a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80065a8:	f107 030f 	add.w	r3, r7, #15
 80065ac:	f107 010e 	add.w	r1, r7, #14
 80065b0:	2201      	movs	r2, #1
 80065b2:	9200      	str	r2, [sp, #0]
 80065b4:	2201      	movs	r2, #1
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7ff fe44 	bl	8006244 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b086      	sub	sp, #24
 80065ca:	af02      	add	r7, sp, #8
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	460b      	mov	r3, r1
 80065d0:	70fb      	strb	r3, [r7, #3]
 80065d2:	4613      	mov	r3, r2
 80065d4:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80065d6:	78fb      	ldrb	r3, [r7, #3]
 80065d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	73bb      	strb	r3, [r7, #14]
	data = value;
 80065e0:	78bb      	ldrb	r3, [r7, #2]
 80065e2:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80065e4:	f107 030f 	add.w	r3, r7, #15
 80065e8:	f107 010e 	add.w	r1, r7, #14
 80065ec:	2201      	movs	r2, #1
 80065ee:	9200      	str	r2, [sp, #0]
 80065f0:	2201      	movs	r2, #1
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7ff fe64 	bl	80062c0 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80065f8:	bf00      	nop
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	607a      	str	r2, [r7, #4]
 800660a:	461a      	mov	r2, r3
 800660c:	460b      	mov	r3, r1
 800660e:	72fb      	strb	r3, [r7, #11]
 8006610:	4613      	mov	r3, r2
 8006612:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8006614:	7afb      	ldrb	r3, [r7, #11]
 8006616:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800661a:	b2db      	uxtb	r3, r3
 800661c:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6818      	ldr	r0, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	889b      	ldrh	r3, [r3, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	4619      	mov	r1, r3
 800662a:	f7fc fc3b 	bl	8002ea4 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6998      	ldr	r0, [r3, #24]
 8006632:	f107 0117 	add.w	r1, r7, #23
 8006636:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800663a:	2201      	movs	r2, #1
 800663c:	f7fe f923 	bl	8004886 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8006640:	bf00      	nop
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	4618      	mov	r0, r3
 8006648:	f7fe fd23 	bl	8005092 <HAL_SPI_GetState>
 800664c:	4603      	mov	r3, r0
 800664e:	2b01      	cmp	r3, #1
 8006650:	d1f7      	bne.n	8006642 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6998      	ldr	r0, [r3, #24]
 8006656:	7abb      	ldrb	r3, [r7, #10]
 8006658:	b29a      	uxth	r2, r3
 800665a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	f7fe f911 	bl	8004886 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8006664:	bf00      	nop
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	4618      	mov	r0, r3
 800666c:	f7fe fd11 	bl	8005092 <HAL_SPI_GetState>
 8006670:	4603      	mov	r3, r0
 8006672:	2b01      	cmp	r3, #1
 8006674:	d1f7      	bne.n	8006666 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6818      	ldr	r0, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	889b      	ldrh	r3, [r3, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	4619      	mov	r1, r3
 8006682:	f7fc fc0f 	bl	8002ea4 <HAL_GPIO_WritePin>
}
 8006686:	bf00      	nop
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 800668e:	b480      	push	{r7}
 8006690:	b083      	sub	sp, #12
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]

	return 1;
 8006696:	2301      	movs	r3, #1
}
 8006698:	4618      	mov	r0, r3
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	bc80      	pop	{r7}
 80066a0:	4770      	bx	lr

080066a2 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b086      	sub	sp, #24
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	60f8      	str	r0, [r7, #12]
 80066aa:	60b9      	str	r1, [r7, #8]
 80066ac:	4611      	mov	r1, r2
 80066ae:	461a      	mov	r2, r3
 80066b0:	460b      	mov	r3, r1
 80066b2:	71fb      	strb	r3, [r7, #7]
 80066b4:	4613      	mov	r3, r2
 80066b6:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80066be:	2101      	movs	r1, #1
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f7ff fd5e 	bl	8006182 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80066c6:	210e      	movs	r1, #14
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f7ff ff62 	bl	8006592 <LoRa_read>
 80066ce:	4603      	mov	r3, r0
 80066d0:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80066d2:	7cfb      	ldrb	r3, [r7, #19]
 80066d4:	461a      	mov	r2, r3
 80066d6:	210d      	movs	r1, #13
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f7ff ff74 	bl	80065c6 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80066de:	79fb      	ldrb	r3, [r7, #7]
 80066e0:	461a      	mov	r2, r3
 80066e2:	2122      	movs	r1, #34	@ 0x22
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f7ff ff6e 	bl	80065c6 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80066ea:	79fb      	ldrb	r3, [r7, #7]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	2100      	movs	r1, #0
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f7ff ff85 	bl	8006600 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80066f6:	2103      	movs	r1, #3
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f7ff fd42 	bl	8006182 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80066fe:	2112      	movs	r1, #18
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f7ff ff46 	bl	8006592 <LoRa_read>
 8006706:	4603      	mov	r3, r0
 8006708:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 800670a:	7cfb      	ldrb	r3, [r7, #19]
 800670c:	f003 0308 	and.w	r3, r3, #8
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00a      	beq.n	800672a <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8006714:	22ff      	movs	r2, #255	@ 0xff
 8006716:	2112      	movs	r1, #18
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f7ff ff54 	bl	80065c6 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 800671e:	6979      	ldr	r1, [r7, #20]
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f7ff fd2e 	bl	8006182 <LoRa_gotoMode>
			return 1;
 8006726:	2301      	movs	r3, #1
 8006728:	e00f      	b.n	800674a <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 800672a:	88bb      	ldrh	r3, [r7, #4]
 800672c:	3b01      	subs	r3, #1
 800672e:	80bb      	strh	r3, [r7, #4]
 8006730:	88bb      	ldrh	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d105      	bne.n	8006742 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8006736:	6979      	ldr	r1, [r7, #20]
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f7ff fd22 	bl	8006182 <LoRa_gotoMode>
				return 0;
 800673e:	2300      	movs	r3, #0
 8006740:	e003      	b.n	800674a <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8006742:	2001      	movs	r0, #1
 8006744:	f7fb fa66 	bl	8001c14 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8006748:	e7d9      	b.n	80066fe <LoRa_transmit+0x5c>
	}
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7ff ff97 	bl	800668e <LoRa_isvalid>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 8096 	beq.w	8006894 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8006768:	2100      	movs	r1, #0
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7ff fd09 	bl	8006182 <LoRa_gotoMode>
			HAL_Delay(10);
 8006770:	200a      	movs	r0, #10
 8006772:	f7fb fa4f 	bl	8001c14 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8006776:	2101      	movs	r1, #1
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7ff ff0a 	bl	8006592 <LoRa_read>
 800677e:	4603      	mov	r3, r0
 8006780:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8006782:	200a      	movs	r0, #10
 8006784:	f7fb fa46 	bl	8001c14 <HAL_Delay>
			data = read | 0x80;
 8006788:	7bfb      	ldrb	r3, [r7, #15]
 800678a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800678e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8006790:	7bbb      	ldrb	r3, [r7, #14]
 8006792:	461a      	mov	r2, r3
 8006794:	2101      	movs	r1, #1
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff ff15 	bl	80065c6 <LoRa_write>
			HAL_Delay(100);
 800679c:	2064      	movs	r0, #100	@ 0x64
 800679e:	f7fb fa39 	bl	8001c14 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	4619      	mov	r1, r3
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7ff fe23 	bl	80063f4 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80067b4:	4619      	mov	r1, r3
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7ff fe7e 	bl	80064b8 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80067c2:	4619      	mov	r1, r3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7ff fe8b 	bl	80064e0 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80067ca:	2223      	movs	r2, #35	@ 0x23
 80067cc:	210c      	movs	r1, #12
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7ff fef9 	bl	80065c6 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7ff fec1 	bl	800655c <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80067e0:	4619      	mov	r1, r3
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7ff fe36 	bl	8006454 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80067e8:	22ff      	movs	r2, #255	@ 0xff
 80067ea:	211f      	movs	r1, #31
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f7ff feea 	bl	80065c6 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80067f2:	2300      	movs	r3, #0
 80067f4:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80067fc:	011b      	lsls	r3, r3, #4
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8006806:	005b      	lsls	r3, r3, #1
 8006808:	b2db      	uxtb	r3, r3
 800680a:	4413      	add	r3, r2
 800680c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 800680e:	7bbb      	ldrb	r3, [r7, #14]
 8006810:	461a      	mov	r2, r3
 8006812:	211d      	movs	r1, #29
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7ff fed6 	bl	80065c6 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7ff fdb4 	bl	8006388 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006824:	0a1b      	lsrs	r3, r3, #8
 8006826:	b29b      	uxth	r3, r3
 8006828:	b2db      	uxtb	r3, r3
 800682a:	461a      	mov	r2, r3
 800682c:	2120      	movs	r1, #32
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7ff fec9 	bl	80065c6 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006838:	b2db      	uxtb	r3, r3
 800683a:	461a      	mov	r2, r3
 800683c:	2121      	movs	r1, #33	@ 0x21
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7ff fec1 	bl	80065c6 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8006844:	2140      	movs	r1, #64	@ 0x40
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7ff fea3 	bl	8006592 <LoRa_read>
 800684c:	4603      	mov	r3, r0
 800684e:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8006856:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8006858:	7bbb      	ldrb	r3, [r7, #14]
 800685a:	461a      	mov	r2, r3
 800685c:	2140      	movs	r1, #64	@ 0x40
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7ff feb1 	bl	80065c6 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8006864:	2101      	movs	r1, #1
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7ff fc8b 	bl	8006182 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8006872:	200a      	movs	r0, #10
 8006874:	f7fb f9ce 	bl	8001c14 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8006878:	2142      	movs	r1, #66	@ 0x42
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7ff fe89 	bl	8006592 <LoRa_read>
 8006880:	4603      	mov	r3, r0
 8006882:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8006884:	7bfb      	ldrb	r3, [r7, #15]
 8006886:	2b12      	cmp	r3, #18
 8006888:	d101      	bne.n	800688e <LoRa_init+0x13c>
				return LORA_OK;
 800688a:	23c8      	movs	r3, #200	@ 0xc8
 800688c:	e004      	b.n	8006898 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 800688e:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8006892:	e001      	b.n	8006898 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8006894:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <SX1278_Init>:
#include "Types.h"
#include "DebugLog.h"

static LoRa myLoRa;

void SX1278_Init(SPI_HandleTypeDef *hspi) {
 80068a0:	b5b0      	push	{r4, r5, r7, lr}
 80068a2:	b08e      	sub	sp, #56	@ 0x38
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6378      	str	r0, [r7, #52]	@ 0x34

	myLoRa = newLoRa();
 80068a8:	4c15      	ldr	r4, [pc, #84]	@ (8006900 <SX1278_Init+0x60>)
 80068aa:	463b      	mov	r3, r7
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7ff fc3f 	bl	8006130 <newLoRa>
 80068b2:	4625      	mov	r5, r4
 80068b4:	463c      	mov	r4, r7
 80068b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068be:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80068c2:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	myLoRa.CS_port = NSS_SIGNAL_GPIO_Port;
 80068c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006900 <SX1278_Init+0x60>)
 80068c8:	4a0e      	ldr	r2, [pc, #56]	@ (8006904 <SX1278_Init+0x64>)
 80068ca:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin = NSS_SIGNAL_Pin;
 80068cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006900 <SX1278_Init+0x60>)
 80068ce:	2210      	movs	r2, #16
 80068d0:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port = GPIOB;
 80068d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006900 <SX1278_Init+0x60>)
 80068d4:	4a0c      	ldr	r2, [pc, #48]	@ (8006908 <SX1278_Init+0x68>)
 80068d6:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin = RST_SIGNAL_Pin;
 80068d8:	4b09      	ldr	r3, [pc, #36]	@ (8006900 <SX1278_Init+0x60>)
 80068da:	2202      	movs	r2, #2
 80068dc:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port = DIO0_INT_GPIO_Port;
 80068de:	4b08      	ldr	r3, [pc, #32]	@ (8006900 <SX1278_Init+0x60>)
 80068e0:	4a09      	ldr	r2, [pc, #36]	@ (8006908 <SX1278_Init+0x68>)
 80068e2:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin = DIO0_INT_Pin;
 80068e4:	4b06      	ldr	r3, [pc, #24]	@ (8006900 <SX1278_Init+0x60>)
 80068e6:	2201      	movs	r2, #1
 80068e8:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx = hspi;
 80068ea:	4a05      	ldr	r2, [pc, #20]	@ (8006900 <SX1278_Init+0x60>)
 80068ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068ee:	6193      	str	r3, [r2, #24]

	LoRa_init(&myLoRa);
 80068f0:	4803      	ldr	r0, [pc, #12]	@ (8006900 <SX1278_Init+0x60>)
 80068f2:	f7ff ff2e 	bl	8006752 <LoRa_init>
}
 80068f6:	bf00      	nop
 80068f8:	3738      	adds	r7, #56	@ 0x38
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bdb0      	pop	{r4, r5, r7, pc}
 80068fe:	bf00      	nop
 8006900:	20000208 	.word	0x20000208
 8006904:	40010800 	.word	0x40010800
 8006908:	40010c00 	.word	0x40010c00

0800690c <send_packet>:

void send_packet(SPI_HandleTypeDef *hspi, SendPacket_t packet) {
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	4638      	mov	r0, r7
 8006916:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	debug("Enabling LoRa...");
 800691a:	4817      	ldr	r0, [pc, #92]	@ (8006978 <send_packet+0x6c>)
 800691c:	f7ff fb3a 	bl	8005f94 <debug>
	SX1278_Init(hspi);
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f7ff ffbd 	bl	80068a0 <SX1278_Init>

	uint8_t max_tries_to_send = 3;
 8006926:	2303      	movs	r3, #3
 8006928:	75bb      	strb	r3, [r7, #22]
	uint8_t current_try = 0;
 800692a:	2300      	movs	r3, #0
 800692c:	75fb      	strb	r3, [r7, #23]

	debug("Sending packet...");
 800692e:	4813      	ldr	r0, [pc, #76]	@ (800697c <send_packet+0x70>)
 8006930:	f7ff fb30 	bl	8005f94 <debug>

	while (1) {

		current_try++;
 8006934:	7dfb      	ldrb	r3, [r7, #23]
 8006936:	3301      	adds	r3, #1
 8006938:	75fb      	strb	r3, [r7, #23]

		if (LoRa_transmit(&myLoRa, (uint8_t*) &packet, sizeof(SendPacket_t),
 800693a:	4639      	mov	r1, r7
 800693c:	2364      	movs	r3, #100	@ 0x64
 800693e:	220c      	movs	r2, #12
 8006940:	480f      	ldr	r0, [pc, #60]	@ (8006980 <send_packet+0x74>)
 8006942:	f7ff feae 	bl	80066a2 <LoRa_transmit>
 8006946:	4603      	mov	r3, r0
 8006948:	2b01      	cmp	r3, #1
 800694a:	d105      	bne.n	8006958 <send_packet+0x4c>
				100) == 1) {
			debug("\t...DONE at %d try!\n\r", current_try);
 800694c:	7dfb      	ldrb	r3, [r7, #23]
 800694e:	4619      	mov	r1, r3
 8006950:	480c      	ldr	r0, [pc, #48]	@ (8006984 <send_packet+0x78>)
 8006952:	f7ff fb1f 	bl	8005f94 <debug>
			break;
 8006956:	e00b      	b.n	8006970 <send_packet+0x64>
		}

		if (current_try >= max_tries_to_send) {
 8006958:	7dfa      	ldrb	r2, [r7, #23]
 800695a:	7dbb      	ldrb	r3, [r7, #22]
 800695c:	429a      	cmp	r2, r3
 800695e:	d303      	bcc.n	8006968 <send_packet+0x5c>
			debug("...FAILED. Skipping!\n\r");
 8006960:	4809      	ldr	r0, [pc, #36]	@ (8006988 <send_packet+0x7c>)
 8006962:	f7ff fb17 	bl	8005f94 <debug>
			break;
 8006966:	e003      	b.n	8006970 <send_packet+0x64>
		}

		HAL_Delay(100);
 8006968:	2064      	movs	r0, #100	@ 0x64
 800696a:	f7fb f953 	bl	8001c14 <HAL_Delay>
		current_try++;
 800696e:	e7e1      	b.n	8006934 <send_packet+0x28>

	}
}
 8006970:	bf00      	nop
 8006972:	3718      	adds	r7, #24
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	080075c8 	.word	0x080075c8
 800697c:	080075dc 	.word	0x080075dc
 8006980:	20000208 	.word	0x20000208
 8006984:	080075f0 	.word	0x080075f0
 8006988:	08007608 	.word	0x08007608

0800698c <get_serial_number>:

#include "SerialNumber.h"
#include "stm32f1xx_hal.h"
#include "DebugLog.h"

SerialNumber_t get_serial_number() {
 800698c:	b590      	push	{r4, r7, lr}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
	debug("Polling for HW Serial...");
 8006994:	4810      	ldr	r0, [pc, #64]	@ (80069d8 <get_serial_number+0x4c>)
 8006996:	f7ff fafd 	bl	8005f94 <debug>

	SerialNumber_t Serial;

	Serial.byte_0 = HAL_GetUIDw0();
 800699a:	f7fb f95f 	bl	8001c5c <HAL_GetUIDw0>
 800699e:	4603      	mov	r3, r0
 80069a0:	60fb      	str	r3, [r7, #12]
	Serial.byte_1 = HAL_GetUIDw1();
 80069a2:	f7fb f965 	bl	8001c70 <HAL_GetUIDw1>
 80069a6:	4603      	mov	r3, r0
 80069a8:	613b      	str	r3, [r7, #16]
	Serial.byte_2 = HAL_GetUIDw2();
 80069aa:	f7fb f96b 	bl	8001c84 <HAL_GetUIDw2>
 80069ae:	4603      	mov	r3, r0
 80069b0:	617b      	str	r3, [r7, #20]

	debug("HW Serial: %d %d %d\n\r", Serial.byte_0, Serial.byte_1,
 80069b2:	68f9      	ldr	r1, [r7, #12]
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	4808      	ldr	r0, [pc, #32]	@ (80069dc <get_serial_number+0x50>)
 80069ba:	f7ff faeb 	bl	8005f94 <debug>
			Serial.byte_2);

	return Serial;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	461c      	mov	r4, r3
 80069c2:	f107 030c 	add.w	r3, r7, #12
 80069c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80069ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd90      	pop	{r4, r7, pc}
 80069d6:	bf00      	nop
 80069d8:	08007620 	.word	0x08007620
 80069dc:	0800763c 	.word	0x0800763c

080069e0 <sniprintf>:
 80069e0:	b40c      	push	{r2, r3}
 80069e2:	b530      	push	{r4, r5, lr}
 80069e4:	4b18      	ldr	r3, [pc, #96]	@ (8006a48 <sniprintf+0x68>)
 80069e6:	1e0c      	subs	r4, r1, #0
 80069e8:	681d      	ldr	r5, [r3, #0]
 80069ea:	b09d      	sub	sp, #116	@ 0x74
 80069ec:	da08      	bge.n	8006a00 <sniprintf+0x20>
 80069ee:	238b      	movs	r3, #139	@ 0x8b
 80069f0:	f04f 30ff 	mov.w	r0, #4294967295
 80069f4:	602b      	str	r3, [r5, #0]
 80069f6:	b01d      	add	sp, #116	@ 0x74
 80069f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069fc:	b002      	add	sp, #8
 80069fe:	4770      	bx	lr
 8006a00:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006a04:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006a08:	f04f 0300 	mov.w	r3, #0
 8006a0c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006a0e:	bf0c      	ite	eq
 8006a10:	4623      	moveq	r3, r4
 8006a12:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006a16:	9304      	str	r3, [sp, #16]
 8006a18:	9307      	str	r3, [sp, #28]
 8006a1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a1e:	9002      	str	r0, [sp, #8]
 8006a20:	9006      	str	r0, [sp, #24]
 8006a22:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006a26:	4628      	mov	r0, r5
 8006a28:	ab21      	add	r3, sp, #132	@ 0x84
 8006a2a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006a2c:	a902      	add	r1, sp, #8
 8006a2e:	9301      	str	r3, [sp, #4]
 8006a30:	f000 f9dc 	bl	8006dec <_svfiprintf_r>
 8006a34:	1c43      	adds	r3, r0, #1
 8006a36:	bfbc      	itt	lt
 8006a38:	238b      	movlt	r3, #139	@ 0x8b
 8006a3a:	602b      	strlt	r3, [r5, #0]
 8006a3c:	2c00      	cmp	r4, #0
 8006a3e:	d0da      	beq.n	80069f6 <sniprintf+0x16>
 8006a40:	2200      	movs	r2, #0
 8006a42:	9b02      	ldr	r3, [sp, #8]
 8006a44:	701a      	strb	r2, [r3, #0]
 8006a46:	e7d6      	b.n	80069f6 <sniprintf+0x16>
 8006a48:	2000000c 	.word	0x2000000c

08006a4c <_vsniprintf_r>:
 8006a4c:	b530      	push	{r4, r5, lr}
 8006a4e:	4614      	mov	r4, r2
 8006a50:	2c00      	cmp	r4, #0
 8006a52:	4605      	mov	r5, r0
 8006a54:	461a      	mov	r2, r3
 8006a56:	b09b      	sub	sp, #108	@ 0x6c
 8006a58:	da05      	bge.n	8006a66 <_vsniprintf_r+0x1a>
 8006a5a:	238b      	movs	r3, #139	@ 0x8b
 8006a5c:	6003      	str	r3, [r0, #0]
 8006a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a62:	b01b      	add	sp, #108	@ 0x6c
 8006a64:	bd30      	pop	{r4, r5, pc}
 8006a66:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006a6a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006a6e:	f04f 0300 	mov.w	r3, #0
 8006a72:	9319      	str	r3, [sp, #100]	@ 0x64
 8006a74:	bf0c      	ite	eq
 8006a76:	4623      	moveq	r3, r4
 8006a78:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006a7c:	9302      	str	r3, [sp, #8]
 8006a7e:	9305      	str	r3, [sp, #20]
 8006a80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a84:	9100      	str	r1, [sp, #0]
 8006a86:	9104      	str	r1, [sp, #16]
 8006a88:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006a8c:	4669      	mov	r1, sp
 8006a8e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006a90:	f000 f9ac 	bl	8006dec <_svfiprintf_r>
 8006a94:	1c43      	adds	r3, r0, #1
 8006a96:	bfbc      	itt	lt
 8006a98:	238b      	movlt	r3, #139	@ 0x8b
 8006a9a:	602b      	strlt	r3, [r5, #0]
 8006a9c:	2c00      	cmp	r4, #0
 8006a9e:	d0e0      	beq.n	8006a62 <_vsniprintf_r+0x16>
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	9b00      	ldr	r3, [sp, #0]
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	e7dc      	b.n	8006a62 <_vsniprintf_r+0x16>

08006aa8 <vsniprintf>:
 8006aa8:	b507      	push	{r0, r1, r2, lr}
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	4613      	mov	r3, r2
 8006aae:	460a      	mov	r2, r1
 8006ab0:	4601      	mov	r1, r0
 8006ab2:	4803      	ldr	r0, [pc, #12]	@ (8006ac0 <vsniprintf+0x18>)
 8006ab4:	6800      	ldr	r0, [r0, #0]
 8006ab6:	f7ff ffc9 	bl	8006a4c <_vsniprintf_r>
 8006aba:	b003      	add	sp, #12
 8006abc:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ac0:	2000000c 	.word	0x2000000c

08006ac4 <memset>:
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	4402      	add	r2, r0
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d100      	bne.n	8006ace <memset+0xa>
 8006acc:	4770      	bx	lr
 8006ace:	f803 1b01 	strb.w	r1, [r3], #1
 8006ad2:	e7f9      	b.n	8006ac8 <memset+0x4>

08006ad4 <__errno>:
 8006ad4:	4b01      	ldr	r3, [pc, #4]	@ (8006adc <__errno+0x8>)
 8006ad6:	6818      	ldr	r0, [r3, #0]
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	2000000c 	.word	0x2000000c

08006ae0 <__libc_init_array>:
 8006ae0:	b570      	push	{r4, r5, r6, lr}
 8006ae2:	2600      	movs	r6, #0
 8006ae4:	4d0c      	ldr	r5, [pc, #48]	@ (8006b18 <__libc_init_array+0x38>)
 8006ae6:	4c0d      	ldr	r4, [pc, #52]	@ (8006b1c <__libc_init_array+0x3c>)
 8006ae8:	1b64      	subs	r4, r4, r5
 8006aea:	10a4      	asrs	r4, r4, #2
 8006aec:	42a6      	cmp	r6, r4
 8006aee:	d109      	bne.n	8006b04 <__libc_init_array+0x24>
 8006af0:	f000 fc76 	bl	80073e0 <_init>
 8006af4:	2600      	movs	r6, #0
 8006af6:	4d0a      	ldr	r5, [pc, #40]	@ (8006b20 <__libc_init_array+0x40>)
 8006af8:	4c0a      	ldr	r4, [pc, #40]	@ (8006b24 <__libc_init_array+0x44>)
 8006afa:	1b64      	subs	r4, r4, r5
 8006afc:	10a4      	asrs	r4, r4, #2
 8006afe:	42a6      	cmp	r6, r4
 8006b00:	d105      	bne.n	8006b0e <__libc_init_array+0x2e>
 8006b02:	bd70      	pop	{r4, r5, r6, pc}
 8006b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b08:	4798      	blx	r3
 8006b0a:	3601      	adds	r6, #1
 8006b0c:	e7ee      	b.n	8006aec <__libc_init_array+0xc>
 8006b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b12:	4798      	blx	r3
 8006b14:	3601      	adds	r6, #1
 8006b16:	e7f2      	b.n	8006afe <__libc_init_array+0x1e>
 8006b18:	080076d0 	.word	0x080076d0
 8006b1c:	080076d0 	.word	0x080076d0
 8006b20:	080076d0 	.word	0x080076d0
 8006b24:	080076d4 	.word	0x080076d4

08006b28 <__retarget_lock_acquire_recursive>:
 8006b28:	4770      	bx	lr

08006b2a <__retarget_lock_release_recursive>:
 8006b2a:	4770      	bx	lr

08006b2c <memcpy>:
 8006b2c:	440a      	add	r2, r1
 8006b2e:	4291      	cmp	r1, r2
 8006b30:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b34:	d100      	bne.n	8006b38 <memcpy+0xc>
 8006b36:	4770      	bx	lr
 8006b38:	b510      	push	{r4, lr}
 8006b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b3e:	4291      	cmp	r1, r2
 8006b40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b44:	d1f9      	bne.n	8006b3a <memcpy+0xe>
 8006b46:	bd10      	pop	{r4, pc}

08006b48 <_free_r>:
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	2900      	cmp	r1, #0
 8006b4e:	d040      	beq.n	8006bd2 <_free_r+0x8a>
 8006b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b54:	1f0c      	subs	r4, r1, #4
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	bfb8      	it	lt
 8006b5a:	18e4      	addlt	r4, r4, r3
 8006b5c:	f000 f8de 	bl	8006d1c <__malloc_lock>
 8006b60:	4a1c      	ldr	r2, [pc, #112]	@ (8006bd4 <_free_r+0x8c>)
 8006b62:	6813      	ldr	r3, [r2, #0]
 8006b64:	b933      	cbnz	r3, 8006b74 <_free_r+0x2c>
 8006b66:	6063      	str	r3, [r4, #4]
 8006b68:	6014      	str	r4, [r2, #0]
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b70:	f000 b8da 	b.w	8006d28 <__malloc_unlock>
 8006b74:	42a3      	cmp	r3, r4
 8006b76:	d908      	bls.n	8006b8a <_free_r+0x42>
 8006b78:	6820      	ldr	r0, [r4, #0]
 8006b7a:	1821      	adds	r1, r4, r0
 8006b7c:	428b      	cmp	r3, r1
 8006b7e:	bf01      	itttt	eq
 8006b80:	6819      	ldreq	r1, [r3, #0]
 8006b82:	685b      	ldreq	r3, [r3, #4]
 8006b84:	1809      	addeq	r1, r1, r0
 8006b86:	6021      	streq	r1, [r4, #0]
 8006b88:	e7ed      	b.n	8006b66 <_free_r+0x1e>
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	b10b      	cbz	r3, 8006b94 <_free_r+0x4c>
 8006b90:	42a3      	cmp	r3, r4
 8006b92:	d9fa      	bls.n	8006b8a <_free_r+0x42>
 8006b94:	6811      	ldr	r1, [r2, #0]
 8006b96:	1850      	adds	r0, r2, r1
 8006b98:	42a0      	cmp	r0, r4
 8006b9a:	d10b      	bne.n	8006bb4 <_free_r+0x6c>
 8006b9c:	6820      	ldr	r0, [r4, #0]
 8006b9e:	4401      	add	r1, r0
 8006ba0:	1850      	adds	r0, r2, r1
 8006ba2:	4283      	cmp	r3, r0
 8006ba4:	6011      	str	r1, [r2, #0]
 8006ba6:	d1e0      	bne.n	8006b6a <_free_r+0x22>
 8006ba8:	6818      	ldr	r0, [r3, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	4408      	add	r0, r1
 8006bae:	6010      	str	r0, [r2, #0]
 8006bb0:	6053      	str	r3, [r2, #4]
 8006bb2:	e7da      	b.n	8006b6a <_free_r+0x22>
 8006bb4:	d902      	bls.n	8006bbc <_free_r+0x74>
 8006bb6:	230c      	movs	r3, #12
 8006bb8:	602b      	str	r3, [r5, #0]
 8006bba:	e7d6      	b.n	8006b6a <_free_r+0x22>
 8006bbc:	6820      	ldr	r0, [r4, #0]
 8006bbe:	1821      	adds	r1, r4, r0
 8006bc0:	428b      	cmp	r3, r1
 8006bc2:	bf01      	itttt	eq
 8006bc4:	6819      	ldreq	r1, [r3, #0]
 8006bc6:	685b      	ldreq	r3, [r3, #4]
 8006bc8:	1809      	addeq	r1, r1, r0
 8006bca:	6021      	streq	r1, [r4, #0]
 8006bcc:	6063      	str	r3, [r4, #4]
 8006bce:	6054      	str	r4, [r2, #4]
 8006bd0:	e7cb      	b.n	8006b6a <_free_r+0x22>
 8006bd2:	bd38      	pop	{r3, r4, r5, pc}
 8006bd4:	20000378 	.word	0x20000378

08006bd8 <sbrk_aligned>:
 8006bd8:	b570      	push	{r4, r5, r6, lr}
 8006bda:	4e0f      	ldr	r6, [pc, #60]	@ (8006c18 <sbrk_aligned+0x40>)
 8006bdc:	460c      	mov	r4, r1
 8006bde:	6831      	ldr	r1, [r6, #0]
 8006be0:	4605      	mov	r5, r0
 8006be2:	b911      	cbnz	r1, 8006bea <sbrk_aligned+0x12>
 8006be4:	f000 fba8 	bl	8007338 <_sbrk_r>
 8006be8:	6030      	str	r0, [r6, #0]
 8006bea:	4621      	mov	r1, r4
 8006bec:	4628      	mov	r0, r5
 8006bee:	f000 fba3 	bl	8007338 <_sbrk_r>
 8006bf2:	1c43      	adds	r3, r0, #1
 8006bf4:	d103      	bne.n	8006bfe <sbrk_aligned+0x26>
 8006bf6:	f04f 34ff 	mov.w	r4, #4294967295
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	bd70      	pop	{r4, r5, r6, pc}
 8006bfe:	1cc4      	adds	r4, r0, #3
 8006c00:	f024 0403 	bic.w	r4, r4, #3
 8006c04:	42a0      	cmp	r0, r4
 8006c06:	d0f8      	beq.n	8006bfa <sbrk_aligned+0x22>
 8006c08:	1a21      	subs	r1, r4, r0
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	f000 fb94 	bl	8007338 <_sbrk_r>
 8006c10:	3001      	adds	r0, #1
 8006c12:	d1f2      	bne.n	8006bfa <sbrk_aligned+0x22>
 8006c14:	e7ef      	b.n	8006bf6 <sbrk_aligned+0x1e>
 8006c16:	bf00      	nop
 8006c18:	20000374 	.word	0x20000374

08006c1c <_malloc_r>:
 8006c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c20:	1ccd      	adds	r5, r1, #3
 8006c22:	f025 0503 	bic.w	r5, r5, #3
 8006c26:	3508      	adds	r5, #8
 8006c28:	2d0c      	cmp	r5, #12
 8006c2a:	bf38      	it	cc
 8006c2c:	250c      	movcc	r5, #12
 8006c2e:	2d00      	cmp	r5, #0
 8006c30:	4606      	mov	r6, r0
 8006c32:	db01      	blt.n	8006c38 <_malloc_r+0x1c>
 8006c34:	42a9      	cmp	r1, r5
 8006c36:	d904      	bls.n	8006c42 <_malloc_r+0x26>
 8006c38:	230c      	movs	r3, #12
 8006c3a:	6033      	str	r3, [r6, #0]
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d18 <_malloc_r+0xfc>
 8006c46:	f000 f869 	bl	8006d1c <__malloc_lock>
 8006c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8006c4e:	461c      	mov	r4, r3
 8006c50:	bb44      	cbnz	r4, 8006ca4 <_malloc_r+0x88>
 8006c52:	4629      	mov	r1, r5
 8006c54:	4630      	mov	r0, r6
 8006c56:	f7ff ffbf 	bl	8006bd8 <sbrk_aligned>
 8006c5a:	1c43      	adds	r3, r0, #1
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	d158      	bne.n	8006d12 <_malloc_r+0xf6>
 8006c60:	f8d8 4000 	ldr.w	r4, [r8]
 8006c64:	4627      	mov	r7, r4
 8006c66:	2f00      	cmp	r7, #0
 8006c68:	d143      	bne.n	8006cf2 <_malloc_r+0xd6>
 8006c6a:	2c00      	cmp	r4, #0
 8006c6c:	d04b      	beq.n	8006d06 <_malloc_r+0xea>
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	4639      	mov	r1, r7
 8006c72:	4630      	mov	r0, r6
 8006c74:	eb04 0903 	add.w	r9, r4, r3
 8006c78:	f000 fb5e 	bl	8007338 <_sbrk_r>
 8006c7c:	4581      	cmp	r9, r0
 8006c7e:	d142      	bne.n	8006d06 <_malloc_r+0xea>
 8006c80:	6821      	ldr	r1, [r4, #0]
 8006c82:	4630      	mov	r0, r6
 8006c84:	1a6d      	subs	r5, r5, r1
 8006c86:	4629      	mov	r1, r5
 8006c88:	f7ff ffa6 	bl	8006bd8 <sbrk_aligned>
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d03a      	beq.n	8006d06 <_malloc_r+0xea>
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	442b      	add	r3, r5
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	f8d8 3000 	ldr.w	r3, [r8]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	bb62      	cbnz	r2, 8006cf8 <_malloc_r+0xdc>
 8006c9e:	f8c8 7000 	str.w	r7, [r8]
 8006ca2:	e00f      	b.n	8006cc4 <_malloc_r+0xa8>
 8006ca4:	6822      	ldr	r2, [r4, #0]
 8006ca6:	1b52      	subs	r2, r2, r5
 8006ca8:	d420      	bmi.n	8006cec <_malloc_r+0xd0>
 8006caa:	2a0b      	cmp	r2, #11
 8006cac:	d917      	bls.n	8006cde <_malloc_r+0xc2>
 8006cae:	1961      	adds	r1, r4, r5
 8006cb0:	42a3      	cmp	r3, r4
 8006cb2:	6025      	str	r5, [r4, #0]
 8006cb4:	bf18      	it	ne
 8006cb6:	6059      	strne	r1, [r3, #4]
 8006cb8:	6863      	ldr	r3, [r4, #4]
 8006cba:	bf08      	it	eq
 8006cbc:	f8c8 1000 	streq.w	r1, [r8]
 8006cc0:	5162      	str	r2, [r4, r5]
 8006cc2:	604b      	str	r3, [r1, #4]
 8006cc4:	4630      	mov	r0, r6
 8006cc6:	f000 f82f 	bl	8006d28 <__malloc_unlock>
 8006cca:	f104 000b 	add.w	r0, r4, #11
 8006cce:	1d23      	adds	r3, r4, #4
 8006cd0:	f020 0007 	bic.w	r0, r0, #7
 8006cd4:	1ac2      	subs	r2, r0, r3
 8006cd6:	bf1c      	itt	ne
 8006cd8:	1a1b      	subne	r3, r3, r0
 8006cda:	50a3      	strne	r3, [r4, r2]
 8006cdc:	e7af      	b.n	8006c3e <_malloc_r+0x22>
 8006cde:	6862      	ldr	r2, [r4, #4]
 8006ce0:	42a3      	cmp	r3, r4
 8006ce2:	bf0c      	ite	eq
 8006ce4:	f8c8 2000 	streq.w	r2, [r8]
 8006ce8:	605a      	strne	r2, [r3, #4]
 8006cea:	e7eb      	b.n	8006cc4 <_malloc_r+0xa8>
 8006cec:	4623      	mov	r3, r4
 8006cee:	6864      	ldr	r4, [r4, #4]
 8006cf0:	e7ae      	b.n	8006c50 <_malloc_r+0x34>
 8006cf2:	463c      	mov	r4, r7
 8006cf4:	687f      	ldr	r7, [r7, #4]
 8006cf6:	e7b6      	b.n	8006c66 <_malloc_r+0x4a>
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	42a3      	cmp	r3, r4
 8006cfe:	d1fb      	bne.n	8006cf8 <_malloc_r+0xdc>
 8006d00:	2300      	movs	r3, #0
 8006d02:	6053      	str	r3, [r2, #4]
 8006d04:	e7de      	b.n	8006cc4 <_malloc_r+0xa8>
 8006d06:	230c      	movs	r3, #12
 8006d08:	4630      	mov	r0, r6
 8006d0a:	6033      	str	r3, [r6, #0]
 8006d0c:	f000 f80c 	bl	8006d28 <__malloc_unlock>
 8006d10:	e794      	b.n	8006c3c <_malloc_r+0x20>
 8006d12:	6005      	str	r5, [r0, #0]
 8006d14:	e7d6      	b.n	8006cc4 <_malloc_r+0xa8>
 8006d16:	bf00      	nop
 8006d18:	20000378 	.word	0x20000378

08006d1c <__malloc_lock>:
 8006d1c:	4801      	ldr	r0, [pc, #4]	@ (8006d24 <__malloc_lock+0x8>)
 8006d1e:	f7ff bf03 	b.w	8006b28 <__retarget_lock_acquire_recursive>
 8006d22:	bf00      	nop
 8006d24:	20000370 	.word	0x20000370

08006d28 <__malloc_unlock>:
 8006d28:	4801      	ldr	r0, [pc, #4]	@ (8006d30 <__malloc_unlock+0x8>)
 8006d2a:	f7ff befe 	b.w	8006b2a <__retarget_lock_release_recursive>
 8006d2e:	bf00      	nop
 8006d30:	20000370 	.word	0x20000370

08006d34 <__ssputs_r>:
 8006d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d38:	461f      	mov	r7, r3
 8006d3a:	688e      	ldr	r6, [r1, #8]
 8006d3c:	4682      	mov	sl, r0
 8006d3e:	42be      	cmp	r6, r7
 8006d40:	460c      	mov	r4, r1
 8006d42:	4690      	mov	r8, r2
 8006d44:	680b      	ldr	r3, [r1, #0]
 8006d46:	d82d      	bhi.n	8006da4 <__ssputs_r+0x70>
 8006d48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006d50:	d026      	beq.n	8006da0 <__ssputs_r+0x6c>
 8006d52:	6965      	ldr	r5, [r4, #20]
 8006d54:	6909      	ldr	r1, [r1, #16]
 8006d56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d5a:	eba3 0901 	sub.w	r9, r3, r1
 8006d5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d62:	1c7b      	adds	r3, r7, #1
 8006d64:	444b      	add	r3, r9
 8006d66:	106d      	asrs	r5, r5, #1
 8006d68:	429d      	cmp	r5, r3
 8006d6a:	bf38      	it	cc
 8006d6c:	461d      	movcc	r5, r3
 8006d6e:	0553      	lsls	r3, r2, #21
 8006d70:	d527      	bpl.n	8006dc2 <__ssputs_r+0x8e>
 8006d72:	4629      	mov	r1, r5
 8006d74:	f7ff ff52 	bl	8006c1c <_malloc_r>
 8006d78:	4606      	mov	r6, r0
 8006d7a:	b360      	cbz	r0, 8006dd6 <__ssputs_r+0xa2>
 8006d7c:	464a      	mov	r2, r9
 8006d7e:	6921      	ldr	r1, [r4, #16]
 8006d80:	f7ff fed4 	bl	8006b2c <memcpy>
 8006d84:	89a3      	ldrh	r3, [r4, #12]
 8006d86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d8e:	81a3      	strh	r3, [r4, #12]
 8006d90:	6126      	str	r6, [r4, #16]
 8006d92:	444e      	add	r6, r9
 8006d94:	6026      	str	r6, [r4, #0]
 8006d96:	463e      	mov	r6, r7
 8006d98:	6165      	str	r5, [r4, #20]
 8006d9a:	eba5 0509 	sub.w	r5, r5, r9
 8006d9e:	60a5      	str	r5, [r4, #8]
 8006da0:	42be      	cmp	r6, r7
 8006da2:	d900      	bls.n	8006da6 <__ssputs_r+0x72>
 8006da4:	463e      	mov	r6, r7
 8006da6:	4632      	mov	r2, r6
 8006da8:	4641      	mov	r1, r8
 8006daa:	6820      	ldr	r0, [r4, #0]
 8006dac:	f000 faaa 	bl	8007304 <memmove>
 8006db0:	2000      	movs	r0, #0
 8006db2:	68a3      	ldr	r3, [r4, #8]
 8006db4:	1b9b      	subs	r3, r3, r6
 8006db6:	60a3      	str	r3, [r4, #8]
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	4433      	add	r3, r6
 8006dbc:	6023      	str	r3, [r4, #0]
 8006dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc2:	462a      	mov	r2, r5
 8006dc4:	f000 fad6 	bl	8007374 <_realloc_r>
 8006dc8:	4606      	mov	r6, r0
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	d1e0      	bne.n	8006d90 <__ssputs_r+0x5c>
 8006dce:	4650      	mov	r0, sl
 8006dd0:	6921      	ldr	r1, [r4, #16]
 8006dd2:	f7ff feb9 	bl	8006b48 <_free_r>
 8006dd6:	230c      	movs	r3, #12
 8006dd8:	f8ca 3000 	str.w	r3, [sl]
 8006ddc:	89a3      	ldrh	r3, [r4, #12]
 8006dde:	f04f 30ff 	mov.w	r0, #4294967295
 8006de2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006de6:	81a3      	strh	r3, [r4, #12]
 8006de8:	e7e9      	b.n	8006dbe <__ssputs_r+0x8a>
	...

08006dec <_svfiprintf_r>:
 8006dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df0:	4698      	mov	r8, r3
 8006df2:	898b      	ldrh	r3, [r1, #12]
 8006df4:	4607      	mov	r7, r0
 8006df6:	061b      	lsls	r3, r3, #24
 8006df8:	460d      	mov	r5, r1
 8006dfa:	4614      	mov	r4, r2
 8006dfc:	b09d      	sub	sp, #116	@ 0x74
 8006dfe:	d510      	bpl.n	8006e22 <_svfiprintf_r+0x36>
 8006e00:	690b      	ldr	r3, [r1, #16]
 8006e02:	b973      	cbnz	r3, 8006e22 <_svfiprintf_r+0x36>
 8006e04:	2140      	movs	r1, #64	@ 0x40
 8006e06:	f7ff ff09 	bl	8006c1c <_malloc_r>
 8006e0a:	6028      	str	r0, [r5, #0]
 8006e0c:	6128      	str	r0, [r5, #16]
 8006e0e:	b930      	cbnz	r0, 8006e1e <_svfiprintf_r+0x32>
 8006e10:	230c      	movs	r3, #12
 8006e12:	603b      	str	r3, [r7, #0]
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295
 8006e18:	b01d      	add	sp, #116	@ 0x74
 8006e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e1e:	2340      	movs	r3, #64	@ 0x40
 8006e20:	616b      	str	r3, [r5, #20]
 8006e22:	2300      	movs	r3, #0
 8006e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e26:	2320      	movs	r3, #32
 8006e28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e2c:	2330      	movs	r3, #48	@ 0x30
 8006e2e:	f04f 0901 	mov.w	r9, #1
 8006e32:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e36:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006fd0 <_svfiprintf_r+0x1e4>
 8006e3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e3e:	4623      	mov	r3, r4
 8006e40:	469a      	mov	sl, r3
 8006e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e46:	b10a      	cbz	r2, 8006e4c <_svfiprintf_r+0x60>
 8006e48:	2a25      	cmp	r2, #37	@ 0x25
 8006e4a:	d1f9      	bne.n	8006e40 <_svfiprintf_r+0x54>
 8006e4c:	ebba 0b04 	subs.w	fp, sl, r4
 8006e50:	d00b      	beq.n	8006e6a <_svfiprintf_r+0x7e>
 8006e52:	465b      	mov	r3, fp
 8006e54:	4622      	mov	r2, r4
 8006e56:	4629      	mov	r1, r5
 8006e58:	4638      	mov	r0, r7
 8006e5a:	f7ff ff6b 	bl	8006d34 <__ssputs_r>
 8006e5e:	3001      	adds	r0, #1
 8006e60:	f000 80a7 	beq.w	8006fb2 <_svfiprintf_r+0x1c6>
 8006e64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e66:	445a      	add	r2, fp
 8006e68:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 809f 	beq.w	8006fb2 <_svfiprintf_r+0x1c6>
 8006e74:	2300      	movs	r3, #0
 8006e76:	f04f 32ff 	mov.w	r2, #4294967295
 8006e7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e7e:	f10a 0a01 	add.w	sl, sl, #1
 8006e82:	9304      	str	r3, [sp, #16]
 8006e84:	9307      	str	r3, [sp, #28]
 8006e86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e8c:	4654      	mov	r4, sl
 8006e8e:	2205      	movs	r2, #5
 8006e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e94:	484e      	ldr	r0, [pc, #312]	@ (8006fd0 <_svfiprintf_r+0x1e4>)
 8006e96:	f000 fa5f 	bl	8007358 <memchr>
 8006e9a:	9a04      	ldr	r2, [sp, #16]
 8006e9c:	b9d8      	cbnz	r0, 8006ed6 <_svfiprintf_r+0xea>
 8006e9e:	06d0      	lsls	r0, r2, #27
 8006ea0:	bf44      	itt	mi
 8006ea2:	2320      	movmi	r3, #32
 8006ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ea8:	0711      	lsls	r1, r2, #28
 8006eaa:	bf44      	itt	mi
 8006eac:	232b      	movmi	r3, #43	@ 0x2b
 8006eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006eb8:	d015      	beq.n	8006ee6 <_svfiprintf_r+0xfa>
 8006eba:	4654      	mov	r4, sl
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	f04f 0c0a 	mov.w	ip, #10
 8006ec2:	9a07      	ldr	r2, [sp, #28]
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006eca:	3b30      	subs	r3, #48	@ 0x30
 8006ecc:	2b09      	cmp	r3, #9
 8006ece:	d94b      	bls.n	8006f68 <_svfiprintf_r+0x17c>
 8006ed0:	b1b0      	cbz	r0, 8006f00 <_svfiprintf_r+0x114>
 8006ed2:	9207      	str	r2, [sp, #28]
 8006ed4:	e014      	b.n	8006f00 <_svfiprintf_r+0x114>
 8006ed6:	eba0 0308 	sub.w	r3, r0, r8
 8006eda:	fa09 f303 	lsl.w	r3, r9, r3
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	46a2      	mov	sl, r4
 8006ee2:	9304      	str	r3, [sp, #16]
 8006ee4:	e7d2      	b.n	8006e8c <_svfiprintf_r+0xa0>
 8006ee6:	9b03      	ldr	r3, [sp, #12]
 8006ee8:	1d19      	adds	r1, r3, #4
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	9103      	str	r1, [sp, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	bfbb      	ittet	lt
 8006ef2:	425b      	neglt	r3, r3
 8006ef4:	f042 0202 	orrlt.w	r2, r2, #2
 8006ef8:	9307      	strge	r3, [sp, #28]
 8006efa:	9307      	strlt	r3, [sp, #28]
 8006efc:	bfb8      	it	lt
 8006efe:	9204      	strlt	r2, [sp, #16]
 8006f00:	7823      	ldrb	r3, [r4, #0]
 8006f02:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f04:	d10a      	bne.n	8006f1c <_svfiprintf_r+0x130>
 8006f06:	7863      	ldrb	r3, [r4, #1]
 8006f08:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f0a:	d132      	bne.n	8006f72 <_svfiprintf_r+0x186>
 8006f0c:	9b03      	ldr	r3, [sp, #12]
 8006f0e:	3402      	adds	r4, #2
 8006f10:	1d1a      	adds	r2, r3, #4
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	9203      	str	r2, [sp, #12]
 8006f16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f1a:	9305      	str	r3, [sp, #20]
 8006f1c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006fd4 <_svfiprintf_r+0x1e8>
 8006f20:	2203      	movs	r2, #3
 8006f22:	4650      	mov	r0, sl
 8006f24:	7821      	ldrb	r1, [r4, #0]
 8006f26:	f000 fa17 	bl	8007358 <memchr>
 8006f2a:	b138      	cbz	r0, 8006f3c <_svfiprintf_r+0x150>
 8006f2c:	2240      	movs	r2, #64	@ 0x40
 8006f2e:	9b04      	ldr	r3, [sp, #16]
 8006f30:	eba0 000a 	sub.w	r0, r0, sl
 8006f34:	4082      	lsls	r2, r0
 8006f36:	4313      	orrs	r3, r2
 8006f38:	3401      	adds	r4, #1
 8006f3a:	9304      	str	r3, [sp, #16]
 8006f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f40:	2206      	movs	r2, #6
 8006f42:	4825      	ldr	r0, [pc, #148]	@ (8006fd8 <_svfiprintf_r+0x1ec>)
 8006f44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f48:	f000 fa06 	bl	8007358 <memchr>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d036      	beq.n	8006fbe <_svfiprintf_r+0x1d2>
 8006f50:	4b22      	ldr	r3, [pc, #136]	@ (8006fdc <_svfiprintf_r+0x1f0>)
 8006f52:	bb1b      	cbnz	r3, 8006f9c <_svfiprintf_r+0x1b0>
 8006f54:	9b03      	ldr	r3, [sp, #12]
 8006f56:	3307      	adds	r3, #7
 8006f58:	f023 0307 	bic.w	r3, r3, #7
 8006f5c:	3308      	adds	r3, #8
 8006f5e:	9303      	str	r3, [sp, #12]
 8006f60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f62:	4433      	add	r3, r6
 8006f64:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f66:	e76a      	b.n	8006e3e <_svfiprintf_r+0x52>
 8006f68:	460c      	mov	r4, r1
 8006f6a:	2001      	movs	r0, #1
 8006f6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f70:	e7a8      	b.n	8006ec4 <_svfiprintf_r+0xd8>
 8006f72:	2300      	movs	r3, #0
 8006f74:	f04f 0c0a 	mov.w	ip, #10
 8006f78:	4619      	mov	r1, r3
 8006f7a:	3401      	adds	r4, #1
 8006f7c:	9305      	str	r3, [sp, #20]
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f84:	3a30      	subs	r2, #48	@ 0x30
 8006f86:	2a09      	cmp	r2, #9
 8006f88:	d903      	bls.n	8006f92 <_svfiprintf_r+0x1a6>
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0c6      	beq.n	8006f1c <_svfiprintf_r+0x130>
 8006f8e:	9105      	str	r1, [sp, #20]
 8006f90:	e7c4      	b.n	8006f1c <_svfiprintf_r+0x130>
 8006f92:	4604      	mov	r4, r0
 8006f94:	2301      	movs	r3, #1
 8006f96:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f9a:	e7f0      	b.n	8006f7e <_svfiprintf_r+0x192>
 8006f9c:	ab03      	add	r3, sp, #12
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	462a      	mov	r2, r5
 8006fa2:	4638      	mov	r0, r7
 8006fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8006fe0 <_svfiprintf_r+0x1f4>)
 8006fa6:	a904      	add	r1, sp, #16
 8006fa8:	f3af 8000 	nop.w
 8006fac:	1c42      	adds	r2, r0, #1
 8006fae:	4606      	mov	r6, r0
 8006fb0:	d1d6      	bne.n	8006f60 <_svfiprintf_r+0x174>
 8006fb2:	89ab      	ldrh	r3, [r5, #12]
 8006fb4:	065b      	lsls	r3, r3, #25
 8006fb6:	f53f af2d 	bmi.w	8006e14 <_svfiprintf_r+0x28>
 8006fba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fbc:	e72c      	b.n	8006e18 <_svfiprintf_r+0x2c>
 8006fbe:	ab03      	add	r3, sp, #12
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	462a      	mov	r2, r5
 8006fc4:	4638      	mov	r0, r7
 8006fc6:	4b06      	ldr	r3, [pc, #24]	@ (8006fe0 <_svfiprintf_r+0x1f4>)
 8006fc8:	a904      	add	r1, sp, #16
 8006fca:	f000 f87d 	bl	80070c8 <_printf_i>
 8006fce:	e7ed      	b.n	8006fac <_svfiprintf_r+0x1c0>
 8006fd0:	08007692 	.word	0x08007692
 8006fd4:	08007698 	.word	0x08007698
 8006fd8:	0800769c 	.word	0x0800769c
 8006fdc:	00000000 	.word	0x00000000
 8006fe0:	08006d35 	.word	0x08006d35

08006fe4 <_printf_common>:
 8006fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe8:	4616      	mov	r6, r2
 8006fea:	4698      	mov	r8, r3
 8006fec:	688a      	ldr	r2, [r1, #8]
 8006fee:	690b      	ldr	r3, [r1, #16]
 8006ff0:	4607      	mov	r7, r0
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	bfb8      	it	lt
 8006ff6:	4613      	movlt	r3, r2
 8006ff8:	6033      	str	r3, [r6, #0]
 8006ffa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ffe:	460c      	mov	r4, r1
 8007000:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007004:	b10a      	cbz	r2, 800700a <_printf_common+0x26>
 8007006:	3301      	adds	r3, #1
 8007008:	6033      	str	r3, [r6, #0]
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	0699      	lsls	r1, r3, #26
 800700e:	bf42      	ittt	mi
 8007010:	6833      	ldrmi	r3, [r6, #0]
 8007012:	3302      	addmi	r3, #2
 8007014:	6033      	strmi	r3, [r6, #0]
 8007016:	6825      	ldr	r5, [r4, #0]
 8007018:	f015 0506 	ands.w	r5, r5, #6
 800701c:	d106      	bne.n	800702c <_printf_common+0x48>
 800701e:	f104 0a19 	add.w	sl, r4, #25
 8007022:	68e3      	ldr	r3, [r4, #12]
 8007024:	6832      	ldr	r2, [r6, #0]
 8007026:	1a9b      	subs	r3, r3, r2
 8007028:	42ab      	cmp	r3, r5
 800702a:	dc2b      	bgt.n	8007084 <_printf_common+0xa0>
 800702c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007030:	6822      	ldr	r2, [r4, #0]
 8007032:	3b00      	subs	r3, #0
 8007034:	bf18      	it	ne
 8007036:	2301      	movne	r3, #1
 8007038:	0692      	lsls	r2, r2, #26
 800703a:	d430      	bmi.n	800709e <_printf_common+0xba>
 800703c:	4641      	mov	r1, r8
 800703e:	4638      	mov	r0, r7
 8007040:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007044:	47c8      	blx	r9
 8007046:	3001      	adds	r0, #1
 8007048:	d023      	beq.n	8007092 <_printf_common+0xae>
 800704a:	6823      	ldr	r3, [r4, #0]
 800704c:	6922      	ldr	r2, [r4, #16]
 800704e:	f003 0306 	and.w	r3, r3, #6
 8007052:	2b04      	cmp	r3, #4
 8007054:	bf14      	ite	ne
 8007056:	2500      	movne	r5, #0
 8007058:	6833      	ldreq	r3, [r6, #0]
 800705a:	f04f 0600 	mov.w	r6, #0
 800705e:	bf08      	it	eq
 8007060:	68e5      	ldreq	r5, [r4, #12]
 8007062:	f104 041a 	add.w	r4, r4, #26
 8007066:	bf08      	it	eq
 8007068:	1aed      	subeq	r5, r5, r3
 800706a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800706e:	bf08      	it	eq
 8007070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007074:	4293      	cmp	r3, r2
 8007076:	bfc4      	itt	gt
 8007078:	1a9b      	subgt	r3, r3, r2
 800707a:	18ed      	addgt	r5, r5, r3
 800707c:	42b5      	cmp	r5, r6
 800707e:	d11a      	bne.n	80070b6 <_printf_common+0xd2>
 8007080:	2000      	movs	r0, #0
 8007082:	e008      	b.n	8007096 <_printf_common+0xb2>
 8007084:	2301      	movs	r3, #1
 8007086:	4652      	mov	r2, sl
 8007088:	4641      	mov	r1, r8
 800708a:	4638      	mov	r0, r7
 800708c:	47c8      	blx	r9
 800708e:	3001      	adds	r0, #1
 8007090:	d103      	bne.n	800709a <_printf_common+0xb6>
 8007092:	f04f 30ff 	mov.w	r0, #4294967295
 8007096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800709a:	3501      	adds	r5, #1
 800709c:	e7c1      	b.n	8007022 <_printf_common+0x3e>
 800709e:	2030      	movs	r0, #48	@ 0x30
 80070a0:	18e1      	adds	r1, r4, r3
 80070a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070a6:	1c5a      	adds	r2, r3, #1
 80070a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070ac:	4422      	add	r2, r4
 80070ae:	3302      	adds	r3, #2
 80070b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070b4:	e7c2      	b.n	800703c <_printf_common+0x58>
 80070b6:	2301      	movs	r3, #1
 80070b8:	4622      	mov	r2, r4
 80070ba:	4641      	mov	r1, r8
 80070bc:	4638      	mov	r0, r7
 80070be:	47c8      	blx	r9
 80070c0:	3001      	adds	r0, #1
 80070c2:	d0e6      	beq.n	8007092 <_printf_common+0xae>
 80070c4:	3601      	adds	r6, #1
 80070c6:	e7d9      	b.n	800707c <_printf_common+0x98>

080070c8 <_printf_i>:
 80070c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070cc:	7e0f      	ldrb	r7, [r1, #24]
 80070ce:	4691      	mov	r9, r2
 80070d0:	2f78      	cmp	r7, #120	@ 0x78
 80070d2:	4680      	mov	r8, r0
 80070d4:	460c      	mov	r4, r1
 80070d6:	469a      	mov	sl, r3
 80070d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070de:	d807      	bhi.n	80070f0 <_printf_i+0x28>
 80070e0:	2f62      	cmp	r7, #98	@ 0x62
 80070e2:	d80a      	bhi.n	80070fa <_printf_i+0x32>
 80070e4:	2f00      	cmp	r7, #0
 80070e6:	f000 80d1 	beq.w	800728c <_printf_i+0x1c4>
 80070ea:	2f58      	cmp	r7, #88	@ 0x58
 80070ec:	f000 80b8 	beq.w	8007260 <_printf_i+0x198>
 80070f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070f8:	e03a      	b.n	8007170 <_printf_i+0xa8>
 80070fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80070fe:	2b15      	cmp	r3, #21
 8007100:	d8f6      	bhi.n	80070f0 <_printf_i+0x28>
 8007102:	a101      	add	r1, pc, #4	@ (adr r1, 8007108 <_printf_i+0x40>)
 8007104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007108:	08007161 	.word	0x08007161
 800710c:	08007175 	.word	0x08007175
 8007110:	080070f1 	.word	0x080070f1
 8007114:	080070f1 	.word	0x080070f1
 8007118:	080070f1 	.word	0x080070f1
 800711c:	080070f1 	.word	0x080070f1
 8007120:	08007175 	.word	0x08007175
 8007124:	080070f1 	.word	0x080070f1
 8007128:	080070f1 	.word	0x080070f1
 800712c:	080070f1 	.word	0x080070f1
 8007130:	080070f1 	.word	0x080070f1
 8007134:	08007273 	.word	0x08007273
 8007138:	0800719f 	.word	0x0800719f
 800713c:	0800722d 	.word	0x0800722d
 8007140:	080070f1 	.word	0x080070f1
 8007144:	080070f1 	.word	0x080070f1
 8007148:	08007295 	.word	0x08007295
 800714c:	080070f1 	.word	0x080070f1
 8007150:	0800719f 	.word	0x0800719f
 8007154:	080070f1 	.word	0x080070f1
 8007158:	080070f1 	.word	0x080070f1
 800715c:	08007235 	.word	0x08007235
 8007160:	6833      	ldr	r3, [r6, #0]
 8007162:	1d1a      	adds	r2, r3, #4
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6032      	str	r2, [r6, #0]
 8007168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800716c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007170:	2301      	movs	r3, #1
 8007172:	e09c      	b.n	80072ae <_printf_i+0x1e6>
 8007174:	6833      	ldr	r3, [r6, #0]
 8007176:	6820      	ldr	r0, [r4, #0]
 8007178:	1d19      	adds	r1, r3, #4
 800717a:	6031      	str	r1, [r6, #0]
 800717c:	0606      	lsls	r6, r0, #24
 800717e:	d501      	bpl.n	8007184 <_printf_i+0xbc>
 8007180:	681d      	ldr	r5, [r3, #0]
 8007182:	e003      	b.n	800718c <_printf_i+0xc4>
 8007184:	0645      	lsls	r5, r0, #25
 8007186:	d5fb      	bpl.n	8007180 <_printf_i+0xb8>
 8007188:	f9b3 5000 	ldrsh.w	r5, [r3]
 800718c:	2d00      	cmp	r5, #0
 800718e:	da03      	bge.n	8007198 <_printf_i+0xd0>
 8007190:	232d      	movs	r3, #45	@ 0x2d
 8007192:	426d      	negs	r5, r5
 8007194:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007198:	230a      	movs	r3, #10
 800719a:	4858      	ldr	r0, [pc, #352]	@ (80072fc <_printf_i+0x234>)
 800719c:	e011      	b.n	80071c2 <_printf_i+0xfa>
 800719e:	6821      	ldr	r1, [r4, #0]
 80071a0:	6833      	ldr	r3, [r6, #0]
 80071a2:	0608      	lsls	r0, r1, #24
 80071a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80071a8:	d402      	bmi.n	80071b0 <_printf_i+0xe8>
 80071aa:	0649      	lsls	r1, r1, #25
 80071ac:	bf48      	it	mi
 80071ae:	b2ad      	uxthmi	r5, r5
 80071b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80071b2:	6033      	str	r3, [r6, #0]
 80071b4:	bf14      	ite	ne
 80071b6:	230a      	movne	r3, #10
 80071b8:	2308      	moveq	r3, #8
 80071ba:	4850      	ldr	r0, [pc, #320]	@ (80072fc <_printf_i+0x234>)
 80071bc:	2100      	movs	r1, #0
 80071be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071c2:	6866      	ldr	r6, [r4, #4]
 80071c4:	2e00      	cmp	r6, #0
 80071c6:	60a6      	str	r6, [r4, #8]
 80071c8:	db05      	blt.n	80071d6 <_printf_i+0x10e>
 80071ca:	6821      	ldr	r1, [r4, #0]
 80071cc:	432e      	orrs	r6, r5
 80071ce:	f021 0104 	bic.w	r1, r1, #4
 80071d2:	6021      	str	r1, [r4, #0]
 80071d4:	d04b      	beq.n	800726e <_printf_i+0x1a6>
 80071d6:	4616      	mov	r6, r2
 80071d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80071dc:	fb03 5711 	mls	r7, r3, r1, r5
 80071e0:	5dc7      	ldrb	r7, [r0, r7]
 80071e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071e6:	462f      	mov	r7, r5
 80071e8:	42bb      	cmp	r3, r7
 80071ea:	460d      	mov	r5, r1
 80071ec:	d9f4      	bls.n	80071d8 <_printf_i+0x110>
 80071ee:	2b08      	cmp	r3, #8
 80071f0:	d10b      	bne.n	800720a <_printf_i+0x142>
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	07df      	lsls	r7, r3, #31
 80071f6:	d508      	bpl.n	800720a <_printf_i+0x142>
 80071f8:	6923      	ldr	r3, [r4, #16]
 80071fa:	6861      	ldr	r1, [r4, #4]
 80071fc:	4299      	cmp	r1, r3
 80071fe:	bfde      	ittt	le
 8007200:	2330      	movle	r3, #48	@ 0x30
 8007202:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007206:	f106 36ff 	addle.w	r6, r6, #4294967295
 800720a:	1b92      	subs	r2, r2, r6
 800720c:	6122      	str	r2, [r4, #16]
 800720e:	464b      	mov	r3, r9
 8007210:	4621      	mov	r1, r4
 8007212:	4640      	mov	r0, r8
 8007214:	f8cd a000 	str.w	sl, [sp]
 8007218:	aa03      	add	r2, sp, #12
 800721a:	f7ff fee3 	bl	8006fe4 <_printf_common>
 800721e:	3001      	adds	r0, #1
 8007220:	d14a      	bne.n	80072b8 <_printf_i+0x1f0>
 8007222:	f04f 30ff 	mov.w	r0, #4294967295
 8007226:	b004      	add	sp, #16
 8007228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	f043 0320 	orr.w	r3, r3, #32
 8007232:	6023      	str	r3, [r4, #0]
 8007234:	2778      	movs	r7, #120	@ 0x78
 8007236:	4832      	ldr	r0, [pc, #200]	@ (8007300 <_printf_i+0x238>)
 8007238:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	6831      	ldr	r1, [r6, #0]
 8007240:	061f      	lsls	r7, r3, #24
 8007242:	f851 5b04 	ldr.w	r5, [r1], #4
 8007246:	d402      	bmi.n	800724e <_printf_i+0x186>
 8007248:	065f      	lsls	r7, r3, #25
 800724a:	bf48      	it	mi
 800724c:	b2ad      	uxthmi	r5, r5
 800724e:	6031      	str	r1, [r6, #0]
 8007250:	07d9      	lsls	r1, r3, #31
 8007252:	bf44      	itt	mi
 8007254:	f043 0320 	orrmi.w	r3, r3, #32
 8007258:	6023      	strmi	r3, [r4, #0]
 800725a:	b11d      	cbz	r5, 8007264 <_printf_i+0x19c>
 800725c:	2310      	movs	r3, #16
 800725e:	e7ad      	b.n	80071bc <_printf_i+0xf4>
 8007260:	4826      	ldr	r0, [pc, #152]	@ (80072fc <_printf_i+0x234>)
 8007262:	e7e9      	b.n	8007238 <_printf_i+0x170>
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	f023 0320 	bic.w	r3, r3, #32
 800726a:	6023      	str	r3, [r4, #0]
 800726c:	e7f6      	b.n	800725c <_printf_i+0x194>
 800726e:	4616      	mov	r6, r2
 8007270:	e7bd      	b.n	80071ee <_printf_i+0x126>
 8007272:	6833      	ldr	r3, [r6, #0]
 8007274:	6825      	ldr	r5, [r4, #0]
 8007276:	1d18      	adds	r0, r3, #4
 8007278:	6961      	ldr	r1, [r4, #20]
 800727a:	6030      	str	r0, [r6, #0]
 800727c:	062e      	lsls	r6, r5, #24
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	d501      	bpl.n	8007286 <_printf_i+0x1be>
 8007282:	6019      	str	r1, [r3, #0]
 8007284:	e002      	b.n	800728c <_printf_i+0x1c4>
 8007286:	0668      	lsls	r0, r5, #25
 8007288:	d5fb      	bpl.n	8007282 <_printf_i+0x1ba>
 800728a:	8019      	strh	r1, [r3, #0]
 800728c:	2300      	movs	r3, #0
 800728e:	4616      	mov	r6, r2
 8007290:	6123      	str	r3, [r4, #16]
 8007292:	e7bc      	b.n	800720e <_printf_i+0x146>
 8007294:	6833      	ldr	r3, [r6, #0]
 8007296:	2100      	movs	r1, #0
 8007298:	1d1a      	adds	r2, r3, #4
 800729a:	6032      	str	r2, [r6, #0]
 800729c:	681e      	ldr	r6, [r3, #0]
 800729e:	6862      	ldr	r2, [r4, #4]
 80072a0:	4630      	mov	r0, r6
 80072a2:	f000 f859 	bl	8007358 <memchr>
 80072a6:	b108      	cbz	r0, 80072ac <_printf_i+0x1e4>
 80072a8:	1b80      	subs	r0, r0, r6
 80072aa:	6060      	str	r0, [r4, #4]
 80072ac:	6863      	ldr	r3, [r4, #4]
 80072ae:	6123      	str	r3, [r4, #16]
 80072b0:	2300      	movs	r3, #0
 80072b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072b6:	e7aa      	b.n	800720e <_printf_i+0x146>
 80072b8:	4632      	mov	r2, r6
 80072ba:	4649      	mov	r1, r9
 80072bc:	4640      	mov	r0, r8
 80072be:	6923      	ldr	r3, [r4, #16]
 80072c0:	47d0      	blx	sl
 80072c2:	3001      	adds	r0, #1
 80072c4:	d0ad      	beq.n	8007222 <_printf_i+0x15a>
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	079b      	lsls	r3, r3, #30
 80072ca:	d413      	bmi.n	80072f4 <_printf_i+0x22c>
 80072cc:	68e0      	ldr	r0, [r4, #12]
 80072ce:	9b03      	ldr	r3, [sp, #12]
 80072d0:	4298      	cmp	r0, r3
 80072d2:	bfb8      	it	lt
 80072d4:	4618      	movlt	r0, r3
 80072d6:	e7a6      	b.n	8007226 <_printf_i+0x15e>
 80072d8:	2301      	movs	r3, #1
 80072da:	4632      	mov	r2, r6
 80072dc:	4649      	mov	r1, r9
 80072de:	4640      	mov	r0, r8
 80072e0:	47d0      	blx	sl
 80072e2:	3001      	adds	r0, #1
 80072e4:	d09d      	beq.n	8007222 <_printf_i+0x15a>
 80072e6:	3501      	adds	r5, #1
 80072e8:	68e3      	ldr	r3, [r4, #12]
 80072ea:	9903      	ldr	r1, [sp, #12]
 80072ec:	1a5b      	subs	r3, r3, r1
 80072ee:	42ab      	cmp	r3, r5
 80072f0:	dcf2      	bgt.n	80072d8 <_printf_i+0x210>
 80072f2:	e7eb      	b.n	80072cc <_printf_i+0x204>
 80072f4:	2500      	movs	r5, #0
 80072f6:	f104 0619 	add.w	r6, r4, #25
 80072fa:	e7f5      	b.n	80072e8 <_printf_i+0x220>
 80072fc:	080076a3 	.word	0x080076a3
 8007300:	080076b4 	.word	0x080076b4

08007304 <memmove>:
 8007304:	4288      	cmp	r0, r1
 8007306:	b510      	push	{r4, lr}
 8007308:	eb01 0402 	add.w	r4, r1, r2
 800730c:	d902      	bls.n	8007314 <memmove+0x10>
 800730e:	4284      	cmp	r4, r0
 8007310:	4623      	mov	r3, r4
 8007312:	d807      	bhi.n	8007324 <memmove+0x20>
 8007314:	1e43      	subs	r3, r0, #1
 8007316:	42a1      	cmp	r1, r4
 8007318:	d008      	beq.n	800732c <memmove+0x28>
 800731a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800731e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007322:	e7f8      	b.n	8007316 <memmove+0x12>
 8007324:	4601      	mov	r1, r0
 8007326:	4402      	add	r2, r0
 8007328:	428a      	cmp	r2, r1
 800732a:	d100      	bne.n	800732e <memmove+0x2a>
 800732c:	bd10      	pop	{r4, pc}
 800732e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007332:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007336:	e7f7      	b.n	8007328 <memmove+0x24>

08007338 <_sbrk_r>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	2300      	movs	r3, #0
 800733c:	4d05      	ldr	r5, [pc, #20]	@ (8007354 <_sbrk_r+0x1c>)
 800733e:	4604      	mov	r4, r0
 8007340:	4608      	mov	r0, r1
 8007342:	602b      	str	r3, [r5, #0]
 8007344:	f7fa fba2 	bl	8001a8c <_sbrk>
 8007348:	1c43      	adds	r3, r0, #1
 800734a:	d102      	bne.n	8007352 <_sbrk_r+0x1a>
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	b103      	cbz	r3, 8007352 <_sbrk_r+0x1a>
 8007350:	6023      	str	r3, [r4, #0]
 8007352:	bd38      	pop	{r3, r4, r5, pc}
 8007354:	2000036c 	.word	0x2000036c

08007358 <memchr>:
 8007358:	4603      	mov	r3, r0
 800735a:	b510      	push	{r4, lr}
 800735c:	b2c9      	uxtb	r1, r1
 800735e:	4402      	add	r2, r0
 8007360:	4293      	cmp	r3, r2
 8007362:	4618      	mov	r0, r3
 8007364:	d101      	bne.n	800736a <memchr+0x12>
 8007366:	2000      	movs	r0, #0
 8007368:	e003      	b.n	8007372 <memchr+0x1a>
 800736a:	7804      	ldrb	r4, [r0, #0]
 800736c:	3301      	adds	r3, #1
 800736e:	428c      	cmp	r4, r1
 8007370:	d1f6      	bne.n	8007360 <memchr+0x8>
 8007372:	bd10      	pop	{r4, pc}

08007374 <_realloc_r>:
 8007374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007378:	4607      	mov	r7, r0
 800737a:	4614      	mov	r4, r2
 800737c:	460d      	mov	r5, r1
 800737e:	b921      	cbnz	r1, 800738a <_realloc_r+0x16>
 8007380:	4611      	mov	r1, r2
 8007382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007386:	f7ff bc49 	b.w	8006c1c <_malloc_r>
 800738a:	b92a      	cbnz	r2, 8007398 <_realloc_r+0x24>
 800738c:	f7ff fbdc 	bl	8006b48 <_free_r>
 8007390:	4625      	mov	r5, r4
 8007392:	4628      	mov	r0, r5
 8007394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007398:	f000 f81a 	bl	80073d0 <_malloc_usable_size_r>
 800739c:	4284      	cmp	r4, r0
 800739e:	4606      	mov	r6, r0
 80073a0:	d802      	bhi.n	80073a8 <_realloc_r+0x34>
 80073a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073a6:	d8f4      	bhi.n	8007392 <_realloc_r+0x1e>
 80073a8:	4621      	mov	r1, r4
 80073aa:	4638      	mov	r0, r7
 80073ac:	f7ff fc36 	bl	8006c1c <_malloc_r>
 80073b0:	4680      	mov	r8, r0
 80073b2:	b908      	cbnz	r0, 80073b8 <_realloc_r+0x44>
 80073b4:	4645      	mov	r5, r8
 80073b6:	e7ec      	b.n	8007392 <_realloc_r+0x1e>
 80073b8:	42b4      	cmp	r4, r6
 80073ba:	4622      	mov	r2, r4
 80073bc:	4629      	mov	r1, r5
 80073be:	bf28      	it	cs
 80073c0:	4632      	movcs	r2, r6
 80073c2:	f7ff fbb3 	bl	8006b2c <memcpy>
 80073c6:	4629      	mov	r1, r5
 80073c8:	4638      	mov	r0, r7
 80073ca:	f7ff fbbd 	bl	8006b48 <_free_r>
 80073ce:	e7f1      	b.n	80073b4 <_realloc_r+0x40>

080073d0 <_malloc_usable_size_r>:
 80073d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073d4:	1f18      	subs	r0, r3, #4
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	bfbc      	itt	lt
 80073da:	580b      	ldrlt	r3, [r1, r0]
 80073dc:	18c0      	addlt	r0, r0, r3
 80073de:	4770      	bx	lr

080073e0 <_init>:
 80073e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e2:	bf00      	nop
 80073e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073e6:	bc08      	pop	{r3}
 80073e8:	469e      	mov	lr, r3
 80073ea:	4770      	bx	lr

080073ec <_fini>:
 80073ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ee:	bf00      	nop
 80073f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f2:	bc08      	pop	{r3}
 80073f4:	469e      	mov	lr, r3
 80073f6:	4770      	bx	lr

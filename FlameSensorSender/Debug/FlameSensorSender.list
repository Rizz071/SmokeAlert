
FlameSensorSender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e64  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004f70  08004f70  00005f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fb0  08004fb0  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004fb0  08004fb0  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004fb0  08004fb0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fb0  08004fb0  00005fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fb4  08004fb4  00005fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004fb8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000000c  08004fc4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08004fc4  0000618c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f724  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e8b  00000000  00000000  00015759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  000185e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c64  00000000  00000000  00019628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197e1  00000000  00000000  0001a28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b34  00000000  00000000  00033a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f982  00000000  00000000  000475a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6f23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004334  00000000  00000000  000d6f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000db29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004f58 	.word	0x08004f58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08004f58 	.word	0x08004f58

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b087      	sub	sp, #28
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f000 fc91 	bl	8001060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073e:	f000 f875 	bl	800082c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000742:	f000 fa11 	bl	8000b68 <MX_GPIO_Init>
  MX_RTC_Init();
 8000746:	f000 f943 	bl	80009d0 <MX_RTC_Init>
  MX_TIM2_Init();
 800074a:	f000 f9c1 	bl	8000ad0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(V_LED_GPIO_Port, V_LED_Pin, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000754:	482f      	ldr	r0, [pc, #188]	@ (8000814 <main+0xe0>)
 8000756:	f001 fd7f 	bl	8002258 <HAL_GPIO_WritePin>

	// Getting hardware serial for self identity
	hw_serial = get_serial_number();
 800075a:	4c2f      	ldr	r4, [pc, #188]	@ (8000818 <main+0xe4>)
 800075c:	463b      	mov	r3, r7
 800075e:	4618      	mov	r0, r3
 8000760:	f004 fbb1 	bl	8004ec6 <get_serial_number>
 8000764:	463b      	mov	r3, r7
 8000766:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800076a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	MX_ADC1_Init();
 800076e:	f000 f8b3 	bl	80008d8 <MX_ADC1_Init>
	Battery = get_battery_level();
 8000772:	4c2a      	ldr	r4, [pc, #168]	@ (800081c <main+0xe8>)
 8000774:	463b      	mov	r3, r7
 8000776:	4618      	mov	r0, r3
 8000778:	f004 f900 	bl	800497c <get_battery_level>
 800077c:	4622      	mov	r2, r4
 800077e:	463b      	mov	r3, r7
 8000780:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000784:	e882 0003 	stmia.w	r2, {r0, r1}
	HAL_ADC_DeInit(&hadc1);
 8000788:	4825      	ldr	r0, [pc, #148]	@ (8000820 <main+0xec>)
 800078a:	f000 fde5 	bl	8001358 <HAL_ADC_DeInit>

	// Enable VCC to Smoke Sensor and getting data
	HAL_GPIO_WritePin(GPIOB, MOSFET_GATE_SENSOR_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000794:	481f      	ldr	r0, [pc, #124]	@ (8000814 <main+0xe0>)
 8000796:	f001 fd5f 	bl	8002258 <HAL_GPIO_WritePin>

	MX_ADC2_Init();
 800079a:	f000 f8db 	bl	8000954 <MX_ADC2_Init>
	float sensor_data = get_infra_sensor_data(Battery);
 800079e:	4b1f      	ldr	r3, [pc, #124]	@ (800081c <main+0xe8>)
 80007a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007a4:	f004 f9da 	bl	8004b5c <get_infra_sensor_data>
 80007a8:	6178      	str	r0, [r7, #20]
	HAL_ADC_DeInit(&hadc2);
 80007aa:	481e      	ldr	r0, [pc, #120]	@ (8000824 <main+0xf0>)
 80007ac:	f000 fdd4 	bl	8001358 <HAL_ADC_DeInit>
	HAL_GPIO_WritePin(GPIOB, MOSFET_GATE_SENSOR_Pin, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007b6:	4817      	ldr	r0, [pc, #92]	@ (8000814 <main+0xe0>)
 80007b8:	f001 fd4e 	bl	8002258 <HAL_GPIO_WritePin>

	// Forming a packet to send
	packet.ID = hw_serial.byte_2;
 80007bc:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <main+0xe4>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	4a19      	ldr	r2, [pc, #100]	@ (8000828 <main+0xf4>)
 80007c2:	6013      	str	r3, [r2, #0]
	packet.battery_level = Battery.charge_percent;
 80007c4:	4b15      	ldr	r3, [pc, #84]	@ (800081c <main+0xe8>)
 80007c6:	791a      	ldrb	r2, [r3, #4]
 80007c8:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <main+0xf4>)
 80007ca:	721a      	strb	r2, [r3, #8]
	packet.sensor_data = sensor_data;
 80007cc:	4a16      	ldr	r2, [pc, #88]	@ (8000828 <main+0xf4>)
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	6053      	str	r3, [r2, #4]

// Enabling LoRa and sending packet to Base Station
	HAL_GPIO_WritePin(GPIOB, MOSFET_GATE_LORA_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007d8:	480e      	ldr	r0, [pc, #56]	@ (8000814 <main+0xe0>)
 80007da:	f001 fd3d 	bl	8002258 <HAL_GPIO_WritePin>
	MX_SPI1_Init();
 80007de:	f000 f941 	bl	8000a64 <MX_SPI1_Init>
	HAL_Delay(100);
 80007e2:	2064      	movs	r0, #100	@ 0x64
 80007e4:	f000 fc9e 	bl	8001124 <HAL_Delay>
	send_packet(packet);
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <main+0xf4>)
 80007ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007ee:	f004 fb59 	bl	8004ea4 <send_packet>
	HAL_GPIO_WritePin(GPIOB, MOSFET_GATE_LORA_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007f8:	4806      	ldr	r0, [pc, #24]	@ (8000814 <main+0xe0>)
 80007fa:	f001 fd2d 	bl	8002258 <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 80007fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000802:	f000 fc8f 	bl	8001124 <HAL_Delay>

// Sleeping
	set_alarm(3);
 8000806:	2003      	movs	r0, #3
 8000808:	f004 f87c 	bl	8004904 <set_alarm>
	HAL_PWR_EnterSTANDBYMode();
 800080c:	f001 fd48 	bl	80022a0 <HAL_PWR_EnterSTANDBYMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <main+0xdc>
 8000814:	40010c00 	.word	0x40010c00
 8000818:	2000013c 	.word	0x2000013c
 800081c:	20000148 	.word	0x20000148
 8000820:	20000028 	.word	0x20000028
 8000824:	20000058 	.word	0x20000058
 8000828:	20000150 	.word	0x20000150

0800082c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b094      	sub	sp, #80	@ 0x50
 8000830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000836:	2228      	movs	r2, #40	@ 0x28
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f004 fb5f 	bl	8004efe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800085c:	2306      	movs	r3, #6
 800085e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000860:	2301      	movs	r3, #1
 8000862:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000864:	2301      	movs	r3, #1
 8000866:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000868:	2310      	movs	r3, #16
 800086a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800086c:	2300      	movs	r3, #0
 800086e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000870:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000874:	4618      	mov	r0, r3
 8000876:	f001 fd2b 	bl	80022d0 <HAL_RCC_OscConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000880:	f000 fa2c 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000884:	230f      	movs	r3, #15
 8000886:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000888:	2300      	movs	r3, #0
 800088a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 ff98 	bl	80027d4 <HAL_RCC_ClockConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008aa:	f000 fa17 	bl	8000cdc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80008ae:	2303      	movs	r3, #3
 80008b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80008b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008b6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 f902 	bl	8002ac8 <HAL_RCCEx_PeriphCLKConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008ca:	f000 fa07 	bl	8000cdc <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	3750      	adds	r7, #80	@ 0x50
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008e8:	4b18      	ldr	r3, [pc, #96]	@ (800094c <MX_ADC1_Init+0x74>)
 80008ea:	4a19      	ldr	r2, [pc, #100]	@ (8000950 <MX_ADC1_Init+0x78>)
 80008ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ee:	4b17      	ldr	r3, [pc, #92]	@ (800094c <MX_ADC1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008f4:	4b15      	ldr	r3, [pc, #84]	@ (800094c <MX_ADC1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008fa:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_ADC1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000900:	4b12      	ldr	r3, [pc, #72]	@ (800094c <MX_ADC1_Init+0x74>)
 8000902:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000906:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000908:	4b10      	ldr	r3, [pc, #64]	@ (800094c <MX_ADC1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800090e:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <MX_ADC1_Init+0x74>)
 8000910:	2201      	movs	r2, #1
 8000912:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000914:	480d      	ldr	r0, [pc, #52]	@ (800094c <MX_ADC1_Init+0x74>)
 8000916:	f000 fc47 	bl	80011a8 <HAL_ADC_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000920:	f000 f9dc 	bl	8000cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000924:	2301      	movs	r3, #1
 8000926:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000928:	2301      	movs	r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800092c:	2305      	movs	r3, #5
 800092e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_ADC1_Init+0x74>)
 8000936:	f000 ffbd 	bl	80018b4 <HAL_ADC_ConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000940:	f000 f9cc 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000028 	.word	0x20000028
 8000950:	40012400 	.word	0x40012400

08000954 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <MX_ADC2_Init+0x74>)
 8000966:	4a19      	ldr	r2, [pc, #100]	@ (80009cc <MX_ADC2_Init+0x78>)
 8000968:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800096a:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <MX_ADC2_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000970:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <MX_ADC2_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000976:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <MX_ADC2_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800097c:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <MX_ADC2_Init+0x74>)
 800097e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000982:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000984:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <MX_ADC2_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800098a:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <MX_ADC2_Init+0x74>)
 800098c:	2201      	movs	r2, #1
 800098e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000990:	480d      	ldr	r0, [pc, #52]	@ (80009c8 <MX_ADC2_Init+0x74>)
 8000992:	f000 fc09 	bl	80011a8 <HAL_ADC_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800099c:	f000 f99e 	bl	8000cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80009a8:	2305      	movs	r3, #5
 80009aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_ADC2_Init+0x74>)
 80009b2:	f000 ff7f 	bl	80018b4 <HAL_ADC_ConfigChannel>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80009bc:	f000 f98e 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000058 	.word	0x20000058
 80009cc:	40012800 	.word	0x40012800

080009d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2100      	movs	r1, #0
 80009da:	460a      	mov	r2, r1
 80009dc:	801a      	strh	r2, [r3, #0]
 80009de:	460a      	mov	r2, r1
 80009e0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009e6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a5c <MX_RTC_Init+0x8c>)
 80009e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a60 <MX_RTC_Init+0x90>)
 80009ea:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <MX_RTC_Init+0x8c>)
 80009ee:	f04f 32ff 	mov.w	r2, #4294967295
 80009f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80009f4:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <MX_RTC_Init+0x8c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009fa:	4818      	ldr	r0, [pc, #96]	@ (8000a5c <MX_RTC_Init+0x8c>)
 80009fc:	f002 f9d0 	bl	8002da0 <HAL_RTC_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8000a06:	f000 f969 	bl	8000cdc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480f      	ldr	r0, [pc, #60]	@ (8000a5c <MX_RTC_Init+0x8c>)
 8000a1e:	f002 fa4b 	bl	8002eb8 <HAL_RTC_SetTime>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000a28:	f000 f958 	bl	8000cdc <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000a30:	2301      	movs	r3, #1
 8000a32:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 8000a34:	2301      	movs	r3, #1
 8000a36:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2200      	movs	r2, #0
 8000a40:	4619      	mov	r1, r3
 8000a42:	4806      	ldr	r0, [pc, #24]	@ (8000a5c <MX_RTC_Init+0x8c>)
 8000a44:	f002 fba8 	bl	8003198 <HAL_RTC_SetDate>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000a4e:	f000 f945 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000088 	.word	0x20000088
 8000a60:	40002800 	.word	0x40002800

08000a64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a68:	4b17      	ldr	r3, [pc, #92]	@ (8000ac8 <MX_SPI1_Init+0x64>)
 8000a6a:	4a18      	ldr	r2, [pc, #96]	@ (8000acc <MX_SPI1_Init+0x68>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a6e:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <MX_SPI1_Init+0x64>)
 8000a70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a76:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <MX_SPI1_Init+0x64>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <MX_SPI1_Init+0x64>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a82:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <MX_SPI1_Init+0x64>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <MX_SPI1_Init+0x64>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <MX_SPI1_Init+0x64>)
 8000a90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <MX_SPI1_Init+0x64>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <MX_SPI1_Init+0x64>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aa2:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <MX_SPI1_Init+0x64>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	@ (8000ac8 <MX_SPI1_Init+0x64>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <MX_SPI1_Init+0x64>)
 8000ab0:	220a      	movs	r2, #10
 8000ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ab4:	4804      	ldr	r0, [pc, #16]	@ (8000ac8 <MX_SPI1_Init+0x64>)
 8000ab6:	f003 f828 	bl	8003b0a <HAL_SPI_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ac0:	f000 f90c 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000009c 	.word	0x2000009c
 8000acc:	40013000 	.word	0x40013000

08000ad0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad6:	f107 0308 	add.w	r3, r7, #8
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aec:	4b1d      	ldr	r3, [pc, #116]	@ (8000b64 <MX_TIM2_Init+0x94>)
 8000aee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000af2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b64 <MX_TIM2_Init+0x94>)
 8000af6:	2207      	movs	r2, #7
 8000af8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b64 <MX_TIM2_Init+0x94>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000b00:	4b18      	ldr	r3, [pc, #96]	@ (8000b64 <MX_TIM2_Init+0x94>)
 8000b02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b08:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <MX_TIM2_Init+0x94>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0e:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <MX_TIM2_Init+0x94>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b14:	4813      	ldr	r0, [pc, #76]	@ (8000b64 <MX_TIM2_Init+0x94>)
 8000b16:	f003 fc22 	bl	800435e <HAL_TIM_Base_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b20:	f000 f8dc 	bl	8000cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480c      	ldr	r0, [pc, #48]	@ (8000b64 <MX_TIM2_Init+0x94>)
 8000b32:	f003 fccd 	bl	80044d0 <HAL_TIM_ConfigClockSource>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b3c:	f000 f8ce 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b40:	2300      	movs	r3, #0
 8000b42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b48:	463b      	mov	r3, r7
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <MX_TIM2_Init+0x94>)
 8000b4e:	f003 fe81 	bl	8004854 <HAL_TIMEx_MasterConfigSynchronization>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b58:	f000 f8c0 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200000f4 	.word	0x200000f4

08000b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7c:	4b52      	ldr	r3, [pc, #328]	@ (8000cc8 <MX_GPIO_Init+0x160>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a51      	ldr	r2, [pc, #324]	@ (8000cc8 <MX_GPIO_Init+0x160>)
 8000b82:	f043 0310 	orr.w	r3, r3, #16
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b4f      	ldr	r3, [pc, #316]	@ (8000cc8 <MX_GPIO_Init+0x160>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0310 	and.w	r3, r3, #16
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b94:	4b4c      	ldr	r3, [pc, #304]	@ (8000cc8 <MX_GPIO_Init+0x160>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a4b      	ldr	r2, [pc, #300]	@ (8000cc8 <MX_GPIO_Init+0x160>)
 8000b9a:	f043 0320 	orr.w	r3, r3, #32
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b49      	ldr	r3, [pc, #292]	@ (8000cc8 <MX_GPIO_Init+0x160>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f003 0320 	and.w	r3, r3, #32
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b46      	ldr	r3, [pc, #280]	@ (8000cc8 <MX_GPIO_Init+0x160>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	4a45      	ldr	r2, [pc, #276]	@ (8000cc8 <MX_GPIO_Init+0x160>)
 8000bb2:	f043 0304 	orr.w	r3, r3, #4
 8000bb6:	6193      	str	r3, [r2, #24]
 8000bb8:	4b43      	ldr	r3, [pc, #268]	@ (8000cc8 <MX_GPIO_Init+0x160>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	f003 0304 	and.w	r3, r3, #4
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc4:	4b40      	ldr	r3, [pc, #256]	@ (8000cc8 <MX_GPIO_Init+0x160>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a3f      	ldr	r2, [pc, #252]	@ (8000cc8 <MX_GPIO_Init+0x160>)
 8000bca:	f043 0308 	orr.w	r3, r3, #8
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b3d      	ldr	r3, [pc, #244]	@ (8000cc8 <MX_GPIO_Init+0x160>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f003 0308 	and.w	r3, r3, #8
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_SIGNAL_GPIO_Port, NSS_SIGNAL_Pin, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2110      	movs	r1, #16
 8000be0:	483a      	ldr	r0, [pc, #232]	@ (8000ccc <MX_GPIO_Init+0x164>)
 8000be2:	f001 fb39 	bl	8002258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_SIGNAL_Pin|MOSFET_GATE_SENSOR_Pin|MOSFET_GATE_LORA_Pin|V_LED_Pin, GPIO_PIN_SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	f641 4102 	movw	r1, #7170	@ 0x1c02
 8000bec:	4838      	ldr	r0, [pc, #224]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000bee:	f001 fb33 	bl	8002258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bf2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	4619      	mov	r1, r3
 8000c02:	4834      	ldr	r0, [pc, #208]	@ (8000cd4 <MX_GPIO_Init+0x16c>)
 8000c04:	f001 f8f8 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8000c08:	f649 730c 	movw	r3, #40716	@ 0x9f0c
 8000c0c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0310 	add.w	r3, r7, #16
 8000c16:	4619      	mov	r1, r3
 8000c18:	482c      	ldr	r0, [pc, #176]	@ (8000ccc <MX_GPIO_Init+0x164>)
 8000c1a:	f001 f8ed 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_SIGNAL_Pin */
  GPIO_InitStruct.Pin = NSS_SIGNAL_Pin;
 8000c1e:	2310      	movs	r3, #16
 8000c20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0310 	add.w	r3, r7, #16
 8000c32:	4619      	mov	r1, r3
 8000c34:	4825      	ldr	r0, [pc, #148]	@ (8000ccc <MX_GPIO_Init+0x164>)
 8000c36:	f001 f8df 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_INT_Pin */
  GPIO_InitStruct.Pin = DIO0_INT_Pin;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c3e:	4b26      	ldr	r3, [pc, #152]	@ (8000cd8 <MX_GPIO_Init+0x170>)
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_INT_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 0310 	add.w	r3, r7, #16
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4820      	ldr	r0, [pc, #128]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000c4e:	f001 f8d3 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_SIGNAL_Pin */
  GPIO_InitStruct.Pin = RST_SIGNAL_Pin;
 8000c52:	2302      	movs	r3, #2
 8000c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0310 	add.w	r3, r7, #16
 8000c66:	4619      	mov	r1, r3
 8000c68:	4819      	ldr	r0, [pc, #100]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000c6a:	f001 f8c5 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000c6e:	f24e 33fc 	movw	r3, #58364	@ 0xe3fc
 8000c72:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c74:	2303      	movs	r3, #3
 8000c76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4814      	ldr	r0, [pc, #80]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000c80:	f001 f8ba 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOSFET_GATE_SENSOR_Pin MOSFET_GATE_LORA_Pin */
  GPIO_InitStruct.Pin = MOSFET_GATE_SENSOR_Pin|MOSFET_GATE_LORA_Pin;
 8000c84:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 0310 	add.w	r3, r7, #16
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480c      	ldr	r0, [pc, #48]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000c9e:	f001 f8ab 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : V_LED_Pin */
  GPIO_InitStruct.Pin = V_LED_Pin;
 8000ca2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(V_LED_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000cbc:	f001 f89c 	bl	8001df8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cc0:	bf00      	nop
 8000cc2:	3720      	adds	r7, #32
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40010800 	.word	0x40010800
 8000cd0:	40010c00 	.word	0x40010c00
 8000cd4:	40011000 	.word	0x40011000
 8000cd8:	10110000 	.word	0x10110000

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <Error_Handler+0x8>

08000ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <HAL_MspInit+0x5c>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	4a14      	ldr	r2, [pc, #80]	@ (8000d44 <HAL_MspInit+0x5c>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6193      	str	r3, [r2, #24]
 8000cfa:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <HAL_MspInit+0x5c>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <HAL_MspInit+0x5c>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d44 <HAL_MspInit+0x5c>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d10:	61d3      	str	r3, [r2, #28]
 8000d12:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <HAL_MspInit+0x5c>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <HAL_MspInit+0x60>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	4a04      	ldr	r2, [pc, #16]	@ (8000d48 <HAL_MspInit+0x60>)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr
 8000d44:	40021000 	.word	0x40021000
 8000d48:	40010000 	.word	0x40010000

08000d4c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	@ 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0318 	add.w	r3, r7, #24
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a28      	ldr	r2, [pc, #160]	@ (8000e08 <HAL_ADC_MspInit+0xbc>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d122      	bne.n	8000db2 <HAL_ADC_MspInit+0x66>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d6c:	4b27      	ldr	r3, [pc, #156]	@ (8000e0c <HAL_ADC_MspInit+0xc0>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a26      	ldr	r2, [pc, #152]	@ (8000e0c <HAL_ADC_MspInit+0xc0>)
 8000d72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b24      	ldr	r3, [pc, #144]	@ (8000e0c <HAL_ADC_MspInit+0xc0>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	4b21      	ldr	r3, [pc, #132]	@ (8000e0c <HAL_ADC_MspInit+0xc0>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a20      	ldr	r2, [pc, #128]	@ (8000e0c <HAL_ADC_MspInit+0xc0>)
 8000d8a:	f043 0304 	orr.w	r3, r3, #4
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b1e      	ldr	r3, [pc, #120]	@ (8000e0c <HAL_ADC_MspInit+0xc0>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = VCC_BAT_Pin;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da0:	2303      	movs	r3, #3
 8000da2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCC_BAT_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 0318 	add.w	r3, r7, #24
 8000da8:	4619      	mov	r1, r3
 8000daa:	4819      	ldr	r0, [pc, #100]	@ (8000e10 <HAL_ADC_MspInit+0xc4>)
 8000dac:	f001 f824 	bl	8001df8 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000db0:	e026      	b.n	8000e00 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a17      	ldr	r2, [pc, #92]	@ (8000e14 <HAL_ADC_MspInit+0xc8>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d121      	bne.n	8000e00 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000dbc:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <HAL_ADC_MspInit+0xc0>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a12      	ldr	r2, [pc, #72]	@ (8000e0c <HAL_ADC_MspInit+0xc0>)
 8000dc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <HAL_ADC_MspInit+0xc0>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e0c <HAL_ADC_MspInit+0xc0>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8000e0c <HAL_ADC_MspInit+0xc0>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b0a      	ldr	r3, [pc, #40]	@ (8000e0c <HAL_ADC_MspInit+0xc0>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = V0_Pin;
 8000dec:	2301      	movs	r3, #1
 8000dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df0:	2303      	movs	r3, #3
 8000df2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V0_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 0318 	add.w	r3, r7, #24
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <HAL_ADC_MspInit+0xc4>)
 8000dfc:	f000 fffc 	bl	8001df8 <HAL_GPIO_Init>
}
 8000e00:	bf00      	nop
 8000e02:	3728      	adds	r7, #40	@ 0x28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40012400 	.word	0x40012400
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010800 	.word	0x40010800
 8000e14:	40012800 	.word	0x40012800

08000e18 <HAL_ADC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a10      	ldr	r2, [pc, #64]	@ (8000e68 <HAL_ADC_MspDeInit+0x50>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d10a      	bne.n	8000e40 <HAL_ADC_MspDeInit+0x28>
  {
    /* USER CODE BEGIN ADC1_MspDeInit 0 */

    /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8000e2a:	4b10      	ldr	r3, [pc, #64]	@ (8000e6c <HAL_ADC_MspDeInit+0x54>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e6c <HAL_ADC_MspDeInit+0x54>)
 8000e30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000e34:	6193      	str	r3, [r2, #24]

    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    HAL_GPIO_DeInit(VCC_BAT_GPIO_Port, VCC_BAT_Pin);
 8000e36:	2102      	movs	r1, #2
 8000e38:	480d      	ldr	r0, [pc, #52]	@ (8000e70 <HAL_ADC_MspDeInit+0x58>)
 8000e3a:	f001 f959 	bl	80020f0 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN ADC2_MspDeInit 1 */

    /* USER CODE END ADC2_MspDeInit 1 */
  }

}
 8000e3e:	e00e      	b.n	8000e5e <HAL_ADC_MspDeInit+0x46>
  else if(hadc->Instance==ADC2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0b      	ldr	r2, [pc, #44]	@ (8000e74 <HAL_ADC_MspDeInit+0x5c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d109      	bne.n	8000e5e <HAL_ADC_MspDeInit+0x46>
    __HAL_RCC_ADC2_CLK_DISABLE();
 8000e4a:	4b08      	ldr	r3, [pc, #32]	@ (8000e6c <HAL_ADC_MspDeInit+0x54>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	4a07      	ldr	r2, [pc, #28]	@ (8000e6c <HAL_ADC_MspDeInit+0x54>)
 8000e50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000e54:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(V0_GPIO_Port, V0_Pin);
 8000e56:	2101      	movs	r1, #1
 8000e58:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <HAL_ADC_MspDeInit+0x58>)
 8000e5a:	f001 f949 	bl	80020f0 <HAL_GPIO_DeInit>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40012400 	.word	0x40012400
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010800 	.word	0x40010800
 8000e74:	40012800 	.word	0x40012800

08000e78 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec4 <HAL_RTC_MspInit+0x4c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d118      	bne.n	8000ebc <HAL_RTC_MspInit+0x44>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000e8a:	f001 f9fd 	bl	8002288 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <HAL_RTC_MspInit+0x50>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec8 <HAL_RTC_MspInit+0x50>)
 8000e94:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e98:	61d3      	str	r3, [r2, #28]
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec8 <HAL_RTC_MspInit+0x50>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ea6:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <HAL_RTC_MspInit+0x54>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f000 ff6a 	bl	8001d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	f000 ff83 	bl	8001dc2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40002800 	.word	0x40002800
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	4242043c 	.word	0x4242043c

08000ed0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a1b      	ldr	r2, [pc, #108]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d12f      	bne.n	8000f50 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f5c <HAL_SPI_MspInit+0x8c>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a19      	ldr	r2, [pc, #100]	@ (8000f5c <HAL_SPI_MspInit+0x8c>)
 8000ef6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <HAL_SPI_MspInit+0x8c>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <HAL_SPI_MspInit+0x8c>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a13      	ldr	r2, [pc, #76]	@ (8000f5c <HAL_SPI_MspInit+0x8c>)
 8000f0e:	f043 0304 	orr.w	r3, r3, #4
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <HAL_SPI_MspInit+0x8c>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f20:	23a0      	movs	r3, #160	@ 0xa0
 8000f22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	4619      	mov	r1, r3
 8000f32:	480b      	ldr	r0, [pc, #44]	@ (8000f60 <HAL_SPI_MspInit+0x90>)
 8000f34:	f000 ff60 	bl	8001df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f38:	2340      	movs	r3, #64	@ 0x40
 8000f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4805      	ldr	r0, [pc, #20]	@ (8000f60 <HAL_SPI_MspInit+0x90>)
 8000f4c:	f000 ff54 	bl	8001df8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000f50:	bf00      	nop
 8000f52:	3720      	adds	r7, #32
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40013000 	.word	0x40013000
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40010800 	.word	0x40010800

08000f64 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f74:	d10b      	bne.n	8000f8e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f76:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <HAL_TIM_Base_MspInit+0x34>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	4a07      	ldr	r2, [pc, #28]	@ (8000f98 <HAL_TIM_Base_MspInit+0x34>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	61d3      	str	r3, [r2, #28]
 8000f82:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <HAL_TIM_Base_MspInit+0x34>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000f8e:	bf00      	nop
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	40021000 	.word	0x40021000

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fec:	f000 f87e 	bl	80010ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8000ff8:	4802      	ldr	r0, [pc, #8]	@ (8001004 <RTC_IRQHandler+0x10>)
 8000ffa:	f002 fd3d 	bl	8003a78 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//	HAL_Delay(50);
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  /* USER CODE END RTC_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000088 	.word	0x20000088

08001008 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001014:	f7ff fff8 	bl	8001008 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001018:	480b      	ldr	r0, [pc, #44]	@ (8001048 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800101a:	490c      	ldr	r1, [pc, #48]	@ (800104c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800101c:	4a0c      	ldr	r2, [pc, #48]	@ (8001050 <LoopFillZerobss+0x16>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a09      	ldr	r2, [pc, #36]	@ (8001054 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001030:	4c09      	ldr	r4, [pc, #36]	@ (8001058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103e:	f003 ff67 	bl	8004f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001042:	f7ff fb77 	bl	8000734 <main>
  bx lr
 8001046:	4770      	bx	lr
  ldr r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800104c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001050:	08004fb8 	.word	0x08004fb8
  ldr r2, =_sbss
 8001054:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001058:	2000018c 	.word	0x2000018c

0800105c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC1_2_IRQHandler>
	...

08001060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001064:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <HAL_Init+0x28>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a07      	ldr	r2, [pc, #28]	@ (8001088 <HAL_Init+0x28>)
 800106a:	f043 0310 	orr.w	r3, r3, #16
 800106e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001070:	2003      	movs	r0, #3
 8001072:	f000 fe7f 	bl	8001d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001076:	200f      	movs	r0, #15
 8001078:	f000 f808 	bl	800108c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800107c:	f7ff fe34 	bl	8000ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40022000 	.word	0x40022000

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001094:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <HAL_InitTick+0x54>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <HAL_InitTick+0x58>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 fe97 	bl	8001dde <HAL_SYSTICK_Config>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00e      	b.n	80010d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d80a      	bhi.n	80010d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f000 fe5f 	bl	8001d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010cc:	4a06      	ldr	r2, [pc, #24]	@ (80010e8 <HAL_InitTick+0x5c>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e000      	b.n	80010d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000000 	.word	0x20000000
 80010e4:	20000008 	.word	0x20000008
 80010e8:	20000004 	.word	0x20000004

080010ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <HAL_IncTick+0x1c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b05      	ldr	r3, [pc, #20]	@ (800110c <HAL_IncTick+0x20>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a03      	ldr	r2, [pc, #12]	@ (800110c <HAL_IncTick+0x20>)
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	20000008 	.word	0x20000008
 800110c:	2000015c 	.word	0x2000015c

08001110 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b02      	ldr	r3, [pc, #8]	@ (8001120 <HAL_GetTick+0x10>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	2000015c 	.word	0x2000015c

08001124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff fff0 	bl	8001110 <HAL_GetTick>
 8001130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d005      	beq.n	800114a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <HAL_Delay+0x44>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800114a:	bf00      	nop
 800114c:	f7ff ffe0 	bl	8001110 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8f7      	bhi.n	800114c <HAL_Delay+0x28>
  {
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000008 	.word	0x20000008

0800116c <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8001170:	4b02      	ldr	r3, [pc, #8]	@ (800117c <HAL_GetUIDw0+0x10>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	1ffff7e8 	.word	0x1ffff7e8

08001180 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001184:	4b02      	ldr	r3, [pc, #8]	@ (8001190 <HAL_GetUIDw1+0x10>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	1ffff7ec 	.word	0x1ffff7ec

08001194 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001198:	4b02      	ldr	r3, [pc, #8]	@ (80011a4 <HAL_GetUIDw2+0x10>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	1ffff7f0 	.word	0x1ffff7f0

080011a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e0be      	b.n	8001348 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d109      	bne.n	80011ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fdb0 	bl	8000d4c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 fcb3 	bl	8001b58 <ADC_ConversionStop_Disable>
 80011f2:	4603      	mov	r3, r0
 80011f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f040 8099 	bne.w	8001336 <HAL_ADC_Init+0x18e>
 8001204:	7dfb      	ldrb	r3, [r7, #23]
 8001206:	2b00      	cmp	r3, #0
 8001208:	f040 8095 	bne.w	8001336 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001210:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001214:	f023 0302 	bic.w	r3, r3, #2
 8001218:	f043 0202 	orr.w	r2, r3, #2
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001228:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	7b1b      	ldrb	r3, [r3, #12]
 800122e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001230:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	4313      	orrs	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001240:	d003      	beq.n	800124a <HAL_ADC_Init+0xa2>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d102      	bne.n	8001250 <HAL_ADC_Init+0xa8>
 800124a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800124e:	e000      	b.n	8001252 <HAL_ADC_Init+0xaa>
 8001250:	2300      	movs	r3, #0
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7d1b      	ldrb	r3, [r3, #20]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d119      	bne.n	8001294 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7b1b      	ldrb	r3, [r3, #12]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d109      	bne.n	800127c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	3b01      	subs	r3, #1
 800126e:	035a      	lsls	r2, r3, #13
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	e00b      	b.n	8001294 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001280:	f043 0220 	orr.w	r2, r3, #32
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800128c:	f043 0201 	orr.w	r2, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	4b28      	ldr	r3, [pc, #160]	@ (8001350 <HAL_ADC_Init+0x1a8>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	6812      	ldr	r2, [r2, #0]
 80012b6:	68b9      	ldr	r1, [r7, #8]
 80012b8:	430b      	orrs	r3, r1
 80012ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012c4:	d003      	beq.n	80012ce <HAL_ADC_Init+0x126>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d104      	bne.n	80012d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	051b      	lsls	r3, r3, #20
 80012d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012de:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	4b18      	ldr	r3, [pc, #96]	@ (8001354 <HAL_ADC_Init+0x1ac>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d10b      	bne.n	8001314 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001306:	f023 0303 	bic.w	r3, r3, #3
 800130a:	f043 0201 	orr.w	r2, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001312:	e018      	b.n	8001346 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001318:	f023 0312 	bic.w	r3, r3, #18
 800131c:	f043 0210 	orr.w	r2, r3, #16
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001328:	f043 0201 	orr.w	r2, r3, #1
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001334:	e007      	b.n	8001346 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800133a:	f043 0210 	orr.w	r2, r3, #16
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001346:	7dfb      	ldrb	r3, [r7, #23]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	ffe1f7fd 	.word	0xffe1f7fd
 8001354:	ff1f0efe 	.word	0xff1f0efe

08001358 <HAL_ADC_DeInit>:
  *         function HAL_ADC_MspDeInit().
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_ADC_DeInit+0x16>
  {
     return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e0ad      	b.n	80014ca <HAL_ADC_DeInit+0x172>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001372:	f043 0202 	orr.w	r2, r3, #2
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 fbec 	bl	8001b58 <ADC_ConversionStop_Disable>
 8001380:	4603      	mov	r3, r0
 8001382:	73fb      	strb	r3, [r7, #15]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status == HAL_OK)
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	2b00      	cmp	r3, #0
 8001388:	f040 809a 	bne.w	80014c0 <HAL_ADC_DeInit+0x168>




    /* Reset register SR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f06f 021f 	mvn.w	r2, #31
 8001394:	601a      	str	r2, [r3, #0]
                                ADC_FLAG_JSTRT | ADC_FLAG_STRT));
                         
    /* Reset register CR1 */
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6859      	ldr	r1, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b4c      	ldr	r3, [pc, #304]	@ (80014d4 <HAL_ADC_DeInit+0x17c>)
 80013a2:	400b      	ands	r3, r1
 80013a4:	6053      	str	r3, [r2, #4]
                                    ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
                                    ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
                                    ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
    
    /* Reset register CR2 */
    CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6899      	ldr	r1, [r3, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b49      	ldr	r3, [pc, #292]	@ (80014d8 <HAL_ADC_DeInit+0x180>)
 80013b2:	400b      	ands	r3, r1
 80013b4:	6093      	str	r3, [r2, #8]
                                    ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
                                    ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |          
                                    ADC_CR2_ADON                                          ));
    
    /* Reset register SMPR1 */
    CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80013c4:	60da      	str	r2, [r3, #12]
                                      ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
                                      ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10                    ));
    
    /* Reset register SMPR2 */
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	691a      	ldr	r2, [r3, #16]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 80013d4:	611a      	str	r2, [r3, #16]
                                      ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
                                      ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
                                      ADC_SMPR2_SMP0                                    ));

    /* Reset register JOFR1 */
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80013e4:	f023 030f 	bic.w	r3, r3, #15
 80013e8:	6153      	str	r3, [r2, #20]
    /* Reset register JOFR2 */
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6812      	ldr	r2, [r2, #0]
 80013f4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80013f8:	f023 030f 	bic.w	r3, r3, #15
 80013fc:	6193      	str	r3, [r2, #24]
    /* Reset register JOFR3 */
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800140c:	f023 030f 	bic.w	r3, r3, #15
 8001410:	61d3      	str	r3, [r2, #28]
    /* Reset register JOFR4 */
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001420:	f023 030f 	bic.w	r3, r3, #15
 8001424:	6213      	str	r3, [r2, #32]
    
    /* Reset register HTR */
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6812      	ldr	r2, [r2, #0]
 8001430:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001434:	f023 030f 	bic.w	r3, r3, #15
 8001438:	6253      	str	r3, [r2, #36]	@ 0x24
    /* Reset register LTR */
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001448:	f023 030f 	bic.w	r3, r3, #15
 800144c:	6293      	str	r3, [r2, #40]	@ 0x28
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800145c:	62da      	str	r2, [r3, #44]	@ 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800146c:	62da      	str	r2, [r3, #44]	@ 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR2 */
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 800147c:	631a      	str	r2, [r3, #48]	@ 0x30
                                    ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
    
    /* Reset register SQR3 */
    CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 800148c:	635a      	str	r2, [r3, #52]	@ 0x34
                                    ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	0d9b      	lsrs	r3, r3, #22
 800149a:	059b      	lsls	r3, r3, #22
 800149c:	6393      	str	r3, [r2, #56]	@ 0x38
                                    ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
                                    ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	6812      	ldr	r2, [r2, #0]
 80014a8:	0d9b      	lsrs	r3, r3, #22
 80014aa:	059b      	lsls	r3, r3, #22
 80014ac:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff fcb2 	bl	8000e18 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET; 
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	629a      	str	r2, [r3, #40]	@ 0x28
  
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	ff3f0000 	.word	0xff3f0000
 80014d8:	ff0106f0 	.word	0xff0106f0

080014dc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d101      	bne.n	80014f6 <HAL_ADC_Start+0x1a>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e098      	b.n	8001628 <HAL_ADC_Start+0x14c>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 fad0 	bl	8001aa4 <ADC_Enable>
 8001504:	4603      	mov	r3, r0
 8001506:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	2b00      	cmp	r3, #0
 800150c:	f040 8087 	bne.w	800161e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001518:	f023 0301 	bic.w	r3, r3, #1
 800151c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a41      	ldr	r2, [pc, #260]	@ (8001630 <HAL_ADC_Start+0x154>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d105      	bne.n	800153a <HAL_ADC_Start+0x5e>
 800152e:	4b41      	ldr	r3, [pc, #260]	@ (8001634 <HAL_ADC_Start+0x158>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d115      	bne.n	8001566 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001550:	2b00      	cmp	r3, #0
 8001552:	d026      	beq.n	80015a2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001558:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800155c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001564:	e01d      	b.n	80015a2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a2f      	ldr	r2, [pc, #188]	@ (8001634 <HAL_ADC_Start+0x158>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d004      	beq.n	8001586 <HAL_ADC_Start+0xaa>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a2b      	ldr	r2, [pc, #172]	@ (8001630 <HAL_ADC_Start+0x154>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d10d      	bne.n	80015a2 <HAL_ADC_Start+0xc6>
 8001586:	4b2b      	ldr	r3, [pc, #172]	@ (8001634 <HAL_ADC_Start+0x158>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001596:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800159a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d006      	beq.n	80015bc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b2:	f023 0206 	bic.w	r2, r3, #6
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015ba:	e002      	b.n	80015c2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f06f 0202 	mvn.w	r2, #2
 80015d2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80015de:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80015e2:	d113      	bne.n	800160c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015e8:	4a11      	ldr	r2, [pc, #68]	@ (8001630 <HAL_ADC_Start+0x154>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d105      	bne.n	80015fa <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015ee:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <HAL_ADC_Start+0x158>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d108      	bne.n	800160c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	e00c      	b.n	8001626 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	e003      	b.n	8001626 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40012800 	.word	0x40012800
 8001634:	40012400 	.word	0x40012400

08001638 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <HAL_ADC_Stop+0x1a>
 800164e:	2302      	movs	r3, #2
 8001650:	e01a      	b.n	8001688 <HAL_ADC_Stop+0x50>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 fa7c 	bl	8001b58 <ADC_ConversionStop_Disable>
 8001660:	4603      	mov	r3, r0
 8001662:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001672:	f023 0301 	bic.w	r3, r3, #1
 8001676:	f043 0201 	orr.w	r2, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80016a6:	f7ff fd33 	bl	8001110 <HAL_GetTick>
 80016aa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00b      	beq.n	80016d2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016be:	f043 0220 	orr.w	r2, r3, #32
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e0d3      	b.n	800187a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d131      	bne.n	8001744 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d12a      	bne.n	8001744 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80016ee:	e021      	b.n	8001734 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f6:	d01d      	beq.n	8001734 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d007      	beq.n	800170e <HAL_ADC_PollForConversion+0x7e>
 80016fe:	f7ff fd07 	bl	8001110 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d212      	bcs.n	8001734 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10b      	bne.n	8001734 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001720:	f043 0204 	orr.w	r2, r3, #4
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e0a2      	b.n	800187a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0d6      	beq.n	80016f0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001742:	e070      	b.n	8001826 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001744:	4b4f      	ldr	r3, [pc, #316]	@ (8001884 <HAL_ADC_PollForConversion+0x1f4>)
 8001746:	681c      	ldr	r4, [r3, #0]
 8001748:	2002      	movs	r0, #2
 800174a:	f001 fa73 	bl	8002c34 <HAL_RCCEx_GetPeriphCLKFreq>
 800174e:	4603      	mov	r3, r0
 8001750:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6919      	ldr	r1, [r3, #16]
 800175a:	4b4b      	ldr	r3, [pc, #300]	@ (8001888 <HAL_ADC_PollForConversion+0x1f8>)
 800175c:	400b      	ands	r3, r1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d118      	bne.n	8001794 <HAL_ADC_PollForConversion+0x104>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68d9      	ldr	r1, [r3, #12]
 8001768:	4b48      	ldr	r3, [pc, #288]	@ (800188c <HAL_ADC_PollForConversion+0x1fc>)
 800176a:	400b      	ands	r3, r1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d111      	bne.n	8001794 <HAL_ADC_PollForConversion+0x104>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6919      	ldr	r1, [r3, #16]
 8001776:	4b46      	ldr	r3, [pc, #280]	@ (8001890 <HAL_ADC_PollForConversion+0x200>)
 8001778:	400b      	ands	r3, r1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d108      	bne.n	8001790 <HAL_ADC_PollForConversion+0x100>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68d9      	ldr	r1, [r3, #12]
 8001784:	4b43      	ldr	r3, [pc, #268]	@ (8001894 <HAL_ADC_PollForConversion+0x204>)
 8001786:	400b      	ands	r3, r1
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_ADC_PollForConversion+0x100>
 800178c:	2314      	movs	r3, #20
 800178e:	e020      	b.n	80017d2 <HAL_ADC_PollForConversion+0x142>
 8001790:	2329      	movs	r3, #41	@ 0x29
 8001792:	e01e      	b.n	80017d2 <HAL_ADC_PollForConversion+0x142>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6919      	ldr	r1, [r3, #16]
 800179a:	4b3d      	ldr	r3, [pc, #244]	@ (8001890 <HAL_ADC_PollForConversion+0x200>)
 800179c:	400b      	ands	r3, r1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d106      	bne.n	80017b0 <HAL_ADC_PollForConversion+0x120>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68d9      	ldr	r1, [r3, #12]
 80017a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001894 <HAL_ADC_PollForConversion+0x204>)
 80017aa:	400b      	ands	r3, r1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00d      	beq.n	80017cc <HAL_ADC_PollForConversion+0x13c>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6919      	ldr	r1, [r3, #16]
 80017b6:	4b38      	ldr	r3, [pc, #224]	@ (8001898 <HAL_ADC_PollForConversion+0x208>)
 80017b8:	400b      	ands	r3, r1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d108      	bne.n	80017d0 <HAL_ADC_PollForConversion+0x140>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68d9      	ldr	r1, [r3, #12]
 80017c4:	4b34      	ldr	r3, [pc, #208]	@ (8001898 <HAL_ADC_PollForConversion+0x208>)
 80017c6:	400b      	ands	r3, r1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_ADC_PollForConversion+0x140>
 80017cc:	2354      	movs	r3, #84	@ 0x54
 80017ce:	e000      	b.n	80017d2 <HAL_ADC_PollForConversion+0x142>
 80017d0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80017d2:	fb02 f303 	mul.w	r3, r2, r3
 80017d6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80017d8:	e021      	b.n	800181e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e0:	d01a      	beq.n	8001818 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d007      	beq.n	80017f8 <HAL_ADC_PollForConversion+0x168>
 80017e8:	f7ff fc92 	bl	8001110 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d20f      	bcs.n	8001818 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d90b      	bls.n	8001818 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001804:	f043 0204 	orr.w	r2, r3, #4
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e030      	b.n	800187a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	3301      	adds	r3, #1
 800181c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	429a      	cmp	r2, r3
 8001824:	d8d9      	bhi.n	80017da <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f06f 0212 	mvn.w	r2, #18
 800182e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001834:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001846:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800184a:	d115      	bne.n	8001878 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001850:	2b00      	cmp	r3, #0
 8001852:	d111      	bne.n	8001878 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001858:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001864:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d105      	bne.n	8001878 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001870:	f043 0201 	orr.w	r2, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	371c      	adds	r7, #28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd90      	pop	{r4, r7, pc}
 8001882:	bf00      	nop
 8001884:	20000000 	.word	0x20000000
 8001888:	24924924 	.word	0x24924924
 800188c:	00924924 	.word	0x00924924
 8001890:	12492492 	.word	0x12492492
 8001894:	00492492 	.word	0x00492492
 8001898:	00249249 	.word	0x00249249

0800189c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x20>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e0dc      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x1da>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b06      	cmp	r3, #6
 80018e2:	d81c      	bhi.n	800191e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	3b05      	subs	r3, #5
 80018f6:	221f      	movs	r2, #31
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	4019      	ands	r1, r3
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	3b05      	subs	r3, #5
 8001910:	fa00 f203 	lsl.w	r2, r0, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	635a      	str	r2, [r3, #52]	@ 0x34
 800191c:	e03c      	b.n	8001998 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b0c      	cmp	r3, #12
 8001924:	d81c      	bhi.n	8001960 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	3b23      	subs	r3, #35	@ 0x23
 8001938:	221f      	movs	r2, #31
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	4019      	ands	r1, r3
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	3b23      	subs	r3, #35	@ 0x23
 8001952:	fa00 f203 	lsl.w	r2, r0, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	631a      	str	r2, [r3, #48]	@ 0x30
 800195e:	e01b      	b.n	8001998 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	3b41      	subs	r3, #65	@ 0x41
 8001972:	221f      	movs	r2, #31
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	4019      	ands	r1, r3
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	3b41      	subs	r3, #65	@ 0x41
 800198c:	fa00 f203 	lsl.w	r2, r0, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b09      	cmp	r3, #9
 800199e:	d91c      	bls.n	80019da <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68d9      	ldr	r1, [r3, #12]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	3b1e      	subs	r3, #30
 80019b2:	2207      	movs	r2, #7
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	4019      	ands	r1, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	6898      	ldr	r0, [r3, #8]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	3b1e      	subs	r3, #30
 80019cc:	fa00 f203 	lsl.w	r2, r0, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	e019      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6919      	ldr	r1, [r3, #16]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4613      	mov	r3, r2
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4413      	add	r3, r2
 80019ea:	2207      	movs	r2, #7
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	4019      	ands	r1, r3
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	6898      	ldr	r0, [r3, #8]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4613      	mov	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4413      	add	r3, r2
 8001a02:	fa00 f203 	lsl.w	r2, r0, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b10      	cmp	r3, #16
 8001a14:	d003      	beq.n	8001a1e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a1a:	2b11      	cmp	r3, #17
 8001a1c:	d132      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a1d      	ldr	r2, [pc, #116]	@ (8001a98 <HAL_ADC_ConfigChannel+0x1e4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d125      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d126      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001a44:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b10      	cmp	r3, #16
 8001a4c:	d11a      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a4e:	4b13      	ldr	r3, [pc, #76]	@ (8001a9c <HAL_ADC_ConfigChannel+0x1e8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a13      	ldr	r2, [pc, #76]	@ (8001aa0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001a54:	fba2 2303 	umull	r2, r3, r2, r3
 8001a58:	0c9a      	lsrs	r2, r3, #18
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a64:	e002      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f9      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x1b2>
 8001a72:	e007      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a78:	f043 0220 	orr.w	r2, r3, #32
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	40012400 	.word	0x40012400
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	431bde83 	.word	0x431bde83

08001aa4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d040      	beq.n	8001b44 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0201 	orr.w	r2, r2, #1
 8001ad0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b50 <ADC_Enable+0xac>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b54 <ADC_Enable+0xb0>)
 8001ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8001adc:	0c9b      	lsrs	r3, r3, #18
 8001ade:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ae0:	e002      	b.n	8001ae8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f9      	bne.n	8001ae2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001aee:	f7ff fb0f 	bl	8001110 <HAL_GetTick>
 8001af2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001af4:	e01f      	b.n	8001b36 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001af6:	f7ff fb0b 	bl	8001110 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d918      	bls.n	8001b36 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d011      	beq.n	8001b36 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b16:	f043 0210 	orr.w	r2, r3, #16
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b22:	f043 0201 	orr.w	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e007      	b.n	8001b46 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d1d8      	bne.n	8001af6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000000 	.word	0x20000000
 8001b54:	431bde83 	.word	0x431bde83

08001b58 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d12e      	bne.n	8001bd0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0201 	bic.w	r2, r2, #1
 8001b80:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b82:	f7ff fac5 	bl	8001110 <HAL_GetTick>
 8001b86:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b88:	e01b      	b.n	8001bc2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b8a:	f7ff fac1 	bl	8001110 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d914      	bls.n	8001bc2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d10d      	bne.n	8001bc2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001baa:	f043 0210 	orr.w	r2, r3, #16
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb6:	f043 0201 	orr.w	r2, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e007      	b.n	8001bd2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d0dc      	beq.n	8001b8a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bec:	4b0c      	ldr	r3, [pc, #48]	@ (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c0e:	4a04      	ldr	r2, [pc, #16]	@ (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	60d3      	str	r3, [r2, #12]
}
 8001c14:	bf00      	nop
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c28:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <__NVIC_GetPriorityGrouping+0x18>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	0a1b      	lsrs	r3, r3, #8
 8001c2e:	f003 0307 	and.w	r3, r3, #7
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	db0b      	blt.n	8001c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	f003 021f 	and.w	r2, r3, #31
 8001c58:	4906      	ldr	r1, [pc, #24]	@ (8001c74 <__NVIC_EnableIRQ+0x34>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	2001      	movs	r0, #1
 8001c62:	fa00 f202 	lsl.w	r2, r0, r2
 8001c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	e000e100 	.word	0xe000e100

08001c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	db0a      	blt.n	8001ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	490c      	ldr	r1, [pc, #48]	@ (8001cc4 <__NVIC_SetPriority+0x4c>)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	0112      	lsls	r2, r2, #4
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca0:	e00a      	b.n	8001cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4908      	ldr	r1, [pc, #32]	@ (8001cc8 <__NVIC_SetPriority+0x50>)
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	3b04      	subs	r3, #4
 8001cb0:	0112      	lsls	r2, r2, #4
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	761a      	strb	r2, [r3, #24]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000e100 	.word	0xe000e100
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	@ 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f1c3 0307 	rsb	r3, r3, #7
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	bf28      	it	cs
 8001cea:	2304      	movcs	r3, #4
 8001cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	2b06      	cmp	r3, #6
 8001cf4:	d902      	bls.n	8001cfc <NVIC_EncodePriority+0x30>
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3b03      	subs	r3, #3
 8001cfa:	e000      	b.n	8001cfe <NVIC_EncodePriority+0x32>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	f04f 32ff 	mov.w	r2, #4294967295
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	401a      	ands	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d14:	f04f 31ff 	mov.w	r1, #4294967295
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	43d9      	mvns	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	4313      	orrs	r3, r2
         );
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3724      	adds	r7, #36	@ 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d40:	d301      	bcc.n	8001d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00f      	b.n	8001d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d46:	4a0a      	ldr	r2, [pc, #40]	@ (8001d70 <SysTick_Config+0x40>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4e:	210f      	movs	r1, #15
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	f7ff ff90 	bl	8001c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d58:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <SysTick_Config+0x40>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5e:	4b04      	ldr	r3, [pc, #16]	@ (8001d70 <SysTick_Config+0x40>)
 8001d60:	2207      	movs	r2, #7
 8001d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	e000e010 	.word	0xe000e010

08001d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ff2d 	bl	8001bdc <__NVIC_SetPriorityGrouping>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d9c:	f7ff ff42 	bl	8001c24 <__NVIC_GetPriorityGrouping>
 8001da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	6978      	ldr	r0, [r7, #20]
 8001da8:	f7ff ff90 	bl	8001ccc <NVIC_EncodePriority>
 8001dac:	4602      	mov	r2, r0
 8001dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff5f 	bl	8001c78 <__NVIC_SetPriority>
}
 8001dba:	bf00      	nop
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff35 	bl	8001c40 <__NVIC_EnableIRQ>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ffa2 	bl	8001d30 <SysTick_Config>
 8001dec:	4603      	mov	r3, r0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b08b      	sub	sp, #44	@ 0x2c
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e06:	2300      	movs	r3, #0
 8001e08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0a:	e161      	b.n	80020d0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	f040 8150 	bne.w	80020ca <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4a97      	ldr	r2, [pc, #604]	@ (800208c <HAL_GPIO_Init+0x294>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d05e      	beq.n	8001ef2 <HAL_GPIO_Init+0xfa>
 8001e34:	4a95      	ldr	r2, [pc, #596]	@ (800208c <HAL_GPIO_Init+0x294>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d875      	bhi.n	8001f26 <HAL_GPIO_Init+0x12e>
 8001e3a:	4a95      	ldr	r2, [pc, #596]	@ (8002090 <HAL_GPIO_Init+0x298>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d058      	beq.n	8001ef2 <HAL_GPIO_Init+0xfa>
 8001e40:	4a93      	ldr	r2, [pc, #588]	@ (8002090 <HAL_GPIO_Init+0x298>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d86f      	bhi.n	8001f26 <HAL_GPIO_Init+0x12e>
 8001e46:	4a93      	ldr	r2, [pc, #588]	@ (8002094 <HAL_GPIO_Init+0x29c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d052      	beq.n	8001ef2 <HAL_GPIO_Init+0xfa>
 8001e4c:	4a91      	ldr	r2, [pc, #580]	@ (8002094 <HAL_GPIO_Init+0x29c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d869      	bhi.n	8001f26 <HAL_GPIO_Init+0x12e>
 8001e52:	4a91      	ldr	r2, [pc, #580]	@ (8002098 <HAL_GPIO_Init+0x2a0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d04c      	beq.n	8001ef2 <HAL_GPIO_Init+0xfa>
 8001e58:	4a8f      	ldr	r2, [pc, #572]	@ (8002098 <HAL_GPIO_Init+0x2a0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d863      	bhi.n	8001f26 <HAL_GPIO_Init+0x12e>
 8001e5e:	4a8f      	ldr	r2, [pc, #572]	@ (800209c <HAL_GPIO_Init+0x2a4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d046      	beq.n	8001ef2 <HAL_GPIO_Init+0xfa>
 8001e64:	4a8d      	ldr	r2, [pc, #564]	@ (800209c <HAL_GPIO_Init+0x2a4>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d85d      	bhi.n	8001f26 <HAL_GPIO_Init+0x12e>
 8001e6a:	2b12      	cmp	r3, #18
 8001e6c:	d82a      	bhi.n	8001ec4 <HAL_GPIO_Init+0xcc>
 8001e6e:	2b12      	cmp	r3, #18
 8001e70:	d859      	bhi.n	8001f26 <HAL_GPIO_Init+0x12e>
 8001e72:	a201      	add	r2, pc, #4	@ (adr r2, 8001e78 <HAL_GPIO_Init+0x80>)
 8001e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e78:	08001ef3 	.word	0x08001ef3
 8001e7c:	08001ecd 	.word	0x08001ecd
 8001e80:	08001edf 	.word	0x08001edf
 8001e84:	08001f21 	.word	0x08001f21
 8001e88:	08001f27 	.word	0x08001f27
 8001e8c:	08001f27 	.word	0x08001f27
 8001e90:	08001f27 	.word	0x08001f27
 8001e94:	08001f27 	.word	0x08001f27
 8001e98:	08001f27 	.word	0x08001f27
 8001e9c:	08001f27 	.word	0x08001f27
 8001ea0:	08001f27 	.word	0x08001f27
 8001ea4:	08001f27 	.word	0x08001f27
 8001ea8:	08001f27 	.word	0x08001f27
 8001eac:	08001f27 	.word	0x08001f27
 8001eb0:	08001f27 	.word	0x08001f27
 8001eb4:	08001f27 	.word	0x08001f27
 8001eb8:	08001f27 	.word	0x08001f27
 8001ebc:	08001ed5 	.word	0x08001ed5
 8001ec0:	08001ee9 	.word	0x08001ee9
 8001ec4:	4a76      	ldr	r2, [pc, #472]	@ (80020a0 <HAL_GPIO_Init+0x2a8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d013      	beq.n	8001ef2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eca:	e02c      	b.n	8001f26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	623b      	str	r3, [r7, #32]
          break;
 8001ed2:	e029      	b.n	8001f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	623b      	str	r3, [r7, #32]
          break;
 8001edc:	e024      	b.n	8001f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	3308      	adds	r3, #8
 8001ee4:	623b      	str	r3, [r7, #32]
          break;
 8001ee6:	e01f      	b.n	8001f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	330c      	adds	r3, #12
 8001eee:	623b      	str	r3, [r7, #32]
          break;
 8001ef0:	e01a      	b.n	8001f28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d102      	bne.n	8001f00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001efa:	2304      	movs	r3, #4
 8001efc:	623b      	str	r3, [r7, #32]
          break;
 8001efe:	e013      	b.n	8001f28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d105      	bne.n	8001f14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f08:	2308      	movs	r3, #8
 8001f0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69fa      	ldr	r2, [r7, #28]
 8001f10:	611a      	str	r2, [r3, #16]
          break;
 8001f12:	e009      	b.n	8001f28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f14:	2308      	movs	r3, #8
 8001f16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	615a      	str	r2, [r3, #20]
          break;
 8001f1e:	e003      	b.n	8001f28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f20:	2300      	movs	r3, #0
 8001f22:	623b      	str	r3, [r7, #32]
          break;
 8001f24:	e000      	b.n	8001f28 <HAL_GPIO_Init+0x130>
          break;
 8001f26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2bff      	cmp	r3, #255	@ 0xff
 8001f2c:	d801      	bhi.n	8001f32 <HAL_GPIO_Init+0x13a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	e001      	b.n	8001f36 <HAL_GPIO_Init+0x13e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3304      	adds	r3, #4
 8001f36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	2bff      	cmp	r3, #255	@ 0xff
 8001f3c:	d802      	bhi.n	8001f44 <HAL_GPIO_Init+0x14c>
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	e002      	b.n	8001f4a <HAL_GPIO_Init+0x152>
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	3b08      	subs	r3, #8
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	210f      	movs	r1, #15
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	fa01 f303 	lsl.w	r3, r1, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	6a39      	ldr	r1, [r7, #32]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	431a      	orrs	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 80a9 	beq.w	80020ca <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f78:	4b4a      	ldr	r3, [pc, #296]	@ (80020a4 <HAL_GPIO_Init+0x2ac>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	4a49      	ldr	r2, [pc, #292]	@ (80020a4 <HAL_GPIO_Init+0x2ac>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6193      	str	r3, [r2, #24]
 8001f84:	4b47      	ldr	r3, [pc, #284]	@ (80020a4 <HAL_GPIO_Init+0x2ac>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f90:	4a45      	ldr	r2, [pc, #276]	@ (80020a8 <HAL_GPIO_Init+0x2b0>)
 8001f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	3302      	adds	r3, #2
 8001f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	220f      	movs	r2, #15
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3d      	ldr	r2, [pc, #244]	@ (80020ac <HAL_GPIO_Init+0x2b4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d00d      	beq.n	8001fd8 <HAL_GPIO_Init+0x1e0>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3c      	ldr	r2, [pc, #240]	@ (80020b0 <HAL_GPIO_Init+0x2b8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d007      	beq.n	8001fd4 <HAL_GPIO_Init+0x1dc>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a3b      	ldr	r2, [pc, #236]	@ (80020b4 <HAL_GPIO_Init+0x2bc>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d101      	bne.n	8001fd0 <HAL_GPIO_Init+0x1d8>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e004      	b.n	8001fda <HAL_GPIO_Init+0x1e2>
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e002      	b.n	8001fda <HAL_GPIO_Init+0x1e2>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <HAL_GPIO_Init+0x1e2>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fdc:	f002 0203 	and.w	r2, r2, #3
 8001fe0:	0092      	lsls	r2, r2, #2
 8001fe2:	4093      	lsls	r3, r2
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fea:	492f      	ldr	r1, [pc, #188]	@ (80020a8 <HAL_GPIO_Init+0x2b0>)
 8001fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fee:	089b      	lsrs	r3, r3, #2
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d006      	beq.n	8002012 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002004:	4b2c      	ldr	r3, [pc, #176]	@ (80020b8 <HAL_GPIO_Init+0x2c0>)
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	492b      	ldr	r1, [pc, #172]	@ (80020b8 <HAL_GPIO_Init+0x2c0>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	608b      	str	r3, [r1, #8]
 8002010:	e006      	b.n	8002020 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002012:	4b29      	ldr	r3, [pc, #164]	@ (80020b8 <HAL_GPIO_Init+0x2c0>)
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	43db      	mvns	r3, r3
 800201a:	4927      	ldr	r1, [pc, #156]	@ (80020b8 <HAL_GPIO_Init+0x2c0>)
 800201c:	4013      	ands	r3, r2
 800201e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d006      	beq.n	800203a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800202c:	4b22      	ldr	r3, [pc, #136]	@ (80020b8 <HAL_GPIO_Init+0x2c0>)
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	4921      	ldr	r1, [pc, #132]	@ (80020b8 <HAL_GPIO_Init+0x2c0>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	60cb      	str	r3, [r1, #12]
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800203a:	4b1f      	ldr	r3, [pc, #124]	@ (80020b8 <HAL_GPIO_Init+0x2c0>)
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	43db      	mvns	r3, r3
 8002042:	491d      	ldr	r1, [pc, #116]	@ (80020b8 <HAL_GPIO_Init+0x2c0>)
 8002044:	4013      	ands	r3, r2
 8002046:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002054:	4b18      	ldr	r3, [pc, #96]	@ (80020b8 <HAL_GPIO_Init+0x2c0>)
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	4917      	ldr	r1, [pc, #92]	@ (80020b8 <HAL_GPIO_Init+0x2c0>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002062:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <HAL_GPIO_Init+0x2c0>)
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	43db      	mvns	r3, r3
 800206a:	4913      	ldr	r1, [pc, #76]	@ (80020b8 <HAL_GPIO_Init+0x2c0>)
 800206c:	4013      	ands	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01f      	beq.n	80020bc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800207c:	4b0e      	ldr	r3, [pc, #56]	@ (80020b8 <HAL_GPIO_Init+0x2c0>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	490d      	ldr	r1, [pc, #52]	@ (80020b8 <HAL_GPIO_Init+0x2c0>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	600b      	str	r3, [r1, #0]
 8002088:	e01f      	b.n	80020ca <HAL_GPIO_Init+0x2d2>
 800208a:	bf00      	nop
 800208c:	10320000 	.word	0x10320000
 8002090:	10310000 	.word	0x10310000
 8002094:	10220000 	.word	0x10220000
 8002098:	10210000 	.word	0x10210000
 800209c:	10120000 	.word	0x10120000
 80020a0:	10110000 	.word	0x10110000
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40010000 	.word	0x40010000
 80020ac:	40010800 	.word	0x40010800
 80020b0:	40010c00 	.word	0x40010c00
 80020b4:	40011000 	.word	0x40011000
 80020b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020bc:	4b0b      	ldr	r3, [pc, #44]	@ (80020ec <HAL_GPIO_Init+0x2f4>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	4909      	ldr	r1, [pc, #36]	@ (80020ec <HAL_GPIO_Init+0x2f4>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020cc:	3301      	adds	r3, #1
 80020ce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d6:	fa22 f303 	lsr.w	r3, r2, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f47f ae96 	bne.w	8001e0c <HAL_GPIO_Init+0x14>
  }
}
 80020e0:	bf00      	nop
 80020e2:	bf00      	nop
 80020e4:	372c      	adds	r7, #44	@ 0x2c
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr
 80020ec:	40010400 	.word	0x40010400

080020f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	@ 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80020fe:	e094      	b.n	800222a <HAL_GPIO_DeInit+0x13a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002100:	2201      	movs	r2, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 8087 	beq.w	8002224 <HAL_GPIO_DeInit+0x134>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002116:	4a4b      	ldr	r2, [pc, #300]	@ (8002244 <HAL_GPIO_DeInit+0x154>)
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	089b      	lsrs	r3, r3, #2
 800211c:	3302      	adds	r3, #2
 800211e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002122:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	220f      	movs	r2, #15
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4013      	ands	r3, r2
 8002136:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a43      	ldr	r2, [pc, #268]	@ (8002248 <HAL_GPIO_DeInit+0x158>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d00d      	beq.n	800215c <HAL_GPIO_DeInit+0x6c>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a42      	ldr	r2, [pc, #264]	@ (800224c <HAL_GPIO_DeInit+0x15c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d007      	beq.n	8002158 <HAL_GPIO_DeInit+0x68>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a41      	ldr	r2, [pc, #260]	@ (8002250 <HAL_GPIO_DeInit+0x160>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d101      	bne.n	8002154 <HAL_GPIO_DeInit+0x64>
 8002150:	2302      	movs	r3, #2
 8002152:	e004      	b.n	800215e <HAL_GPIO_DeInit+0x6e>
 8002154:	2303      	movs	r3, #3
 8002156:	e002      	b.n	800215e <HAL_GPIO_DeInit+0x6e>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_GPIO_DeInit+0x6e>
 800215c:	2300      	movs	r3, #0
 800215e:	69fa      	ldr	r2, [r7, #28]
 8002160:	f002 0203 	and.w	r2, r2, #3
 8002164:	0092      	lsls	r2, r2, #2
 8002166:	4093      	lsls	r3, r2
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	429a      	cmp	r2, r3
 800216c:	d132      	bne.n	80021d4 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800216e:	4b39      	ldr	r3, [pc, #228]	@ (8002254 <HAL_GPIO_DeInit+0x164>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	43db      	mvns	r3, r3
 8002176:	4937      	ldr	r1, [pc, #220]	@ (8002254 <HAL_GPIO_DeInit+0x164>)
 8002178:	4013      	ands	r3, r2
 800217a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800217c:	4b35      	ldr	r3, [pc, #212]	@ (8002254 <HAL_GPIO_DeInit+0x164>)
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	43db      	mvns	r3, r3
 8002184:	4933      	ldr	r1, [pc, #204]	@ (8002254 <HAL_GPIO_DeInit+0x164>)
 8002186:	4013      	ands	r3, r2
 8002188:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800218a:	4b32      	ldr	r3, [pc, #200]	@ (8002254 <HAL_GPIO_DeInit+0x164>)
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	43db      	mvns	r3, r3
 8002192:	4930      	ldr	r1, [pc, #192]	@ (8002254 <HAL_GPIO_DeInit+0x164>)
 8002194:	4013      	ands	r3, r2
 8002196:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002198:	4b2e      	ldr	r3, [pc, #184]	@ (8002254 <HAL_GPIO_DeInit+0x164>)
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	43db      	mvns	r3, r3
 80021a0:	492c      	ldr	r1, [pc, #176]	@ (8002254 <HAL_GPIO_DeInit+0x164>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	220f      	movs	r2, #15
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80021b6:	4a23      	ldr	r2, [pc, #140]	@ (8002244 <HAL_GPIO_DeInit+0x154>)
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	3302      	adds	r3, #2
 80021be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	43da      	mvns	r2, r3
 80021c6:	481f      	ldr	r0, [pc, #124]	@ (8002244 <HAL_GPIO_DeInit+0x154>)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	400a      	ands	r2, r1
 80021ce:	3302      	adds	r3, #2
 80021d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	2bff      	cmp	r3, #255	@ 0xff
 80021d8:	d801      	bhi.n	80021de <HAL_GPIO_DeInit+0xee>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	e001      	b.n	80021e2 <HAL_GPIO_DeInit+0xf2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3304      	adds	r3, #4
 80021e2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2bff      	cmp	r3, #255	@ 0xff
 80021e8:	d802      	bhi.n	80021f0 <HAL_GPIO_DeInit+0x100>
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	e002      	b.n	80021f6 <HAL_GPIO_DeInit+0x106>
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	3b08      	subs	r3, #8
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	210f      	movs	r1, #15
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	fa01 f303 	lsl.w	r3, r1, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	401a      	ands	r2, r3
 8002208:	2104      	movs	r1, #4
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	fa01 f303 	lsl.w	r3, r1, r3
 8002210:	431a      	orrs	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	43db      	mvns	r3, r3
 800221e:	401a      	ands	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	3301      	adds	r3, #1
 8002228:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	fa22 f303 	lsr.w	r3, r2, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	f47f af64 	bne.w	8002100 <HAL_GPIO_DeInit+0x10>
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3724      	adds	r7, #36	@ 0x24
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	40010000 	.word	0x40010000
 8002248:	40010800 	.word	0x40010800
 800224c:	40010c00 	.word	0x40010c00
 8002250:	40011000 	.word	0x40011000
 8002254:	40010400 	.word	0x40010400

08002258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
 8002264:	4613      	mov	r3, r2
 8002266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002268:	787b      	ldrb	r3, [r7, #1]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002274:	e003      	b.n	800227e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002276:	887b      	ldrh	r3, [r7, #2]
 8002278:	041a      	lsls	r2, r3, #16
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	611a      	str	r2, [r3, #16]
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800228c:	4b03      	ldr	r3, [pc, #12]	@ (800229c <HAL_PWR_EnableBkUpAccess+0x14>)
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	420e0020 	.word	0x420e0020

080022a0 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80022a4:	4b08      	ldr	r3, [pc, #32]	@ (80022c8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a07      	ldr	r2, [pc, #28]	@ (80022c8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80022aa:	f043 0302 	orr.w	r3, r3, #2
 80022ae:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80022b0:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	4a05      	ldr	r2, [pc, #20]	@ (80022cc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80022b6:	f043 0304 	orr.w	r3, r3, #4
 80022ba:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80022bc:	bf30      	wfi
}
 80022be:	bf00      	nop
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40007000 	.word	0x40007000
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e272      	b.n	80027c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 8087 	beq.w	80023fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022f0:	4b92      	ldr	r3, [pc, #584]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 030c 	and.w	r3, r3, #12
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d00c      	beq.n	8002316 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022fc:	4b8f      	ldr	r3, [pc, #572]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 030c 	and.w	r3, r3, #12
 8002304:	2b08      	cmp	r3, #8
 8002306:	d112      	bne.n	800232e <HAL_RCC_OscConfig+0x5e>
 8002308:	4b8c      	ldr	r3, [pc, #560]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002314:	d10b      	bne.n	800232e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002316:	4b89      	ldr	r3, [pc, #548]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d06c      	beq.n	80023fc <HAL_RCC_OscConfig+0x12c>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d168      	bne.n	80023fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e24c      	b.n	80027c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002336:	d106      	bne.n	8002346 <HAL_RCC_OscConfig+0x76>
 8002338:	4b80      	ldr	r3, [pc, #512]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a7f      	ldr	r2, [pc, #508]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 800233e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	e02e      	b.n	80023a4 <HAL_RCC_OscConfig+0xd4>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10c      	bne.n	8002368 <HAL_RCC_OscConfig+0x98>
 800234e:	4b7b      	ldr	r3, [pc, #492]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a7a      	ldr	r2, [pc, #488]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 8002354:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	4b78      	ldr	r3, [pc, #480]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a77      	ldr	r2, [pc, #476]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 8002360:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	e01d      	b.n	80023a4 <HAL_RCC_OscConfig+0xd4>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0xbc>
 8002372:	4b72      	ldr	r3, [pc, #456]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a71      	ldr	r2, [pc, #452]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 8002378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b6f      	ldr	r3, [pc, #444]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a6e      	ldr	r2, [pc, #440]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 8002384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e00b      	b.n	80023a4 <HAL_RCC_OscConfig+0xd4>
 800238c:	4b6b      	ldr	r3, [pc, #428]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a6a      	ldr	r2, [pc, #424]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 8002392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	4b68      	ldr	r3, [pc, #416]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a67      	ldr	r2, [pc, #412]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 800239e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d013      	beq.n	80023d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7fe feb0 	bl	8001110 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b4:	f7fe feac 	bl	8001110 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b64      	cmp	r3, #100	@ 0x64
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e200      	b.n	80027c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	4b5d      	ldr	r3, [pc, #372]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0xe4>
 80023d2:	e014      	b.n	80023fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7fe fe9c 	bl	8001110 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023dc:	f7fe fe98 	bl	8001110 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b64      	cmp	r3, #100	@ 0x64
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e1ec      	b.n	80027c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ee:	4b53      	ldr	r3, [pc, #332]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x10c>
 80023fa:	e000      	b.n	80023fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d063      	beq.n	80024d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800240a:	4b4c      	ldr	r3, [pc, #304]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00b      	beq.n	800242e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002416:	4b49      	ldr	r3, [pc, #292]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b08      	cmp	r3, #8
 8002420:	d11c      	bne.n	800245c <HAL_RCC_OscConfig+0x18c>
 8002422:	4b46      	ldr	r3, [pc, #280]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d116      	bne.n	800245c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242e:	4b43      	ldr	r3, [pc, #268]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d005      	beq.n	8002446 <HAL_RCC_OscConfig+0x176>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d001      	beq.n	8002446 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e1c0      	b.n	80027c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002446:	4b3d      	ldr	r3, [pc, #244]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4939      	ldr	r1, [pc, #228]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245a:	e03a      	b.n	80024d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d020      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002464:	4b36      	ldr	r3, [pc, #216]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 8002466:	2201      	movs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246a:	f7fe fe51 	bl	8001110 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002472:	f7fe fe4d 	bl	8001110 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e1a1      	b.n	80027c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002484:	4b2d      	ldr	r3, [pc, #180]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002490:	4b2a      	ldr	r3, [pc, #168]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4927      	ldr	r1, [pc, #156]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	600b      	str	r3, [r1, #0]
 80024a4:	e015      	b.n	80024d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a6:	4b26      	ldr	r3, [pc, #152]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7fe fe30 	bl	8001110 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b4:	f7fe fe2c 	bl	8001110 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e180      	b.n	80027c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c6:	4b1d      	ldr	r3, [pc, #116]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d03a      	beq.n	8002554 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d019      	beq.n	800251a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e6:	4b17      	ldr	r3, [pc, #92]	@ (8002544 <HAL_RCC_OscConfig+0x274>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ec:	f7fe fe10 	bl	8001110 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f4:	f7fe fe0c 	bl	8001110 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e160      	b.n	80027c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002506:	4b0d      	ldr	r3, [pc, #52]	@ (800253c <HAL_RCC_OscConfig+0x26c>)
 8002508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002512:	2001      	movs	r0, #1
 8002514:	f000 faba 	bl	8002a8c <RCC_Delay>
 8002518:	e01c      	b.n	8002554 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800251a:	4b0a      	ldr	r3, [pc, #40]	@ (8002544 <HAL_RCC_OscConfig+0x274>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002520:	f7fe fdf6 	bl	8001110 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002526:	e00f      	b.n	8002548 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002528:	f7fe fdf2 	bl	8001110 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d908      	bls.n	8002548 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e146      	b.n	80027c8 <HAL_RCC_OscConfig+0x4f8>
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000
 8002540:	42420000 	.word	0x42420000
 8002544:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002548:	4b92      	ldr	r3, [pc, #584]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1e9      	bne.n	8002528 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 80a6 	beq.w	80026ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002562:	2300      	movs	r3, #0
 8002564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002566:	4b8b      	ldr	r3, [pc, #556]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10d      	bne.n	800258e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002572:	4b88      	ldr	r3, [pc, #544]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	4a87      	ldr	r2, [pc, #540]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800257c:	61d3      	str	r3, [r2, #28]
 800257e:	4b85      	ldr	r3, [pc, #532]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800258a:	2301      	movs	r3, #1
 800258c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258e:	4b82      	ldr	r3, [pc, #520]	@ (8002798 <HAL_RCC_OscConfig+0x4c8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d118      	bne.n	80025cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800259a:	4b7f      	ldr	r3, [pc, #508]	@ (8002798 <HAL_RCC_OscConfig+0x4c8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a7e      	ldr	r2, [pc, #504]	@ (8002798 <HAL_RCC_OscConfig+0x4c8>)
 80025a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a6:	f7fe fdb3 	bl	8001110 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ae:	f7fe fdaf 	bl	8001110 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b64      	cmp	r3, #100	@ 0x64
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e103      	b.n	80027c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c0:	4b75      	ldr	r3, [pc, #468]	@ (8002798 <HAL_RCC_OscConfig+0x4c8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d106      	bne.n	80025e2 <HAL_RCC_OscConfig+0x312>
 80025d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6213      	str	r3, [r2, #32]
 80025e0:	e02d      	b.n	800263e <HAL_RCC_OscConfig+0x36e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10c      	bne.n	8002604 <HAL_RCC_OscConfig+0x334>
 80025ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4a69      	ldr	r2, [pc, #420]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	6213      	str	r3, [r2, #32]
 80025f6:	4b67      	ldr	r3, [pc, #412]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	4a66      	ldr	r2, [pc, #408]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	f023 0304 	bic.w	r3, r3, #4
 8002600:	6213      	str	r3, [r2, #32]
 8002602:	e01c      	b.n	800263e <HAL_RCC_OscConfig+0x36e>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b05      	cmp	r3, #5
 800260a:	d10c      	bne.n	8002626 <HAL_RCC_OscConfig+0x356>
 800260c:	4b61      	ldr	r3, [pc, #388]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4a60      	ldr	r2, [pc, #384]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 8002612:	f043 0304 	orr.w	r3, r3, #4
 8002616:	6213      	str	r3, [r2, #32]
 8002618:	4b5e      	ldr	r3, [pc, #376]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	4a5d      	ldr	r2, [pc, #372]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6213      	str	r3, [r2, #32]
 8002624:	e00b      	b.n	800263e <HAL_RCC_OscConfig+0x36e>
 8002626:	4b5b      	ldr	r3, [pc, #364]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	4a5a      	ldr	r2, [pc, #360]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	6213      	str	r3, [r2, #32]
 8002632:	4b58      	ldr	r3, [pc, #352]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	4a57      	ldr	r2, [pc, #348]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 8002638:	f023 0304 	bic.w	r3, r3, #4
 800263c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d015      	beq.n	8002672 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002646:	f7fe fd63 	bl	8001110 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264c:	e00a      	b.n	8002664 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7fe fd5f 	bl	8001110 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800265c:	4293      	cmp	r3, r2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e0b1      	b.n	80027c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002664:	4b4b      	ldr	r3, [pc, #300]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0ee      	beq.n	800264e <HAL_RCC_OscConfig+0x37e>
 8002670:	e014      	b.n	800269c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002672:	f7fe fd4d 	bl	8001110 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002678:	e00a      	b.n	8002690 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267a:	f7fe fd49 	bl	8001110 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002688:	4293      	cmp	r3, r2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e09b      	b.n	80027c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002690:	4b40      	ldr	r3, [pc, #256]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1ee      	bne.n	800267a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800269c:	7dfb      	ldrb	r3, [r7, #23]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d105      	bne.n	80026ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	4a3b      	ldr	r2, [pc, #236]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 8087 	beq.w	80027c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026b8:	4b36      	ldr	r3, [pc, #216]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 030c 	and.w	r3, r3, #12
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d061      	beq.n	8002788 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d146      	bne.n	800275a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026cc:	4b33      	ldr	r3, [pc, #204]	@ (800279c <HAL_RCC_OscConfig+0x4cc>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d2:	f7fe fd1d 	bl	8001110 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026da:	f7fe fd19 	bl	8001110 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e06d      	b.n	80027c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ec:	4b29      	ldr	r3, [pc, #164]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f0      	bne.n	80026da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002700:	d108      	bne.n	8002714 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002702:	4b24      	ldr	r3, [pc, #144]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	4921      	ldr	r1, [pc, #132]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002714:	4b1f      	ldr	r3, [pc, #124]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a19      	ldr	r1, [r3, #32]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002724:	430b      	orrs	r3, r1
 8002726:	491b      	ldr	r1, [pc, #108]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800272c:	4b1b      	ldr	r3, [pc, #108]	@ (800279c <HAL_RCC_OscConfig+0x4cc>)
 800272e:	2201      	movs	r2, #1
 8002730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002732:	f7fe fced 	bl	8001110 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273a:	f7fe fce9 	bl	8001110 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e03d      	b.n	80027c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800274c:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x46a>
 8002758:	e035      	b.n	80027c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275a:	4b10      	ldr	r3, [pc, #64]	@ (800279c <HAL_RCC_OscConfig+0x4cc>)
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7fe fcd6 	bl	8001110 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002768:	f7fe fcd2 	bl	8001110 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e026      	b.n	80027c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800277a:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <HAL_RCC_OscConfig+0x4c4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x498>
 8002786:	e01e      	b.n	80027c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d107      	bne.n	80027a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e019      	b.n	80027c8 <HAL_RCC_OscConfig+0x4f8>
 8002794:	40021000 	.word	0x40021000
 8002798:	40007000 	.word	0x40007000
 800279c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027a0:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <HAL_RCC_OscConfig+0x500>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d106      	bne.n	80027c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d001      	beq.n	80027c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000

080027d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0d0      	b.n	800298a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d910      	bls.n	8002818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b67      	ldr	r3, [pc, #412]	@ (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 0207 	bic.w	r2, r3, #7
 80027fe:	4965      	ldr	r1, [pc, #404]	@ (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b63      	ldr	r3, [pc, #396]	@ (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0b8      	b.n	800298a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d020      	beq.n	8002866 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002830:	4b59      	ldr	r3, [pc, #356]	@ (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4a58      	ldr	r2, [pc, #352]	@ (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800283a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002848:	4b53      	ldr	r3, [pc, #332]	@ (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4a52      	ldr	r2, [pc, #328]	@ (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002852:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002854:	4b50      	ldr	r3, [pc, #320]	@ (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	494d      	ldr	r1, [pc, #308]	@ (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d040      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b47      	ldr	r3, [pc, #284]	@ (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d115      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e07f      	b.n	800298a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d107      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002892:	4b41      	ldr	r3, [pc, #260]	@ (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e073      	b.n	800298a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e06b      	b.n	800298a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028b2:	4b39      	ldr	r3, [pc, #228]	@ (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f023 0203 	bic.w	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4936      	ldr	r1, [pc, #216]	@ (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c4:	f7fe fc24 	bl	8001110 <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	e00a      	b.n	80028e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028cc:	f7fe fc20 	bl	8001110 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e053      	b.n	800298a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f003 020c 	and.w	r2, r3, #12
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d1eb      	bne.n	80028cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028f4:	4b27      	ldr	r3, [pc, #156]	@ (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d210      	bcs.n	8002924 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002902:	4b24      	ldr	r3, [pc, #144]	@ (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 0207 	bic.w	r2, r3, #7
 800290a:	4922      	ldr	r1, [pc, #136]	@ (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	4313      	orrs	r3, r2
 8002910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b20      	ldr	r3, [pc, #128]	@ (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e032      	b.n	800298a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002930:	4b19      	ldr	r3, [pc, #100]	@ (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4916      	ldr	r1, [pc, #88]	@ (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	4313      	orrs	r3, r2
 8002940:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800294e:	4b12      	ldr	r3, [pc, #72]	@ (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	490e      	ldr	r1, [pc, #56]	@ (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002962:	f000 f821 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8002966:	4602      	mov	r2, r0
 8002968:	4b0b      	ldr	r3, [pc, #44]	@ (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	490a      	ldr	r1, [pc, #40]	@ (800299c <HAL_RCC_ClockConfig+0x1c8>)
 8002974:	5ccb      	ldrb	r3, [r1, r3]
 8002976:	fa22 f303 	lsr.w	r3, r2, r3
 800297a:	4a09      	ldr	r2, [pc, #36]	@ (80029a0 <HAL_RCC_ClockConfig+0x1cc>)
 800297c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800297e:	4b09      	ldr	r3, [pc, #36]	@ (80029a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe fb82 	bl	800108c <HAL_InitTick>

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40022000 	.word	0x40022000
 8002998:	40021000 	.word	0x40021000
 800299c:	08004f70 	.word	0x08004f70
 80029a0:	20000000 	.word	0x20000000
 80029a4:	20000004 	.word	0x20000004

080029a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029c2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x94>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d002      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x30>
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d003      	beq.n	80029de <HAL_RCC_GetSysClockFreq+0x36>
 80029d6:	e027      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029d8:	4b19      	ldr	r3, [pc, #100]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x98>)
 80029da:	613b      	str	r3, [r7, #16]
      break;
 80029dc:	e027      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	0c9b      	lsrs	r3, r3, #18
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	4a17      	ldr	r2, [pc, #92]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029e8:	5cd3      	ldrb	r3, [r2, r3]
 80029ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d010      	beq.n	8002a18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029f6:	4b11      	ldr	r3, [pc, #68]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x94>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	0c5b      	lsrs	r3, r3, #17
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	4a11      	ldr	r2, [pc, #68]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a02:	5cd3      	ldrb	r3, [r2, r3]
 8002a04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a0d      	ldr	r2, [pc, #52]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a0a:	fb03 f202 	mul.w	r2, r3, r2
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	e004      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a1c:	fb02 f303 	mul.w	r3, r2, r3
 8002a20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	613b      	str	r3, [r7, #16]
      break;
 8002a26:	e002      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a28:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a2a:	613b      	str	r3, [r7, #16]
      break;
 8002a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a2e:	693b      	ldr	r3, [r7, #16]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	371c      	adds	r7, #28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	007a1200 	.word	0x007a1200
 8002a44:	08004f88 	.word	0x08004f88
 8002a48:	08004f98 	.word	0x08004f98
 8002a4c:	003d0900 	.word	0x003d0900

08002a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a54:	4b02      	ldr	r3, [pc, #8]	@ (8002a60 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a56:	681b      	ldr	r3, [r3, #0]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr
 8002a60:	20000000 	.word	0x20000000

08002a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a68:	f7ff fff2 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	4b05      	ldr	r3, [pc, #20]	@ (8002a84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	0adb      	lsrs	r3, r3, #11
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	4903      	ldr	r1, [pc, #12]	@ (8002a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a7a:	5ccb      	ldrb	r3, [r1, r3]
 8002a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40021000 	.word	0x40021000
 8002a88:	08004f80 	.word	0x08004f80

08002a8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a94:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac0 <RCC_Delay+0x34>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac4 <RCC_Delay+0x38>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	0a5b      	lsrs	r3, r3, #9
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002aa8:	bf00      	nop
  }
  while (Delay --);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1e5a      	subs	r2, r3, #1
 8002aae:	60fa      	str	r2, [r7, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f9      	bne.n	8002aa8 <RCC_Delay+0x1c>
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr
 8002ac0:	20000000 	.word	0x20000000
 8002ac4:	10624dd3 	.word	0x10624dd3

08002ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d07d      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae8:	4b4f      	ldr	r3, [pc, #316]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10d      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af4:	4b4c      	ldr	r3, [pc, #304]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	4a4b      	ldr	r2, [pc, #300]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002afe:	61d3      	str	r3, [r2, #28]
 8002b00:	4b49      	ldr	r3, [pc, #292]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	4b46      	ldr	r3, [pc, #280]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d118      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b1c:	4b43      	ldr	r3, [pc, #268]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a42      	ldr	r2, [pc, #264]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b28:	f7fe faf2 	bl	8001110 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2e:	e008      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b30:	f7fe faee 	bl	8001110 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b64      	cmp	r3, #100	@ 0x64
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e06d      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b42:	4b3a      	ldr	r3, [pc, #232]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b4e:	4b36      	ldr	r3, [pc, #216]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d02e      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d027      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b6c:	4b2e      	ldr	r3, [pc, #184]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b76:	4b2e      	ldr	r3, [pc, #184]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b82:	4a29      	ldr	r2, [pc, #164]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d014      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b92:	f7fe fabd 	bl	8001110 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9a:	f7fe fab9 	bl	8001110 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e036      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0ee      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4917      	ldr	r1, [pc, #92]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bce:	7dfb      	ldrb	r3, [r7, #23]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d105      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd4:	4b14      	ldr	r3, [pc, #80]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	4a13      	ldr	r2, [pc, #76]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bec:	4b0e      	ldr	r3, [pc, #56]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	490b      	ldr	r1, [pc, #44]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c0a:	4b07      	ldr	r3, [pc, #28]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	4904      	ldr	r1, [pc, #16]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40007000 	.word	0x40007000
 8002c30:	42420440 	.word	0x42420440

08002c34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	2300      	movs	r3, #0
 8002c42:	61fb      	str	r3, [r7, #28]
 8002c44:	2300      	movs	r3, #0
 8002c46:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b10      	cmp	r3, #16
 8002c54:	d00a      	beq.n	8002c6c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b10      	cmp	r3, #16
 8002c5a:	f200 808a 	bhi.w	8002d72 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d045      	beq.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d075      	beq.n	8002d56 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002c6a:	e082      	b.n	8002d72 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002c6c:	4b46      	ldr	r3, [pc, #280]	@ (8002d88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002c72:	4b45      	ldr	r3, [pc, #276]	@ (8002d88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d07b      	beq.n	8002d76 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	0c9b      	lsrs	r3, r3, #18
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	4a41      	ldr	r2, [pc, #260]	@ (8002d8c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002c88:	5cd3      	ldrb	r3, [r2, r3]
 8002c8a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d015      	beq.n	8002cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c96:	4b3c      	ldr	r3, [pc, #240]	@ (8002d88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	0c5b      	lsrs	r3, r3, #17
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	4a3b      	ldr	r2, [pc, #236]	@ (8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002ca2:	5cd3      	ldrb	r3, [r2, r3]
 8002ca4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00d      	beq.n	8002ccc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002cb0:	4a38      	ldr	r2, [pc, #224]	@ (8002d94 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	fb02 f303 	mul.w	r3, r2, r3
 8002cbe:	61fb      	str	r3, [r7, #28]
 8002cc0:	e004      	b.n	8002ccc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4a34      	ldr	r2, [pc, #208]	@ (8002d98 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002cc6:	fb02 f303 	mul.w	r3, r2, r3
 8002cca:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002ccc:	4b2e      	ldr	r3, [pc, #184]	@ (8002d88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cd8:	d102      	bne.n	8002ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	61bb      	str	r3, [r7, #24]
      break;
 8002cde:	e04a      	b.n	8002d76 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4a2d      	ldr	r2, [pc, #180]	@ (8002d9c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	085b      	lsrs	r3, r3, #1
 8002cec:	61bb      	str	r3, [r7, #24]
      break;
 8002cee:	e042      	b.n	8002d76 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002cf0:	4b25      	ldr	r3, [pc, #148]	@ (8002d88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d00:	d108      	bne.n	8002d14 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002d0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d10:	61bb      	str	r3, [r7, #24]
 8002d12:	e01f      	b.n	8002d54 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d1e:	d109      	bne.n	8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002d20:	4b19      	ldr	r3, [pc, #100]	@ (8002d88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002d2c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	e00f      	b.n	8002d54 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d3e:	d11c      	bne.n	8002d7a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002d40:	4b11      	ldr	r3, [pc, #68]	@ (8002d88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d016      	beq.n	8002d7a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002d4c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002d50:	61bb      	str	r3, [r7, #24]
      break;
 8002d52:	e012      	b.n	8002d7a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002d54:	e011      	b.n	8002d7a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002d56:	f7ff fe85 	bl	8002a64 <HAL_RCC_GetPCLK2Freq>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	0b9b      	lsrs	r3, r3, #14
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	3301      	adds	r3, #1
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6e:	61bb      	str	r3, [r7, #24]
      break;
 8002d70:	e004      	b.n	8002d7c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d72:	bf00      	nop
 8002d74:	e002      	b.n	8002d7c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d76:	bf00      	nop
 8002d78:	e000      	b.n	8002d7c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d7a:	bf00      	nop
    }
  }
  return (frequency);
 8002d7c:	69bb      	ldr	r3, [r7, #24]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3720      	adds	r7, #32
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	08004f9c 	.word	0x08004f9c
 8002d90:	08004fac 	.word	0x08004fac
 8002d94:	007a1200 	.word	0x007a1200
 8002d98:	003d0900 	.word	0x003d0900
 8002d9c:	aaaaaaab 	.word	0xaaaaaaab

08002da0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e07a      	b.n	8002eac <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	7c5b      	ldrb	r3, [r3, #17]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d105      	bne.n	8002dcc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7fe f856 	bl	8000e78 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fbae 	bl	8003534 <HAL_RTC_WaitForSynchro>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d004      	beq.n	8002de8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2204      	movs	r2, #4
 8002de2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e061      	b.n	8002eac <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 fc67 	bl	80036bc <RTC_EnterInitMode>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d004      	beq.n	8002dfe <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2204      	movs	r2, #4
 8002df8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e056      	b.n	8002eac <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0207 	bic.w	r2, r2, #7
 8002e0c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002e16:	4b27      	ldr	r3, [pc, #156]	@ (8002eb4 <HAL_RTC_Init+0x114>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	4a26      	ldr	r2, [pc, #152]	@ (8002eb4 <HAL_RTC_Init+0x114>)
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002e22:	4b24      	ldr	r3, [pc, #144]	@ (8002eb4 <HAL_RTC_Init+0x114>)
 8002e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e26:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	4921      	ldr	r1, [pc, #132]	@ (8002eb4 <HAL_RTC_Init+0x114>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3c:	d003      	beq.n	8002e46 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	e00e      	b.n	8002e64 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002e46:	2001      	movs	r0, #1
 8002e48:	f7ff fef4 	bl	8002c34 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e4c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d104      	bne.n	8002e5e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2204      	movs	r2, #4
 8002e58:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e026      	b.n	8002eac <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	3b01      	subs	r3, #1
 8002e62:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	0c1a      	lsrs	r2, r3, #16
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f002 020f 	and.w	r2, r2, #15
 8002e70:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	b292      	uxth	r2, r2
 8002e7a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 fc45 	bl	800370c <RTC_ExitInitMode>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d004      	beq.n	8002e92 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2204      	movs	r2, #4
 8002e8c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e00c      	b.n	8002eac <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
  }
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40006c00 	.word	0x40006c00

08002eb8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <HAL_RTC_SetTime+0x20>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e080      	b.n	8002fde <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	7c1b      	ldrb	r3, [r3, #16]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_RTC_SetTime+0x30>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e07a      	b.n	8002fde <HAL_RTC_SetTime+0x126>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2201      	movs	r2, #1
 8002eec:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d113      	bne.n	8002f22 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002f04:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	785b      	ldrb	r3, [r3, #1]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	460b      	mov	r3, r1
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	1a5b      	subs	r3, r3, r1
 8002f14:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002f16:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002f1c:	4413      	add	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	e01e      	b.n	8002f60 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fc35 	bl	8003796 <RTC_Bcd2ToByte>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002f34:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	785b      	ldrb	r3, [r3, #1]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fc2a 	bl	8003796 <RTC_Bcd2ToByte>
 8002f42:	4603      	mov	r3, r0
 8002f44:	461a      	mov	r2, r3
 8002f46:	4613      	mov	r3, r2
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002f4e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	789b      	ldrb	r3, [r3, #2]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 fc1e 	bl	8003796 <RTC_Bcd2ToByte>
 8002f5a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002f5c:	4423      	add	r3, r4
 8002f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002f60:	6979      	ldr	r1, [r7, #20]
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 fb43 	bl	80035ee <RTC_WriteTimeCounter>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d007      	beq.n	8002f7e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2204      	movs	r2, #4
 8002f72:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e02f      	b.n	8002fde <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0205 	bic.w	r2, r2, #5
 8002f8c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 fb54 	bl	800363c <RTC_ReadAlarmCounter>
 8002f94:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9c:	d018      	beq.n	8002fd0 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d214      	bcs.n	8002fd0 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8002fac:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002fb0:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002fb2:	6939      	ldr	r1, [r7, #16]
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 fb5a 	bl	800366e <RTC_WriteAlarmCounter>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2204      	movs	r2, #4
 8002fc4:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e006      	b.n	8002fde <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
  }
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	371c      	adds	r7, #28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd90      	pop	{r4, r7, pc}
	...

08002fe8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61bb      	str	r3, [r7, #24]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61fb      	str	r3, [r7, #28]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	2300      	movs	r3, #0
 8003002:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_RTC_GetTime+0x28>
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0b5      	b.n	8003180 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e0ac      	b.n	8003180 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 fab1 	bl	800358e <RTC_ReadTimeCounter>
 800302c:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	4a55      	ldr	r2, [pc, #340]	@ (8003188 <HAL_RTC_GetTime+0x1a0>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	0adb      	lsrs	r3, r3, #11
 8003038:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4b52      	ldr	r3, [pc, #328]	@ (8003188 <HAL_RTC_GetTime+0x1a0>)
 800303e:	fba3 1302 	umull	r1, r3, r3, r2
 8003042:	0adb      	lsrs	r3, r3, #11
 8003044:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	4a4f      	ldr	r2, [pc, #316]	@ (800318c <HAL_RTC_GetTime+0x1a4>)
 8003050:	fba2 2303 	umull	r2, r3, r2, r3
 8003054:	095b      	lsrs	r3, r3, #5
 8003056:	b2da      	uxtb	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	4a4a      	ldr	r2, [pc, #296]	@ (8003188 <HAL_RTC_GetTime+0x1a0>)
 8003060:	fba2 1203 	umull	r1, r2, r2, r3
 8003064:	0ad2      	lsrs	r2, r2, #11
 8003066:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800306a:	fb01 f202 	mul.w	r2, r1, r2
 800306e:	1a9a      	subs	r2, r3, r2
 8003070:	4b46      	ldr	r3, [pc, #280]	@ (800318c <HAL_RTC_GetTime+0x1a4>)
 8003072:	fba3 1302 	umull	r1, r3, r3, r2
 8003076:	0959      	lsrs	r1, r3, #5
 8003078:	460b      	mov	r3, r1
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	1a5b      	subs	r3, r3, r1
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	1ad1      	subs	r1, r2, r3
 8003082:	b2ca      	uxtb	r2, r1
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	2b17      	cmp	r3, #23
 800308c:	d955      	bls.n	800313a <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4a3f      	ldr	r2, [pc, #252]	@ (8003190 <HAL_RTC_GetTime+0x1a8>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	091b      	lsrs	r3, r3, #4
 8003098:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800309a:	6939      	ldr	r1, [r7, #16]
 800309c:	4b3c      	ldr	r3, [pc, #240]	@ (8003190 <HAL_RTC_GetTime+0x1a8>)
 800309e:	fba3 2301 	umull	r2, r3, r3, r1
 80030a2:	091a      	lsrs	r2, r3, #4
 80030a4:	4613      	mov	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	4413      	add	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	1aca      	subs	r2, r1, r3
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 fac1 	bl	800363c <RTC_ReadAlarmCounter>
 80030ba:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c2:	d008      	beq.n	80030d6 <HAL_RTC_GetTime+0xee>
 80030c4:	69fa      	ldr	r2, [r7, #28]
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d904      	bls.n	80030d6 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	61fb      	str	r3, [r7, #28]
 80030d4:	e002      	b.n	80030dc <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80030d6:	f04f 33ff 	mov.w	r3, #4294967295
 80030da:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	4a2d      	ldr	r2, [pc, #180]	@ (8003194 <HAL_RTC_GetTime+0x1ac>)
 80030e0:	fb02 f303 	mul.w	r3, r2, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80030ea:	69b9      	ldr	r1, [r7, #24]
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 fa7e 	bl	80035ee <RTC_WriteTimeCounter>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e041      	b.n	8003180 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003102:	d00c      	beq.n	800311e <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	4413      	add	r3, r2
 800310a:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800310c:	69f9      	ldr	r1, [r7, #28]
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 faad 	bl	800366e <RTC_WriteAlarmCounter>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e030      	b.n	8003180 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800311e:	69f9      	ldr	r1, [r7, #28]
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 faa4 	bl	800366e <RTC_WriteAlarmCounter>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e027      	b.n	8003180 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003130:	6979      	ldr	r1, [r7, #20]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 fb4c 	bl	80037d0 <RTC_DateUpdate>
 8003138:	e003      	b.n	8003142 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d01a      	beq.n	800317e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fb05 	bl	800375c <RTC_ByteToBcd2>
 8003152:	4603      	mov	r3, r0
 8003154:	461a      	mov	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fafc 	bl	800375c <RTC_ByteToBcd2>
 8003164:	4603      	mov	r3, r0
 8003166:	461a      	mov	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	789b      	ldrb	r3, [r3, #2]
 8003170:	4618      	mov	r0, r3
 8003172:	f000 faf3 	bl	800375c <RTC_ByteToBcd2>
 8003176:	4603      	mov	r3, r0
 8003178:	461a      	mov	r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3720      	adds	r7, #32
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	91a2b3c5 	.word	0x91a2b3c5
 800318c:	88888889 	.word	0x88888889
 8003190:	aaaaaaab 	.word	0xaaaaaaab
 8003194:	00015180 	.word	0x00015180

08003198 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61fb      	str	r3, [r7, #28]
 80031a8:	2300      	movs	r3, #0
 80031aa:	61bb      	str	r3, [r7, #24]
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <HAL_RTC_SetDate+0x24>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e097      	b.n	80032f0 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	7c1b      	ldrb	r3, [r3, #16]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_RTC_SetDate+0x34>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e091      	b.n	80032f0 <HAL_RTC_SetDate+0x158>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2201      	movs	r2, #1
 80031d0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2202      	movs	r2, #2
 80031d6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10c      	bne.n	80031f8 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	78da      	ldrb	r2, [r3, #3]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	785a      	ldrb	r2, [r3, #1]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	789a      	ldrb	r2, [r3, #2]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	739a      	strb	r2, [r3, #14]
 80031f6:	e01a      	b.n	800322e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	78db      	ldrb	r3, [r3, #3]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 faca 	bl	8003796 <RTC_Bcd2ToByte>
 8003202:	4603      	mov	r3, r0
 8003204:	461a      	mov	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	785b      	ldrb	r3, [r3, #1]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fac1 	bl	8003796 <RTC_Bcd2ToByte>
 8003214:	4603      	mov	r3, r0
 8003216:	461a      	mov	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	789b      	ldrb	r3, [r3, #2]
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fab8 	bl	8003796 <RTC_Bcd2ToByte>
 8003226:	4603      	mov	r3, r0
 8003228:	461a      	mov	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	7bdb      	ldrb	r3, [r3, #15]
 8003232:	4618      	mov	r0, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	7b59      	ldrb	r1, [r3, #13]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	7b9b      	ldrb	r3, [r3, #14]
 800323c:	461a      	mov	r2, r3
 800323e:	f000 fba3 	bl	8003988 <RTC_WeekDayNum>
 8003242:	4603      	mov	r3, r0
 8003244:	461a      	mov	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	7b1a      	ldrb	r2, [r3, #12]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f99b 	bl	800358e <RTC_ReadTimeCounter>
 8003258:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	4a26      	ldr	r2, [pc, #152]	@ (80032f8 <HAL_RTC_SetDate+0x160>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	0adb      	lsrs	r3, r3, #11
 8003264:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b18      	cmp	r3, #24
 800326a:	d93a      	bls.n	80032e2 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	4a23      	ldr	r2, [pc, #140]	@ (80032fc <HAL_RTC_SetDate+0x164>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	4a22      	ldr	r2, [pc, #136]	@ (8003300 <HAL_RTC_SetDate+0x168>)
 8003278:	fb02 f303 	mul.w	r3, r2, r3
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003282:	69f9      	ldr	r1, [r7, #28]
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 f9b2 	bl	80035ee <RTC_WriteTimeCounter>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d007      	beq.n	80032a0 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2204      	movs	r2, #4
 8003294:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e027      	b.n	80032f0 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f9cb 	bl	800363c <RTC_ReadAlarmCounter>
 80032a6:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ae:	d018      	beq.n	80032e2 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d214      	bcs.n	80032e2 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80032be:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80032c2:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80032c4:	69b9      	ldr	r1, [r7, #24]
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f9d1 	bl	800366e <RTC_WriteAlarmCounter>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2204      	movs	r2, #4
 80032d6:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e006      	b.n	80032f0 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3720      	adds	r7, #32
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	91a2b3c5 	.word	0x91a2b3c5
 80032fc:	aaaaaaab 	.word	0xaaaaaaab
 8003300:	00015180 	.word	0x00015180

08003304 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003304:	b590      	push	{r4, r7, lr}
 8003306:	b089      	sub	sp, #36	@ 0x24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8003310:	2300      	movs	r3, #0
 8003312:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8003314:	f107 0314 	add.w	r3, r7, #20
 8003318:	2100      	movs	r1, #0
 800331a:	460a      	mov	r2, r1
 800331c:	801a      	strh	r2, [r3, #0]
 800331e:	460a      	mov	r2, r1
 8003320:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <HAL_RTC_SetAlarm_IT+0x2a>
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e099      	b.n	8003466 <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	7c1b      	ldrb	r3, [r3, #16]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_RTC_SetAlarm_IT+0x3a>
 800333a:	2302      	movs	r3, #2
 800333c:	e093      	b.n	8003466 <HAL_RTC_SetAlarm_IT+0x162>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2201      	movs	r2, #1
 8003342:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2202      	movs	r2, #2
 8003348:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800334a:	f107 0314 	add.w	r3, r7, #20
 800334e:	2200      	movs	r2, #0
 8003350:	4619      	mov	r1, r3
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f7ff fe48 	bl	8002fe8 <HAL_RTC_GetTime>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e081      	b.n	8003466 <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003362:	7d3b      	ldrb	r3, [r7, #20]
 8003364:	461a      	mov	r2, r3
 8003366:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800336a:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 800336e:	7d7b      	ldrb	r3, [r7, #21]
 8003370:	4619      	mov	r1, r3
 8003372:	460b      	mov	r3, r1
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	1a5b      	subs	r3, r3, r1
 8003378:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800337a:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 800337c:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800337e:	4413      	add	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d113      	bne.n	80033b0 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	461a      	mov	r2, r3
 800338e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003392:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	785b      	ldrb	r3, [r3, #1]
 800339a:	4619      	mov	r1, r3
 800339c:	460b      	mov	r3, r1
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	1a5b      	subs	r3, r3, r1
 80033a2:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80033a4:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80033aa:	4413      	add	r3, r2
 80033ac:	61fb      	str	r3, [r7, #28]
 80033ae:	e01e      	b.n	80033ee <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 f9ee 	bl	8003796 <RTC_Bcd2ToByte>
 80033ba:	4603      	mov	r3, r0
 80033bc:	461a      	mov	r2, r3
 80033be:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80033c2:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	785b      	ldrb	r3, [r3, #1]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 f9e3 	bl	8003796 <RTC_Bcd2ToByte>
 80033d0:	4603      	mov	r3, r0
 80033d2:	461a      	mov	r2, r3
 80033d4:	4613      	mov	r3, r2
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80033dc:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	789b      	ldrb	r3, [r3, #2]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 f9d7 	bl	8003796 <RTC_Bcd2ToByte>
 80033e8:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80033ea:	4423      	add	r3, r4
 80033ec:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d205      	bcs.n	8003402 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80033fc:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003400:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003402:	69f9      	ldr	r1, [r7, #28]
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 f932 	bl	800366e <RTC_WriteAlarmCounter>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2204      	movs	r2, #4
 8003414:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e022      	b.n	8003466 <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0202 	bic.w	r2, r2, #2
 800342e:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0202 	orr.w	r2, r2, #2
 800343e:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003440:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <HAL_RTC_SetAlarm_IT+0x16c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a0a      	ldr	r2, [pc, #40]	@ (8003470 <HAL_RTC_SetAlarm_IT+0x16c>)
 8003446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800344a:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800344c:	4b08      	ldr	r3, [pc, #32]	@ (8003470 <HAL_RTC_SetAlarm_IT+0x16c>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4a07      	ldr	r2, [pc, #28]	@ (8003470 <HAL_RTC_SetAlarm_IT+0x16c>)
 8003452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003456:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2201      	movs	r2, #1
 800345c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003464:	2300      	movs	r3, #0
  }
}
 8003466:	4618      	mov	r0, r3
 8003468:	3724      	adds	r7, #36	@ 0x24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd90      	pop	{r4, r7, pc}
 800346e:	bf00      	nop
 8003470:	40010400 	.word	0x40010400

08003474 <HAL_RTC_DeactivateAlarm>:
  *          This parameter can be one of the following values:
  *            @arg RTC_ALARM_A:  AlarmA
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Check input parameters */
  if (hrtc == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RTC_DeactivateAlarm+0x14>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e04e      	b.n	8003526 <HAL_RTC_DeactivateAlarm+0xb2>
  }

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	7c1b      	ldrb	r3, [r3, #16]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_RTC_DeactivateAlarm+0x20>
 8003490:	2302      	movs	r3, #2
 8003492:	e048      	b.n	8003526 <HAL_RTC_DeactivateAlarm+0xb2>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2202      	movs	r2, #2
 800349e:	745a      	strb	r2, [r3, #17]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0202 	bic.w	r2, r2, #2
 80034ae:	601a      	str	r2, [r3, #0]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f903 	bl	80036bc <RTC_EnterInitMode>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <HAL_RTC_DeactivateAlarm+0x58>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2204      	movs	r2, #4
 80034c0:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e02c      	b.n	8003526 <HAL_RTC_DeactivateAlarm+0xb2>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0202 	bic.w	r2, r2, #2
 80034da:	605a      	str	r2, [r3, #4]

    /* Set to default values ALRH & ALRL registers */
    WRITE_REG(hrtc->Instance->ALRH, RTC_ALARM_RESETVALUE_REGISTER);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80034e4:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, RTC_ALARM_RESETVALUE_REGISTER);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80034ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* RTC Alarm Interrupt Configuration: Disable EXTI configuration */
    __HAL_RTC_ALARM_EXTI_DISABLE_IT();
 80034f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003530 <HAL_RTC_DeactivateAlarm+0xbc>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a0e      	ldr	r2, [pc, #56]	@ (8003530 <HAL_RTC_DeactivateAlarm+0xbc>)
 80034f6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80034fa:	6013      	str	r3, [r2, #0]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f905 	bl	800370c <RTC_ExitInitMode>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <HAL_RTC_DeactivateAlarm+0xa4>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2204      	movs	r2, #4
 800350c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e006      	b.n	8003526 <HAL_RTC_DeactivateAlarm+0xb2>
    }
  }
  hrtc->State = HAL_RTC_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40010400 	.word	0x40010400

08003534 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e01d      	b.n	8003586 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0208 	bic.w	r2, r2, #8
 8003558:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800355a:	f7fd fdd9 	bl	8001110 <HAL_GetTick>
 800355e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003560:	e009      	b.n	8003576 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003562:	f7fd fdd5 	bl	8001110 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003570:	d901      	bls.n	8003576 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e007      	b.n	8003586 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0ee      	beq.n	8003562 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800358e:	b480      	push	{r7}
 8003590:	b087      	sub	sp, #28
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003596:	2300      	movs	r3, #0
 8003598:	827b      	strh	r3, [r7, #18]
 800359a:	2300      	movs	r3, #0
 800359c:	823b      	strh	r3, [r7, #16]
 800359e:	2300      	movs	r3, #0
 80035a0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80035be:	8a7a      	ldrh	r2, [r7, #18]
 80035c0:	8a3b      	ldrh	r3, [r7, #16]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d008      	beq.n	80035d8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80035c6:	8a3b      	ldrh	r3, [r7, #16]
 80035c8:	041a      	lsls	r2, r3, #16
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	4313      	orrs	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	e004      	b.n	80035e2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80035d8:	8a7b      	ldrh	r3, [r7, #18]
 80035da:	041a      	lsls	r2, r3, #16
 80035dc:	89fb      	ldrh	r3, [r7, #14]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80035e2:	697b      	ldr	r3, [r7, #20]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	371c      	adds	r7, #28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr

080035ee <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f85d 	bl	80036bc <RTC_EnterInitMode>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	73fb      	strb	r3, [r7, #15]
 800360c:	e011      	b.n	8003632 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	0c12      	lsrs	r2, r2, #16
 8003616:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	b292      	uxth	r2, r2
 8003620:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f872 	bl	800370c <RTC_ExitInitMode>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003632:	7bfb      	ldrb	r3, [r7, #15]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	81fb      	strh	r3, [r7, #14]
 8003648:	2300      	movs	r3, #0
 800364a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800365c:	89fb      	ldrh	r3, [r7, #14]
 800365e:	041a      	lsls	r2, r3, #16
 8003660:	89bb      	ldrh	r3, [r7, #12]
 8003662:	4313      	orrs	r3, r2
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr

0800366e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b084      	sub	sp, #16
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f81d 	bl	80036bc <RTC_EnterInitMode>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	73fb      	strb	r3, [r7, #15]
 800368c:	e011      	b.n	80036b2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	0c12      	lsrs	r2, r2, #16
 8003696:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	b292      	uxth	r2, r2
 80036a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f832 	bl	800370c <RTC_ExitInitMode>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80036c8:	f7fd fd22 	bl	8001110 <HAL_GetTick>
 80036cc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80036ce:	e009      	b.n	80036e4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80036d0:	f7fd fd1e 	bl	8001110 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036de:	d901      	bls.n	80036e4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e00f      	b.n	8003704 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0ee      	beq.n	80036d0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0210 	orr.w	r2, r2, #16
 8003700:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0210 	bic.w	r2, r2, #16
 8003726:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003728:	f7fd fcf2 	bl	8001110 <HAL_GetTick>
 800372c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800372e:	e009      	b.n	8003744 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003730:	f7fd fcee 	bl	8001110 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800373e:	d901      	bls.n	8003744 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e007      	b.n	8003754 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0ee      	beq.n	8003730 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800376a:	e005      	b.n	8003778 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	3301      	adds	r3, #1
 8003770:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	3b0a      	subs	r3, #10
 8003776:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	2b09      	cmp	r3, #9
 800377c:	d8f6      	bhi.n	800376c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	b2da      	uxtb	r2, r3
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	4313      	orrs	r3, r2
 800378a:	b2db      	uxtb	r3, r3
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003796:	b480      	push	{r7}
 8003798:	b085      	sub	sp, #20
 800379a:	af00      	add	r7, sp, #0
 800379c:	4603      	mov	r3, r0
 800379e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	091b      	lsrs	r3, r3, #4
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	461a      	mov	r2, r3
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	f003 030f 	and.w	r3, r3, #15
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	4413      	add	r3, r2
 80037c4:	b2db      	uxtb	r3, r3
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr

080037d0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	7bdb      	ldrb	r3, [r3, #15]
 80037ee:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	7b5b      	ldrb	r3, [r3, #13]
 80037f4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7b9b      	ldrb	r3, [r3, #14]
 80037fa:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80037fc:	2300      	movs	r3, #0
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	e06f      	b.n	80038e2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d011      	beq.n	800382c <RTC_DateUpdate+0x5c>
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	2b03      	cmp	r3, #3
 800380c:	d00e      	beq.n	800382c <RTC_DateUpdate+0x5c>
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b05      	cmp	r3, #5
 8003812:	d00b      	beq.n	800382c <RTC_DateUpdate+0x5c>
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2b07      	cmp	r3, #7
 8003818:	d008      	beq.n	800382c <RTC_DateUpdate+0x5c>
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d005      	beq.n	800382c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	2b0a      	cmp	r3, #10
 8003824:	d002      	beq.n	800382c <RTC_DateUpdate+0x5c>
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b0c      	cmp	r3, #12
 800382a:	d117      	bne.n	800385c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b1e      	cmp	r3, #30
 8003830:	d803      	bhi.n	800383a <RTC_DateUpdate+0x6a>
      {
        day++;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	3301      	adds	r3, #1
 8003836:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003838:	e050      	b.n	80038dc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b0c      	cmp	r3, #12
 800383e:	d005      	beq.n	800384c <RTC_DateUpdate+0x7c>
        {
          month++;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	3301      	adds	r3, #1
 8003844:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003846:	2301      	movs	r3, #1
 8003848:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800384a:	e047      	b.n	80038dc <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800384c:	2301      	movs	r3, #1
 800384e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003850:	2301      	movs	r3, #1
 8003852:	60fb      	str	r3, [r7, #12]
          year++;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	3301      	adds	r3, #1
 8003858:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800385a:	e03f      	b.n	80038dc <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	2b04      	cmp	r3, #4
 8003860:	d008      	beq.n	8003874 <RTC_DateUpdate+0xa4>
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	2b06      	cmp	r3, #6
 8003866:	d005      	beq.n	8003874 <RTC_DateUpdate+0xa4>
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	2b09      	cmp	r3, #9
 800386c:	d002      	beq.n	8003874 <RTC_DateUpdate+0xa4>
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	2b0b      	cmp	r3, #11
 8003872:	d10c      	bne.n	800388e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2b1d      	cmp	r3, #29
 8003878:	d803      	bhi.n	8003882 <RTC_DateUpdate+0xb2>
      {
        day++;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3301      	adds	r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003880:	e02c      	b.n	80038dc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	3301      	adds	r3, #1
 8003886:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003888:	2301      	movs	r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800388c:	e026      	b.n	80038dc <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d123      	bne.n	80038dc <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2b1b      	cmp	r3, #27
 8003898:	d803      	bhi.n	80038a2 <RTC_DateUpdate+0xd2>
      {
        day++;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	3301      	adds	r3, #1
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	e01c      	b.n	80038dc <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b1c      	cmp	r3, #28
 80038a6:	d111      	bne.n	80038cc <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 f839 	bl	8003924 <RTC_IsLeapYear>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <RTC_DateUpdate+0xf0>
        {
          day++;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3301      	adds	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	e00d      	b.n	80038dc <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	3301      	adds	r3, #1
 80038c4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80038c6:	2301      	movs	r3, #1
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	e007      	b.n	80038dc <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b1d      	cmp	r3, #29
 80038d0:	d104      	bne.n	80038dc <RTC_DateUpdate+0x10c>
      {
        month++;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	3301      	adds	r3, #1
 80038d6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80038d8:	2301      	movs	r3, #1
 80038da:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	3301      	adds	r3, #1
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d38b      	bcc.n	8003802 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	4619      	mov	r1, r3
 800390c:	6978      	ldr	r0, [r7, #20]
 800390e:	f000 f83b 	bl	8003988 <RTC_WeekDayNum>
 8003912:	4603      	mov	r3, r0
 8003914:	461a      	mov	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	731a      	strb	r2, [r3, #12]
}
 800391a:	bf00      	nop
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800392e:	88fb      	ldrh	r3, [r7, #6]
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	e01d      	b.n	800397a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	4a10      	ldr	r2, [pc, #64]	@ (8003984 <RTC_IsLeapYear+0x60>)
 8003942:	fba2 1203 	umull	r1, r2, r2, r3
 8003946:	0952      	lsrs	r2, r2, #5
 8003948:	2164      	movs	r1, #100	@ 0x64
 800394a:	fb01 f202 	mul.w	r2, r1, r2
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003956:	2301      	movs	r3, #1
 8003958:	e00f      	b.n	800397a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	4a09      	ldr	r2, [pc, #36]	@ (8003984 <RTC_IsLeapYear+0x60>)
 800395e:	fba2 1203 	umull	r1, r2, r2, r3
 8003962:	09d2      	lsrs	r2, r2, #7
 8003964:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003968:	fb01 f202 	mul.w	r2, r1, r2
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003978:	2300      	movs	r3, #0
  }
}
 800397a:	4618      	mov	r0, r3
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr
 8003984:	51eb851f 	.word	0x51eb851f

08003988 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	70fb      	strb	r3, [r7, #3]
 8003994:	4613      	mov	r3, r2
 8003996:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80039a6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80039a8:	78fb      	ldrb	r3, [r7, #3]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d82d      	bhi.n	8003a0a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80039ae:	78fa      	ldrb	r2, [r7, #3]
 80039b0:	4613      	mov	r3, r2
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	4413      	add	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	4a2c      	ldr	r2, [pc, #176]	@ (8003a6c <RTC_WeekDayNum+0xe4>)
 80039bc:	fba2 2303 	umull	r2, r3, r2, r3
 80039c0:	085a      	lsrs	r2, r3, #1
 80039c2:	78bb      	ldrb	r3, [r7, #2]
 80039c4:	441a      	add	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	441a      	add	r2, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	089b      	lsrs	r3, r3, #2
 80039d0:	441a      	add	r2, r3
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	4926      	ldr	r1, [pc, #152]	@ (8003a70 <RTC_WeekDayNum+0xe8>)
 80039d8:	fba1 1303 	umull	r1, r3, r1, r3
 80039dc:	095b      	lsrs	r3, r3, #5
 80039de:	1ad2      	subs	r2, r2, r3
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	4922      	ldr	r1, [pc, #136]	@ (8003a70 <RTC_WeekDayNum+0xe8>)
 80039e6:	fba1 1303 	umull	r1, r3, r1, r3
 80039ea:	09db      	lsrs	r3, r3, #7
 80039ec:	4413      	add	r3, r2
 80039ee:	1d1a      	adds	r2, r3, #4
 80039f0:	4b20      	ldr	r3, [pc, #128]	@ (8003a74 <RTC_WeekDayNum+0xec>)
 80039f2:	fba3 1302 	umull	r1, r3, r3, r2
 80039f6:	1ad1      	subs	r1, r2, r3
 80039f8:	0849      	lsrs	r1, r1, #1
 80039fa:	440b      	add	r3, r1
 80039fc:	0899      	lsrs	r1, r3, #2
 80039fe:	460b      	mov	r3, r1
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	1a5b      	subs	r3, r3, r1
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	e029      	b.n	8003a5e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4413      	add	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	4a15      	ldr	r2, [pc, #84]	@ (8003a6c <RTC_WeekDayNum+0xe4>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	085a      	lsrs	r2, r3, #1
 8003a1e:	78bb      	ldrb	r3, [r7, #2]
 8003a20:	441a      	add	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	441a      	add	r2, r3
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	089b      	lsrs	r3, r3, #2
 8003a2a:	441a      	add	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	4910      	ldr	r1, [pc, #64]	@ (8003a70 <RTC_WeekDayNum+0xe8>)
 8003a30:	fba1 1303 	umull	r1, r3, r1, r3
 8003a34:	095b      	lsrs	r3, r3, #5
 8003a36:	1ad2      	subs	r2, r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	490d      	ldr	r1, [pc, #52]	@ (8003a70 <RTC_WeekDayNum+0xe8>)
 8003a3c:	fba1 1303 	umull	r1, r3, r1, r3
 8003a40:	09db      	lsrs	r3, r3, #7
 8003a42:	4413      	add	r3, r2
 8003a44:	1c9a      	adds	r2, r3, #2
 8003a46:	4b0b      	ldr	r3, [pc, #44]	@ (8003a74 <RTC_WeekDayNum+0xec>)
 8003a48:	fba3 1302 	umull	r1, r3, r3, r2
 8003a4c:	1ad1      	subs	r1, r2, r3
 8003a4e:	0849      	lsrs	r1, r1, #1
 8003a50:	440b      	add	r3, r1
 8003a52:	0899      	lsrs	r1, r3, #2
 8003a54:	460b      	mov	r3, r1
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	1a5b      	subs	r3, r3, r1
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	b2db      	uxtb	r3, r3
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr
 8003a6c:	38e38e39 	.word	0x38e38e39
 8003a70:	51eb851f 	.word	0x51eb851f
 8003a74:	24924925 	.word	0x24924925

08003a78 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d027      	beq.n	8003ade <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d020      	beq.n	8003ade <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f824 	bl	8003af8 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0204 	mvn.w	r2, #4
 8003ab8:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2204      	movs	r2, #4
 8003abe:	745a      	strb	r2, [r3, #17]
 8003ac0:	e005      	b.n	8003ace <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f80f 	bl	8003ae6 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0201 	bic.w	r2, r2, #1
 8003adc:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr

08003af8 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr

08003b0a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e076      	b.n	8003c0a <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d108      	bne.n	8003b36 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b2c:	d009      	beq.n	8003b42 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	61da      	str	r2, [r3, #28]
 8003b34:	e005      	b.n	8003b42 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d106      	bne.n	8003b62 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7fd f9b7 	bl	8000ed0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2202      	movs	r2, #2
 8003b66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b78:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc6:	ea42 0103 	orr.w	r1, r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bce:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	0c1a      	lsrs	r2, r3, #16
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f002 0204 	and.w	r2, r2, #4
 8003be8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69da      	ldr	r2, [r3, #28]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bf8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b088      	sub	sp, #32
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	603b      	str	r3, [r7, #0]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c22:	f7fd fa75 	bl	8001110 <HAL_GetTick>
 8003c26:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003c28:	88fb      	ldrh	r3, [r7, #6]
 8003c2a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d001      	beq.n	8003c3c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e12a      	b.n	8003e92 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <HAL_SPI_Transmit+0x36>
 8003c42:	88fb      	ldrh	r3, [r7, #6]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e122      	b.n	8003e92 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_SPI_Transmit+0x48>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e11b      	b.n	8003e92 <HAL_SPI_Transmit+0x280>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2203      	movs	r2, #3
 8003c66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	88fa      	ldrh	r2, [r7, #6]
 8003c7a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	88fa      	ldrh	r2, [r7, #6]
 8003c80:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ca8:	d10f      	bne.n	8003cca <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd4:	2b40      	cmp	r3, #64	@ 0x40
 8003cd6:	d007      	beq.n	8003ce8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ce6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cf0:	d152      	bne.n	8003d98 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <HAL_SPI_Transmit+0xee>
 8003cfa:	8b7b      	ldrh	r3, [r7, #26]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d145      	bne.n	8003d8c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d04:	881a      	ldrh	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d10:	1c9a      	adds	r2, r3, #2
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d24:	e032      	b.n	8003d8c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d112      	bne.n	8003d5a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d38:	881a      	ldrh	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d44:	1c9a      	adds	r2, r3, #2
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d58:	e018      	b.n	8003d8c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d5a:	f7fd f9d9 	bl	8001110 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d803      	bhi.n	8003d72 <HAL_SPI_Transmit+0x160>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d70:	d102      	bne.n	8003d78 <HAL_SPI_Transmit+0x166>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d109      	bne.n	8003d8c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e082      	b.n	8003e92 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1c7      	bne.n	8003d26 <HAL_SPI_Transmit+0x114>
 8003d96:	e053      	b.n	8003e40 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <HAL_SPI_Transmit+0x194>
 8003da0:	8b7b      	ldrh	r3, [r7, #26]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d147      	bne.n	8003e36 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	330c      	adds	r3, #12
 8003db0:	7812      	ldrb	r2, [r2, #0]
 8003db2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003dcc:	e033      	b.n	8003e36 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d113      	bne.n	8003e04 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	330c      	adds	r3, #12
 8003de6:	7812      	ldrb	r2, [r2, #0]
 8003de8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003e02:	e018      	b.n	8003e36 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e04:	f7fd f984 	bl	8001110 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d803      	bhi.n	8003e1c <HAL_SPI_Transmit+0x20a>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1a:	d102      	bne.n	8003e22 <HAL_SPI_Transmit+0x210>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e02d      	b.n	8003e92 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1c6      	bne.n	8003dce <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e40:	69fa      	ldr	r2, [r7, #28]
 8003e42:	6839      	ldr	r1, [r7, #0]
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 fa59 	bl	80042fc <SPI_EndRxTxTransaction>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10a      	bne.n	8003e74 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003e90:	2300      	movs	r3, #0
  }
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b08a      	sub	sp, #40	@ 0x28
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eac:	f7fd f930 	bl	8001110 <HAL_GetTick>
 8003eb0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003eb8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003ec0:	887b      	ldrh	r3, [r7, #2]
 8003ec2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ec4:	7ffb      	ldrb	r3, [r7, #31]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d00c      	beq.n	8003ee4 <HAL_SPI_TransmitReceive+0x4a>
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ed0:	d106      	bne.n	8003ee0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d102      	bne.n	8003ee0 <HAL_SPI_TransmitReceive+0x46>
 8003eda:	7ffb      	ldrb	r3, [r7, #31]
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d001      	beq.n	8003ee4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e17f      	b.n	80041e4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_SPI_TransmitReceive+0x5c>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HAL_SPI_TransmitReceive+0x5c>
 8003ef0:	887b      	ldrh	r3, [r7, #2]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e174      	b.n	80041e4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_SPI_TransmitReceive+0x6e>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e16d      	b.n	80041e4 <HAL_SPI_TransmitReceive+0x34a>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d003      	beq.n	8003f24 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2205      	movs	r2, #5
 8003f20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	887a      	ldrh	r2, [r7, #2]
 8003f34:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	887a      	ldrh	r2, [r7, #2]
 8003f3a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	887a      	ldrh	r2, [r7, #2]
 8003f46:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	887a      	ldrh	r2, [r7, #2]
 8003f4c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f64:	2b40      	cmp	r3, #64	@ 0x40
 8003f66:	d007      	beq.n	8003f78 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f80:	d17e      	bne.n	8004080 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <HAL_SPI_TransmitReceive+0xf6>
 8003f8a:	8afb      	ldrh	r3, [r7, #22]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d16c      	bne.n	800406a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f94:	881a      	ldrh	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa0:	1c9a      	adds	r2, r3, #2
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fb4:	e059      	b.n	800406a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d11b      	bne.n	8003ffc <HAL_SPI_TransmitReceive+0x162>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d016      	beq.n	8003ffc <HAL_SPI_TransmitReceive+0x162>
 8003fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d113      	bne.n	8003ffc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd8:	881a      	ldrh	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe4:	1c9a      	adds	r2, r3, #2
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b01      	cmp	r3, #1
 8004008:	d119      	bne.n	800403e <HAL_SPI_TransmitReceive+0x1a4>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d014      	beq.n	800403e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401e:	b292      	uxth	r2, r2
 8004020:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004026:	1c9a      	adds	r2, r3, #2
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800403a:	2301      	movs	r3, #1
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800403e:	f7fd f867 	bl	8001110 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800404a:	429a      	cmp	r2, r3
 800404c:	d80d      	bhi.n	800406a <HAL_SPI_TransmitReceive+0x1d0>
 800404e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004054:	d009      	beq.n	800406a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e0bc      	b.n	80041e4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1a0      	bne.n	8003fb6 <HAL_SPI_TransmitReceive+0x11c>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d19b      	bne.n	8003fb6 <HAL_SPI_TransmitReceive+0x11c>
 800407e:	e082      	b.n	8004186 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <HAL_SPI_TransmitReceive+0x1f4>
 8004088:	8afb      	ldrh	r3, [r7, #22]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d171      	bne.n	8004172 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	330c      	adds	r3, #12
 8004098:	7812      	ldrb	r2, [r2, #0]
 800409a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040b4:	e05d      	b.n	8004172 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d11c      	bne.n	80040fe <HAL_SPI_TransmitReceive+0x264>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d017      	beq.n	80040fe <HAL_SPI_TransmitReceive+0x264>
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d114      	bne.n	80040fe <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	330c      	adds	r3, #12
 80040de:	7812      	ldrb	r2, [r2, #0]
 80040e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b01      	cmp	r3, #1
 800410a:	d119      	bne.n	8004140 <HAL_SPI_TransmitReceive+0x2a6>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d014      	beq.n	8004140 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800413c:	2301      	movs	r3, #1
 800413e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004140:	f7fc ffe6 	bl	8001110 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800414c:	429a      	cmp	r2, r3
 800414e:	d803      	bhi.n	8004158 <HAL_SPI_TransmitReceive+0x2be>
 8004150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004156:	d102      	bne.n	800415e <HAL_SPI_TransmitReceive+0x2c4>
 8004158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415a:	2b00      	cmp	r3, #0
 800415c:	d109      	bne.n	8004172 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e038      	b.n	80041e4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d19c      	bne.n	80040b6 <HAL_SPI_TransmitReceive+0x21c>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d197      	bne.n	80040b6 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004186:	6a3a      	ldr	r2, [r7, #32]
 8004188:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f8b6 	bl	80042fc <SPI_EndRxTxTransaction>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d008      	beq.n	80041a8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2220      	movs	r2, #32
 800419a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e01d      	b.n	80041e4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10a      	bne.n	80041c6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041b0:	2300      	movs	r3, #0
 80041b2:	613b      	str	r3, [r7, #16]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	613b      	str	r3, [r7, #16]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80041e2:	2300      	movs	r3, #0
  }
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3728      	adds	r7, #40	@ 0x28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	4613      	mov	r3, r2
 80041fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041fc:	f7fc ff88 	bl	8001110 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004204:	1a9b      	subs	r3, r3, r2
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	4413      	add	r3, r2
 800420a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800420c:	f7fc ff80 	bl	8001110 <HAL_GetTick>
 8004210:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004212:	4b39      	ldr	r3, [pc, #228]	@ (80042f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	015b      	lsls	r3, r3, #5
 8004218:	0d1b      	lsrs	r3, r3, #20
 800421a:	69fa      	ldr	r2, [r7, #28]
 800421c:	fb02 f303 	mul.w	r3, r2, r3
 8004220:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004222:	e054      	b.n	80042ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422a:	d050      	beq.n	80042ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800422c:	f7fc ff70 	bl	8001110 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	429a      	cmp	r2, r3
 800423a:	d902      	bls.n	8004242 <SPI_WaitFlagStateUntilTimeout+0x56>
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d13d      	bne.n	80042be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004250:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800425a:	d111      	bne.n	8004280 <SPI_WaitFlagStateUntilTimeout+0x94>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004264:	d004      	beq.n	8004270 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800426e:	d107      	bne.n	8004280 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800427e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004284:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004288:	d10f      	bne.n	80042aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e017      	b.n	80042ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4013      	ands	r3, r2
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	429a      	cmp	r2, r3
 80042dc:	bf0c      	ite	eq
 80042de:	2301      	moveq	r3, #1
 80042e0:	2300      	movne	r3, #0
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	461a      	mov	r2, r3
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d19b      	bne.n	8004224 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3720      	adds	r7, #32
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20000000 	.word	0x20000000

080042fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af02      	add	r7, sp, #8
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2201      	movs	r2, #1
 8004310:	2102      	movs	r1, #2
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f7ff ff6a 	bl	80041ec <SPI_WaitFlagStateUntilTimeout>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d007      	beq.n	800432e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004322:	f043 0220 	orr.w	r2, r3, #32
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e013      	b.n	8004356 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2200      	movs	r2, #0
 8004336:	2180      	movs	r1, #128	@ 0x80
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f7ff ff57 	bl	80041ec <SPI_WaitFlagStateUntilTimeout>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d007      	beq.n	8004354 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004348:	f043 0220 	orr.w	r2, r3, #32
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e000      	b.n	8004356 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b082      	sub	sp, #8
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e041      	b.n	80043f4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d106      	bne.n	800438a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7fc fded 	bl	8000f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2202      	movs	r2, #2
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3304      	adds	r3, #4
 800439a:	4619      	mov	r1, r3
 800439c:	4610      	mov	r0, r2
 800439e:	f000 f95f 	bl	8004660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b01      	cmp	r3, #1
 800440e:	d001      	beq.n	8004414 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e02d      	b.n	8004470 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a16      	ldr	r2, [pc, #88]	@ (800447c <HAL_TIM_Base_Start+0x80>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d009      	beq.n	800443a <HAL_TIM_Base_Start+0x3e>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800442e:	d004      	beq.n	800443a <HAL_TIM_Base_Start+0x3e>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a12      	ldr	r2, [pc, #72]	@ (8004480 <HAL_TIM_Base_Start+0x84>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d111      	bne.n	800445e <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b06      	cmp	r3, #6
 800444a:	d010      	beq.n	800446e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445c:	e007      	b.n	800446e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 0201 	orr.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40012c00 	.word	0x40012c00
 8004480:	40000400 	.word	0x40000400

08004484 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6a1a      	ldr	r2, [r3, #32]
 8004492:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004496:	4013      	ands	r3, r2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10f      	bne.n	80044bc <HAL_TIM_Base_Stop+0x38>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6a1a      	ldr	r2, [r3, #32]
 80044a2:	f240 4344 	movw	r3, #1092	@ 0x444
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d107      	bne.n	80044bc <HAL_TIM_Base_Stop+0x38>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0201 	bic.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr

080044d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_TIM_ConfigClockSource+0x1c>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e0b4      	b.n	8004656 <HAL_TIM_ConfigClockSource+0x186>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800450a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004512:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004524:	d03e      	beq.n	80045a4 <HAL_TIM_ConfigClockSource+0xd4>
 8004526:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800452a:	f200 8087 	bhi.w	800463c <HAL_TIM_ConfigClockSource+0x16c>
 800452e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004532:	f000 8086 	beq.w	8004642 <HAL_TIM_ConfigClockSource+0x172>
 8004536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800453a:	d87f      	bhi.n	800463c <HAL_TIM_ConfigClockSource+0x16c>
 800453c:	2b70      	cmp	r3, #112	@ 0x70
 800453e:	d01a      	beq.n	8004576 <HAL_TIM_ConfigClockSource+0xa6>
 8004540:	2b70      	cmp	r3, #112	@ 0x70
 8004542:	d87b      	bhi.n	800463c <HAL_TIM_ConfigClockSource+0x16c>
 8004544:	2b60      	cmp	r3, #96	@ 0x60
 8004546:	d050      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0x11a>
 8004548:	2b60      	cmp	r3, #96	@ 0x60
 800454a:	d877      	bhi.n	800463c <HAL_TIM_ConfigClockSource+0x16c>
 800454c:	2b50      	cmp	r3, #80	@ 0x50
 800454e:	d03c      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0xfa>
 8004550:	2b50      	cmp	r3, #80	@ 0x50
 8004552:	d873      	bhi.n	800463c <HAL_TIM_ConfigClockSource+0x16c>
 8004554:	2b40      	cmp	r3, #64	@ 0x40
 8004556:	d058      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x13a>
 8004558:	2b40      	cmp	r3, #64	@ 0x40
 800455a:	d86f      	bhi.n	800463c <HAL_TIM_ConfigClockSource+0x16c>
 800455c:	2b30      	cmp	r3, #48	@ 0x30
 800455e:	d064      	beq.n	800462a <HAL_TIM_ConfigClockSource+0x15a>
 8004560:	2b30      	cmp	r3, #48	@ 0x30
 8004562:	d86b      	bhi.n	800463c <HAL_TIM_ConfigClockSource+0x16c>
 8004564:	2b20      	cmp	r3, #32
 8004566:	d060      	beq.n	800462a <HAL_TIM_ConfigClockSource+0x15a>
 8004568:	2b20      	cmp	r3, #32
 800456a:	d867      	bhi.n	800463c <HAL_TIM_ConfigClockSource+0x16c>
 800456c:	2b00      	cmp	r3, #0
 800456e:	d05c      	beq.n	800462a <HAL_TIM_ConfigClockSource+0x15a>
 8004570:	2b10      	cmp	r3, #16
 8004572:	d05a      	beq.n	800462a <HAL_TIM_ConfigClockSource+0x15a>
 8004574:	e062      	b.n	800463c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004586:	f000 f946 	bl	8004816 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004598:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	609a      	str	r2, [r3, #8]
      break;
 80045a2:	e04f      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045b4:	f000 f92f 	bl	8004816 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045c6:	609a      	str	r2, [r3, #8]
      break;
 80045c8:	e03c      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045d6:	461a      	mov	r2, r3
 80045d8:	f000 f8a6 	bl	8004728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2150      	movs	r1, #80	@ 0x50
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 f8fd 	bl	80047e2 <TIM_ITRx_SetConfig>
      break;
 80045e8:	e02c      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045f6:	461a      	mov	r2, r3
 80045f8:	f000 f8c4 	bl	8004784 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2160      	movs	r1, #96	@ 0x60
 8004602:	4618      	mov	r0, r3
 8004604:	f000 f8ed 	bl	80047e2 <TIM_ITRx_SetConfig>
      break;
 8004608:	e01c      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004616:	461a      	mov	r2, r3
 8004618:	f000 f886 	bl	8004728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2140      	movs	r1, #64	@ 0x40
 8004622:	4618      	mov	r0, r3
 8004624:	f000 f8dd 	bl	80047e2 <TIM_ITRx_SetConfig>
      break;
 8004628:	e00c      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4619      	mov	r1, r3
 8004634:	4610      	mov	r0, r2
 8004636:	f000 f8d4 	bl	80047e2 <TIM_ITRx_SetConfig>
      break;
 800463a:	e003      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
      break;
 8004640:	e000      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004642:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004654:	7bfb      	ldrb	r3, [r7, #15]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
	...

08004660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a2b      	ldr	r2, [pc, #172]	@ (8004720 <TIM_Base_SetConfig+0xc0>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d007      	beq.n	8004688 <TIM_Base_SetConfig+0x28>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800467e:	d003      	beq.n	8004688 <TIM_Base_SetConfig+0x28>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a28      	ldr	r2, [pc, #160]	@ (8004724 <TIM_Base_SetConfig+0xc4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d108      	bne.n	800469a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800468e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a20      	ldr	r2, [pc, #128]	@ (8004720 <TIM_Base_SetConfig+0xc0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d007      	beq.n	80046b2 <TIM_Base_SetConfig+0x52>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046a8:	d003      	beq.n	80046b2 <TIM_Base_SetConfig+0x52>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004724 <TIM_Base_SetConfig+0xc4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d108      	bne.n	80046c4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a0d      	ldr	r2, [pc, #52]	@ (8004720 <TIM_Base_SetConfig+0xc0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d103      	bne.n	80046f8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f023 0201 	bic.w	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	611a      	str	r2, [r3, #16]
  }
}
 8004716:	bf00      	nop
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr
 8004720:	40012c00 	.word	0x40012c00
 8004724:	40000400 	.word	0x40000400

08004728 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f023 0201 	bic.w	r2, r3, #1
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f023 030a 	bic.w	r3, r3, #10
 8004764:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4313      	orrs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	621a      	str	r2, [r3, #32]
}
 800477a:	bf00      	nop
 800477c:	371c      	adds	r7, #28
 800477e:	46bd      	mov	sp, r7
 8004780:	bc80      	pop	{r7}
 8004782:	4770      	bx	lr

08004784 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	f023 0210 	bic.w	r2, r3, #16
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	031b      	lsls	r3, r3, #12
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80047c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	621a      	str	r2, [r3, #32]
}
 80047d8:	bf00      	nop
 80047da:	371c      	adds	r7, #28
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr

080047e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b085      	sub	sp, #20
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	f043 0307 	orr.w	r3, r3, #7
 8004804:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	609a      	str	r2, [r3, #8]
}
 800480c:	bf00      	nop
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr

08004816 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004816:	b480      	push	{r7}
 8004818:	b087      	sub	sp, #28
 800481a:	af00      	add	r7, sp, #0
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	607a      	str	r2, [r7, #4]
 8004822:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004830:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	021a      	lsls	r2, r3, #8
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	431a      	orrs	r2, r3
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	4313      	orrs	r3, r2
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	4313      	orrs	r3, r2
 8004842:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	609a      	str	r2, [r3, #8]
}
 800484a:	bf00      	nop
 800484c:	371c      	adds	r7, #28
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr

08004854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004868:	2302      	movs	r3, #2
 800486a:	e041      	b.n	80048f0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004892:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a14      	ldr	r2, [pc, #80]	@ (80048fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d009      	beq.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b8:	d004      	beq.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a10      	ldr	r2, [pc, #64]	@ (8004900 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d10c      	bne.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bc80      	pop	{r7}
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40012c00 	.word	0x40012c00
 8004900:	40000400 	.word	0x40000400

08004904 <set_alarm>:
#include "AlarmReset.h"
#include "stm32f1xx_hal.h"

extern RTC_HandleTypeDef hrtc;

void set_alarm(uint8_t sec) {
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	4603      	mov	r3, r0
 800490c:	71fb      	strb	r3, [r7, #7]
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 800490e:	4b19      	ldr	r3, [pc, #100]	@ (8004974 <set_alarm+0x70>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b02      	cmp	r3, #2
 8004918:	d10f      	bne.n	800493a <set_alarm+0x36>
		// MCU проснулся из Standby
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 800491a:	4b16      	ldr	r3, [pc, #88]	@ (8004974 <set_alarm+0x70>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a15      	ldr	r2, [pc, #84]	@ (8004974 <set_alarm+0x70>)
 8004920:	f043 0308 	orr.w	r3, r3, #8
 8004924:	6013      	str	r3, [r2, #0]
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8004926:	4b13      	ldr	r3, [pc, #76]	@ (8004974 <set_alarm+0x70>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a12      	ldr	r2, [pc, #72]	@ (8004974 <set_alarm+0x70>)
 800492c:	f043 0304 	orr.w	r3, r3, #4
 8004930:	6013      	str	r3, [r2, #0]

		// ОЧИСТИТЬ БУДИЛЬНИК
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8004932:	2100      	movs	r1, #0
 8004934:	4810      	ldr	r0, [pc, #64]	@ (8004978 <set_alarm+0x74>)
 8004936:	f7fe fd9d 	bl	8003474 <HAL_RTC_DeactivateAlarm>
	}

	RTC_AlarmTypeDef sAlarm = { 0 };
 800493a:	f107 0308 	add.w	r3, r7, #8
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	605a      	str	r2, [r3, #4]

	sAlarm.AlarmTime.Hours = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = sec;
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	72bb      	strb	r3, [r7, #10]
	sAlarm.Alarm = RTC_ALARM_A;
 8004950:	2300      	movs	r3, #0
 8004952:	60fb      	str	r3, [r7, #12]
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 8004954:	f107 0308 	add.w	r3, r7, #8
 8004958:	2200      	movs	r2, #0
 800495a:	4619      	mov	r1, r3
 800495c:	4806      	ldr	r0, [pc, #24]	@ (8004978 <set_alarm+0x74>)
 800495e:	f7fe fcd1 	bl	8003304 <HAL_RTC_SetAlarm_IT>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <set_alarm+0x68>
		Error_Handler();
 8004968:	f7fc f9b8 	bl	8000cdc <Error_Handler>
	}

}
 800496c:	bf00      	nop
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40007000 	.word	0x40007000
 8004978:	20000088 	.word	0x20000088

0800497c <get_battery_level>:

extern Battery_t Battery;

static uint8_t battery_percent_from_voltage(float);

Battery_t get_battery_level() {
 800497c:	b590      	push	{r4, r7, lr}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]

	HAL_ADC_Start(&hadc1);
 8004984:	4821      	ldr	r0, [pc, #132]	@ (8004a0c <get_battery_level+0x90>)
 8004986:	f7fc fda9 	bl	80014dc <HAL_ADC_Start>

	uint32_t adc_val;
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800498a:	f04f 31ff 	mov.w	r1, #4294967295
 800498e:	481f      	ldr	r0, [pc, #124]	@ (8004a0c <get_battery_level+0x90>)
 8004990:	f7fc fe7e 	bl	8001690 <HAL_ADC_PollForConversion>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d103      	bne.n	80049a2 <get_battery_level+0x26>
		adc_val = HAL_ADC_GetValue(&hadc1);
 800499a:	481c      	ldr	r0, [pc, #112]	@ (8004a0c <get_battery_level+0x90>)
 800499c:	f7fc ff7e 	bl	800189c <HAL_ADC_GetValue>
 80049a0:	60f8      	str	r0, [r7, #12]
	}

	HAL_ADC_Stop(&hadc1);
 80049a2:	481a      	ldr	r0, [pc, #104]	@ (8004a0c <get_battery_level+0x90>)
 80049a4:	f7fc fe48 	bl	8001638 <HAL_ADC_Stop>
	 *  R2=3.3K
	 *  k=1.675
	 *  => Vmax = 2.7V
	 */

	float vref = 3.3f;
 80049a8:	4b19      	ldr	r3, [pc, #100]	@ (8004a10 <get_battery_level+0x94>)
 80049aa:	60bb      	str	r3, [r7, #8]

	Battery.vdd = (vref / 2.7f) * vref * adc_val / 4096.0f;
 80049ac:	4919      	ldr	r1, [pc, #100]	@ (8004a14 <get_battery_level+0x98>)
 80049ae:	68b8      	ldr	r0, [r7, #8]
 80049b0:	f7fb fd8e 	bl	80004d0 <__aeabi_fdiv>
 80049b4:	4603      	mov	r3, r0
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fb fcd5 	bl	8000368 <__aeabi_fmul>
 80049be:	4603      	mov	r3, r0
 80049c0:	461c      	mov	r4, r3
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f7fb fc78 	bl	80002b8 <__aeabi_ui2f>
 80049c8:	4603      	mov	r3, r0
 80049ca:	4619      	mov	r1, r3
 80049cc:	4620      	mov	r0, r4
 80049ce:	f7fb fccb 	bl	8000368 <__aeabi_fmul>
 80049d2:	4603      	mov	r3, r0
 80049d4:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fb fd79 	bl	80004d0 <__aeabi_fdiv>
 80049de:	4603      	mov	r3, r0
 80049e0:	461a      	mov	r2, r3
 80049e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a18 <get_battery_level+0x9c>)
 80049e4:	601a      	str	r2, [r3, #0]

	Battery.charge_percent = battery_percent_from_voltage(Battery.vdd);
 80049e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004a18 <get_battery_level+0x9c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 f816 	bl	8004a1c <battery_percent_from_voltage>
 80049f0:	4603      	mov	r3, r0
 80049f2:	461a      	mov	r2, r3
 80049f4:	4b08      	ldr	r3, [pc, #32]	@ (8004a18 <get_battery_level+0x9c>)
 80049f6:	711a      	strb	r2, [r3, #4]

	return Battery;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a07      	ldr	r2, [pc, #28]	@ (8004a18 <get_battery_level+0x9c>)
 80049fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a00:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd90      	pop	{r4, r7, pc}
 8004a0c:	20000028 	.word	0x20000028
 8004a10:	40533333 	.word	0x40533333
 8004a14:	402ccccd 	.word	0x402ccccd
 8004a18:	20000148 	.word	0x20000148

08004a1c <battery_percent_from_voltage>:

static uint8_t battery_percent_from_voltage(float voltage) {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]

	if (voltage >= 3.2f)
 8004a24:	4937      	ldr	r1, [pc, #220]	@ (8004b04 <battery_percent_from_voltage+0xe8>)
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fb fe50 	bl	80006cc <__aeabi_fcmpge>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <battery_percent_from_voltage+0x1a>
		return 100;
 8004a32:	2364      	movs	r3, #100	@ 0x64
 8004a34:	e061      	b.n	8004afa <battery_percent_from_voltage+0xde>
	else if (voltage >= 2.9f)
 8004a36:	4934      	ldr	r1, [pc, #208]	@ (8004b08 <battery_percent_from_voltage+0xec>)
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7fb fe47 	bl	80006cc <__aeabi_fcmpge>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d019      	beq.n	8004a78 <battery_percent_from_voltage+0x5c>
		return (uint8_t) (80 + (voltage - 2.9f) / 0.3f * 20);
 8004a44:	4930      	ldr	r1, [pc, #192]	@ (8004b08 <battery_percent_from_voltage+0xec>)
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fb fb84 	bl	8000154 <__aeabi_fsub>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	492f      	ldr	r1, [pc, #188]	@ (8004b0c <battery_percent_from_voltage+0xf0>)
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fb fd3d 	bl	80004d0 <__aeabi_fdiv>
 8004a56:	4603      	mov	r3, r0
 8004a58:	492d      	ldr	r1, [pc, #180]	@ (8004b10 <battery_percent_from_voltage+0xf4>)
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fb fc84 	bl	8000368 <__aeabi_fmul>
 8004a60:	4603      	mov	r3, r0
 8004a62:	492c      	ldr	r1, [pc, #176]	@ (8004b14 <battery_percent_from_voltage+0xf8>)
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fb fb77 	bl	8000158 <__addsf3>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fb fe41 	bl	80006f4 <__aeabi_f2uiz>
 8004a72:	4603      	mov	r3, r0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	e040      	b.n	8004afa <battery_percent_from_voltage+0xde>
	else if (voltage >= 2.5f)
 8004a78:	4927      	ldr	r1, [pc, #156]	@ (8004b18 <battery_percent_from_voltage+0xfc>)
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fb fe26 	bl	80006cc <__aeabi_fcmpge>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d019      	beq.n	8004aba <battery_percent_from_voltage+0x9e>
		return (uint8_t) (20 + (voltage - 2.5f) / 0.4f * 60);
 8004a86:	4924      	ldr	r1, [pc, #144]	@ (8004b18 <battery_percent_from_voltage+0xfc>)
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7fb fb63 	bl	8000154 <__aeabi_fsub>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	4922      	ldr	r1, [pc, #136]	@ (8004b1c <battery_percent_from_voltage+0x100>)
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fb fd1c 	bl	80004d0 <__aeabi_fdiv>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	4921      	ldr	r1, [pc, #132]	@ (8004b20 <battery_percent_from_voltage+0x104>)
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fb fc63 	bl	8000368 <__aeabi_fmul>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	491a      	ldr	r1, [pc, #104]	@ (8004b10 <battery_percent_from_voltage+0xf4>)
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fb fb56 	bl	8000158 <__addsf3>
 8004aac:	4603      	mov	r3, r0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fb fe20 	bl	80006f4 <__aeabi_f2uiz>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	e01f      	b.n	8004afa <battery_percent_from_voltage+0xde>
	else if (voltage >= 2.0f)
 8004aba:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fb fe04 	bl	80006cc <__aeabi_fcmpge>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d016      	beq.n	8004af8 <battery_percent_from_voltage+0xdc>
		return (uint8_t) ((voltage - 2.0f) / 0.5f * 20);
 8004aca:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7fb fb40 	bl	8000154 <__aeabi_fsub>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fb fcf8 	bl	80004d0 <__aeabi_fdiv>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	490b      	ldr	r1, [pc, #44]	@ (8004b10 <battery_percent_from_voltage+0xf4>)
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fb fc3f 	bl	8000368 <__aeabi_fmul>
 8004aea:	4603      	mov	r3, r0
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fb fe01 	bl	80006f4 <__aeabi_f2uiz>
 8004af2:	4603      	mov	r3, r0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	e000      	b.n	8004afa <battery_percent_from_voltage+0xde>
	else
		return 0;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	404ccccd 	.word	0x404ccccd
 8004b08:	4039999a 	.word	0x4039999a
 8004b0c:	3e99999a 	.word	0x3e99999a
 8004b10:	41a00000 	.word	0x41a00000
 8004b14:	42a00000 	.word	0x42a00000
 8004b18:	40200000 	.word	0x40200000
 8004b1c:	3ecccccd 	.word	0x3ecccccd
 8004b20:	42700000 	.word	0x42700000

08004b24 <TIM2_Delay_us>:
#include <stdint.h>
#include "stm32f1xx_hal.h"

extern TIM_HandleTypeDef htim2;

void TIM2_Delay_us(uint32_t us) {
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]

	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b58 <TIM2_Delay_us+0x34>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2200      	movs	r2, #0
 8004b32:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_Base_Start(&htim2);
 8004b34:	4808      	ldr	r0, [pc, #32]	@ (8004b58 <TIM2_Delay_us+0x34>)
 8004b36:	f7ff fc61 	bl	80043fc <HAL_TIM_Base_Start>

	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8004b3a:	bf00      	nop
 8004b3c:	4b06      	ldr	r3, [pc, #24]	@ (8004b58 <TIM2_Delay_us+0x34>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d8f9      	bhi.n	8004b3c <TIM2_Delay_us+0x18>
		;

	HAL_TIM_Base_Stop(&htim2);
 8004b48:	4803      	ldr	r0, [pc, #12]	@ (8004b58 <TIM2_Delay_us+0x34>)
 8004b4a:	f7ff fc9b 	bl	8004484 <HAL_TIM_Base_Stop>
}
 8004b4e:	bf00      	nop
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	200000f4 	.word	0x200000f4

08004b5c <get_infra_sensor_data>:
#include "BatteryLevel.h"
#include "main.h"

extern ADC_HandleTypeDef hadc2;

float get_infra_sensor_data(Battery_t Battery) {
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	463b      	mov	r3, r7
 8004b64:	e883 0003 	stmia.w	r3, {r0, r1}

	//Sensor stabilization for 100ms
//	HAL_GPIO_WritePin(V_LED_GPIO_Port, V_LED_Pin, GPIO_PIN_RESET);
	HAL_Delay(100);
 8004b68:	2064      	movs	r0, #100	@ 0x64
 8004b6a:	f7fc fadb 	bl	8001124 <HAL_Delay>
//	HAL_GPIO_WritePin(V_LED_GPIO_Port, V_LED_Pin, GPIO_PIN_SET);
//	HAL_Delay(10);

// Polling sensor 5 times
	uint32_t adc_V0 = 0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]

	for (int i = 0; i <= 3; i++) {
 8004b72:	2300      	movs	r3, #0
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	e030      	b.n	8004bda <get_infra_sensor_data+0x7e>

		HAL_ADC_Start(&hadc2);
 8004b78:	4827      	ldr	r0, [pc, #156]	@ (8004c18 <get_infra_sensor_data+0xbc>)
 8004b7a:	f7fc fcaf 	bl	80014dc <HAL_ADC_Start>

		HAL_GPIO_WritePin(V_LED_GPIO_Port, V_LED_Pin, GPIO_PIN_RESET);
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004b84:	4825      	ldr	r0, [pc, #148]	@ (8004c1c <get_infra_sensor_data+0xc0>)
 8004b86:	f7fd fb67 	bl	8002258 <HAL_GPIO_WritePin>

		TIM2_Delay_us(250);
 8004b8a:	20fa      	movs	r0, #250	@ 0xfa
 8004b8c:	f7ff ffca 	bl	8004b24 <TIM2_Delay_us>

		if (HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK) {
 8004b90:	f04f 31ff 	mov.w	r1, #4294967295
 8004b94:	4820      	ldr	r0, [pc, #128]	@ (8004c18 <get_infra_sensor_data+0xbc>)
 8004b96:	f7fc fd7b 	bl	8001690 <HAL_ADC_PollForConversion>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d109      	bne.n	8004bb4 <get_infra_sensor_data+0x58>
			uint32_t v_temp = HAL_ADC_GetValue(&hadc2);
 8004ba0:	481d      	ldr	r0, [pc, #116]	@ (8004c18 <get_infra_sensor_data+0xbc>)
 8004ba2:	f7fc fe7b 	bl	800189c <HAL_ADC_GetValue>
 8004ba6:	60b8      	str	r0, [r7, #8]
			if (v_temp > adc_V0)
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d901      	bls.n	8004bb4 <get_infra_sensor_data+0x58>
				adc_V0 = v_temp;
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	617b      	str	r3, [r7, #20]
		}

		HAL_ADC_Stop(&hadc2);
 8004bb4:	4818      	ldr	r0, [pc, #96]	@ (8004c18 <get_infra_sensor_data+0xbc>)
 8004bb6:	f7fc fd3f 	bl	8001638 <HAL_ADC_Stop>

		TIM2_Delay_us(35);
 8004bba:	2023      	movs	r0, #35	@ 0x23
 8004bbc:	f7ff ffb2 	bl	8004b24 <TIM2_Delay_us>

		HAL_GPIO_WritePin(V_LED_GPIO_Port, V_LED_Pin, GPIO_PIN_SET);
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004bc6:	4815      	ldr	r0, [pc, #84]	@ (8004c1c <get_infra_sensor_data+0xc0>)
 8004bc8:	f7fd fb46 	bl	8002258 <HAL_GPIO_WritePin>

		TIM2_Delay_us(10000);
 8004bcc:	f242 7010 	movw	r0, #10000	@ 0x2710
 8004bd0:	f7ff ffa8 	bl	8004b24 <TIM2_Delay_us>
	for (int i = 0; i <= 3; i++) {
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	613b      	str	r3, [r7, #16]
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	ddcb      	ble.n	8004b78 <get_infra_sensor_data+0x1c>
	 *  R2=330
	 *  k=0.6
	 *  => Vmax = 3V
	 */

	float sensor_data = (5.0f / 3.0f) * adc_V0 * Battery.vdd / 4096.0f;
 8004be0:	6978      	ldr	r0, [r7, #20]
 8004be2:	f7fb fb69 	bl	80002b8 <__aeabi_ui2f>
 8004be6:	4603      	mov	r3, r0
 8004be8:	490d      	ldr	r1, [pc, #52]	@ (8004c20 <get_infra_sensor_data+0xc4>)
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fb fbbc 	bl	8000368 <__aeabi_fmul>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4610      	mov	r0, r2
 8004bfa:	f7fb fbb5 	bl	8000368 <__aeabi_fmul>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fb fc63 	bl	80004d0 <__aeabi_fdiv>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	60fb      	str	r3, [r7, #12]

	return sensor_data;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	20000058 	.word	0x20000058
 8004c1c:	40010c00 	.word	0x40010c00
 8004c20:	3fd55555 	.word	0x3fd55555

08004c24 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8004c24:	b4b0      	push	{r4, r5, r7}
 8004c26:	b08f      	sub	sp, #60	@ 0x3c
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8004c2c:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8004c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8004c32:	2307      	movs	r3, #7
 8004c34:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8004c38:	2307      	movs	r3, #7
 8004c3a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8004c44:	23ff      	movs	r3, #255	@ 0xff
 8004c46:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8004c4a:	2364      	movs	r3, #100	@ 0x64
 8004c4c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8004c50:	2308      	movs	r3, #8
 8004c52:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	461d      	mov	r5, r3
 8004c58:	f107 040c 	add.w	r4, r7, #12
 8004c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c64:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004c68:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	373c      	adds	r7, #60	@ 0x3c
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bcb0      	pop	{r4, r5, r7}
 8004c74:	4770      	bx	lr
	...

08004c78 <SX1278_WriteReg>:
extern SPI_HandleTypeDef hspi1;

LoRa myLoRa;


void SX1278_WriteReg(uint8_t addr, uint8_t value) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	4603      	mov	r3, r0
 8004c80:	460a      	mov	r2, r1
 8004c82:	71fb      	strb	r3, [r7, #7]
 8004c84:	4613      	mov	r3, r2
 8004c86:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(NSS_SIGNAL_GPIO_Port, NSS_SIGNAL_Pin, GPIO_PIN_RESET);
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2110      	movs	r1, #16
 8004c8c:	480c      	ldr	r0, [pc, #48]	@ (8004cc0 <SX1278_WriteReg+0x48>)
 8004c8e:	f7fd fae3 	bl	8002258 <HAL_GPIO_WritePin>
	uint8_t buf[2] = { addr | 0x80, value };
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	733b      	strb	r3, [r7, #12]
 8004c9c:	79bb      	ldrb	r3, [r7, #6]
 8004c9e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi1, buf, 2, 100);
 8004ca0:	f107 010c 	add.w	r1, r7, #12
 8004ca4:	2364      	movs	r3, #100	@ 0x64
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	4806      	ldr	r0, [pc, #24]	@ (8004cc4 <SX1278_WriteReg+0x4c>)
 8004caa:	f7fe ffb2 	bl	8003c12 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NSS_SIGNAL_GPIO_Port, NSS_SIGNAL_Pin, GPIO_PIN_SET);
 8004cae:	2201      	movs	r2, #1
 8004cb0:	2110      	movs	r1, #16
 8004cb2:	4803      	ldr	r0, [pc, #12]	@ (8004cc0 <SX1278_WriteReg+0x48>)
 8004cb4:	f7fd fad0 	bl	8002258 <HAL_GPIO_WritePin>
}
 8004cb8:	bf00      	nop
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	40010800 	.word	0x40010800
 8004cc4:	2000009c 	.word	0x2000009c

08004cc8 <SX1278_ReadReg>:

uint8_t SX1278_ReadReg(uint8_t addr) {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af02      	add	r7, sp, #8
 8004cce:	4603      	mov	r3, r0
 8004cd0:	71fb      	strb	r3, [r7, #7]
	uint8_t tx[2] = { addr & 0x7F, 0x00 };
 8004cd2:	79fb      	ldrb	r3, [r7, #7]
 8004cd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	733b      	strb	r3, [r7, #12]
 8004cdc:	2300      	movs	r3, #0
 8004cde:	737b      	strb	r3, [r7, #13]
	uint8_t rx[2] = { 0 };
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(NSS_SIGNAL_GPIO_Port, NSS_SIGNAL_Pin, GPIO_PIN_RESET);
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2110      	movs	r1, #16
 8004ce8:	480b      	ldr	r0, [pc, #44]	@ (8004d18 <SX1278_ReadReg+0x50>)
 8004cea:	f7fd fab5 	bl	8002258 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, tx, rx, 2, 100);
 8004cee:	f107 0208 	add.w	r2, r7, #8
 8004cf2:	f107 010c 	add.w	r1, r7, #12
 8004cf6:	2364      	movs	r3, #100	@ 0x64
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	4807      	ldr	r0, [pc, #28]	@ (8004d1c <SX1278_ReadReg+0x54>)
 8004cfe:	f7ff f8cc 	bl	8003e9a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NSS_SIGNAL_GPIO_Port, NSS_SIGNAL_Pin, GPIO_PIN_SET);
 8004d02:	2201      	movs	r2, #1
 8004d04:	2110      	movs	r1, #16
 8004d06:	4804      	ldr	r0, [pc, #16]	@ (8004d18 <SX1278_ReadReg+0x50>)
 8004d08:	f7fd faa6 	bl	8002258 <HAL_GPIO_WritePin>
	return rx[1];
 8004d0c:	7a7b      	ldrb	r3, [r7, #9]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40010800 	.word	0x40010800
 8004d1c:	2000009c 	.word	0x2000009c

08004d20 <SX1278_Init>:

void SX1278_Init(void) {
 8004d20:	b5b0      	push	{r4, r5, r7, lr}
 8004d22:	b08c      	sub	sp, #48	@ 0x30
 8004d24:	af00      	add	r7, sp, #0

	myLoRa = newLoRa();
 8004d26:	4c3e      	ldr	r4, [pc, #248]	@ (8004e20 <SX1278_Init+0x100>)
 8004d28:	463b      	mov	r3, r7
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff ff7a 	bl	8004c24 <newLoRa>
 8004d30:	4625      	mov	r5, r4
 8004d32:	463c      	mov	r4, r7
 8004d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d3c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004d40:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	myLoRa.CS_port = NSS_SIGNAL_GPIO_Port;
 8004d44:	4b36      	ldr	r3, [pc, #216]	@ (8004e20 <SX1278_Init+0x100>)
 8004d46:	4a37      	ldr	r2, [pc, #220]	@ (8004e24 <SX1278_Init+0x104>)
 8004d48:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin = NSS_SIGNAL_Pin;
 8004d4a:	4b35      	ldr	r3, [pc, #212]	@ (8004e20 <SX1278_Init+0x100>)
 8004d4c:	2210      	movs	r2, #16
 8004d4e:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port = RST_SIGNAL_GPIO_Port;
 8004d50:	4b33      	ldr	r3, [pc, #204]	@ (8004e20 <SX1278_Init+0x100>)
 8004d52:	4a35      	ldr	r2, [pc, #212]	@ (8004e28 <SX1278_Init+0x108>)
 8004d54:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin = RST_SIGNAL_Pin;
 8004d56:	4b32      	ldr	r3, [pc, #200]	@ (8004e20 <SX1278_Init+0x100>)
 8004d58:	2202      	movs	r2, #2
 8004d5a:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port = DIO0_INT_GPIO_Port;
 8004d5c:	4b30      	ldr	r3, [pc, #192]	@ (8004e20 <SX1278_Init+0x100>)
 8004d5e:	4a32      	ldr	r2, [pc, #200]	@ (8004e28 <SX1278_Init+0x108>)
 8004d60:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin = DIO0_INT_Pin;
 8004d62:	4b2f      	ldr	r3, [pc, #188]	@ (8004e20 <SX1278_Init+0x100>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx = &hspi1;
 8004d68:	4b2d      	ldr	r3, [pc, #180]	@ (8004e20 <SX1278_Init+0x100>)
 8004d6a:	4a30      	ldr	r2, [pc, #192]	@ (8004e2c <SX1278_Init+0x10c>)
 8004d6c:	619a      	str	r2, [r3, #24]

	myLoRa.frequency             = 433;             // default = 433 MHz
 8004d6e:	4b2c      	ldr	r3, [pc, #176]	@ (8004e20 <SX1278_Init+0x100>)
 8004d70:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8004d74:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor        = SF_7;            // default = SF_7
 8004d76:	4b2a      	ldr	r3, [pc, #168]	@ (8004e20 <SX1278_Init+0x100>)
 8004d78:	2207      	movs	r2, #7
 8004d7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
 8004d7e:	4b28      	ldr	r3, [pc, #160]	@ (8004e20 <SX1278_Init+0x100>)
 8004d80:	2207      	movs	r2, #7
 8004d82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	myLoRa.crcRate               = CR_4_8;          // default = CR_4_5
 8004d86:	4b26      	ldr	r3, [pc, #152]	@ (8004e20 <SX1278_Init+0x100>)
 8004d88:	2204      	movs	r2, #4
 8004d8a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	myLoRa.power                 = POWER_17db;      // default = 20db
 8004d8e:	4b24      	ldr	r3, [pc, #144]	@ (8004e20 <SX1278_Init+0x100>)
 8004d90:	22fc      	movs	r2, #252	@ 0xfc
 8004d92:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	myLoRa.overCurrentProtection = 130;             // default = 100 mA
 8004d96:	4b22      	ldr	r3, [pc, #136]	@ (8004e20 <SX1278_Init+0x100>)
 8004d98:	2282      	movs	r2, #130	@ 0x82
 8004d9a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	myLoRa.preamble              = 8;              // default = 8;
 8004d9e:	4b20      	ldr	r3, [pc, #128]	@ (8004e20 <SX1278_Init+0x100>)
 8004da0:	2208      	movs	r2, #8
 8004da2:	851a      	strh	r2, [r3, #40]	@ 0x28

	HAL_Delay(10);
 8004da4:	200a      	movs	r0, #10
 8004da6:	f7fc f9bd 	bl	8001124 <HAL_Delay>

	// Sleep mode, LoRa mode
	SX1278_WriteReg(RegOpMode, 0x80); // RegOpMode = LoRa + Sleep
 8004daa:	2180      	movs	r1, #128	@ 0x80
 8004dac:	2001      	movs	r0, #1
 8004dae:	f7ff ff63 	bl	8004c78 <SX1278_WriteReg>
	HAL_Delay(10);
 8004db2:	200a      	movs	r0, #10
 8004db4:	f7fc f9b6 	bl	8001124 <HAL_Delay>

	// Set frequency 433 MHz
	SX1278_WriteReg(0x06, 0x6C); // RegFrMsb
 8004db8:	216c      	movs	r1, #108	@ 0x6c
 8004dba:	2006      	movs	r0, #6
 8004dbc:	f7ff ff5c 	bl	8004c78 <SX1278_WriteReg>
	SX1278_WriteReg(0x07, 0x80); // RegFrMid
 8004dc0:	2180      	movs	r1, #128	@ 0x80
 8004dc2:	2007      	movs	r0, #7
 8004dc4:	f7ff ff58 	bl	8004c78 <SX1278_WriteReg>
	SX1278_WriteReg(0x08, 0x00); // RegFrLsb
 8004dc8:	2100      	movs	r1, #0
 8004dca:	2008      	movs	r0, #8
 8004dcc:	f7ff ff54 	bl	8004c78 <SX1278_WriteReg>

	// FIFO TX base addr
	SX1278_WriteReg(0x0E, 0x00); // RegFifoTxBaseAddr
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	200e      	movs	r0, #14
 8004dd4:	f7ff ff50 	bl	8004c78 <SX1278_WriteReg>
	SX1278_WriteReg(0x0D, 0x00); // RegFifoAddrPtr
 8004dd8:	2100      	movs	r1, #0
 8004dda:	200d      	movs	r0, #13
 8004ddc:	f7ff ff4c 	bl	8004c78 <SX1278_WriteReg>

	// Max power
	SX1278_WriteReg(RegPaConfig, 0b10001111); // RegPaConfig
 8004de0:	218f      	movs	r1, #143	@ 0x8f
 8004de2:	2009      	movs	r0, #9
 8004de4:	f7ff ff48 	bl	8004c78 <SX1278_WriteReg>

	SX1278_WriteReg(RegOcp, 0b00110000); // 130mA
 8004de8:	2130      	movs	r1, #48	@ 0x30
 8004dea:	200b      	movs	r0, #11
 8004dec:	f7ff ff44 	bl	8004c78 <SX1278_WriteReg>

	SX1278_WriteReg(0x0C, 0x23); // RegLna: LnaGain=G1, LnaBoostHf=11
 8004df0:	2123      	movs	r1, #35	@ 0x23
 8004df2:	200c      	movs	r0, #12
 8004df4:	f7ff ff40 	bl	8004c78 <SX1278_WriteReg>
//
//	// RegModemConfig1 = BW=7.8kHz, CR=4/5
	SX1278_WriteReg(RegModemConfig1, 0b01110010);
 8004df8:	2172      	movs	r1, #114	@ 0x72
 8004dfa:	201d      	movs	r0, #29
 8004dfc:	f7ff ff3c 	bl	8004c78 <SX1278_WriteReg>
//
//	// RegModemConfig2 = SF=12, CRC on
	SX1278_WriteReg(RegModemConfig2, 0b01110100);
 8004e00:	2174      	movs	r1, #116	@ 0x74
 8004e02:	201e      	movs	r0, #30
 8004e04:	f7ff ff38 	bl	8004c78 <SX1278_WriteReg>
////
//	RegModemConfig3 = ImplicitHeaderModeOn
	SX1278_WriteReg(RegModemConfig3, 0b00000100);
 8004e08:	2104      	movs	r1, #4
 8004e0a:	2026      	movs	r0, #38	@ 0x26
 8004e0c:	f7ff ff34 	bl	8004c78 <SX1278_WriteReg>

	SX1278_WriteReg(RegSyncWord, 0x12); // Sync Word
 8004e10:	2112      	movs	r1, #18
 8004e12:	2039      	movs	r0, #57	@ 0x39
 8004e14:	f7ff ff30 	bl	8004c78 <SX1278_WriteReg>

}
 8004e18:	bf00      	nop
 8004e1a:	3730      	adds	r7, #48	@ 0x30
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e20:	20000160 	.word	0x20000160
 8004e24:	40010800 	.word	0x40010800
 8004e28:	40010c00 	.word	0x40010c00
 8004e2c:	2000009c 	.word	0x2000009c

08004e30 <SX1278_Transmit>:

void SX1278_Transmit(uint8_t *data, uint8_t len) {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	70fb      	strb	r3, [r7, #3]

	// Set standby
	SX1278_WriteReg(0x01, 0x81); // RegOpMode = LoRa + Standby
 8004e3c:	2181      	movs	r1, #129	@ 0x81
 8004e3e:	2001      	movs	r0, #1
 8004e40:	f7ff ff1a 	bl	8004c78 <SX1278_WriteReg>

	// Set FIFO pointer
	SX1278_WriteReg(0x0D, 0x00);
 8004e44:	2100      	movs	r1, #0
 8004e46:	200d      	movs	r0, #13
 8004e48:	f7ff ff16 	bl	8004c78 <SX1278_WriteReg>

	// Write data to FIFO
	for (uint8_t i = 0; i < len; i++) {
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	73fb      	strb	r3, [r7, #15]
 8004e50:	e00a      	b.n	8004e68 <SX1278_Transmit+0x38>
		SX1278_WriteReg(0x00, data[i]);
 8004e52:	7bfb      	ldrb	r3, [r7, #15]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	4413      	add	r3, r2
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	f7ff ff0b 	bl	8004c78 <SX1278_WriteReg>
	for (uint8_t i = 0; i < len; i++) {
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
 8004e64:	3301      	adds	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
 8004e68:	7bfa      	ldrb	r2, [r7, #15]
 8004e6a:	78fb      	ldrb	r3, [r7, #3]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d3f0      	bcc.n	8004e52 <SX1278_Transmit+0x22>
	}

	// Set payload length
	SX1278_WriteReg(0x22, len);
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	4619      	mov	r1, r3
 8004e74:	2022      	movs	r0, #34	@ 0x22
 8004e76:	f7ff feff 	bl	8004c78 <SX1278_WriteReg>

	// Set TX mode
	SX1278_WriteReg(RegOpMode, 0x83); // RegOpMode = LoRa + TX
 8004e7a:	2183      	movs	r1, #131	@ 0x83
 8004e7c:	2001      	movs	r0, #1
 8004e7e:	f7ff fefb 	bl	8004c78 <SX1278_WriteReg>

	// Wait for TxDone
	while ((SX1278_ReadReg(0x12) & 0x08) == 0)
 8004e82:	bf00      	nop
 8004e84:	2012      	movs	r0, #18
 8004e86:	f7ff ff1f 	bl	8004cc8 <SX1278_ReadReg>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	f003 0308 	and.w	r3, r3, #8
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0f7      	beq.n	8004e84 <SX1278_Transmit+0x54>
		;

	// Clear IRQ flags
	SX1278_WriteReg(0x12, 0xFF);
 8004e94:	21ff      	movs	r1, #255	@ 0xff
 8004e96:	2012      	movs	r0, #18
 8004e98:	f7ff feee 	bl	8004c78 <SX1278_WriteReg>
}
 8004e9c:	bf00      	nop
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <send_packet>:

void send_packet(SendPacket_t packet) {
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	1d3b      	adds	r3, r7, #4
 8004eac:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	SX1278_Init();
 8004eb0:	f7ff ff36 	bl	8004d20 <SX1278_Init>

//	LoRa_transmit(&myLoRa, (uint8_t*) &packet, sizeof(SendPacket_t), 100);
	SX1278_Transmit((uint8_t*) &packet, sizeof(SendPacket_t));
 8004eb4:	1d3b      	adds	r3, r7, #4
 8004eb6:	210c      	movs	r1, #12
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff ffb9 	bl	8004e30 <SX1278_Transmit>
}
 8004ebe:	bf00      	nop
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <get_serial_number>:
 */

#include "SerialNumber.h"
#include "stm32f1xx_hal.h"

SerialNumber_t get_serial_number() {
 8004ec6:	b590      	push	{r4, r7, lr}
 8004ec8:	b087      	sub	sp, #28
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]

	SerialNumber_t Serial;

	Serial.byte_0 = HAL_GetUIDw0();
 8004ece:	f7fc f94d 	bl	800116c <HAL_GetUIDw0>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	60fb      	str	r3, [r7, #12]
	Serial.byte_1 = HAL_GetUIDw1();
 8004ed6:	f7fc f953 	bl	8001180 <HAL_GetUIDw1>
 8004eda:	4603      	mov	r3, r0
 8004edc:	613b      	str	r3, [r7, #16]
	Serial.byte_2 = HAL_GetUIDw2();
 8004ede:	f7fc f959 	bl	8001194 <HAL_GetUIDw2>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	617b      	str	r3, [r7, #20]

	return Serial;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	461c      	mov	r4, r3
 8004eea:	f107 030c 	add.w	r3, r7, #12
 8004eee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004ef2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd90      	pop	{r4, r7, pc}

08004efe <memset>:
 8004efe:	4603      	mov	r3, r0
 8004f00:	4402      	add	r2, r0
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d100      	bne.n	8004f08 <memset+0xa>
 8004f06:	4770      	bx	lr
 8004f08:	f803 1b01 	strb.w	r1, [r3], #1
 8004f0c:	e7f9      	b.n	8004f02 <memset+0x4>
	...

08004f10 <__libc_init_array>:
 8004f10:	b570      	push	{r4, r5, r6, lr}
 8004f12:	2600      	movs	r6, #0
 8004f14:	4d0c      	ldr	r5, [pc, #48]	@ (8004f48 <__libc_init_array+0x38>)
 8004f16:	4c0d      	ldr	r4, [pc, #52]	@ (8004f4c <__libc_init_array+0x3c>)
 8004f18:	1b64      	subs	r4, r4, r5
 8004f1a:	10a4      	asrs	r4, r4, #2
 8004f1c:	42a6      	cmp	r6, r4
 8004f1e:	d109      	bne.n	8004f34 <__libc_init_array+0x24>
 8004f20:	f000 f81a 	bl	8004f58 <_init>
 8004f24:	2600      	movs	r6, #0
 8004f26:	4d0a      	ldr	r5, [pc, #40]	@ (8004f50 <__libc_init_array+0x40>)
 8004f28:	4c0a      	ldr	r4, [pc, #40]	@ (8004f54 <__libc_init_array+0x44>)
 8004f2a:	1b64      	subs	r4, r4, r5
 8004f2c:	10a4      	asrs	r4, r4, #2
 8004f2e:	42a6      	cmp	r6, r4
 8004f30:	d105      	bne.n	8004f3e <__libc_init_array+0x2e>
 8004f32:	bd70      	pop	{r4, r5, r6, pc}
 8004f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f38:	4798      	blx	r3
 8004f3a:	3601      	adds	r6, #1
 8004f3c:	e7ee      	b.n	8004f1c <__libc_init_array+0xc>
 8004f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f42:	4798      	blx	r3
 8004f44:	3601      	adds	r6, #1
 8004f46:	e7f2      	b.n	8004f2e <__libc_init_array+0x1e>
 8004f48:	08004fb0 	.word	0x08004fb0
 8004f4c:	08004fb0 	.word	0x08004fb0
 8004f50:	08004fb0 	.word	0x08004fb0
 8004f54:	08004fb4 	.word	0x08004fb4

08004f58 <_init>:
 8004f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5a:	bf00      	nop
 8004f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f5e:	bc08      	pop	{r3}
 8004f60:	469e      	mov	lr, r3
 8004f62:	4770      	bx	lr

08004f64 <_fini>:
 8004f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f66:	bf00      	nop
 8004f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6a:	bc08      	pop	{r3}
 8004f6c:	469e      	mov	lr, r3
 8004f6e:	4770      	bx	lr

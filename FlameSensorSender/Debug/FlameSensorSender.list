
FlameSensorSender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007170  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08007280  08007280  00008280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074f8  080074f8  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080074f8  080074f8  000084f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007500  08007500  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007500  08007500  00008500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007504  08007504  00008504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007508  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  2000005c  08007564  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08007564  00009380  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013386  00000000  00000000  00009085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000341e  00000000  00000000  0001c40b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0001f830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e52  00000000  00000000  00020ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a550  00000000  00000000  0002191a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170cb  00000000  00000000  0003be6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000924bb  00000000  00000000  00052f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e53f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000541c  00000000  00000000  000e5434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000ea850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007264 	.word	0x08007264

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08007264 	.word	0x08007264

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	@ 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__aeabi_d2iz>:
 80008f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008fc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000900:	d215      	bcs.n	800092e <__aeabi_d2iz+0x36>
 8000902:	d511      	bpl.n	8000928 <__aeabi_d2iz+0x30>
 8000904:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800090c:	d912      	bls.n	8000934 <__aeabi_d2iz+0x3c>
 800090e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000912:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	bf18      	it	ne
 8000924:	4240      	negne	r0, r0
 8000926:	4770      	bx	lr
 8000928:	f04f 0000 	mov.w	r0, #0
 800092c:	4770      	bx	lr
 800092e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000932:	d105      	bne.n	8000940 <__aeabi_d2iz+0x48>
 8000934:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000938:	bf08      	it	eq
 800093a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800093e:	4770      	bx	lr
 8000940:	f04f 0000 	mov.w	r0, #0
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <__aeabi_frsub>:
 8000948:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800094c:	e002      	b.n	8000954 <__addsf3>
 800094e:	bf00      	nop

08000950 <__aeabi_fsub>:
 8000950:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000954 <__addsf3>:
 8000954:	0042      	lsls	r2, r0, #1
 8000956:	bf1f      	itttt	ne
 8000958:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800095c:	ea92 0f03 	teqne	r2, r3
 8000960:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000964:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000968:	d06a      	beq.n	8000a40 <__addsf3+0xec>
 800096a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800096e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000972:	bfc1      	itttt	gt
 8000974:	18d2      	addgt	r2, r2, r3
 8000976:	4041      	eorgt	r1, r0
 8000978:	4048      	eorgt	r0, r1
 800097a:	4041      	eorgt	r1, r0
 800097c:	bfb8      	it	lt
 800097e:	425b      	neglt	r3, r3
 8000980:	2b19      	cmp	r3, #25
 8000982:	bf88      	it	hi
 8000984:	4770      	bxhi	lr
 8000986:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800098a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800098e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000992:	bf18      	it	ne
 8000994:	4240      	negne	r0, r0
 8000996:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800099a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800099e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009a2:	bf18      	it	ne
 80009a4:	4249      	negne	r1, r1
 80009a6:	ea92 0f03 	teq	r2, r3
 80009aa:	d03f      	beq.n	8000a2c <__addsf3+0xd8>
 80009ac:	f1a2 0201 	sub.w	r2, r2, #1
 80009b0:	fa41 fc03 	asr.w	ip, r1, r3
 80009b4:	eb10 000c 	adds.w	r0, r0, ip
 80009b8:	f1c3 0320 	rsb	r3, r3, #32
 80009bc:	fa01 f103 	lsl.w	r1, r1, r3
 80009c0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009c4:	d502      	bpl.n	80009cc <__addsf3+0x78>
 80009c6:	4249      	negs	r1, r1
 80009c8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009cc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009d0:	d313      	bcc.n	80009fa <__addsf3+0xa6>
 80009d2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009d6:	d306      	bcc.n	80009e6 <__addsf3+0x92>
 80009d8:	0840      	lsrs	r0, r0, #1
 80009da:	ea4f 0131 	mov.w	r1, r1, rrx
 80009de:	f102 0201 	add.w	r2, r2, #1
 80009e2:	2afe      	cmp	r2, #254	@ 0xfe
 80009e4:	d251      	bcs.n	8000a8a <__addsf3+0x136>
 80009e6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80009ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ee:	bf08      	it	eq
 80009f0:	f020 0001 	biceq.w	r0, r0, #1
 80009f4:	ea40 0003 	orr.w	r0, r0, r3
 80009f8:	4770      	bx	lr
 80009fa:	0049      	lsls	r1, r1, #1
 80009fc:	eb40 0000 	adc.w	r0, r0, r0
 8000a00:	3a01      	subs	r2, #1
 8000a02:	bf28      	it	cs
 8000a04:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a08:	d2ed      	bcs.n	80009e6 <__addsf3+0x92>
 8000a0a:	fab0 fc80 	clz	ip, r0
 8000a0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a12:	ebb2 020c 	subs.w	r2, r2, ip
 8000a16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a1a:	bfaa      	itet	ge
 8000a1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a20:	4252      	neglt	r2, r2
 8000a22:	4318      	orrge	r0, r3
 8000a24:	bfbc      	itt	lt
 8000a26:	40d0      	lsrlt	r0, r2
 8000a28:	4318      	orrlt	r0, r3
 8000a2a:	4770      	bx	lr
 8000a2c:	f092 0f00 	teq	r2, #0
 8000a30:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a34:	bf06      	itte	eq
 8000a36:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a3a:	3201      	addeq	r2, #1
 8000a3c:	3b01      	subne	r3, #1
 8000a3e:	e7b5      	b.n	80009ac <__addsf3+0x58>
 8000a40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a4e:	d021      	beq.n	8000a94 <__addsf3+0x140>
 8000a50:	ea92 0f03 	teq	r2, r3
 8000a54:	d004      	beq.n	8000a60 <__addsf3+0x10c>
 8000a56:	f092 0f00 	teq	r2, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	4608      	moveq	r0, r1
 8000a5e:	4770      	bx	lr
 8000a60:	ea90 0f01 	teq	r0, r1
 8000a64:	bf1c      	itt	ne
 8000a66:	2000      	movne	r0, #0
 8000a68:	4770      	bxne	lr
 8000a6a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a6e:	d104      	bne.n	8000a7a <__addsf3+0x126>
 8000a70:	0040      	lsls	r0, r0, #1
 8000a72:	bf28      	it	cs
 8000a74:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a78:	4770      	bx	lr
 8000a7a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a7e:	bf3c      	itt	cc
 8000a80:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a84:	4770      	bxcc	lr
 8000a86:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a8a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a92:	4770      	bx	lr
 8000a94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a98:	bf16      	itet	ne
 8000a9a:	4608      	movne	r0, r1
 8000a9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000aa0:	4601      	movne	r1, r0
 8000aa2:	0242      	lsls	r2, r0, #9
 8000aa4:	bf06      	itte	eq
 8000aa6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aaa:	ea90 0f01 	teqeq	r0, r1
 8000aae:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_ui2f>:
 8000ab4:	f04f 0300 	mov.w	r3, #0
 8000ab8:	e004      	b.n	8000ac4 <__aeabi_i2f+0x8>
 8000aba:	bf00      	nop

08000abc <__aeabi_i2f>:
 8000abc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ac0:	bf48      	it	mi
 8000ac2:	4240      	negmi	r0, r0
 8000ac4:	ea5f 0c00 	movs.w	ip, r0
 8000ac8:	bf08      	it	eq
 8000aca:	4770      	bxeq	lr
 8000acc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ad0:	4601      	mov	r1, r0
 8000ad2:	f04f 0000 	mov.w	r0, #0
 8000ad6:	e01c      	b.n	8000b12 <__aeabi_l2f+0x2a>

08000ad8 <__aeabi_ul2f>:
 8000ad8:	ea50 0201 	orrs.w	r2, r0, r1
 8000adc:	bf08      	it	eq
 8000ade:	4770      	bxeq	lr
 8000ae0:	f04f 0300 	mov.w	r3, #0
 8000ae4:	e00a      	b.n	8000afc <__aeabi_l2f+0x14>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_l2f>:
 8000ae8:	ea50 0201 	orrs.w	r2, r0, r1
 8000aec:	bf08      	it	eq
 8000aee:	4770      	bxeq	lr
 8000af0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000af4:	d502      	bpl.n	8000afc <__aeabi_l2f+0x14>
 8000af6:	4240      	negs	r0, r0
 8000af8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000afc:	ea5f 0c01 	movs.w	ip, r1
 8000b00:	bf02      	ittt	eq
 8000b02:	4684      	moveq	ip, r0
 8000b04:	4601      	moveq	r1, r0
 8000b06:	2000      	moveq	r0, #0
 8000b08:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b12:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b16:	fabc f28c 	clz	r2, ip
 8000b1a:	3a08      	subs	r2, #8
 8000b1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b20:	db10      	blt.n	8000b44 <__aeabi_l2f+0x5c>
 8000b22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b26:	4463      	add	r3, ip
 8000b28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b2c:	f1c2 0220 	rsb	r2, r2, #32
 8000b30:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b34:	fa20 f202 	lsr.w	r2, r0, r2
 8000b38:	eb43 0002 	adc.w	r0, r3, r2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f102 0220 	add.w	r2, r2, #32
 8000b48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b4c:	f1c2 0220 	rsb	r2, r2, #32
 8000b50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b54:	fa21 f202 	lsr.w	r2, r1, r2
 8000b58:	eb43 0002 	adc.w	r0, r3, r2
 8000b5c:	bf08      	it	eq
 8000b5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_fmul>:
 8000b64:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b72:	ea92 0f0c 	teqne	r2, ip
 8000b76:	ea93 0f0c 	teqne	r3, ip
 8000b7a:	d06f      	beq.n	8000c5c <__aeabi_fmul+0xf8>
 8000b7c:	441a      	add	r2, r3
 8000b7e:	ea80 0c01 	eor.w	ip, r0, r1
 8000b82:	0240      	lsls	r0, r0, #9
 8000b84:	bf18      	it	ne
 8000b86:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b8a:	d01e      	beq.n	8000bca <__aeabi_fmul+0x66>
 8000b8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b94:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b98:	fba0 3101 	umull	r3, r1, r0, r1
 8000b9c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ba0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ba4:	bf3e      	ittt	cc
 8000ba6:	0049      	lslcc	r1, r1, #1
 8000ba8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bac:	005b      	lslcc	r3, r3, #1
 8000bae:	ea40 0001 	orr.w	r0, r0, r1
 8000bb2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bb6:	2afd      	cmp	r2, #253	@ 0xfd
 8000bb8:	d81d      	bhi.n	8000bf6 <__aeabi_fmul+0x92>
 8000bba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000bbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc2:	bf08      	it	eq
 8000bc4:	f020 0001 	biceq.w	r0, r0, #1
 8000bc8:	4770      	bx	lr
 8000bca:	f090 0f00 	teq	r0, #0
 8000bce:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bd2:	bf08      	it	eq
 8000bd4:	0249      	lsleq	r1, r1, #9
 8000bd6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bda:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bde:	3a7f      	subs	r2, #127	@ 0x7f
 8000be0:	bfc2      	ittt	gt
 8000be2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000be6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bea:	4770      	bxgt	lr
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	f04f 0300 	mov.w	r3, #0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	dc5d      	bgt.n	8000cb4 <__aeabi_fmul+0x150>
 8000bf8:	f112 0f19 	cmn.w	r2, #25
 8000bfc:	bfdc      	itt	le
 8000bfe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c02:	4770      	bxle	lr
 8000c04:	f1c2 0200 	rsb	r2, r2, #0
 8000c08:	0041      	lsls	r1, r0, #1
 8000c0a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c0e:	f1c2 0220 	rsb	r2, r2, #32
 8000c12:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c16:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c1a:	f140 0000 	adc.w	r0, r0, #0
 8000c1e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c22:	bf08      	it	eq
 8000c24:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c28:	4770      	bx	lr
 8000c2a:	f092 0f00 	teq	r2, #0
 8000c2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c32:	bf02      	ittt	eq
 8000c34:	0040      	lsleq	r0, r0, #1
 8000c36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c3a:	3a01      	subeq	r2, #1
 8000c3c:	d0f9      	beq.n	8000c32 <__aeabi_fmul+0xce>
 8000c3e:	ea40 000c 	orr.w	r0, r0, ip
 8000c42:	f093 0f00 	teq	r3, #0
 8000c46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c4a:	bf02      	ittt	eq
 8000c4c:	0049      	lsleq	r1, r1, #1
 8000c4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c52:	3b01      	subeq	r3, #1
 8000c54:	d0f9      	beq.n	8000c4a <__aeabi_fmul+0xe6>
 8000c56:	ea41 010c 	orr.w	r1, r1, ip
 8000c5a:	e78f      	b.n	8000b7c <__aeabi_fmul+0x18>
 8000c5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c60:	ea92 0f0c 	teq	r2, ip
 8000c64:	bf18      	it	ne
 8000c66:	ea93 0f0c 	teqne	r3, ip
 8000c6a:	d00a      	beq.n	8000c82 <__aeabi_fmul+0x11e>
 8000c6c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c70:	bf18      	it	ne
 8000c72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c76:	d1d8      	bne.n	8000c2a <__aeabi_fmul+0xc6>
 8000c78:	ea80 0001 	eor.w	r0, r0, r1
 8000c7c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f090 0f00 	teq	r0, #0
 8000c86:	bf17      	itett	ne
 8000c88:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c8c:	4608      	moveq	r0, r1
 8000c8e:	f091 0f00 	teqne	r1, #0
 8000c92:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c96:	d014      	beq.n	8000cc2 <__aeabi_fmul+0x15e>
 8000c98:	ea92 0f0c 	teq	r2, ip
 8000c9c:	d101      	bne.n	8000ca2 <__aeabi_fmul+0x13e>
 8000c9e:	0242      	lsls	r2, r0, #9
 8000ca0:	d10f      	bne.n	8000cc2 <__aeabi_fmul+0x15e>
 8000ca2:	ea93 0f0c 	teq	r3, ip
 8000ca6:	d103      	bne.n	8000cb0 <__aeabi_fmul+0x14c>
 8000ca8:	024b      	lsls	r3, r1, #9
 8000caa:	bf18      	it	ne
 8000cac:	4608      	movne	r0, r1
 8000cae:	d108      	bne.n	8000cc2 <__aeabi_fmul+0x15e>
 8000cb0:	ea80 0001 	eor.w	r0, r0, r1
 8000cb4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cb8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cbc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc0:	4770      	bx	lr
 8000cc2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_fdiv>:
 8000ccc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd4:	bf1e      	ittt	ne
 8000cd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cda:	ea92 0f0c 	teqne	r2, ip
 8000cde:	ea93 0f0c 	teqne	r3, ip
 8000ce2:	d069      	beq.n	8000db8 <__aeabi_fdiv+0xec>
 8000ce4:	eba2 0203 	sub.w	r2, r2, r3
 8000ce8:	ea80 0c01 	eor.w	ip, r0, r1
 8000cec:	0249      	lsls	r1, r1, #9
 8000cee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cf2:	d037      	beq.n	8000d64 <__aeabi_fdiv+0x98>
 8000cf4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cf8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cfc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d00:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d04:	428b      	cmp	r3, r1
 8000d06:	bf38      	it	cc
 8000d08:	005b      	lslcc	r3, r3, #1
 8000d0a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d0e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d12:	428b      	cmp	r3, r1
 8000d14:	bf24      	itt	cs
 8000d16:	1a5b      	subcs	r3, r3, r1
 8000d18:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d1c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d20:	bf24      	itt	cs
 8000d22:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d26:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d2a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d2e:	bf24      	itt	cs
 8000d30:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d38:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d3c:	bf24      	itt	cs
 8000d3e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d42:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d46:	011b      	lsls	r3, r3, #4
 8000d48:	bf18      	it	ne
 8000d4a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d4e:	d1e0      	bne.n	8000d12 <__aeabi_fdiv+0x46>
 8000d50:	2afd      	cmp	r2, #253	@ 0xfd
 8000d52:	f63f af50 	bhi.w	8000bf6 <__aeabi_fmul+0x92>
 8000d56:	428b      	cmp	r3, r1
 8000d58:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d68:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6c:	327f      	adds	r2, #127	@ 0x7f
 8000d6e:	bfc2      	ittt	gt
 8000d70:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d74:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d78:	4770      	bxgt	lr
 8000d7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d7e:	f04f 0300 	mov.w	r3, #0
 8000d82:	3a01      	subs	r2, #1
 8000d84:	e737      	b.n	8000bf6 <__aeabi_fmul+0x92>
 8000d86:	f092 0f00 	teq	r2, #0
 8000d8a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d8e:	bf02      	ittt	eq
 8000d90:	0040      	lsleq	r0, r0, #1
 8000d92:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d96:	3a01      	subeq	r2, #1
 8000d98:	d0f9      	beq.n	8000d8e <__aeabi_fdiv+0xc2>
 8000d9a:	ea40 000c 	orr.w	r0, r0, ip
 8000d9e:	f093 0f00 	teq	r3, #0
 8000da2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000da6:	bf02      	ittt	eq
 8000da8:	0049      	lsleq	r1, r1, #1
 8000daa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dae:	3b01      	subeq	r3, #1
 8000db0:	d0f9      	beq.n	8000da6 <__aeabi_fdiv+0xda>
 8000db2:	ea41 010c 	orr.w	r1, r1, ip
 8000db6:	e795      	b.n	8000ce4 <__aeabi_fdiv+0x18>
 8000db8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dbc:	ea92 0f0c 	teq	r2, ip
 8000dc0:	d108      	bne.n	8000dd4 <__aeabi_fdiv+0x108>
 8000dc2:	0242      	lsls	r2, r0, #9
 8000dc4:	f47f af7d 	bne.w	8000cc2 <__aeabi_fmul+0x15e>
 8000dc8:	ea93 0f0c 	teq	r3, ip
 8000dcc:	f47f af70 	bne.w	8000cb0 <__aeabi_fmul+0x14c>
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	e776      	b.n	8000cc2 <__aeabi_fmul+0x15e>
 8000dd4:	ea93 0f0c 	teq	r3, ip
 8000dd8:	d104      	bne.n	8000de4 <__aeabi_fdiv+0x118>
 8000dda:	024b      	lsls	r3, r1, #9
 8000ddc:	f43f af4c 	beq.w	8000c78 <__aeabi_fmul+0x114>
 8000de0:	4608      	mov	r0, r1
 8000de2:	e76e      	b.n	8000cc2 <__aeabi_fmul+0x15e>
 8000de4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000de8:	bf18      	it	ne
 8000dea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dee:	d1ca      	bne.n	8000d86 <__aeabi_fdiv+0xba>
 8000df0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000df4:	f47f af5c 	bne.w	8000cb0 <__aeabi_fmul+0x14c>
 8000df8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000dfc:	f47f af3c 	bne.w	8000c78 <__aeabi_fmul+0x114>
 8000e00:	e75f      	b.n	8000cc2 <__aeabi_fmul+0x15e>
 8000e02:	bf00      	nop

08000e04 <__gesf2>:
 8000e04:	f04f 3cff 	mov.w	ip, #4294967295
 8000e08:	e006      	b.n	8000e18 <__cmpsf2+0x4>
 8000e0a:	bf00      	nop

08000e0c <__lesf2>:
 8000e0c:	f04f 0c01 	mov.w	ip, #1
 8000e10:	e002      	b.n	8000e18 <__cmpsf2+0x4>
 8000e12:	bf00      	nop

08000e14 <__cmpsf2>:
 8000e14:	f04f 0c01 	mov.w	ip, #1
 8000e18:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e28:	bf18      	it	ne
 8000e2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e2e:	d011      	beq.n	8000e54 <__cmpsf2+0x40>
 8000e30:	b001      	add	sp, #4
 8000e32:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e36:	bf18      	it	ne
 8000e38:	ea90 0f01 	teqne	r0, r1
 8000e3c:	bf58      	it	pl
 8000e3e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e42:	bf88      	it	hi
 8000e44:	17c8      	asrhi	r0, r1, #31
 8000e46:	bf38      	it	cc
 8000e48:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e4c:	bf18      	it	ne
 8000e4e:	f040 0001 	orrne.w	r0, r0, #1
 8000e52:	4770      	bx	lr
 8000e54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e58:	d102      	bne.n	8000e60 <__cmpsf2+0x4c>
 8000e5a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e5e:	d105      	bne.n	8000e6c <__cmpsf2+0x58>
 8000e60:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e64:	d1e4      	bne.n	8000e30 <__cmpsf2+0x1c>
 8000e66:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e6a:	d0e1      	beq.n	8000e30 <__cmpsf2+0x1c>
 8000e6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <__aeabi_cfrcmple>:
 8000e74:	4684      	mov	ip, r0
 8000e76:	4608      	mov	r0, r1
 8000e78:	4661      	mov	r1, ip
 8000e7a:	e7ff      	b.n	8000e7c <__aeabi_cfcmpeq>

08000e7c <__aeabi_cfcmpeq>:
 8000e7c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e7e:	f7ff ffc9 	bl	8000e14 <__cmpsf2>
 8000e82:	2800      	cmp	r0, #0
 8000e84:	bf48      	it	mi
 8000e86:	f110 0f00 	cmnmi.w	r0, #0
 8000e8a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e8c <__aeabi_fcmpeq>:
 8000e8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e90:	f7ff fff4 	bl	8000e7c <__aeabi_cfcmpeq>
 8000e94:	bf0c      	ite	eq
 8000e96:	2001      	moveq	r0, #1
 8000e98:	2000      	movne	r0, #0
 8000e9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_fcmplt>:
 8000ea0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea4:	f7ff ffea 	bl	8000e7c <__aeabi_cfcmpeq>
 8000ea8:	bf34      	ite	cc
 8000eaa:	2001      	movcc	r0, #1
 8000eac:	2000      	movcs	r0, #0
 8000eae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_fcmple>:
 8000eb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb8:	f7ff ffe0 	bl	8000e7c <__aeabi_cfcmpeq>
 8000ebc:	bf94      	ite	ls
 8000ebe:	2001      	movls	r0, #1
 8000ec0:	2000      	movhi	r0, #0
 8000ec2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec6:	bf00      	nop

08000ec8 <__aeabi_fcmpge>:
 8000ec8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ecc:	f7ff ffd2 	bl	8000e74 <__aeabi_cfrcmple>
 8000ed0:	bf94      	ite	ls
 8000ed2:	2001      	movls	r0, #1
 8000ed4:	2000      	movhi	r0, #0
 8000ed6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eda:	bf00      	nop

08000edc <__aeabi_fcmpgt>:
 8000edc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee0:	f7ff ffc8 	bl	8000e74 <__aeabi_cfrcmple>
 8000ee4:	bf34      	ite	cc
 8000ee6:	2001      	movcc	r0, #1
 8000ee8:	2000      	movcs	r0, #0
 8000eea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eee:	bf00      	nop

08000ef0 <__aeabi_f2uiz>:
 8000ef0:	0042      	lsls	r2, r0, #1
 8000ef2:	d20e      	bcs.n	8000f12 <__aeabi_f2uiz+0x22>
 8000ef4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ef8:	d30b      	bcc.n	8000f12 <__aeabi_f2uiz+0x22>
 8000efa:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000efe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f02:	d409      	bmi.n	8000f18 <__aeabi_f2uiz+0x28>
 8000f04:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f0c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f10:	4770      	bx	lr
 8000f12:	f04f 0000 	mov.w	r0, #0
 8000f16:	4770      	bx	lr
 8000f18:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f1c:	d101      	bne.n	8000f22 <__aeabi_f2uiz+0x32>
 8000f1e:	0242      	lsls	r2, r0, #9
 8000f20:	d102      	bne.n	8000f28 <__aeabi_f2uiz+0x38>
 8000f22:	f04f 30ff 	mov.w	r0, #4294967295
 8000f26:	4770      	bx	lr
 8000f28:	f04f 0000 	mov.w	r0, #0
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f36:	f000 fe1f 	bl	8001b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3a:	f000 f933 	bl	80011a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3e:	f000 faf9 	bl	8001534 <MX_GPIO_Init>
  MX_RTC_Init();
 8000f42:	f000 fa01 	bl	8001348 <MX_RTC_Init>
  MX_TIM2_Init();
 8000f46:	f000 fa7f 	bl	8001448 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000f4a:	f000 fac9 	bl	80014e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	debug_init(&huart1);
 8000f4e:	487d      	ldr	r0, [pc, #500]	@ (8001144 <main+0x214>)
 8000f50:	f004 ff6e 	bl	8005e30 <debug_init>

	debug("========================");
 8000f54:	487c      	ldr	r0, [pc, #496]	@ (8001148 <main+0x218>)
 8000f56:	f004 ff79 	bl	8005e4c <debug>
	debug("The device has woken up!");
 8000f5a:	487c      	ldr	r0, [pc, #496]	@ (800114c <main+0x21c>)
 8000f5c:	f004 ff76 	bl	8005e4c <debug>

	// Defining alarm_level
	alarm_level = 1.1;
 8000f60:	4b7b      	ldr	r3, [pc, #492]	@ (8001150 <main+0x220>)
 8000f62:	4a7c      	ldr	r2, [pc, #496]	@ (8001154 <main+0x224>)
 8000f64:	601a      	str	r2, [r3, #0]
	debug("alarm_level: %d.%02d\n\r", (uint8_t) alarm_level,
 8000f66:	4b7a      	ldr	r3, [pc, #488]	@ (8001150 <main+0x220>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ffc0 	bl	8000ef0 <__aeabi_f2uiz>
 8000f70:	4603      	mov	r3, r0
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	461c      	mov	r4, r3
			(uint16_t) (alarm_level * 100) % 100);
 8000f76:	4b76      	ldr	r3, [pc, #472]	@ (8001150 <main+0x220>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4977      	ldr	r1, [pc, #476]	@ (8001158 <main+0x228>)
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fdf1 	bl	8000b64 <__aeabi_fmul>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ffb3 	bl	8000ef0 <__aeabi_f2uiz>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	b29b      	uxth	r3, r3
	debug("alarm_level: %d.%02d\n\r", (uint8_t) alarm_level,
 8000f8e:	4a73      	ldr	r2, [pc, #460]	@ (800115c <main+0x22c>)
 8000f90:	fba2 1203 	umull	r1, r2, r2, r3
 8000f94:	0952      	lsrs	r2, r2, #5
 8000f96:	2164      	movs	r1, #100	@ 0x64
 8000f98:	fb01 f202 	mul.w	r2, r1, r2
 8000f9c:	1a9b      	subs	r3, r3, r2
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4621      	mov	r1, r4
 8000fa4:	486e      	ldr	r0, [pc, #440]	@ (8001160 <main+0x230>)
 8000fa6:	f004 ff51 	bl	8005e4c <debug>

	HAL_Delay(10);
 8000faa:	200a      	movs	r0, #10
 8000fac:	f000 fe46 	bl	8001c3c <HAL_Delay>

	HAL_GPIO_WritePin(V_LED_GPIO_Port, V_LED_Pin, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fb6:	486b      	ldr	r0, [pc, #428]	@ (8001164 <main+0x234>)
 8000fb8:	f001 feda 	bl	8002d70 <HAL_GPIO_WritePin>

	hw_serial = get_serial_number();
 8000fbc:	4c6a      	ldr	r4, [pc, #424]	@ (8001168 <main+0x238>)
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f005 fc25 	bl	8006810 <get_serial_number>
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	MX_ADC1_Init();
 8000fd0:	f000 f93e 	bl	8001250 <MX_ADC1_Init>
	Battery = get_battery_level();
 8000fd4:	4c65      	ldr	r4, [pc, #404]	@ (800116c <main+0x23c>)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f004 fe0b 	bl	8005bf4 <get_battery_level>
 8000fde:	4622      	mov	r2, r4
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fe6:	e882 0003 	stmia.w	r2, {r0, r1}
	HAL_ADC_DeInit(&hadc1);
 8000fea:	4861      	ldr	r0, [pc, #388]	@ (8001170 <main+0x240>)
 8000fec:	f000 ff40 	bl	8001e70 <HAL_ADC_DeInit>

	// Enabling VCC to Smoke Sensor and polling for data
	debug("Polling for dust sensor data...");
 8000ff0:	4860      	ldr	r0, [pc, #384]	@ (8001174 <main+0x244>)
 8000ff2:	f004 ff2b 	bl	8005e4c <debug>
	HAL_GPIO_WritePin(GPIOB, MOSFET_GATE_SENSOR_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ffc:	4859      	ldr	r0, [pc, #356]	@ (8001164 <main+0x234>)
 8000ffe:	f001 feb7 	bl	8002d70 <HAL_GPIO_WritePin>
	MX_ADC2_Init();
 8001002:	f000 f963 	bl	80012cc <MX_ADC2_Init>
	float sensor_data = get_infra_sensor_data(&hadc2, alarm_level);
 8001006:	4b52      	ldr	r3, [pc, #328]	@ (8001150 <main+0x220>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4619      	mov	r1, r3
 800100c:	485a      	ldr	r0, [pc, #360]	@ (8001178 <main+0x248>)
 800100e:	f004 ffd5 	bl	8005fbc <get_infra_sensor_data>
 8001012:	6178      	str	r0, [r7, #20]
	HAL_ADC_DeInit(&hadc2);
 8001014:	4858      	ldr	r0, [pc, #352]	@ (8001178 <main+0x248>)
 8001016:	f000 ff2b 	bl	8001e70 <HAL_ADC_DeInit>
	HAL_GPIO_WritePin(GPIOB, MOSFET_GATE_SENSOR_Pin, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001020:	4850      	ldr	r0, [pc, #320]	@ (8001164 <main+0x234>)
 8001022:	f001 fea5 	bl	8002d70 <HAL_GPIO_WritePin>
	debug("Sensor: %d.%02d\n\r", (uint8_t) sensor_data,
 8001026:	6978      	ldr	r0, [r7, #20]
 8001028:	f7ff ff62 	bl	8000ef0 <__aeabi_f2uiz>
 800102c:	4603      	mov	r3, r0
 800102e:	b2db      	uxtb	r3, r3
 8001030:	461c      	mov	r4, r3
			(uint16_t) (sensor_data * 100) % 100);
 8001032:	4949      	ldr	r1, [pc, #292]	@ (8001158 <main+0x228>)
 8001034:	6978      	ldr	r0, [r7, #20]
 8001036:	f7ff fd95 	bl	8000b64 <__aeabi_fmul>
 800103a:	4603      	mov	r3, r0
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff57 	bl	8000ef0 <__aeabi_f2uiz>
 8001042:	4603      	mov	r3, r0
 8001044:	b29b      	uxth	r3, r3
	debug("Sensor: %d.%02d\n\r", (uint8_t) sensor_data,
 8001046:	4a45      	ldr	r2, [pc, #276]	@ (800115c <main+0x22c>)
 8001048:	fba2 1203 	umull	r1, r2, r2, r3
 800104c:	0952      	lsrs	r2, r2, #5
 800104e:	2164      	movs	r1, #100	@ 0x64
 8001050:	fb01 f202 	mul.w	r2, r1, r2
 8001054:	1a9b      	subs	r3, r3, r2
 8001056:	b29b      	uxth	r3, r3
 8001058:	461a      	mov	r2, r3
 800105a:	4621      	mov	r1, r4
 800105c:	4847      	ldr	r0, [pc, #284]	@ (800117c <main+0x24c>)
 800105e:	f004 fef5 	bl	8005e4c <debug>

	packet.ID = hw_serial.byte_2;
 8001062:	4b41      	ldr	r3, [pc, #260]	@ (8001168 <main+0x238>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	4a46      	ldr	r2, [pc, #280]	@ (8001180 <main+0x250>)
 8001068:	6013      	str	r3, [r2, #0]
	packet.battery_level = Battery.charge_percent;
 800106a:	4b40      	ldr	r3, [pc, #256]	@ (800116c <main+0x23c>)
 800106c:	791a      	ldrb	r2, [r3, #4]
 800106e:	4b44      	ldr	r3, [pc, #272]	@ (8001180 <main+0x250>)
 8001070:	721a      	strb	r2, [r3, #8]
	packet.sensor_data = sensor_data;
 8001072:	4a43      	ldr	r2, [pc, #268]	@ (8001180 <main+0x250>)
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	6053      	str	r3, [r2, #4]
	debug("Formed packet:");
 8001078:	4842      	ldr	r0, [pc, #264]	@ (8001184 <main+0x254>)
 800107a:	f004 fee7 	bl	8005e4c <debug>
	debug("\tID: %d", (uint8_t) packet.ID);
 800107e:	4b40      	ldr	r3, [pc, #256]	@ (8001180 <main+0x250>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	4619      	mov	r1, r3
 8001086:	4840      	ldr	r0, [pc, #256]	@ (8001188 <main+0x258>)
 8001088:	f004 fee0 	bl	8005e4c <debug>
	debug("\tbattery_level: %d%%", (uint8_t) Battery.charge_percent);
 800108c:	4b37      	ldr	r3, [pc, #220]	@ (800116c <main+0x23c>)
 800108e:	791b      	ldrb	r3, [r3, #4]
 8001090:	4619      	mov	r1, r3
 8001092:	483e      	ldr	r0, [pc, #248]	@ (800118c <main+0x25c>)
 8001094:	f004 feda 	bl	8005e4c <debug>
	debug("\tsensor_data: %d.%02d\n\r", (uint8_t) sensor_data,
 8001098:	6978      	ldr	r0, [r7, #20]
 800109a:	f7ff ff29 	bl	8000ef0 <__aeabi_f2uiz>
 800109e:	4603      	mov	r3, r0
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	461c      	mov	r4, r3
			(uint16_t) (sensor_data * 100) % 100);
 80010a4:	492c      	ldr	r1, [pc, #176]	@ (8001158 <main+0x228>)
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff fd5c 	bl	8000b64 <__aeabi_fmul>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ff1e 	bl	8000ef0 <__aeabi_f2uiz>
 80010b4:	4603      	mov	r3, r0
 80010b6:	b29b      	uxth	r3, r3
	debug("\tsensor_data: %d.%02d\n\r", (uint8_t) sensor_data,
 80010b8:	4a28      	ldr	r2, [pc, #160]	@ (800115c <main+0x22c>)
 80010ba:	fba2 1203 	umull	r1, r2, r2, r3
 80010be:	0952      	lsrs	r2, r2, #5
 80010c0:	2164      	movs	r1, #100	@ 0x64
 80010c2:	fb01 f202 	mul.w	r2, r1, r2
 80010c6:	1a9b      	subs	r3, r3, r2
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	461a      	mov	r2, r3
 80010cc:	4621      	mov	r1, r4
 80010ce:	4830      	ldr	r0, [pc, #192]	@ (8001190 <main+0x260>)
 80010d0:	f004 febc 	bl	8005e4c <debug>

	debug("Enabling LoRa...");
 80010d4:	482f      	ldr	r0, [pc, #188]	@ (8001194 <main+0x264>)
 80010d6:	f004 feb9 	bl	8005e4c <debug>
	HAL_GPIO_WritePin(GPIOB, MOSFET_GATE_LORA_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010e0:	4820      	ldr	r0, [pc, #128]	@ (8001164 <main+0x234>)
 80010e2:	f001 fe45 	bl	8002d70 <HAL_GPIO_WritePin>
	MX_SPI1_Init();
 80010e6:	f000 f979 	bl	80013dc <MX_SPI1_Init>
	HAL_Delay(100);
 80010ea:	2064      	movs	r0, #100	@ 0x64
 80010ec:	f000 fda6 	bl	8001c3c <HAL_Delay>
	debug("Sending packet...");
 80010f0:	4829      	ldr	r0, [pc, #164]	@ (8001198 <main+0x268>)
 80010f2:	f004 feab 	bl	8005e4c <debug>
	send_packet(packet);
 80010f6:	4b22      	ldr	r3, [pc, #136]	@ (8001180 <main+0x250>)
 80010f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010fc:	f005 fb74 	bl	80067e8 <send_packet>
	debug("\t...sent!");
 8001100:	4826      	ldr	r0, [pc, #152]	@ (800119c <main+0x26c>)
 8001102:	f004 fea3 	bl	8005e4c <debug>
	HAL_GPIO_WritePin(GPIOB, MOSFET_GATE_LORA_Pin, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800110c:	4815      	ldr	r0, [pc, #84]	@ (8001164 <main+0x234>)
 800110e:	f001 fe2f 	bl	8002d70 <HAL_GPIO_WritePin>

	//  Toggle red led
	HAL_GPIO_WritePin(INFO_LED_GPIO_Port, INFO_LED_Pin, GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001118:	4812      	ldr	r0, [pc, #72]	@ (8001164 <main+0x234>)
 800111a:	f001 fe29 	bl	8002d70 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800111e:	2001      	movs	r0, #1
 8001120:	f000 fd8c 	bl	8001c3c <HAL_Delay>
	HAL_GPIO_WritePin(INFO_LED_GPIO_Port, INFO_LED_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800112a:	480e      	ldr	r0, [pc, #56]	@ (8001164 <main+0x234>)
 800112c:	f001 fe20 	bl	8002d70 <HAL_GPIO_WritePin>

	// Sleeping
	debug("Going sleep (STANDBY MODE)...");
 8001130:	481b      	ldr	r0, [pc, #108]	@ (80011a0 <main+0x270>)
 8001132:	f004 fe8b 	bl	8005e4c <debug>
	set_alarm(3);
 8001136:	2003      	movs	r0, #3
 8001138:	f004 fd20 	bl	8005b7c <set_alarm>
	HAL_PWR_EnterSTANDBYMode();
 800113c:	f001 fe3c 	bl	8002db8 <HAL_PWR_EnterSTANDBYMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <main+0x210>
 8001144:	2000018c 	.word	0x2000018c
 8001148:	08007280 	.word	0x08007280
 800114c:	0800729c 	.word	0x0800729c
 8001150:	200001f4 	.word	0x200001f4
 8001154:	3f8ccccd 	.word	0x3f8ccccd
 8001158:	42c80000 	.word	0x42c80000
 800115c:	51eb851f 	.word	0x51eb851f
 8001160:	080072b8 	.word	0x080072b8
 8001164:	40010c00 	.word	0x40010c00
 8001168:	200001d4 	.word	0x200001d4
 800116c:	200001e0 	.word	0x200001e0
 8001170:	20000078 	.word	0x20000078
 8001174:	080072d0 	.word	0x080072d0
 8001178:	200000a8 	.word	0x200000a8
 800117c:	080072f0 	.word	0x080072f0
 8001180:	200001e8 	.word	0x200001e8
 8001184:	08007304 	.word	0x08007304
 8001188:	08007314 	.word	0x08007314
 800118c:	0800731c 	.word	0x0800731c
 8001190:	08007334 	.word	0x08007334
 8001194:	0800734c 	.word	0x0800734c
 8001198:	08007360 	.word	0x08007360
 800119c:	08007374 	.word	0x08007374
 80011a0:	08007380 	.word	0x08007380

080011a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b094      	sub	sp, #80	@ 0x50
 80011a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ae:	2228      	movs	r2, #40	@ 0x28
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f005 fbc8 	bl	8006948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80011d4:	230a      	movs	r3, #10
 80011d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d8:	2301      	movs	r3, #1
 80011da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011dc:	2310      	movs	r3, #16
 80011de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011e0:	2301      	movs	r3, #1
 80011e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ec:	4618      	mov	r0, r3
 80011ee:	f001 fdfb 	bl	8002de8 <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011f8:	f000 fa7a 	bl	80016f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	230f      	movs	r3, #15
 80011fe:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f002 f868 	bl	80032ec <HAL_RCC_ClockConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001222:	f000 fa65 	bl	80016f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001226:	2303      	movs	r3, #3
 8001228:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800122a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800122e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	4618      	mov	r0, r3
 8001238:	f002 f9e6 	bl	8003608 <HAL_RCCEx_PeriphCLKConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001242:	f000 fa55 	bl	80016f0 <Error_Handler>
  }
}
 8001246:	bf00      	nop
 8001248:	3750      	adds	r7, #80	@ 0x50
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001260:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <MX_ADC1_Init+0x74>)
 8001262:	4a19      	ldr	r2, [pc, #100]	@ (80012c8 <MX_ADC1_Init+0x78>)
 8001264:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001266:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <MX_ADC1_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800126c:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <MX_ADC1_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001272:	4b14      	ldr	r3, [pc, #80]	@ (80012c4 <MX_ADC1_Init+0x74>)
 8001274:	2200      	movs	r2, #0
 8001276:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001278:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <MX_ADC1_Init+0x74>)
 800127a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800127e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001280:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <MX_ADC1_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001286:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <MX_ADC1_Init+0x74>)
 8001288:	2201      	movs	r2, #1
 800128a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800128c:	480d      	ldr	r0, [pc, #52]	@ (80012c4 <MX_ADC1_Init+0x74>)
 800128e:	f000 fd17 	bl	8001cc0 <HAL_ADC_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001298:	f000 fa2a 	bl	80016f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800129c:	2301      	movs	r3, #1
 800129e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012a0:	2301      	movs	r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80012a4:	2307      	movs	r3, #7
 80012a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <MX_ADC1_Init+0x74>)
 80012ae:	f001 f88d 	bl	80023cc <HAL_ADC_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80012b8:	f000 fa1a 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000078 	.word	0x20000078
 80012c8:	40012400 	.word	0x40012400

080012cc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80012dc:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <MX_ADC2_Init+0x74>)
 80012de:	4a19      	ldr	r2, [pc, #100]	@ (8001344 <MX_ADC2_Init+0x78>)
 80012e0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012e2:	4b17      	ldr	r3, [pc, #92]	@ (8001340 <MX_ADC2_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80012e8:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <MX_ADC2_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80012ee:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <MX_ADC2_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <MX_ADC2_Init+0x74>)
 80012f6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80012fa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012fc:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <MX_ADC2_Init+0x74>)
 80012fe:	2200      	movs	r2, #0
 8001300:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001302:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <MX_ADC2_Init+0x74>)
 8001304:	2201      	movs	r2, #1
 8001306:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001308:	480d      	ldr	r0, [pc, #52]	@ (8001340 <MX_ADC2_Init+0x74>)
 800130a:	f000 fcd9 	bl	8001cc0 <HAL_ADC_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001314:	f000 f9ec 	bl	80016f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001318:	2300      	movs	r3, #0
 800131a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800131c:	2301      	movs	r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001320:	2307      	movs	r3, #7
 8001322:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	@ (8001340 <MX_ADC2_Init+0x74>)
 800132a:	f001 f84f 	bl	80023cc <HAL_ADC_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001334:	f000 f9dc 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200000a8 	.word	0x200000a8
 8001344:	40012800 	.word	0x40012800

08001348 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2100      	movs	r1, #0
 8001352:	460a      	mov	r2, r1
 8001354:	801a      	strh	r2, [r3, #0]
 8001356:	460a      	mov	r2, r1
 8001358:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800135e:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <MX_RTC_Init+0x8c>)
 8001360:	4a1d      	ldr	r2, [pc, #116]	@ (80013d8 <MX_RTC_Init+0x90>)
 8001362:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001364:	4b1b      	ldr	r3, [pc, #108]	@ (80013d4 <MX_RTC_Init+0x8c>)
 8001366:	f04f 32ff 	mov.w	r2, #4294967295
 800136a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 800136c:	4b19      	ldr	r3, [pc, #100]	@ (80013d4 <MX_RTC_Init+0x8c>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001372:	4818      	ldr	r0, [pc, #96]	@ (80013d4 <MX_RTC_Init+0x8c>)
 8001374:	f002 fab4 	bl	80038e0 <HAL_RTC_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 800137e:	f000 f9b7 	bl	80016f0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	2200      	movs	r2, #0
 8001392:	4619      	mov	r1, r3
 8001394:	480f      	ldr	r0, [pc, #60]	@ (80013d4 <MX_RTC_Init+0x8c>)
 8001396:	f002 fb2f 	bl	80039f8 <HAL_RTC_SetTime>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 80013a0:	f000 f9a6 	bl	80016f0 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80013a4:	2301      	movs	r3, #1
 80013a6:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80013a8:	2301      	movs	r3, #1
 80013aa:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 80013ac:	2301      	movs	r3, #1
 80013ae:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 80013b4:	463b      	mov	r3, r7
 80013b6:	2200      	movs	r2, #0
 80013b8:	4619      	mov	r1, r3
 80013ba:	4806      	ldr	r0, [pc, #24]	@ (80013d4 <MX_RTC_Init+0x8c>)
 80013bc:	f002 fc8c 	bl	8003cd8 <HAL_RTC_SetDate>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80013c6:	f000 f993 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200000d8 	.word	0x200000d8
 80013d8:	40002800 	.word	0x40002800

080013dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013e0:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <MX_SPI1_Init+0x64>)
 80013e2:	4a18      	ldr	r2, [pc, #96]	@ (8001444 <MX_SPI1_Init+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013e6:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <MX_SPI1_Init+0x64>)
 80013e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ee:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <MX_SPI1_Init+0x64>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013f4:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <MX_SPI1_Init+0x64>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013fa:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <MX_SPI1_Init+0x64>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001400:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <MX_SPI1_Init+0x64>)
 8001402:	2200      	movs	r2, #0
 8001404:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001406:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <MX_SPI1_Init+0x64>)
 8001408:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800140c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800140e:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <MX_SPI1_Init+0x64>)
 8001410:	2200      	movs	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001414:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <MX_SPI1_Init+0x64>)
 8001416:	2200      	movs	r2, #0
 8001418:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800141a:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <MX_SPI1_Init+0x64>)
 800141c:	2200      	movs	r2, #0
 800141e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001420:	4b07      	ldr	r3, [pc, #28]	@ (8001440 <MX_SPI1_Init+0x64>)
 8001422:	2200      	movs	r2, #0
 8001424:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <MX_SPI1_Init+0x64>)
 8001428:	220a      	movs	r2, #10
 800142a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800142c:	4804      	ldr	r0, [pc, #16]	@ (8001440 <MX_SPI1_Init+0x64>)
 800142e:	f003 f90c 	bl	800464a <HAL_SPI_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001438:	f000 f95a 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200000ec 	.word	0x200000ec
 8001444:	40013000 	.word	0x40013000

08001448 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145c:	463b      	mov	r3, r7
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001464:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <MX_TIM2_Init+0x94>)
 8001466:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800146a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 800146c:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <MX_TIM2_Init+0x94>)
 800146e:	2207      	movs	r2, #7
 8001470:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001472:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <MX_TIM2_Init+0x94>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001478:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <MX_TIM2_Init+0x94>)
 800147a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800147e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001480:	4b16      	ldr	r3, [pc, #88]	@ (80014dc <MX_TIM2_Init+0x94>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001486:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <MX_TIM2_Init+0x94>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800148c:	4813      	ldr	r0, [pc, #76]	@ (80014dc <MX_TIM2_Init+0x94>)
 800148e:	f003 fe7e 	bl	800518e <HAL_TIM_Base_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001498:	f000 f92a 	bl	80016f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	4619      	mov	r1, r3
 80014a8:	480c      	ldr	r0, [pc, #48]	@ (80014dc <MX_TIM2_Init+0x94>)
 80014aa:	f003 ff29 	bl	8005300 <HAL_TIM_ConfigClockSource>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014b4:	f000 f91c 	bl	80016f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b8:	2300      	movs	r3, #0
 80014ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014c0:	463b      	mov	r3, r7
 80014c2:	4619      	mov	r1, r3
 80014c4:	4805      	ldr	r0, [pc, #20]	@ (80014dc <MX_TIM2_Init+0x94>)
 80014c6:	f004 f8dd 	bl	8005684 <HAL_TIMEx_MasterConfigSynchronization>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014d0:	f000 f90e 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000144 	.word	0x20000144

080014e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014e4:	4b11      	ldr	r3, [pc, #68]	@ (800152c <MX_USART1_UART_Init+0x4c>)
 80014e6:	4a12      	ldr	r2, [pc, #72]	@ (8001530 <MX_USART1_UART_Init+0x50>)
 80014e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014ea:	4b10      	ldr	r3, [pc, #64]	@ (800152c <MX_USART1_UART_Init+0x4c>)
 80014ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <MX_USART1_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <MX_USART1_UART_Init+0x4c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	@ (800152c <MX_USART1_UART_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001504:	4b09      	ldr	r3, [pc, #36]	@ (800152c <MX_USART1_UART_Init+0x4c>)
 8001506:	220c      	movs	r2, #12
 8001508:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150a:	4b08      	ldr	r3, [pc, #32]	@ (800152c <MX_USART1_UART_Init+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <MX_USART1_UART_Init+0x4c>)
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001516:	4805      	ldr	r0, [pc, #20]	@ (800152c <MX_USART1_UART_Init+0x4c>)
 8001518:	f004 f90c 	bl	8005734 <HAL_UART_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001522:	f000 f8e5 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	2000018c 	.word	0x2000018c
 8001530:	40013800 	.word	0x40013800

08001534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	@ 0x28
 8001538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001548:	4b62      	ldr	r3, [pc, #392]	@ (80016d4 <MX_GPIO_Init+0x1a0>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4a61      	ldr	r2, [pc, #388]	@ (80016d4 <MX_GPIO_Init+0x1a0>)
 800154e:	f043 0310 	orr.w	r3, r3, #16
 8001552:	6193      	str	r3, [r2, #24]
 8001554:	4b5f      	ldr	r3, [pc, #380]	@ (80016d4 <MX_GPIO_Init+0x1a0>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f003 0310 	and.w	r3, r3, #16
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001560:	4b5c      	ldr	r3, [pc, #368]	@ (80016d4 <MX_GPIO_Init+0x1a0>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a5b      	ldr	r2, [pc, #364]	@ (80016d4 <MX_GPIO_Init+0x1a0>)
 8001566:	f043 0320 	orr.w	r3, r3, #32
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b59      	ldr	r3, [pc, #356]	@ (80016d4 <MX_GPIO_Init+0x1a0>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0320 	and.w	r3, r3, #32
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001578:	4b56      	ldr	r3, [pc, #344]	@ (80016d4 <MX_GPIO_Init+0x1a0>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4a55      	ldr	r2, [pc, #340]	@ (80016d4 <MX_GPIO_Init+0x1a0>)
 800157e:	f043 0304 	orr.w	r3, r3, #4
 8001582:	6193      	str	r3, [r2, #24]
 8001584:	4b53      	ldr	r3, [pc, #332]	@ (80016d4 <MX_GPIO_Init+0x1a0>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001590:	4b50      	ldr	r3, [pc, #320]	@ (80016d4 <MX_GPIO_Init+0x1a0>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	4a4f      	ldr	r2, [pc, #316]	@ (80016d4 <MX_GPIO_Init+0x1a0>)
 8001596:	f043 0308 	orr.w	r3, r3, #8
 800159a:	6193      	str	r3, [r2, #24]
 800159c:	4b4d      	ldr	r3, [pc, #308]	@ (80016d4 <MX_GPIO_Init+0x1a0>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f003 0308 	and.w	r3, r3, #8
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_SIGNAL_GPIO_Port, NSS_SIGNAL_Pin, GPIO_PIN_SET);
 80015a8:	2201      	movs	r2, #1
 80015aa:	2110      	movs	r1, #16
 80015ac:	484a      	ldr	r0, [pc, #296]	@ (80016d8 <MX_GPIO_Init+0x1a4>)
 80015ae:	f001 fbdf 	bl	8002d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_SIGNAL_Pin|MOSFET_GATE_SENSOR_Pin|MOSFET_GATE_LORA_Pin|V_LED_Pin, GPIO_PIN_SET);
 80015b2:	2201      	movs	r2, #1
 80015b4:	f641 4102 	movw	r1, #7170	@ 0x1c02
 80015b8:	4848      	ldr	r0, [pc, #288]	@ (80016dc <MX_GPIO_Init+0x1a8>)
 80015ba:	f001 fbd9 	bl	8002d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INFO_LED_GPIO_Port, INFO_LED_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015c4:	4845      	ldr	r0, [pc, #276]	@ (80016dc <MX_GPIO_Init+0x1a8>)
 80015c6:	f001 fbd3 	bl	8002d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d0:	2303      	movs	r3, #3
 80015d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	4841      	ldr	r0, [pc, #260]	@ (80016e0 <MX_GPIO_Init+0x1ac>)
 80015dc:	f001 f998 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015e0:	2303      	movs	r3, #3
 80015e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e4:	2303      	movs	r3, #3
 80015e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	483d      	ldr	r0, [pc, #244]	@ (80016e4 <MX_GPIO_Init+0x1b0>)
 80015f0:	f001 f98e 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_11
 80015f4:	f649 130c 	movw	r3, #39180	@ 0x990c
 80015f8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015fa:	2303      	movs	r3, #3
 80015fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4619      	mov	r1, r3
 8001604:	4834      	ldr	r0, [pc, #208]	@ (80016d8 <MX_GPIO_Init+0x1a4>)
 8001606:	f001 f983 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_SIGNAL_Pin */
  GPIO_InitStruct.Pin = NSS_SIGNAL_Pin;
 800160a:	2310      	movs	r3, #16
 800160c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001612:	2301      	movs	r3, #1
 8001614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2302      	movs	r3, #2
 8001618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	482d      	ldr	r0, [pc, #180]	@ (80016d8 <MX_GPIO_Init+0x1a4>)
 8001622:	f001 f975 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_INT_Pin */
  GPIO_InitStruct.Pin = DIO0_INT_Pin;
 8001626:	2301      	movs	r3, #1
 8001628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800162a:	4b2f      	ldr	r3, [pc, #188]	@ (80016e8 <MX_GPIO_Init+0x1b4>)
 800162c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_INT_GPIO_Port, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	4828      	ldr	r0, [pc, #160]	@ (80016dc <MX_GPIO_Init+0x1a8>)
 800163a:	f001 f969 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_SIGNAL_Pin INFO_LED_Pin */
  GPIO_InitStruct.Pin = RST_SIGNAL_Pin|INFO_LED_Pin;
 800163e:	f248 0302 	movw	r3, #32770	@ 0x8002
 8001642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001648:	2302      	movs	r3, #2
 800164a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2302      	movs	r3, #2
 800164e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	4821      	ldr	r0, [pc, #132]	@ (80016dc <MX_GPIO_Init+0x1a8>)
 8001658:	f001 f95a 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB14 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3
 800165c:	f246 33fc 	movw	r3, #25596	@ 0x63fc
 8001660:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001662:	2303      	movs	r3, #3
 8001664:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	481b      	ldr	r0, [pc, #108]	@ (80016dc <MX_GPIO_Init+0x1a8>)
 800166e:	f001 f94f 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOSFET_GATE_SENSOR_Pin MOSFET_GATE_LORA_Pin */
  GPIO_InitStruct.Pin = MOSFET_GATE_SENSOR_Pin|MOSFET_GATE_LORA_Pin;
 8001672:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001678:	2301      	movs	r3, #1
 800167a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800167c:	2301      	movs	r3, #1
 800167e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2302      	movs	r3, #2
 8001682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	4814      	ldr	r0, [pc, #80]	@ (80016dc <MX_GPIO_Init+0x1a8>)
 800168c:	f001 f940 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : V_LED_Pin */
  GPIO_InitStruct.Pin = V_LED_Pin;
 8001690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(V_LED_GPIO_Port, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	480c      	ldr	r0, [pc, #48]	@ (80016dc <MX_GPIO_Init+0x1a8>)
 80016aa:	f001 f931 	bl	8002910 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 80016ae:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <MX_GPIO_Init+0x1b8>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80016ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80016bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016c4:	4a09      	ldr	r2, [pc, #36]	@ (80016ec <MX_GPIO_Init+0x1b8>)
 80016c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80016ca:	bf00      	nop
 80016cc:	3728      	adds	r7, #40	@ 0x28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40010800 	.word	0x40010800
 80016dc:	40010c00 	.word	0x40010c00
 80016e0:	40011000 	.word	0x40011000
 80016e4:	40011400 	.word	0x40011400
 80016e8:	10110000 	.word	0x10110000
 80016ec:	40010000 	.word	0x40010000

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f4:	b672      	cpsid	i
}
 80016f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <Error_Handler+0x8>

080016fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001702:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <HAL_MspInit+0x5c>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	4a14      	ldr	r2, [pc, #80]	@ (8001758 <HAL_MspInit+0x5c>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6193      	str	r3, [r2, #24]
 800170e:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <HAL_MspInit+0x5c>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <HAL_MspInit+0x5c>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a0e      	ldr	r2, [pc, #56]	@ (8001758 <HAL_MspInit+0x5c>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001724:	61d3      	str	r3, [r2, #28]
 8001726:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <HAL_MspInit+0x5c>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001732:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <HAL_MspInit+0x60>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	4a04      	ldr	r2, [pc, #16]	@ (800175c <HAL_MspInit+0x60>)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	40021000 	.word	0x40021000
 800175c:	40010000 	.word	0x40010000

08001760 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	@ 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0318 	add.w	r3, r7, #24
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a28      	ldr	r2, [pc, #160]	@ (800181c <HAL_ADC_MspInit+0xbc>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d122      	bne.n	80017c6 <HAL_ADC_MspInit+0x66>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001780:	4b27      	ldr	r3, [pc, #156]	@ (8001820 <HAL_ADC_MspInit+0xc0>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a26      	ldr	r2, [pc, #152]	@ (8001820 <HAL_ADC_MspInit+0xc0>)
 8001786:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b24      	ldr	r3, [pc, #144]	@ (8001820 <HAL_ADC_MspInit+0xc0>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001798:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <HAL_ADC_MspInit+0xc0>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a20      	ldr	r2, [pc, #128]	@ (8001820 <HAL_ADC_MspInit+0xc0>)
 800179e:	f043 0304 	orr.w	r3, r3, #4
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <HAL_ADC_MspInit+0xc0>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = VCC_BAT_Pin;
 80017b0:	2302      	movs	r3, #2
 80017b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b4:	2303      	movs	r3, #3
 80017b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCC_BAT_GPIO_Port, &GPIO_InitStruct);
 80017b8:	f107 0318 	add.w	r3, r7, #24
 80017bc:	4619      	mov	r1, r3
 80017be:	4819      	ldr	r0, [pc, #100]	@ (8001824 <HAL_ADC_MspInit+0xc4>)
 80017c0:	f001 f8a6 	bl	8002910 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 80017c4:	e026      	b.n	8001814 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a17      	ldr	r2, [pc, #92]	@ (8001828 <HAL_ADC_MspInit+0xc8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d121      	bne.n	8001814 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80017d0:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <HAL_ADC_MspInit+0xc0>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4a12      	ldr	r2, [pc, #72]	@ (8001820 <HAL_ADC_MspInit+0xc0>)
 80017d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017da:	6193      	str	r3, [r2, #24]
 80017dc:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <HAL_ADC_MspInit+0xc0>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001820 <HAL_ADC_MspInit+0xc0>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001820 <HAL_ADC_MspInit+0xc0>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001820 <HAL_ADC_MspInit+0xc0>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = V0_Pin;
 8001800:	2301      	movs	r3, #1
 8001802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001804:	2303      	movs	r3, #3
 8001806:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V0_GPIO_Port, &GPIO_InitStruct);
 8001808:	f107 0318 	add.w	r3, r7, #24
 800180c:	4619      	mov	r1, r3
 800180e:	4805      	ldr	r0, [pc, #20]	@ (8001824 <HAL_ADC_MspInit+0xc4>)
 8001810:	f001 f87e 	bl	8002910 <HAL_GPIO_Init>
}
 8001814:	bf00      	nop
 8001816:	3728      	adds	r7, #40	@ 0x28
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40012400 	.word	0x40012400
 8001820:	40021000 	.word	0x40021000
 8001824:	40010800 	.word	0x40010800
 8001828:	40012800 	.word	0x40012800

0800182c <HAL_ADC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a10      	ldr	r2, [pc, #64]	@ (800187c <HAL_ADC_MspDeInit+0x50>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d10a      	bne.n	8001854 <HAL_ADC_MspDeInit+0x28>
  {
    /* USER CODE BEGIN ADC1_MspDeInit 0 */

    /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 800183e:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <HAL_ADC_MspDeInit+0x54>)
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	4a0f      	ldr	r2, [pc, #60]	@ (8001880 <HAL_ADC_MspDeInit+0x54>)
 8001844:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001848:	6193      	str	r3, [r2, #24]

    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    HAL_GPIO_DeInit(VCC_BAT_GPIO_Port, VCC_BAT_Pin);
 800184a:	2102      	movs	r1, #2
 800184c:	480d      	ldr	r0, [pc, #52]	@ (8001884 <HAL_ADC_MspDeInit+0x58>)
 800184e:	f001 f9db 	bl	8002c08 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN ADC2_MspDeInit 1 */

    /* USER CODE END ADC2_MspDeInit 1 */
  }

}
 8001852:	e00e      	b.n	8001872 <HAL_ADC_MspDeInit+0x46>
  else if(hadc->Instance==ADC2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0b      	ldr	r2, [pc, #44]	@ (8001888 <HAL_ADC_MspDeInit+0x5c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d109      	bne.n	8001872 <HAL_ADC_MspDeInit+0x46>
    __HAL_RCC_ADC2_CLK_DISABLE();
 800185e:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <HAL_ADC_MspDeInit+0x54>)
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	4a07      	ldr	r2, [pc, #28]	@ (8001880 <HAL_ADC_MspDeInit+0x54>)
 8001864:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001868:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(V0_GPIO_Port, V0_Pin);
 800186a:	2101      	movs	r1, #1
 800186c:	4805      	ldr	r0, [pc, #20]	@ (8001884 <HAL_ADC_MspDeInit+0x58>)
 800186e:	f001 f9cb 	bl	8002c08 <HAL_GPIO_DeInit>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40012400 	.word	0x40012400
 8001880:	40021000 	.word	0x40021000
 8001884:	40010800 	.word	0x40010800
 8001888:	40012800 	.word	0x40012800

0800188c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0f      	ldr	r2, [pc, #60]	@ (80018d8 <HAL_RTC_MspInit+0x4c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d118      	bne.n	80018d0 <HAL_RTC_MspInit+0x44>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800189e:	f001 fa7f 	bl	8002da0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <HAL_RTC_MspInit+0x50>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a0d      	ldr	r2, [pc, #52]	@ (80018dc <HAL_RTC_MspInit+0x50>)
 80018a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80018ac:	61d3      	str	r3, [r2, #28]
 80018ae:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <HAL_RTC_MspInit+0x50>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018ba:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <HAL_RTC_MspInit+0x54>)
 80018bc:	2201      	movs	r2, #1
 80018be:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2100      	movs	r1, #0
 80018c4:	2003      	movs	r0, #3
 80018c6:	f000 ffec 	bl	80028a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80018ca:	2003      	movs	r0, #3
 80018cc:	f001 f805 	bl	80028da <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40002800 	.word	0x40002800
 80018dc:	40021000 	.word	0x40021000
 80018e0:	4242043c 	.word	0x4242043c

080018e4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a1b      	ldr	r2, [pc, #108]	@ (800196c <HAL_SPI_MspInit+0x88>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d12f      	bne.n	8001964 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001904:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <HAL_SPI_MspInit+0x8c>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a19      	ldr	r2, [pc, #100]	@ (8001970 <HAL_SPI_MspInit+0x8c>)
 800190a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b17      	ldr	r3, [pc, #92]	@ (8001970 <HAL_SPI_MspInit+0x8c>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191c:	4b14      	ldr	r3, [pc, #80]	@ (8001970 <HAL_SPI_MspInit+0x8c>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a13      	ldr	r2, [pc, #76]	@ (8001970 <HAL_SPI_MspInit+0x8c>)
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <HAL_SPI_MspInit+0x8c>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001934:	23a0      	movs	r3, #160	@ 0xa0
 8001936:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	4619      	mov	r1, r3
 8001946:	480b      	ldr	r0, [pc, #44]	@ (8001974 <HAL_SPI_MspInit+0x90>)
 8001948:	f000 ffe2 	bl	8002910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800194c:	2340      	movs	r3, #64	@ 0x40
 800194e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	4619      	mov	r1, r3
 800195e:	4805      	ldr	r0, [pc, #20]	@ (8001974 <HAL_SPI_MspInit+0x90>)
 8001960:	f000 ffd6 	bl	8002910 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001964:	bf00      	nop
 8001966:	3720      	adds	r7, #32
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40013000 	.word	0x40013000
 8001970:	40021000 	.word	0x40021000
 8001974:	40010800 	.word	0x40010800

08001978 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001988:	d10b      	bne.n	80019a2 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800198a:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <HAL_TIM_Base_MspInit+0x34>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	4a07      	ldr	r2, [pc, #28]	@ (80019ac <HAL_TIM_Base_MspInit+0x34>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	61d3      	str	r3, [r2, #28]
 8001996:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <HAL_TIM_Base_MspInit+0x34>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80019a2:	bf00      	nop
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	40021000 	.word	0x40021000

080019b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a1c      	ldr	r2, [pc, #112]	@ (8001a3c <HAL_UART_MspInit+0x8c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d131      	bne.n	8001a34 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a40 <HAL_UART_MspInit+0x90>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001a40 <HAL_UART_MspInit+0x90>)
 80019d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019da:	6193      	str	r3, [r2, #24]
 80019dc:	4b18      	ldr	r3, [pc, #96]	@ (8001a40 <HAL_UART_MspInit+0x90>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e8:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <HAL_UART_MspInit+0x90>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a14      	ldr	r2, [pc, #80]	@ (8001a40 <HAL_UART_MspInit+0x90>)
 80019ee:	f043 0304 	orr.w	r3, r3, #4
 80019f2:	6193      	str	r3, [r2, #24]
 80019f4:	4b12      	ldr	r3, [pc, #72]	@ (8001a40 <HAL_UART_MspInit+0x90>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	4619      	mov	r1, r3
 8001a14:	480b      	ldr	r0, [pc, #44]	@ (8001a44 <HAL_UART_MspInit+0x94>)
 8001a16:	f000 ff7b 	bl	8002910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4805      	ldr	r0, [pc, #20]	@ (8001a44 <HAL_UART_MspInit+0x94>)
 8001a30:	f000 ff6e 	bl	8002910 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a34:	bf00      	nop
 8001a36:	3720      	adds	r7, #32
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40013800 	.word	0x40013800
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40010800 	.word	0x40010800

08001a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <NMI_Handler+0x4>

08001a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <HardFault_Handler+0x4>

08001a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <MemManage_Handler+0x4>

08001a60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <BusFault_Handler+0x4>

08001a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <UsageFault_Handler+0x4>

08001a70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a98:	f000 f8b4 	bl	8001c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8001aa4:	4802      	ldr	r0, [pc, #8]	@ (8001ab0 <RTC_IRQHandler+0x10>)
 8001aa6:	f002 fd87 	bl	80045b8 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//	HAL_Delay(50);
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  /* USER CODE END RTC_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200000d8 	.word	0x200000d8

08001ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001abc:	4a14      	ldr	r2, [pc, #80]	@ (8001b10 <_sbrk+0x5c>)
 8001abe:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <_sbrk+0x60>)
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac8:	4b13      	ldr	r3, [pc, #76]	@ (8001b18 <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d102      	bne.n	8001ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <_sbrk+0x64>)
 8001ad2:	4a12      	ldr	r2, [pc, #72]	@ (8001b1c <_sbrk+0x68>)
 8001ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad6:	4b10      	ldr	r3, [pc, #64]	@ (8001b18 <_sbrk+0x64>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d207      	bcs.n	8001af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae4:	f004 ff38 	bl	8006958 <__errno>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	220c      	movs	r2, #12
 8001aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295
 8001af2:	e009      	b.n	8001b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af4:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001afa:	4b07      	ldr	r3, [pc, #28]	@ (8001b18 <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	4a05      	ldr	r2, [pc, #20]	@ (8001b18 <_sbrk+0x64>)
 8001b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b06:	68fb      	ldr	r3, [r7, #12]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20002800 	.word	0x20002800
 8001b14:	00000400 	.word	0x00000400
 8001b18:	200001f8 	.word	0x200001f8
 8001b1c:	20000380 	.word	0x20000380

08001b20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b2c:	f7ff fff8 	bl	8001b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b30:	480b      	ldr	r0, [pc, #44]	@ (8001b60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b32:	490c      	ldr	r1, [pc, #48]	@ (8001b64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b34:	4a0c      	ldr	r2, [pc, #48]	@ (8001b68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b38:	e002      	b.n	8001b40 <LoopCopyDataInit>

08001b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3e:	3304      	adds	r3, #4

08001b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b44:	d3f9      	bcc.n	8001b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b46:	4a09      	ldr	r2, [pc, #36]	@ (8001b6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b48:	4c09      	ldr	r4, [pc, #36]	@ (8001b70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b4c:	e001      	b.n	8001b52 <LoopFillZerobss>

08001b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b50:	3204      	adds	r2, #4

08001b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b54:	d3fb      	bcc.n	8001b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b56:	f004 ff05 	bl	8006964 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b5a:	f7ff f9e9 	bl	8000f30 <main>
  bx lr
 8001b5e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b64:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001b68:	08007508 	.word	0x08007508
  ldr r2, =_sbss
 8001b6c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001b70:	20000380 	.word	0x20000380

08001b74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC1_2_IRQHandler>
	...

08001b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ba0 <HAL_Init+0x28>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a07      	ldr	r2, [pc, #28]	@ (8001ba0 <HAL_Init+0x28>)
 8001b82:	f043 0310 	orr.w	r3, r3, #16
 8001b86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b88:	2003      	movs	r0, #3
 8001b8a:	f000 fe7f 	bl	800288c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8e:	200f      	movs	r0, #15
 8001b90:	f000 f808 	bl	8001ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b94:	f7ff fdb2 	bl	80016fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40022000 	.word	0x40022000

08001ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bac:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <HAL_InitTick+0x54>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b12      	ldr	r3, [pc, #72]	@ (8001bfc <HAL_InitTick+0x58>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 fe97 	bl	80028f6 <HAL_SYSTICK_Config>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00e      	b.n	8001bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b0f      	cmp	r3, #15
 8001bd6:	d80a      	bhi.n	8001bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f000 fe5f 	bl	80028a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be4:	4a06      	ldr	r2, [pc, #24]	@ (8001c00 <HAL_InitTick+0x5c>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	e000      	b.n	8001bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	20000004 	.word	0x20000004

08001c04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c08:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <HAL_IncTick+0x1c>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b05      	ldr	r3, [pc, #20]	@ (8001c24 <HAL_IncTick+0x20>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	4a03      	ldr	r2, [pc, #12]	@ (8001c24 <HAL_IncTick+0x20>)
 8001c16:	6013      	str	r3, [r2, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	20000008 	.word	0x20000008
 8001c24:	200001fc 	.word	0x200001fc

08001c28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c2c:	4b02      	ldr	r3, [pc, #8]	@ (8001c38 <HAL_GetTick+0x10>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	200001fc 	.word	0x200001fc

08001c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff fff0 	bl	8001c28 <HAL_GetTick>
 8001c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c54:	d005      	beq.n	8001c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c56:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <HAL_Delay+0x44>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c62:	bf00      	nop
 8001c64:	f7ff ffe0 	bl	8001c28 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d8f7      	bhi.n	8001c64 <HAL_Delay+0x28>
  {
  }
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000008 	.word	0x20000008

08001c84 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8001c88:	4b02      	ldr	r3, [pc, #8]	@ (8001c94 <HAL_GetUIDw0+0x10>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	1ffff7e8 	.word	0x1ffff7e8

08001c98 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001c9c:	4b02      	ldr	r3, [pc, #8]	@ (8001ca8 <HAL_GetUIDw1+0x10>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	1ffff7ec 	.word	0x1ffff7ec

08001cac <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001cb0:	4b02      	ldr	r3, [pc, #8]	@ (8001cbc <HAL_GetUIDw2+0x10>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	1ffff7f0 	.word	0x1ffff7f0

08001cc0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e0be      	b.n	8001e60 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d109      	bne.n	8001d04 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff fd2e 	bl	8001760 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 fcb3 	bl	8002670 <ADC_ConversionStop_Disable>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f040 8099 	bne.w	8001e4e <HAL_ADC_Init+0x18e>
 8001d1c:	7dfb      	ldrb	r3, [r7, #23]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f040 8095 	bne.w	8001e4e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d28:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d2c:	f023 0302 	bic.w	r3, r3, #2
 8001d30:	f043 0202 	orr.w	r2, r3, #2
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d40:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	7b1b      	ldrb	r3, [r3, #12]
 8001d46:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d48:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d58:	d003      	beq.n	8001d62 <HAL_ADC_Init+0xa2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d102      	bne.n	8001d68 <HAL_ADC_Init+0xa8>
 8001d62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d66:	e000      	b.n	8001d6a <HAL_ADC_Init+0xaa>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	7d1b      	ldrb	r3, [r3, #20]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d119      	bne.n	8001dac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	7b1b      	ldrb	r3, [r3, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	035a      	lsls	r2, r3, #13
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	e00b      	b.n	8001dac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d98:	f043 0220 	orr.w	r2, r3, #32
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da4:	f043 0201 	orr.w	r2, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	4b28      	ldr	r3, [pc, #160]	@ (8001e68 <HAL_ADC_Init+0x1a8>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	68b9      	ldr	r1, [r7, #8]
 8001dd0:	430b      	orrs	r3, r1
 8001dd2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ddc:	d003      	beq.n	8001de6 <HAL_ADC_Init+0x126>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d104      	bne.n	8001df0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	051b      	lsls	r3, r3, #20
 8001dee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	4b18      	ldr	r3, [pc, #96]	@ (8001e6c <HAL_ADC_Init+0x1ac>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d10b      	bne.n	8001e2c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1e:	f023 0303 	bic.w	r3, r3, #3
 8001e22:	f043 0201 	orr.w	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e2a:	e018      	b.n	8001e5e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e30:	f023 0312 	bic.w	r3, r3, #18
 8001e34:	f043 0210 	orr.w	r2, r3, #16
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e40:	f043 0201 	orr.w	r2, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e4c:	e007      	b.n	8001e5e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e52:	f043 0210 	orr.w	r2, r3, #16
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	ffe1f7fd 	.word	0xffe1f7fd
 8001e6c:	ff1f0efe 	.word	0xff1f0efe

08001e70 <HAL_ADC_DeInit>:
  *         function HAL_ADC_MspDeInit().
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_ADC_DeInit+0x16>
  {
     return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e0ad      	b.n	8001fe2 <HAL_ADC_DeInit+0x172>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8a:	f043 0202 	orr.w	r2, r3, #2
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 fbec 	bl	8002670 <ADC_ConversionStop_Disable>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	73fb      	strb	r3, [r7, #15]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status == HAL_OK)
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f040 809a 	bne.w	8001fd8 <HAL_ADC_DeInit+0x168>




    /* Reset register SR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 021f 	mvn.w	r2, #31
 8001eac:	601a      	str	r2, [r3, #0]
                                ADC_FLAG_JSTRT | ADC_FLAG_STRT));
                         
    /* Reset register CR1 */
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6859      	ldr	r1, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b4c      	ldr	r3, [pc, #304]	@ (8001fec <HAL_ADC_DeInit+0x17c>)
 8001eba:	400b      	ands	r3, r1
 8001ebc:	6053      	str	r3, [r2, #4]
                                    ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
                                    ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
                                    ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
    
    /* Reset register CR2 */
    CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6899      	ldr	r1, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b49      	ldr	r3, [pc, #292]	@ (8001ff0 <HAL_ADC_DeInit+0x180>)
 8001eca:	400b      	ands	r3, r1
 8001ecc:	6093      	str	r3, [r2, #8]
                                    ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
                                    ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |          
                                    ADC_CR2_ADON                                          ));
    
    /* Reset register SMPR1 */
    CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8001edc:	60da      	str	r2, [r3, #12]
                                      ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
                                      ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10                    ));
    
    /* Reset register SMPR2 */
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8001eec:	611a      	str	r2, [r3, #16]
                                      ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
                                      ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
                                      ADC_SMPR2_SMP0                                    ));

    /* Reset register JOFR1 */
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001efc:	f023 030f 	bic.w	r3, r3, #15
 8001f00:	6153      	str	r3, [r2, #20]
    /* Reset register JOFR2 */
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001f10:	f023 030f 	bic.w	r3, r3, #15
 8001f14:	6193      	str	r3, [r2, #24]
    /* Reset register JOFR3 */
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001f24:	f023 030f 	bic.w	r3, r3, #15
 8001f28:	61d3      	str	r3, [r2, #28]
    /* Reset register JOFR4 */
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001f38:	f023 030f 	bic.w	r3, r3, #15
 8001f3c:	6213      	str	r3, [r2, #32]
    
    /* Reset register HTR */
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001f4c:	f023 030f 	bic.w	r3, r3, #15
 8001f50:	6253      	str	r3, [r2, #36]	@ 0x24
    /* Reset register LTR */
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001f60:	f023 030f 	bic.w	r3, r3, #15
 8001f64:	6293      	str	r3, [r2, #40]	@ 0x28
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8001f74:	62da      	str	r2, [r3, #44]	@ 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8001f84:	62da      	str	r2, [r3, #44]	@ 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR2 */
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8001f94:	631a      	str	r2, [r3, #48]	@ 0x30
                                    ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
    
    /* Reset register SQR3 */
    CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8001fa4:	635a      	str	r2, [r3, #52]	@ 0x34
                                    ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	0d9b      	lsrs	r3, r3, #22
 8001fb2:	059b      	lsls	r3, r3, #22
 8001fb4:	6393      	str	r3, [r2, #56]	@ 0x38
                                    ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
                                    ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	0d9b      	lsrs	r3, r3, #22
 8001fc2:	059b      	lsls	r3, r3, #22
 8001fc4:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff fc30 	bl	800182c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET; 
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	629a      	str	r2, [r3, #40]	@ 0x28
  
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	ff3f0000 	.word	0xff3f0000
 8001ff0:	ff0106f0 	.word	0xff0106f0

08001ff4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_ADC_Start+0x1a>
 800200a:	2302      	movs	r3, #2
 800200c:	e098      	b.n	8002140 <HAL_ADC_Start+0x14c>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 fad0 	bl	80025bc <ADC_Enable>
 800201c:	4603      	mov	r3, r0
 800201e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	2b00      	cmp	r3, #0
 8002024:	f040 8087 	bne.w	8002136 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002030:	f023 0301 	bic.w	r3, r3, #1
 8002034:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a41      	ldr	r2, [pc, #260]	@ (8002148 <HAL_ADC_Start+0x154>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d105      	bne.n	8002052 <HAL_ADC_Start+0x5e>
 8002046:	4b41      	ldr	r3, [pc, #260]	@ (800214c <HAL_ADC_Start+0x158>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d115      	bne.n	800207e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002056:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002068:	2b00      	cmp	r3, #0
 800206a:	d026      	beq.n	80020ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002070:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002074:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800207c:	e01d      	b.n	80020ba <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002082:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a2f      	ldr	r2, [pc, #188]	@ (800214c <HAL_ADC_Start+0x158>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d004      	beq.n	800209e <HAL_ADC_Start+0xaa>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a2b      	ldr	r2, [pc, #172]	@ (8002148 <HAL_ADC_Start+0x154>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d10d      	bne.n	80020ba <HAL_ADC_Start+0xc6>
 800209e:	4b2b      	ldr	r3, [pc, #172]	@ (800214c <HAL_ADC_Start+0x158>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d007      	beq.n	80020ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d006      	beq.n	80020d4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ca:	f023 0206 	bic.w	r2, r3, #6
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020d2:	e002      	b.n	80020da <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f06f 0202 	mvn.w	r2, #2
 80020ea:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80020f6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80020fa:	d113      	bne.n	8002124 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002100:	4a11      	ldr	r2, [pc, #68]	@ (8002148 <HAL_ADC_Start+0x154>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d105      	bne.n	8002112 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002106:	4b11      	ldr	r3, [pc, #68]	@ (800214c <HAL_ADC_Start+0x158>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800210e:	2b00      	cmp	r3, #0
 8002110:	d108      	bne.n	8002124 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	e00c      	b.n	800213e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	e003      	b.n	800213e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800213e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40012800 	.word	0x40012800
 800214c:	40012400 	.word	0x40012400

08002150 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_ADC_Stop+0x1a>
 8002166:	2302      	movs	r3, #2
 8002168:	e01a      	b.n	80021a0 <HAL_ADC_Stop+0x50>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 fa7c 	bl	8002670 <ADC_ConversionStop_Disable>
 8002178:	4603      	mov	r3, r0
 800217a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d109      	bne.n	8002196 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002186:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800218a:	f023 0301 	bic.w	r3, r3, #1
 800218e:	f043 0201 	orr.w	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800219e:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021a8:	b590      	push	{r4, r7, lr}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80021be:	f7ff fd33 	bl	8001c28 <HAL_GetTick>
 80021c2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00b      	beq.n	80021ea <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d6:	f043 0220 	orr.w	r2, r3, #32
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e0d3      	b.n	8002392 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d131      	bne.n	800225c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002202:	2b00      	cmp	r3, #0
 8002204:	d12a      	bne.n	800225c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002206:	e021      	b.n	800224c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220e:	d01d      	beq.n	800224c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d007      	beq.n	8002226 <HAL_ADC_PollForConversion+0x7e>
 8002216:	f7ff fd07 	bl	8001c28 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d212      	bcs.n	800224c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10b      	bne.n	800224c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002238:	f043 0204 	orr.w	r2, r3, #4
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e0a2      	b.n	8002392 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0d6      	beq.n	8002208 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800225a:	e070      	b.n	800233e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800225c:	4b4f      	ldr	r3, [pc, #316]	@ (800239c <HAL_ADC_PollForConversion+0x1f4>)
 800225e:	681c      	ldr	r4, [r3, #0]
 8002260:	2002      	movs	r0, #2
 8002262:	f001 fa87 	bl	8003774 <HAL_RCCEx_GetPeriphCLKFreq>
 8002266:	4603      	mov	r3, r0
 8002268:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6919      	ldr	r1, [r3, #16]
 8002272:	4b4b      	ldr	r3, [pc, #300]	@ (80023a0 <HAL_ADC_PollForConversion+0x1f8>)
 8002274:	400b      	ands	r3, r1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d118      	bne.n	80022ac <HAL_ADC_PollForConversion+0x104>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68d9      	ldr	r1, [r3, #12]
 8002280:	4b48      	ldr	r3, [pc, #288]	@ (80023a4 <HAL_ADC_PollForConversion+0x1fc>)
 8002282:	400b      	ands	r3, r1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d111      	bne.n	80022ac <HAL_ADC_PollForConversion+0x104>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6919      	ldr	r1, [r3, #16]
 800228e:	4b46      	ldr	r3, [pc, #280]	@ (80023a8 <HAL_ADC_PollForConversion+0x200>)
 8002290:	400b      	ands	r3, r1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d108      	bne.n	80022a8 <HAL_ADC_PollForConversion+0x100>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68d9      	ldr	r1, [r3, #12]
 800229c:	4b43      	ldr	r3, [pc, #268]	@ (80023ac <HAL_ADC_PollForConversion+0x204>)
 800229e:	400b      	ands	r3, r1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_ADC_PollForConversion+0x100>
 80022a4:	2314      	movs	r3, #20
 80022a6:	e020      	b.n	80022ea <HAL_ADC_PollForConversion+0x142>
 80022a8:	2329      	movs	r3, #41	@ 0x29
 80022aa:	e01e      	b.n	80022ea <HAL_ADC_PollForConversion+0x142>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6919      	ldr	r1, [r3, #16]
 80022b2:	4b3d      	ldr	r3, [pc, #244]	@ (80023a8 <HAL_ADC_PollForConversion+0x200>)
 80022b4:	400b      	ands	r3, r1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_ADC_PollForConversion+0x120>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68d9      	ldr	r1, [r3, #12]
 80022c0:	4b3a      	ldr	r3, [pc, #232]	@ (80023ac <HAL_ADC_PollForConversion+0x204>)
 80022c2:	400b      	ands	r3, r1
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00d      	beq.n	80022e4 <HAL_ADC_PollForConversion+0x13c>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6919      	ldr	r1, [r3, #16]
 80022ce:	4b38      	ldr	r3, [pc, #224]	@ (80023b0 <HAL_ADC_PollForConversion+0x208>)
 80022d0:	400b      	ands	r3, r1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d108      	bne.n	80022e8 <HAL_ADC_PollForConversion+0x140>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68d9      	ldr	r1, [r3, #12]
 80022dc:	4b34      	ldr	r3, [pc, #208]	@ (80023b0 <HAL_ADC_PollForConversion+0x208>)
 80022de:	400b      	ands	r3, r1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_ADC_PollForConversion+0x140>
 80022e4:	2354      	movs	r3, #84	@ 0x54
 80022e6:	e000      	b.n	80022ea <HAL_ADC_PollForConversion+0x142>
 80022e8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80022ea:	fb02 f303 	mul.w	r3, r2, r3
 80022ee:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80022f0:	e021      	b.n	8002336 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f8:	d01a      	beq.n	8002330 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_ADC_PollForConversion+0x168>
 8002300:	f7ff fc92 	bl	8001c28 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d20f      	bcs.n	8002330 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	429a      	cmp	r2, r3
 8002316:	d90b      	bls.n	8002330 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231c:	f043 0204 	orr.w	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e030      	b.n	8002392 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3301      	adds	r3, #1
 8002334:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	429a      	cmp	r2, r3
 800233c:	d8d9      	bhi.n	80022f2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f06f 0212 	mvn.w	r2, #18
 8002346:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800235e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002362:	d115      	bne.n	8002390 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002368:	2b00      	cmp	r3, #0
 800236a:	d111      	bne.n	8002390 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002370:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d105      	bne.n	8002390 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002388:	f043 0201 	orr.w	r2, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	bd90      	pop	{r4, r7, pc}
 800239a:	bf00      	nop
 800239c:	20000000 	.word	0x20000000
 80023a0:	24924924 	.word	0x24924924
 80023a4:	00924924 	.word	0x00924924
 80023a8:	12492492 	.word	0x12492492
 80023ac:	00492492 	.word	0x00492492
 80023b0:	00249249 	.word	0x00249249

080023b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x20>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e0dc      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1da>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b06      	cmp	r3, #6
 80023fa:	d81c      	bhi.n	8002436 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	3b05      	subs	r3, #5
 800240e:	221f      	movs	r2, #31
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	4019      	ands	r1, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	3b05      	subs	r3, #5
 8002428:	fa00 f203 	lsl.w	r2, r0, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	635a      	str	r2, [r3, #52]	@ 0x34
 8002434:	e03c      	b.n	80024b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b0c      	cmp	r3, #12
 800243c:	d81c      	bhi.n	8002478 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	3b23      	subs	r3, #35	@ 0x23
 8002450:	221f      	movs	r2, #31
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	4019      	ands	r1, r3
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3b23      	subs	r3, #35	@ 0x23
 800246a:	fa00 f203 	lsl.w	r2, r0, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	631a      	str	r2, [r3, #48]	@ 0x30
 8002476:	e01b      	b.n	80024b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	3b41      	subs	r3, #65	@ 0x41
 800248a:	221f      	movs	r2, #31
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	4019      	ands	r1, r3
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6818      	ldr	r0, [r3, #0]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	3b41      	subs	r3, #65	@ 0x41
 80024a4:	fa00 f203 	lsl.w	r2, r0, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b09      	cmp	r3, #9
 80024b6:	d91c      	bls.n	80024f2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68d9      	ldr	r1, [r3, #12]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4613      	mov	r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4413      	add	r3, r2
 80024c8:	3b1e      	subs	r3, #30
 80024ca:	2207      	movs	r2, #7
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	4019      	ands	r1, r3
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	6898      	ldr	r0, [r3, #8]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4613      	mov	r3, r2
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	4413      	add	r3, r2
 80024e2:	3b1e      	subs	r3, #30
 80024e4:	fa00 f203 	lsl.w	r2, r0, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	60da      	str	r2, [r3, #12]
 80024f0:	e019      	b.n	8002526 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6919      	ldr	r1, [r3, #16]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4613      	mov	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	4413      	add	r3, r2
 8002502:	2207      	movs	r2, #7
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	4019      	ands	r1, r3
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	6898      	ldr	r0, [r3, #8]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	fa00 f203 	lsl.w	r2, r0, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b10      	cmp	r3, #16
 800252c:	d003      	beq.n	8002536 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002532:	2b11      	cmp	r3, #17
 8002534:	d132      	bne.n	800259c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a1d      	ldr	r2, [pc, #116]	@ (80025b0 <HAL_ADC_ConfigChannel+0x1e4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d125      	bne.n	800258c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d126      	bne.n	800259c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800255c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b10      	cmp	r3, #16
 8002564:	d11a      	bne.n	800259c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002566:	4b13      	ldr	r3, [pc, #76]	@ (80025b4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a13      	ldr	r2, [pc, #76]	@ (80025b8 <HAL_ADC_ConfigChannel+0x1ec>)
 800256c:	fba2 2303 	umull	r2, r3, r2, r3
 8002570:	0c9a      	lsrs	r2, r3, #18
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800257c:	e002      	b.n	8002584 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	3b01      	subs	r3, #1
 8002582:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f9      	bne.n	800257e <HAL_ADC_ConfigChannel+0x1b2>
 800258a:	e007      	b.n	800259c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002590:	f043 0220 	orr.w	r2, r3, #32
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	40012400 	.word	0x40012400
 80025b4:	20000000 	.word	0x20000000
 80025b8:	431bde83 	.word	0x431bde83

080025bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d040      	beq.n	800265c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f042 0201 	orr.w	r2, r2, #1
 80025e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002668 <ADC_Enable+0xac>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a1f      	ldr	r2, [pc, #124]	@ (800266c <ADC_Enable+0xb0>)
 80025f0:	fba2 2303 	umull	r2, r3, r2, r3
 80025f4:	0c9b      	lsrs	r3, r3, #18
 80025f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025f8:	e002      	b.n	8002600 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f9      	bne.n	80025fa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002606:	f7ff fb0f 	bl	8001c28 <HAL_GetTick>
 800260a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800260c:	e01f      	b.n	800264e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800260e:	f7ff fb0b 	bl	8001c28 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d918      	bls.n	800264e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b01      	cmp	r3, #1
 8002628:	d011      	beq.n	800264e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262e:	f043 0210 	orr.w	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e007      	b.n	800265e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d1d8      	bne.n	800260e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000000 	.word	0x20000000
 800266c:	431bde83 	.word	0x431bde83

08002670 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b01      	cmp	r3, #1
 8002688:	d12e      	bne.n	80026e8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0201 	bic.w	r2, r2, #1
 8002698:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800269a:	f7ff fac5 	bl	8001c28 <HAL_GetTick>
 800269e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026a0:	e01b      	b.n	80026da <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026a2:	f7ff fac1 	bl	8001c28 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d914      	bls.n	80026da <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d10d      	bne.n	80026da <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c2:	f043 0210 	orr.w	r2, r3, #16
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ce:	f043 0201 	orr.w	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e007      	b.n	80026ea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d0dc      	beq.n	80026a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002704:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <__NVIC_SetPriorityGrouping+0x44>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002710:	4013      	ands	r3, r2
 8002712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800271c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002726:	4a04      	ldr	r2, [pc, #16]	@ (8002738 <__NVIC_SetPriorityGrouping+0x44>)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	60d3      	str	r3, [r2, #12]
}
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002740:	4b04      	ldr	r3, [pc, #16]	@ (8002754 <__NVIC_GetPriorityGrouping+0x18>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	f003 0307 	and.w	r3, r3, #7
}
 800274a:	4618      	mov	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	2b00      	cmp	r3, #0
 8002768:	db0b      	blt.n	8002782 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	f003 021f 	and.w	r2, r3, #31
 8002770:	4906      	ldr	r1, [pc, #24]	@ (800278c <__NVIC_EnableIRQ+0x34>)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	2001      	movs	r0, #1
 800277a:	fa00 f202 	lsl.w	r2, r0, r2
 800277e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	e000e100 	.word	0xe000e100

08002790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	6039      	str	r1, [r7, #0]
 800279a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	db0a      	blt.n	80027ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	490c      	ldr	r1, [pc, #48]	@ (80027dc <__NVIC_SetPriority+0x4c>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	0112      	lsls	r2, r2, #4
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	440b      	add	r3, r1
 80027b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b8:	e00a      	b.n	80027d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4908      	ldr	r1, [pc, #32]	@ (80027e0 <__NVIC_SetPriority+0x50>)
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	3b04      	subs	r3, #4
 80027c8:	0112      	lsls	r2, r2, #4
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	440b      	add	r3, r1
 80027ce:	761a      	strb	r2, [r3, #24]
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000e100 	.word	0xe000e100
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	@ 0x24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f1c3 0307 	rsb	r3, r3, #7
 80027fe:	2b04      	cmp	r3, #4
 8002800:	bf28      	it	cs
 8002802:	2304      	movcs	r3, #4
 8002804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3304      	adds	r3, #4
 800280a:	2b06      	cmp	r3, #6
 800280c:	d902      	bls.n	8002814 <NVIC_EncodePriority+0x30>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3b03      	subs	r3, #3
 8002812:	e000      	b.n	8002816 <NVIC_EncodePriority+0x32>
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	f04f 32ff 	mov.w	r2, #4294967295
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	401a      	ands	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800282c:	f04f 31ff 	mov.w	r1, #4294967295
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fa01 f303 	lsl.w	r3, r1, r3
 8002836:	43d9      	mvns	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	4313      	orrs	r3, r2
         );
}
 800283e:	4618      	mov	r0, r3
 8002840:	3724      	adds	r7, #36	@ 0x24
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002858:	d301      	bcc.n	800285e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285a:	2301      	movs	r3, #1
 800285c:	e00f      	b.n	800287e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800285e:	4a0a      	ldr	r2, [pc, #40]	@ (8002888 <SysTick_Config+0x40>)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002866:	210f      	movs	r1, #15
 8002868:	f04f 30ff 	mov.w	r0, #4294967295
 800286c:	f7ff ff90 	bl	8002790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002870:	4b05      	ldr	r3, [pc, #20]	@ (8002888 <SysTick_Config+0x40>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002876:	4b04      	ldr	r3, [pc, #16]	@ (8002888 <SysTick_Config+0x40>)
 8002878:	2207      	movs	r2, #7
 800287a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	e000e010 	.word	0xe000e010

0800288c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ff2d 	bl	80026f4 <__NVIC_SetPriorityGrouping>
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b4:	f7ff ff42 	bl	800273c <__NVIC_GetPriorityGrouping>
 80028b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	6978      	ldr	r0, [r7, #20]
 80028c0:	f7ff ff90 	bl	80027e4 <NVIC_EncodePriority>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff5f 	bl	8002790 <__NVIC_SetPriority>
}
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff35 	bl	8002758 <__NVIC_EnableIRQ>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ffa2 	bl	8002848 <SysTick_Config>
 8002904:	4603      	mov	r3, r0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002910:	b480      	push	{r7}
 8002912:	b08b      	sub	sp, #44	@ 0x2c
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800291a:	2300      	movs	r3, #0
 800291c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800291e:	2300      	movs	r3, #0
 8002920:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002922:	e161      	b.n	8002be8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002924:	2201      	movs	r2, #1
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	429a      	cmp	r2, r3
 800293e:	f040 8150 	bne.w	8002be2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4a97      	ldr	r2, [pc, #604]	@ (8002ba4 <HAL_GPIO_Init+0x294>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d05e      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 800294c:	4a95      	ldr	r2, [pc, #596]	@ (8002ba4 <HAL_GPIO_Init+0x294>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d875      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 8002952:	4a95      	ldr	r2, [pc, #596]	@ (8002ba8 <HAL_GPIO_Init+0x298>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d058      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 8002958:	4a93      	ldr	r2, [pc, #588]	@ (8002ba8 <HAL_GPIO_Init+0x298>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d86f      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 800295e:	4a93      	ldr	r2, [pc, #588]	@ (8002bac <HAL_GPIO_Init+0x29c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d052      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 8002964:	4a91      	ldr	r2, [pc, #580]	@ (8002bac <HAL_GPIO_Init+0x29c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d869      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 800296a:	4a91      	ldr	r2, [pc, #580]	@ (8002bb0 <HAL_GPIO_Init+0x2a0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d04c      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 8002970:	4a8f      	ldr	r2, [pc, #572]	@ (8002bb0 <HAL_GPIO_Init+0x2a0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d863      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 8002976:	4a8f      	ldr	r2, [pc, #572]	@ (8002bb4 <HAL_GPIO_Init+0x2a4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d046      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 800297c:	4a8d      	ldr	r2, [pc, #564]	@ (8002bb4 <HAL_GPIO_Init+0x2a4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d85d      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 8002982:	2b12      	cmp	r3, #18
 8002984:	d82a      	bhi.n	80029dc <HAL_GPIO_Init+0xcc>
 8002986:	2b12      	cmp	r3, #18
 8002988:	d859      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 800298a:	a201      	add	r2, pc, #4	@ (adr r2, 8002990 <HAL_GPIO_Init+0x80>)
 800298c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002990:	08002a0b 	.word	0x08002a0b
 8002994:	080029e5 	.word	0x080029e5
 8002998:	080029f7 	.word	0x080029f7
 800299c:	08002a39 	.word	0x08002a39
 80029a0:	08002a3f 	.word	0x08002a3f
 80029a4:	08002a3f 	.word	0x08002a3f
 80029a8:	08002a3f 	.word	0x08002a3f
 80029ac:	08002a3f 	.word	0x08002a3f
 80029b0:	08002a3f 	.word	0x08002a3f
 80029b4:	08002a3f 	.word	0x08002a3f
 80029b8:	08002a3f 	.word	0x08002a3f
 80029bc:	08002a3f 	.word	0x08002a3f
 80029c0:	08002a3f 	.word	0x08002a3f
 80029c4:	08002a3f 	.word	0x08002a3f
 80029c8:	08002a3f 	.word	0x08002a3f
 80029cc:	08002a3f 	.word	0x08002a3f
 80029d0:	08002a3f 	.word	0x08002a3f
 80029d4:	080029ed 	.word	0x080029ed
 80029d8:	08002a01 	.word	0x08002a01
 80029dc:	4a76      	ldr	r2, [pc, #472]	@ (8002bb8 <HAL_GPIO_Init+0x2a8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029e2:	e02c      	b.n	8002a3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	623b      	str	r3, [r7, #32]
          break;
 80029ea:	e029      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	3304      	adds	r3, #4
 80029f2:	623b      	str	r3, [r7, #32]
          break;
 80029f4:	e024      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	3308      	adds	r3, #8
 80029fc:	623b      	str	r3, [r7, #32]
          break;
 80029fe:	e01f      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	330c      	adds	r3, #12
 8002a06:	623b      	str	r3, [r7, #32]
          break;
 8002a08:	e01a      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d102      	bne.n	8002a18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a12:	2304      	movs	r3, #4
 8002a14:	623b      	str	r3, [r7, #32]
          break;
 8002a16:	e013      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a20:	2308      	movs	r3, #8
 8002a22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	611a      	str	r2, [r3, #16]
          break;
 8002a2a:	e009      	b.n	8002a40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a2c:	2308      	movs	r3, #8
 8002a2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	615a      	str	r2, [r3, #20]
          break;
 8002a36:	e003      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	623b      	str	r3, [r7, #32]
          break;
 8002a3c:	e000      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          break;
 8002a3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	2bff      	cmp	r3, #255	@ 0xff
 8002a44:	d801      	bhi.n	8002a4a <HAL_GPIO_Init+0x13a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	e001      	b.n	8002a4e <HAL_GPIO_Init+0x13e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	2bff      	cmp	r3, #255	@ 0xff
 8002a54:	d802      	bhi.n	8002a5c <HAL_GPIO_Init+0x14c>
 8002a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	e002      	b.n	8002a62 <HAL_GPIO_Init+0x152>
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5e:	3b08      	subs	r3, #8
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	210f      	movs	r1, #15
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	401a      	ands	r2, r3
 8002a74:	6a39      	ldr	r1, [r7, #32]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80a9 	beq.w	8002be2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a90:	4b4a      	ldr	r3, [pc, #296]	@ (8002bbc <HAL_GPIO_Init+0x2ac>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	4a49      	ldr	r2, [pc, #292]	@ (8002bbc <HAL_GPIO_Init+0x2ac>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6193      	str	r3, [r2, #24]
 8002a9c:	4b47      	ldr	r3, [pc, #284]	@ (8002bbc <HAL_GPIO_Init+0x2ac>)
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002aa8:	4a45      	ldr	r2, [pc, #276]	@ (8002bc0 <HAL_GPIO_Init+0x2b0>)
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	089b      	lsrs	r3, r3, #2
 8002aae:	3302      	adds	r3, #2
 8002ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	220f      	movs	r2, #15
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a3d      	ldr	r2, [pc, #244]	@ (8002bc4 <HAL_GPIO_Init+0x2b4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d00d      	beq.n	8002af0 <HAL_GPIO_Init+0x1e0>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a3c      	ldr	r2, [pc, #240]	@ (8002bc8 <HAL_GPIO_Init+0x2b8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d007      	beq.n	8002aec <HAL_GPIO_Init+0x1dc>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a3b      	ldr	r2, [pc, #236]	@ (8002bcc <HAL_GPIO_Init+0x2bc>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d101      	bne.n	8002ae8 <HAL_GPIO_Init+0x1d8>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e004      	b.n	8002af2 <HAL_GPIO_Init+0x1e2>
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e002      	b.n	8002af2 <HAL_GPIO_Init+0x1e2>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <HAL_GPIO_Init+0x1e2>
 8002af0:	2300      	movs	r3, #0
 8002af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002af4:	f002 0203 	and.w	r2, r2, #3
 8002af8:	0092      	lsls	r2, r2, #2
 8002afa:	4093      	lsls	r3, r2
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b02:	492f      	ldr	r1, [pc, #188]	@ (8002bc0 <HAL_GPIO_Init+0x2b0>)
 8002b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b06:	089b      	lsrs	r3, r3, #2
 8002b08:	3302      	adds	r3, #2
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d006      	beq.n	8002b2a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002bd0 <HAL_GPIO_Init+0x2c0>)
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	492b      	ldr	r1, [pc, #172]	@ (8002bd0 <HAL_GPIO_Init+0x2c0>)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	608b      	str	r3, [r1, #8]
 8002b28:	e006      	b.n	8002b38 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b2a:	4b29      	ldr	r3, [pc, #164]	@ (8002bd0 <HAL_GPIO_Init+0x2c0>)
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	4927      	ldr	r1, [pc, #156]	@ (8002bd0 <HAL_GPIO_Init+0x2c0>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d006      	beq.n	8002b52 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b44:	4b22      	ldr	r3, [pc, #136]	@ (8002bd0 <HAL_GPIO_Init+0x2c0>)
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	4921      	ldr	r1, [pc, #132]	@ (8002bd0 <HAL_GPIO_Init+0x2c0>)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60cb      	str	r3, [r1, #12]
 8002b50:	e006      	b.n	8002b60 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b52:	4b1f      	ldr	r3, [pc, #124]	@ (8002bd0 <HAL_GPIO_Init+0x2c0>)
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	491d      	ldr	r1, [pc, #116]	@ (8002bd0 <HAL_GPIO_Init+0x2c0>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d006      	beq.n	8002b7a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b6c:	4b18      	ldr	r3, [pc, #96]	@ (8002bd0 <HAL_GPIO_Init+0x2c0>)
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	4917      	ldr	r1, [pc, #92]	@ (8002bd0 <HAL_GPIO_Init+0x2c0>)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
 8002b78:	e006      	b.n	8002b88 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b7a:	4b15      	ldr	r3, [pc, #84]	@ (8002bd0 <HAL_GPIO_Init+0x2c0>)
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	43db      	mvns	r3, r3
 8002b82:	4913      	ldr	r1, [pc, #76]	@ (8002bd0 <HAL_GPIO_Init+0x2c0>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01f      	beq.n	8002bd4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b94:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd0 <HAL_GPIO_Init+0x2c0>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	490d      	ldr	r1, [pc, #52]	@ (8002bd0 <HAL_GPIO_Init+0x2c0>)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]
 8002ba0:	e01f      	b.n	8002be2 <HAL_GPIO_Init+0x2d2>
 8002ba2:	bf00      	nop
 8002ba4:	10320000 	.word	0x10320000
 8002ba8:	10310000 	.word	0x10310000
 8002bac:	10220000 	.word	0x10220000
 8002bb0:	10210000 	.word	0x10210000
 8002bb4:	10120000 	.word	0x10120000
 8002bb8:	10110000 	.word	0x10110000
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40010000 	.word	0x40010000
 8002bc4:	40010800 	.word	0x40010800
 8002bc8:	40010c00 	.word	0x40010c00
 8002bcc:	40011000 	.word	0x40011000
 8002bd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c04 <HAL_GPIO_Init+0x2f4>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	4909      	ldr	r1, [pc, #36]	@ (8002c04 <HAL_GPIO_Init+0x2f4>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be4:	3301      	adds	r3, #1
 8002be6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bee:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f47f ae96 	bne.w	8002924 <HAL_GPIO_Init+0x14>
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	bf00      	nop
 8002bfc:	372c      	adds	r7, #44	@ 0x2c
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr
 8002c04:	40010400 	.word	0x40010400

08002c08 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b089      	sub	sp, #36	@ 0x24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8002c16:	e094      	b.n	8002d42 <HAL_GPIO_DeInit+0x13a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002c18:	2201      	movs	r2, #1
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8087 	beq.w	8002d3c <HAL_GPIO_DeInit+0x134>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002c2e:	4a4b      	ldr	r2, [pc, #300]	@ (8002d5c <HAL_GPIO_DeInit+0x154>)
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	089b      	lsrs	r3, r3, #2
 8002c34:	3302      	adds	r3, #2
 8002c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	220f      	movs	r2, #15
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a43      	ldr	r2, [pc, #268]	@ (8002d60 <HAL_GPIO_DeInit+0x158>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00d      	beq.n	8002c74 <HAL_GPIO_DeInit+0x6c>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a42      	ldr	r2, [pc, #264]	@ (8002d64 <HAL_GPIO_DeInit+0x15c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d007      	beq.n	8002c70 <HAL_GPIO_DeInit+0x68>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a41      	ldr	r2, [pc, #260]	@ (8002d68 <HAL_GPIO_DeInit+0x160>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d101      	bne.n	8002c6c <HAL_GPIO_DeInit+0x64>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e004      	b.n	8002c76 <HAL_GPIO_DeInit+0x6e>
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e002      	b.n	8002c76 <HAL_GPIO_DeInit+0x6e>
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <HAL_GPIO_DeInit+0x6e>
 8002c74:	2300      	movs	r3, #0
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	f002 0203 	and.w	r2, r2, #3
 8002c7c:	0092      	lsls	r2, r2, #2
 8002c7e:	4093      	lsls	r3, r2
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d132      	bne.n	8002cec <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002c86:	4b39      	ldr	r3, [pc, #228]	@ (8002d6c <HAL_GPIO_DeInit+0x164>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	4937      	ldr	r1, [pc, #220]	@ (8002d6c <HAL_GPIO_DeInit+0x164>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002c94:	4b35      	ldr	r3, [pc, #212]	@ (8002d6c <HAL_GPIO_DeInit+0x164>)
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	4933      	ldr	r1, [pc, #204]	@ (8002d6c <HAL_GPIO_DeInit+0x164>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002ca2:	4b32      	ldr	r3, [pc, #200]	@ (8002d6c <HAL_GPIO_DeInit+0x164>)
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	4930      	ldr	r1, [pc, #192]	@ (8002d6c <HAL_GPIO_DeInit+0x164>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002cb0:	4b2e      	ldr	r3, [pc, #184]	@ (8002d6c <HAL_GPIO_DeInit+0x164>)
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	492c      	ldr	r1, [pc, #176]	@ (8002d6c <HAL_GPIO_DeInit+0x164>)
 8002cba:	4013      	ands	r3, r2
 8002cbc:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	220f      	movs	r2, #15
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8002cce:	4a23      	ldr	r2, [pc, #140]	@ (8002d5c <HAL_GPIO_DeInit+0x154>)
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	089b      	lsrs	r3, r3, #2
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	43da      	mvns	r2, r3
 8002cde:	481f      	ldr	r0, [pc, #124]	@ (8002d5c <HAL_GPIO_DeInit+0x154>)
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	089b      	lsrs	r3, r3, #2
 8002ce4:	400a      	ands	r2, r1
 8002ce6:	3302      	adds	r3, #2
 8002ce8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2bff      	cmp	r3, #255	@ 0xff
 8002cf0:	d801      	bhi.n	8002cf6 <HAL_GPIO_DeInit+0xee>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	e001      	b.n	8002cfa <HAL_GPIO_DeInit+0xf2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	2bff      	cmp	r3, #255	@ 0xff
 8002d00:	d802      	bhi.n	8002d08 <HAL_GPIO_DeInit+0x100>
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	e002      	b.n	8002d0e <HAL_GPIO_DeInit+0x106>
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	3b08      	subs	r3, #8
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	210f      	movs	r1, #15
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	401a      	ands	r2, r3
 8002d20:	2104      	movs	r1, #4
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	fa01 f303 	lsl.w	r3, r1, r3
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	401a      	ands	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f47f af64 	bne.w	8002c18 <HAL_GPIO_DeInit+0x10>
  }
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	3724      	adds	r7, #36	@ 0x24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	40010000 	.word	0x40010000
 8002d60:	40010800 	.word	0x40010800
 8002d64:	40010c00 	.word	0x40010c00
 8002d68:	40011000 	.word	0x40011000
 8002d6c:	40010400 	.word	0x40010400

08002d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	807b      	strh	r3, [r7, #2]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d80:	787b      	ldrb	r3, [r7, #1]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d86:	887a      	ldrh	r2, [r7, #2]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d8c:	e003      	b.n	8002d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d8e:	887b      	ldrh	r3, [r7, #2]
 8002d90:	041a      	lsls	r2, r3, #16
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	611a      	str	r2, [r3, #16]
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002da4:	4b03      	ldr	r3, [pc, #12]	@ (8002db4 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
}
 8002daa:	bf00      	nop
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	420e0020 	.word	0x420e0020

08002db8 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8002dbc:	4b08      	ldr	r3, [pc, #32]	@ (8002de0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a07      	ldr	r2, [pc, #28]	@ (8002de0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002dc2:	f043 0302 	orr.w	r3, r3, #2
 8002dc6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002dc8:	4b06      	ldr	r3, [pc, #24]	@ (8002de4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	4a05      	ldr	r2, [pc, #20]	@ (8002de4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002dce:	f043 0304 	orr.w	r3, r3, #4
 8002dd2:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8002dd4:	bf30      	wfi
}
 8002dd6:	bf00      	nop
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40007000 	.word	0x40007000
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e272      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 8087 	beq.w	8002f16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e08:	4b92      	ldr	r3, [pc, #584]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d00c      	beq.n	8002e2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e14:	4b8f      	ldr	r3, [pc, #572]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d112      	bne.n	8002e46 <HAL_RCC_OscConfig+0x5e>
 8002e20:	4b8c      	ldr	r3, [pc, #560]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e2c:	d10b      	bne.n	8002e46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2e:	4b89      	ldr	r3, [pc, #548]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d06c      	beq.n	8002f14 <HAL_RCC_OscConfig+0x12c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d168      	bne.n	8002f14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e24c      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e4e:	d106      	bne.n	8002e5e <HAL_RCC_OscConfig+0x76>
 8002e50:	4b80      	ldr	r3, [pc, #512]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a7f      	ldr	r2, [pc, #508]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	e02e      	b.n	8002ebc <HAL_RCC_OscConfig+0xd4>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10c      	bne.n	8002e80 <HAL_RCC_OscConfig+0x98>
 8002e66:	4b7b      	ldr	r3, [pc, #492]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a7a      	ldr	r2, [pc, #488]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	4b78      	ldr	r3, [pc, #480]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a77      	ldr	r2, [pc, #476]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e01d      	b.n	8002ebc <HAL_RCC_OscConfig+0xd4>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0xbc>
 8002e8a:	4b72      	ldr	r3, [pc, #456]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a71      	ldr	r2, [pc, #452]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	4b6f      	ldr	r3, [pc, #444]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a6e      	ldr	r2, [pc, #440]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	e00b      	b.n	8002ebc <HAL_RCC_OscConfig+0xd4>
 8002ea4:	4b6b      	ldr	r3, [pc, #428]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a6a      	ldr	r2, [pc, #424]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	4b68      	ldr	r3, [pc, #416]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a67      	ldr	r2, [pc, #412]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d013      	beq.n	8002eec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7fe feb0 	bl	8001c28 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7fe feac 	bl	8001c28 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	@ 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e200      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	4b5d      	ldr	r3, [pc, #372]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0xe4>
 8002eea:	e014      	b.n	8002f16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe fe9c 	bl	8001c28 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7fe fe98 	bl	8001c28 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	@ 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e1ec      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f06:	4b53      	ldr	r3, [pc, #332]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x10c>
 8002f12:	e000      	b.n	8002f16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d063      	beq.n	8002fea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f22:	4b4c      	ldr	r3, [pc, #304]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00b      	beq.n	8002f46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f2e:	4b49      	ldr	r3, [pc, #292]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d11c      	bne.n	8002f74 <HAL_RCC_OscConfig+0x18c>
 8002f3a:	4b46      	ldr	r3, [pc, #280]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d116      	bne.n	8002f74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f46:	4b43      	ldr	r3, [pc, #268]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <HAL_RCC_OscConfig+0x176>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d001      	beq.n	8002f5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e1c0      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5e:	4b3d      	ldr	r3, [pc, #244]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4939      	ldr	r1, [pc, #228]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f72:	e03a      	b.n	8002fea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d020      	beq.n	8002fbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f7c:	4b36      	ldr	r3, [pc, #216]	@ (8003058 <HAL_RCC_OscConfig+0x270>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f82:	f7fe fe51 	bl	8001c28 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8a:	f7fe fe4d 	bl	8001c28 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e1a1      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4927      	ldr	r1, [pc, #156]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]
 8002fbc:	e015      	b.n	8002fea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fbe:	4b26      	ldr	r3, [pc, #152]	@ (8003058 <HAL_RCC_OscConfig+0x270>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fe30 	bl	8001c28 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fcc:	f7fe fe2c 	bl	8001c28 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e180      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fde:	4b1d      	ldr	r3, [pc, #116]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d03a      	beq.n	800306c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d019      	beq.n	8003032 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ffe:	4b17      	ldr	r3, [pc, #92]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8003000:	2201      	movs	r2, #1
 8003002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003004:	f7fe fe10 	bl	8001c28 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800300c:	f7fe fe0c 	bl	8001c28 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e160      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301e:	4b0d      	ldr	r3, [pc, #52]	@ (8003054 <HAL_RCC_OscConfig+0x26c>)
 8003020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800302a:	2001      	movs	r0, #1
 800302c:	f000 face 	bl	80035cc <RCC_Delay>
 8003030:	e01c      	b.n	800306c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003032:	4b0a      	ldr	r3, [pc, #40]	@ (800305c <HAL_RCC_OscConfig+0x274>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003038:	f7fe fdf6 	bl	8001c28 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800303e:	e00f      	b.n	8003060 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003040:	f7fe fdf2 	bl	8001c28 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d908      	bls.n	8003060 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e146      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
 8003052:	bf00      	nop
 8003054:	40021000 	.word	0x40021000
 8003058:	42420000 	.word	0x42420000
 800305c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003060:	4b92      	ldr	r3, [pc, #584]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e9      	bne.n	8003040 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80a6 	beq.w	80031c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800307a:	2300      	movs	r3, #0
 800307c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800307e:	4b8b      	ldr	r3, [pc, #556]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10d      	bne.n	80030a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308a:	4b88      	ldr	r3, [pc, #544]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	4a87      	ldr	r2, [pc, #540]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003094:	61d3      	str	r3, [r2, #28]
 8003096:	4b85      	ldr	r3, [pc, #532]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a2:	2301      	movs	r3, #1
 80030a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a6:	4b82      	ldr	r3, [pc, #520]	@ (80032b0 <HAL_RCC_OscConfig+0x4c8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d118      	bne.n	80030e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030b2:	4b7f      	ldr	r3, [pc, #508]	@ (80032b0 <HAL_RCC_OscConfig+0x4c8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a7e      	ldr	r2, [pc, #504]	@ (80032b0 <HAL_RCC_OscConfig+0x4c8>)
 80030b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030be:	f7fe fdb3 	bl	8001c28 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c6:	f7fe fdaf 	bl	8001c28 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b64      	cmp	r3, #100	@ 0x64
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e103      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d8:	4b75      	ldr	r3, [pc, #468]	@ (80032b0 <HAL_RCC_OscConfig+0x4c8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d106      	bne.n	80030fa <HAL_RCC_OscConfig+0x312>
 80030ec:	4b6f      	ldr	r3, [pc, #444]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	4a6e      	ldr	r2, [pc, #440]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	6213      	str	r3, [r2, #32]
 80030f8:	e02d      	b.n	8003156 <HAL_RCC_OscConfig+0x36e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0x334>
 8003102:	4b6a      	ldr	r3, [pc, #424]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	4a69      	ldr	r2, [pc, #420]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	6213      	str	r3, [r2, #32]
 800310e:	4b67      	ldr	r3, [pc, #412]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	4a66      	ldr	r2, [pc, #408]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003114:	f023 0304 	bic.w	r3, r3, #4
 8003118:	6213      	str	r3, [r2, #32]
 800311a:	e01c      	b.n	8003156 <HAL_RCC_OscConfig+0x36e>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	2b05      	cmp	r3, #5
 8003122:	d10c      	bne.n	800313e <HAL_RCC_OscConfig+0x356>
 8003124:	4b61      	ldr	r3, [pc, #388]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	4a60      	ldr	r2, [pc, #384]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800312a:	f043 0304 	orr.w	r3, r3, #4
 800312e:	6213      	str	r3, [r2, #32]
 8003130:	4b5e      	ldr	r3, [pc, #376]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	4a5d      	ldr	r2, [pc, #372]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	6213      	str	r3, [r2, #32]
 800313c:	e00b      	b.n	8003156 <HAL_RCC_OscConfig+0x36e>
 800313e:	4b5b      	ldr	r3, [pc, #364]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	4a5a      	ldr	r2, [pc, #360]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	6213      	str	r3, [r2, #32]
 800314a:	4b58      	ldr	r3, [pc, #352]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	4a57      	ldr	r2, [pc, #348]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003150:	f023 0304 	bic.w	r3, r3, #4
 8003154:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d015      	beq.n	800318a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315e:	f7fe fd63 	bl	8001c28 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003164:	e00a      	b.n	800317c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003166:	f7fe fd5f 	bl	8001c28 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003174:	4293      	cmp	r3, r2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e0b1      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317c:	4b4b      	ldr	r3, [pc, #300]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0ee      	beq.n	8003166 <HAL_RCC_OscConfig+0x37e>
 8003188:	e014      	b.n	80031b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318a:	f7fe fd4d 	bl	8001c28 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003190:	e00a      	b.n	80031a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003192:	f7fe fd49 	bl	8001c28 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e09b      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a8:	4b40      	ldr	r3, [pc, #256]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1ee      	bne.n	8003192 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d105      	bne.n	80031c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ba:	4b3c      	ldr	r3, [pc, #240]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	4a3b      	ldr	r2, [pc, #236]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80031c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 8087 	beq.w	80032de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031d0:	4b36      	ldr	r3, [pc, #216]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 030c 	and.w	r3, r3, #12
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d061      	beq.n	80032a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d146      	bne.n	8003272 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e4:	4b33      	ldr	r3, [pc, #204]	@ (80032b4 <HAL_RCC_OscConfig+0x4cc>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ea:	f7fe fd1d 	bl	8001c28 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f2:	f7fe fd19 	bl	8001c28 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e06d      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003204:	4b29      	ldr	r3, [pc, #164]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1f0      	bne.n	80031f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003218:	d108      	bne.n	800322c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800321a:	4b24      	ldr	r3, [pc, #144]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	4921      	ldr	r1, [pc, #132]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800322c:	4b1f      	ldr	r3, [pc, #124]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a19      	ldr	r1, [r3, #32]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	430b      	orrs	r3, r1
 800323e:	491b      	ldr	r1, [pc, #108]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003240:	4313      	orrs	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003244:	4b1b      	ldr	r3, [pc, #108]	@ (80032b4 <HAL_RCC_OscConfig+0x4cc>)
 8003246:	2201      	movs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324a:	f7fe fced 	bl	8001c28 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003252:	f7fe fce9 	bl	8001c28 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e03d      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003264:	4b11      	ldr	r3, [pc, #68]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f0      	beq.n	8003252 <HAL_RCC_OscConfig+0x46a>
 8003270:	e035      	b.n	80032de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003272:	4b10      	ldr	r3, [pc, #64]	@ (80032b4 <HAL_RCC_OscConfig+0x4cc>)
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003278:	f7fe fcd6 	bl	8001c28 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003280:	f7fe fcd2 	bl	8001c28 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e026      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003292:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x498>
 800329e:	e01e      	b.n	80032de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d107      	bne.n	80032b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e019      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40007000 	.word	0x40007000
 80032b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032b8:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <HAL_RCC_OscConfig+0x500>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d106      	bne.n	80032da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d001      	beq.n	80032de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40021000 	.word	0x40021000

080032ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0d0      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003300:	4b6a      	ldr	r3, [pc, #424]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d910      	bls.n	8003330 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b67      	ldr	r3, [pc, #412]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 0207 	bic.w	r2, r3, #7
 8003316:	4965      	ldr	r1, [pc, #404]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800331e:	4b63      	ldr	r3, [pc, #396]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0b8      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003348:	4b59      	ldr	r3, [pc, #356]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4a58      	ldr	r2, [pc, #352]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003352:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003360:	4b53      	ldr	r3, [pc, #332]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a52      	ldr	r2, [pc, #328]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800336a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800336c:	4b50      	ldr	r3, [pc, #320]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	494d      	ldr	r1, [pc, #308]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d040      	beq.n	800340c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	4b47      	ldr	r3, [pc, #284]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d115      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e07f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033aa:	4b41      	ldr	r3, [pc, #260]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d109      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e073      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ba:	4b3d      	ldr	r3, [pc, #244]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e06b      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ca:	4b39      	ldr	r3, [pc, #228]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f023 0203 	bic.w	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	4936      	ldr	r1, [pc, #216]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033dc:	f7fe fc24 	bl	8001c28 <HAL_GetTick>
 80033e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e4:	f7fe fc20 	bl	8001c28 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e053      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fa:	4b2d      	ldr	r3, [pc, #180]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 020c 	and.w	r2, r3, #12
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	429a      	cmp	r2, r3
 800340a:	d1eb      	bne.n	80033e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800340c:	4b27      	ldr	r3, [pc, #156]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d210      	bcs.n	800343c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	4b24      	ldr	r3, [pc, #144]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 0207 	bic.w	r2, r3, #7
 8003422:	4922      	ldr	r1, [pc, #136]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	4b20      	ldr	r3, [pc, #128]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e032      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003448:	4b19      	ldr	r3, [pc, #100]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4916      	ldr	r1, [pc, #88]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003466:	4b12      	ldr	r3, [pc, #72]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	490e      	ldr	r1, [pc, #56]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800347a:	f000 f821 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 800347e:	4602      	mov	r2, r0
 8003480:	4b0b      	ldr	r3, [pc, #44]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	490a      	ldr	r1, [pc, #40]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c8>)
 800348c:	5ccb      	ldrb	r3, [r1, r3]
 800348e:	fa22 f303 	lsr.w	r3, r2, r3
 8003492:	4a09      	ldr	r2, [pc, #36]	@ (80034b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003496:	4b09      	ldr	r3, [pc, #36]	@ (80034bc <HAL_RCC_ClockConfig+0x1d0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe fb82 	bl	8001ba4 <HAL_InitTick>

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40022000 	.word	0x40022000
 80034b0:	40021000 	.word	0x40021000
 80034b4:	08007484 	.word	0x08007484
 80034b8:	20000000 	.word	0x20000000
 80034bc:	20000004 	.word	0x20000004

080034c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	2300      	movs	r3, #0
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	2300      	movs	r3, #0
 80034d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034da:	4b1e      	ldr	r3, [pc, #120]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x94>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d002      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0x30>
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d003      	beq.n	80034f6 <HAL_RCC_GetSysClockFreq+0x36>
 80034ee:	e027      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034f0:	4b19      	ldr	r3, [pc, #100]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x98>)
 80034f2:	613b      	str	r3, [r7, #16]
      break;
 80034f4:	e027      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	0c9b      	lsrs	r3, r3, #18
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	4a17      	ldr	r2, [pc, #92]	@ (800355c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003500:	5cd3      	ldrb	r3, [r2, r3]
 8003502:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d010      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800350e:	4b11      	ldr	r3, [pc, #68]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x94>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	0c5b      	lsrs	r3, r3, #17
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	4a11      	ldr	r2, [pc, #68]	@ (8003560 <HAL_RCC_GetSysClockFreq+0xa0>)
 800351a:	5cd3      	ldrb	r3, [r2, r3]
 800351c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a0d      	ldr	r2, [pc, #52]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x98>)
 8003522:	fb03 f202 	mul.w	r2, r3, r2
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	fbb2 f3f3 	udiv	r3, r2, r3
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	e004      	b.n	800353a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a0c      	ldr	r2, [pc, #48]	@ (8003564 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003534:	fb02 f303 	mul.w	r3, r2, r3
 8003538:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	613b      	str	r3, [r7, #16]
      break;
 800353e:	e002      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003540:	4b05      	ldr	r3, [pc, #20]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x98>)
 8003542:	613b      	str	r3, [r7, #16]
      break;
 8003544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003546:	693b      	ldr	r3, [r7, #16]
}
 8003548:	4618      	mov	r0, r3
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40021000 	.word	0x40021000
 8003558:	007a1200 	.word	0x007a1200
 800355c:	0800749c 	.word	0x0800749c
 8003560:	080074ac 	.word	0x080074ac
 8003564:	003d0900 	.word	0x003d0900

08003568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800356c:	4b02      	ldr	r3, [pc, #8]	@ (8003578 <HAL_RCC_GetHCLKFreq+0x10>)
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	20000000 	.word	0x20000000

0800357c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003580:	f7ff fff2 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 8003584:	4602      	mov	r2, r0
 8003586:	4b05      	ldr	r3, [pc, #20]	@ (800359c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	0a1b      	lsrs	r3, r3, #8
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	4903      	ldr	r1, [pc, #12]	@ (80035a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003598:	4618      	mov	r0, r3
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40021000 	.word	0x40021000
 80035a0:	08007494 	.word	0x08007494

080035a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035a8:	f7ff ffde 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 80035ac:	4602      	mov	r2, r0
 80035ae:	4b05      	ldr	r3, [pc, #20]	@ (80035c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	0adb      	lsrs	r3, r3, #11
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	4903      	ldr	r1, [pc, #12]	@ (80035c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ba:	5ccb      	ldrb	r3, [r1, r3]
 80035bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40021000 	.word	0x40021000
 80035c8:	08007494 	.word	0x08007494

080035cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003600 <RCC_Delay+0x34>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003604 <RCC_Delay+0x38>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	0a5b      	lsrs	r3, r3, #9
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	fb02 f303 	mul.w	r3, r2, r3
 80035e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035e8:	bf00      	nop
  }
  while (Delay --);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1e5a      	subs	r2, r3, #1
 80035ee:	60fa      	str	r2, [r7, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f9      	bne.n	80035e8 <RCC_Delay+0x1c>
}
 80035f4:	bf00      	nop
 80035f6:	bf00      	nop
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr
 8003600:	20000000 	.word	0x20000000
 8003604:	10624dd3 	.word	0x10624dd3

08003608 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d07d      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003624:	2300      	movs	r3, #0
 8003626:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003628:	4b4f      	ldr	r3, [pc, #316]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10d      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003634:	4b4c      	ldr	r3, [pc, #304]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	4a4b      	ldr	r2, [pc, #300]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800363e:	61d3      	str	r3, [r2, #28]
 8003640:	4b49      	ldr	r3, [pc, #292]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800364c:	2301      	movs	r3, #1
 800364e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003650:	4b46      	ldr	r3, [pc, #280]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003658:	2b00      	cmp	r3, #0
 800365a:	d118      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800365c:	4b43      	ldr	r3, [pc, #268]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a42      	ldr	r2, [pc, #264]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003662:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003666:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003668:	f7fe fade 	bl	8001c28 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366e:	e008      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003670:	f7fe fada 	bl	8001c28 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	@ 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e06d      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003682:	4b3a      	ldr	r3, [pc, #232]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800368e:	4b36      	ldr	r3, [pc, #216]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003696:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d02e      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d027      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036b6:	4b2e      	ldr	r3, [pc, #184]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036bc:	4b2c      	ldr	r3, [pc, #176]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036c2:	4a29      	ldr	r2, [pc, #164]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d014      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d2:	f7fe faa9 	bl	8001c28 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036da:	f7fe faa5 	bl	8001c28 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e036      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0ee      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4917      	ldr	r1, [pc, #92]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370a:	4313      	orrs	r3, r2
 800370c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800370e:	7dfb      	ldrb	r3, [r7, #23]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d105      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003714:	4b14      	ldr	r3, [pc, #80]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	4a13      	ldr	r2, [pc, #76]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800371e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800372c:	4b0e      	ldr	r3, [pc, #56]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	490b      	ldr	r1, [pc, #44]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373a:	4313      	orrs	r3, r2
 800373c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800374a:	4b07      	ldr	r3, [pc, #28]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	4904      	ldr	r1, [pc, #16]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003758:	4313      	orrs	r3, r2
 800375a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	40007000 	.word	0x40007000
 8003770:	42420440 	.word	0x42420440

08003774 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	2300      	movs	r3, #0
 8003782:	61fb      	str	r3, [r7, #28]
 8003784:	2300      	movs	r3, #0
 8003786:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	2300      	movs	r3, #0
 800378e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b10      	cmp	r3, #16
 8003794:	d00a      	beq.n	80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b10      	cmp	r3, #16
 800379a:	f200 808a 	bhi.w	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d045      	beq.n	8003830 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d075      	beq.n	8003896 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80037aa:	e082      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80037ac:	4b46      	ldr	r3, [pc, #280]	@ (80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80037b2:	4b45      	ldr	r3, [pc, #276]	@ (80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d07b      	beq.n	80038b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	0c9b      	lsrs	r3, r3, #18
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	4a41      	ldr	r2, [pc, #260]	@ (80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80037c8:	5cd3      	ldrb	r3, [r2, r3]
 80037ca:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d015      	beq.n	8003802 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037d6:	4b3c      	ldr	r3, [pc, #240]	@ (80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	0c5b      	lsrs	r3, r3, #17
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	4a3b      	ldr	r2, [pc, #236]	@ (80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80037e2:	5cd3      	ldrb	r3, [r2, r3]
 80037e4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00d      	beq.n	800380c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80037f0:	4a38      	ldr	r2, [pc, #224]	@ (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	fb02 f303 	mul.w	r3, r2, r3
 80037fe:	61fb      	str	r3, [r7, #28]
 8003800:	e004      	b.n	800380c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4a34      	ldr	r2, [pc, #208]	@ (80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003806:	fb02 f303 	mul.w	r3, r2, r3
 800380a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800380c:	4b2e      	ldr	r3, [pc, #184]	@ (80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003814:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003818:	d102      	bne.n	8003820 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	61bb      	str	r3, [r7, #24]
      break;
 800381e:	e04a      	b.n	80038b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4a2d      	ldr	r2, [pc, #180]	@ (80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	085b      	lsrs	r3, r3, #1
 800382c:	61bb      	str	r3, [r7, #24]
      break;
 800382e:	e042      	b.n	80038b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003830:	4b25      	ldr	r3, [pc, #148]	@ (80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800383c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003840:	d108      	bne.n	8003854 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800384c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003850:	61bb      	str	r3, [r7, #24]
 8003852:	e01f      	b.n	8003894 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800385a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800385e:	d109      	bne.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003860:	4b19      	ldr	r3, [pc, #100]	@ (80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800386c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	e00f      	b.n	8003894 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800387a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800387e:	d11c      	bne.n	80038ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003880:	4b11      	ldr	r3, [pc, #68]	@ (80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d016      	beq.n	80038ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800388c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003890:	61bb      	str	r3, [r7, #24]
      break;
 8003892:	e012      	b.n	80038ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003894:	e011      	b.n	80038ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003896:	f7ff fe85 	bl	80035a4 <HAL_RCC_GetPCLK2Freq>
 800389a:	4602      	mov	r2, r0
 800389c:	4b0a      	ldr	r3, [pc, #40]	@ (80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	0b9b      	lsrs	r3, r3, #14
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	3301      	adds	r3, #1
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ae:	61bb      	str	r3, [r7, #24]
      break;
 80038b0:	e004      	b.n	80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80038b2:	bf00      	nop
 80038b4:	e002      	b.n	80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80038b6:	bf00      	nop
 80038b8:	e000      	b.n	80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80038ba:	bf00      	nop
    }
  }
  return (frequency);
 80038bc:	69bb      	ldr	r3, [r7, #24]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3720      	adds	r7, #32
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000
 80038cc:	080074b0 	.word	0x080074b0
 80038d0:	080074c0 	.word	0x080074c0
 80038d4:	007a1200 	.word	0x007a1200
 80038d8:	003d0900 	.word	0x003d0900
 80038dc:	aaaaaaab 	.word	0xaaaaaaab

080038e0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e07a      	b.n	80039ec <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	7c5b      	ldrb	r3, [r3, #17]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d105      	bne.n	800390c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fd ffc0 	bl	800188c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fbae 	bl	8004074 <HAL_RTC_WaitForSynchro>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d004      	beq.n	8003928 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2204      	movs	r2, #4
 8003922:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e061      	b.n	80039ec <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 fc67 	bl	80041fc <RTC_EnterInitMode>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d004      	beq.n	800393e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2204      	movs	r2, #4
 8003938:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e056      	b.n	80039ec <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0207 	bic.w	r2, r2, #7
 800394c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003956:	4b27      	ldr	r3, [pc, #156]	@ (80039f4 <HAL_RTC_Init+0x114>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395a:	4a26      	ldr	r2, [pc, #152]	@ (80039f4 <HAL_RTC_Init+0x114>)
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003962:	4b24      	ldr	r3, [pc, #144]	@ (80039f4 <HAL_RTC_Init+0x114>)
 8003964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003966:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	4921      	ldr	r1, [pc, #132]	@ (80039f4 <HAL_RTC_Init+0x114>)
 8003970:	4313      	orrs	r3, r2
 8003972:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d003      	beq.n	8003986 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	e00e      	b.n	80039a4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003986:	2001      	movs	r0, #1
 8003988:	f7ff fef4 	bl	8003774 <HAL_RCCEx_GetPeriphCLKFreq>
 800398c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d104      	bne.n	800399e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2204      	movs	r2, #4
 8003998:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e026      	b.n	80039ec <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	0c1a      	lsrs	r2, r3, #16
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f002 020f 	and.w	r2, r2, #15
 80039b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	b292      	uxth	r2, r2
 80039ba:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fc45 	bl	800424c <RTC_ExitInitMode>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d004      	beq.n	80039d2 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2204      	movs	r2, #4
 80039cc:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e00c      	b.n	80039ec <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80039ea:	2300      	movs	r3, #0
  }
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40006c00 	.word	0x40006c00

080039f8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80039f8:	b590      	push	{r4, r7, lr}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <HAL_RTC_SetTime+0x20>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e080      	b.n	8003b1e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	7c1b      	ldrb	r3, [r3, #16]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_RTC_SetTime+0x30>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e07a      	b.n	8003b1e <HAL_RTC_SetTime+0x126>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2202      	movs	r2, #2
 8003a32:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d113      	bne.n	8003a62 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003a44:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	785b      	ldrb	r3, [r3, #1]
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	460b      	mov	r3, r1
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	1a5b      	subs	r3, r3, r1
 8003a54:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003a56:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003a5c:	4413      	add	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	e01e      	b.n	8003aa0 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fc35 	bl	80042d6 <RTC_Bcd2ToByte>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003a74:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	785b      	ldrb	r3, [r3, #1]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 fc2a 	bl	80042d6 <RTC_Bcd2ToByte>
 8003a82:	4603      	mov	r3, r0
 8003a84:	461a      	mov	r2, r3
 8003a86:	4613      	mov	r3, r2
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003a8e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	789b      	ldrb	r3, [r3, #2]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fc1e 	bl	80042d6 <RTC_Bcd2ToByte>
 8003a9a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003a9c:	4423      	add	r3, r4
 8003a9e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003aa0:	6979      	ldr	r1, [r7, #20]
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 fb43 	bl	800412e <RTC_WriteTimeCounter>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d007      	beq.n	8003abe <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2204      	movs	r2, #4
 8003ab2:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e02f      	b.n	8003b1e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0205 	bic.w	r2, r2, #5
 8003acc:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 fb54 	bl	800417c <RTC_ReadAlarmCounter>
 8003ad4:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003adc:	d018      	beq.n	8003b10 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d214      	bcs.n	8003b10 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003aec:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003af0:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003af2:	6939      	ldr	r1, [r7, #16]
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 fb5a 	bl	80041ae <RTC_WriteAlarmCounter>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d007      	beq.n	8003b10 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2204      	movs	r2, #4
 8003b04:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e006      	b.n	8003b1e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2201      	movs	r2, #1
 8003b14:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
  }
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	371c      	adds	r7, #28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd90      	pop	{r4, r7, pc}
	...

08003b28 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61fb      	str	r3, [r7, #28]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	2300      	movs	r3, #0
 8003b42:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <HAL_RTC_GetTime+0x28>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0b5      	b.n	8003cc0 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e0ac      	b.n	8003cc0 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 fab1 	bl	80040ce <RTC_ReadTimeCounter>
 8003b6c:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	4a55      	ldr	r2, [pc, #340]	@ (8003cc8 <HAL_RTC_GetTime+0x1a0>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	0adb      	lsrs	r3, r3, #11
 8003b78:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4b52      	ldr	r3, [pc, #328]	@ (8003cc8 <HAL_RTC_GetTime+0x1a0>)
 8003b7e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b82:	0adb      	lsrs	r3, r3, #11
 8003b84:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8003b88:	fb01 f303 	mul.w	r3, r1, r3
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	4a4f      	ldr	r2, [pc, #316]	@ (8003ccc <HAL_RTC_GetTime+0x1a4>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	4a4a      	ldr	r2, [pc, #296]	@ (8003cc8 <HAL_RTC_GetTime+0x1a0>)
 8003ba0:	fba2 1203 	umull	r1, r2, r2, r3
 8003ba4:	0ad2      	lsrs	r2, r2, #11
 8003ba6:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8003baa:	fb01 f202 	mul.w	r2, r1, r2
 8003bae:	1a9a      	subs	r2, r3, r2
 8003bb0:	4b46      	ldr	r3, [pc, #280]	@ (8003ccc <HAL_RTC_GetTime+0x1a4>)
 8003bb2:	fba3 1302 	umull	r1, r3, r3, r2
 8003bb6:	0959      	lsrs	r1, r3, #5
 8003bb8:	460b      	mov	r3, r1
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	1a5b      	subs	r3, r3, r1
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	1ad1      	subs	r1, r2, r3
 8003bc2:	b2ca      	uxtb	r2, r1
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	2b17      	cmp	r3, #23
 8003bcc:	d955      	bls.n	8003c7a <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4a3f      	ldr	r2, [pc, #252]	@ (8003cd0 <HAL_RTC_GetTime+0x1a8>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	091b      	lsrs	r3, r3, #4
 8003bd8:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003bda:	6939      	ldr	r1, [r7, #16]
 8003bdc:	4b3c      	ldr	r3, [pc, #240]	@ (8003cd0 <HAL_RTC_GetTime+0x1a8>)
 8003bde:	fba3 2301 	umull	r2, r3, r3, r1
 8003be2:	091a      	lsrs	r2, r3, #4
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	1aca      	subs	r2, r1, r3
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 fac1 	bl	800417c <RTC_ReadAlarmCounter>
 8003bfa:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c02:	d008      	beq.n	8003c16 <HAL_RTC_GetTime+0xee>
 8003c04:	69fa      	ldr	r2, [r7, #28]
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d904      	bls.n	8003c16 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003c0c:	69fa      	ldr	r2, [r7, #28]
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	61fb      	str	r3, [r7, #28]
 8003c14:	e002      	b.n	8003c1c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003c16:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8003cd4 <HAL_RTC_GetTime+0x1ac>)
 8003c20:	fb02 f303 	mul.w	r3, r2, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003c2a:	69b9      	ldr	r1, [r7, #24]
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 fa7e 	bl	800412e <RTC_WriteTimeCounter>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e041      	b.n	8003cc0 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c42:	d00c      	beq.n	8003c5e <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	4413      	add	r3, r2
 8003c4a:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003c4c:	69f9      	ldr	r1, [r7, #28]
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 faad 	bl	80041ae <RTC_WriteAlarmCounter>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e030      	b.n	8003cc0 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003c5e:	69f9      	ldr	r1, [r7, #28]
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 faa4 	bl	80041ae <RTC_WriteAlarmCounter>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e027      	b.n	8003cc0 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003c70:	6979      	ldr	r1, [r7, #20]
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 fb4c 	bl	8004310 <RTC_DateUpdate>
 8003c78:	e003      	b.n	8003c82 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01a      	beq.n	8003cbe <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fb05 	bl	800429c <RTC_ByteToBcd2>
 8003c92:	4603      	mov	r3, r0
 8003c94:	461a      	mov	r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	785b      	ldrb	r3, [r3, #1]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fafc 	bl	800429c <RTC_ByteToBcd2>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	789b      	ldrb	r3, [r3, #2]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 faf3 	bl	800429c <RTC_ByteToBcd2>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	461a      	mov	r2, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3720      	adds	r7, #32
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	91a2b3c5 	.word	0x91a2b3c5
 8003ccc:	88888889 	.word	0x88888889
 8003cd0:	aaaaaaab 	.word	0xaaaaaaab
 8003cd4:	00015180 	.word	0x00015180

08003cd8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	61fb      	str	r3, [r7, #28]
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61bb      	str	r3, [r7, #24]
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <HAL_RTC_SetDate+0x24>
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e097      	b.n	8003e30 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	7c1b      	ldrb	r3, [r3, #16]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_RTC_SetDate+0x34>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e091      	b.n	8003e30 <HAL_RTC_SetDate+0x158>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2202      	movs	r2, #2
 8003d16:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10c      	bne.n	8003d38 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	78da      	ldrb	r2, [r3, #3]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	785a      	ldrb	r2, [r3, #1]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	789a      	ldrb	r2, [r3, #2]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	739a      	strb	r2, [r3, #14]
 8003d36:	e01a      	b.n	8003d6e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	78db      	ldrb	r3, [r3, #3]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 faca 	bl	80042d6 <RTC_Bcd2ToByte>
 8003d42:	4603      	mov	r3, r0
 8003d44:	461a      	mov	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	785b      	ldrb	r3, [r3, #1]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fac1 	bl	80042d6 <RTC_Bcd2ToByte>
 8003d54:	4603      	mov	r3, r0
 8003d56:	461a      	mov	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	789b      	ldrb	r3, [r3, #2]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 fab8 	bl	80042d6 <RTC_Bcd2ToByte>
 8003d66:	4603      	mov	r3, r0
 8003d68:	461a      	mov	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	7bdb      	ldrb	r3, [r3, #15]
 8003d72:	4618      	mov	r0, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	7b59      	ldrb	r1, [r3, #13]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	7b9b      	ldrb	r3, [r3, #14]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	f000 fba3 	bl	80044c8 <RTC_WeekDayNum>
 8003d82:	4603      	mov	r3, r0
 8003d84:	461a      	mov	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	7b1a      	ldrb	r2, [r3, #12]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 f99b 	bl	80040ce <RTC_ReadTimeCounter>
 8003d98:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	4a26      	ldr	r2, [pc, #152]	@ (8003e38 <HAL_RTC_SetDate+0x160>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	0adb      	lsrs	r3, r3, #11
 8003da4:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b18      	cmp	r3, #24
 8003daa:	d93a      	bls.n	8003e22 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	4a23      	ldr	r2, [pc, #140]	@ (8003e3c <HAL_RTC_SetDate+0x164>)
 8003db0:	fba2 2303 	umull	r2, r3, r2, r3
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	4a22      	ldr	r2, [pc, #136]	@ (8003e40 <HAL_RTC_SetDate+0x168>)
 8003db8:	fb02 f303 	mul.w	r3, r2, r3
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003dc2:	69f9      	ldr	r1, [r7, #28]
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f9b2 	bl	800412e <RTC_WriteTimeCounter>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d007      	beq.n	8003de0 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e027      	b.n	8003e30 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f9cb 	bl	800417c <RTC_ReadAlarmCounter>
 8003de6:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dee:	d018      	beq.n	8003e22 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d214      	bcs.n	8003e22 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003dfe:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003e02:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003e04:	69b9      	ldr	r1, [r7, #24]
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 f9d1 	bl	80041ae <RTC_WriteAlarmCounter>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d007      	beq.n	8003e22 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2204      	movs	r2, #4
 8003e16:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e006      	b.n	8003e30 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3720      	adds	r7, #32
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	91a2b3c5 	.word	0x91a2b3c5
 8003e3c:	aaaaaaab 	.word	0xaaaaaaab
 8003e40:	00015180 	.word	0x00015180

08003e44 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003e44:	b590      	push	{r4, r7, lr}
 8003e46:	b089      	sub	sp, #36	@ 0x24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8003e54:	f107 0314 	add.w	r3, r7, #20
 8003e58:	2100      	movs	r1, #0
 8003e5a:	460a      	mov	r2, r1
 8003e5c:	801a      	strh	r2, [r3, #0]
 8003e5e:	460a      	mov	r2, r1
 8003e60:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <HAL_RTC_SetAlarm_IT+0x2a>
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e099      	b.n	8003fa6 <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	7c1b      	ldrb	r3, [r3, #16]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_RTC_SetAlarm_IT+0x3a>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e093      	b.n	8003fa6 <HAL_RTC_SetAlarm_IT+0x162>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2202      	movs	r2, #2
 8003e88:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003e8a:	f107 0314 	add.w	r3, r7, #20
 8003e8e:	2200      	movs	r2, #0
 8003e90:	4619      	mov	r1, r3
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f7ff fe48 	bl	8003b28 <HAL_RTC_GetTime>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e081      	b.n	8003fa6 <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003ea2:	7d3b      	ldrb	r3, [r7, #20]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003eaa:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8003eae:	7d7b      	ldrb	r3, [r7, #21]
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	1a5b      	subs	r3, r3, r1
 8003eb8:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003eba:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8003ebc:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003ebe:	4413      	add	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d113      	bne.n	8003ef0 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003ed2:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	785b      	ldrb	r3, [r3, #1]
 8003eda:	4619      	mov	r1, r3
 8003edc:	460b      	mov	r3, r1
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	1a5b      	subs	r3, r3, r1
 8003ee2:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003ee4:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003eea:	4413      	add	r3, r2
 8003eec:	61fb      	str	r3, [r7, #28]
 8003eee:	e01e      	b.n	8003f2e <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 f9ee 	bl	80042d6 <RTC_Bcd2ToByte>
 8003efa:	4603      	mov	r3, r0
 8003efc:	461a      	mov	r2, r3
 8003efe:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003f02:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	785b      	ldrb	r3, [r3, #1]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 f9e3 	bl	80042d6 <RTC_Bcd2ToByte>
 8003f10:	4603      	mov	r3, r0
 8003f12:	461a      	mov	r2, r3
 8003f14:	4613      	mov	r3, r2
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003f1c:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	789b      	ldrb	r3, [r3, #2]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 f9d7 	bl	80042d6 <RTC_Bcd2ToByte>
 8003f28:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003f2a:	4423      	add	r3, r4
 8003f2c:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8003f2e:	69fa      	ldr	r2, [r7, #28]
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d205      	bcs.n	8003f42 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003f3c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003f40:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003f42:	69f9      	ldr	r1, [r7, #28]
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 f932 	bl	80041ae <RTC_WriteAlarmCounter>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d007      	beq.n	8003f60 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2204      	movs	r2, #4
 8003f54:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e022      	b.n	8003fa6 <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0202 	bic.w	r2, r2, #2
 8003f6e:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0202 	orr.w	r2, r2, #2
 8003f7e:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003f80:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb0 <HAL_RTC_SetAlarm_IT+0x16c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a0a      	ldr	r2, [pc, #40]	@ (8003fb0 <HAL_RTC_SetAlarm_IT+0x16c>)
 8003f86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f8a:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003f8c:	4b08      	ldr	r3, [pc, #32]	@ (8003fb0 <HAL_RTC_SetAlarm_IT+0x16c>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	4a07      	ldr	r2, [pc, #28]	@ (8003fb0 <HAL_RTC_SetAlarm_IT+0x16c>)
 8003f92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f96:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
  }
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3724      	adds	r7, #36	@ 0x24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd90      	pop	{r4, r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40010400 	.word	0x40010400

08003fb4 <HAL_RTC_DeactivateAlarm>:
  *          This parameter can be one of the following values:
  *            @arg RTC_ALARM_A:  AlarmA
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Check input parameters */
  if (hrtc == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RTC_DeactivateAlarm+0x14>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e04e      	b.n	8004066 <HAL_RTC_DeactivateAlarm+0xb2>
  }

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	7c1b      	ldrb	r3, [r3, #16]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_RTC_DeactivateAlarm+0x20>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e048      	b.n	8004066 <HAL_RTC_DeactivateAlarm+0xb2>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	745a      	strb	r2, [r3, #17]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0202 	bic.w	r2, r2, #2
 8003fee:	601a      	str	r2, [r3, #0]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f903 	bl	80041fc <RTC_EnterInitMode>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <HAL_RTC_DeactivateAlarm+0x58>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2204      	movs	r2, #4
 8004000:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e02c      	b.n	8004066 <HAL_RTC_DeactivateAlarm+0xb2>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0202 	bic.w	r2, r2, #2
 800401a:	605a      	str	r2, [r3, #4]

    /* Set to default values ALRH & ALRL registers */
    WRITE_REG(hrtc->Instance->ALRH, RTC_ALARM_RESETVALUE_REGISTER);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004024:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, RTC_ALARM_RESETVALUE_REGISTER);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800402e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* RTC Alarm Interrupt Configuration: Disable EXTI configuration */
    __HAL_RTC_ALARM_EXTI_DISABLE_IT();
 8004030:	4b0f      	ldr	r3, [pc, #60]	@ (8004070 <HAL_RTC_DeactivateAlarm+0xbc>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0e      	ldr	r2, [pc, #56]	@ (8004070 <HAL_RTC_DeactivateAlarm+0xbc>)
 8004036:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800403a:	6013      	str	r3, [r2, #0]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f905 	bl	800424c <RTC_ExitInitMode>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d007      	beq.n	8004058 <HAL_RTC_DeactivateAlarm+0xa4>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2204      	movs	r2, #4
 800404c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e006      	b.n	8004066 <HAL_RTC_DeactivateAlarm+0xb2>
    }
  }
  hrtc->State = HAL_RTC_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40010400 	.word	0x40010400

08004074 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e01d      	b.n	80040c6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0208 	bic.w	r2, r2, #8
 8004098:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800409a:	f7fd fdc5 	bl	8001c28 <HAL_GetTick>
 800409e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80040a0:	e009      	b.n	80040b6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80040a2:	f7fd fdc1 	bl	8001c28 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040b0:	d901      	bls.n	80040b6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e007      	b.n	80040c6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f003 0308 	and.w	r3, r3, #8
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0ee      	beq.n	80040a2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b087      	sub	sp, #28
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	827b      	strh	r3, [r7, #18]
 80040da:	2300      	movs	r3, #0
 80040dc:	823b      	strh	r3, [r7, #16]
 80040de:	2300      	movs	r3, #0
 80040e0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80040fe:	8a7a      	ldrh	r2, [r7, #18]
 8004100:	8a3b      	ldrh	r3, [r7, #16]
 8004102:	429a      	cmp	r2, r3
 8004104:	d008      	beq.n	8004118 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004106:	8a3b      	ldrh	r3, [r7, #16]
 8004108:	041a      	lsls	r2, r3, #16
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	b29b      	uxth	r3, r3
 8004112:	4313      	orrs	r3, r2
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	e004      	b.n	8004122 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004118:	8a7b      	ldrh	r3, [r7, #18]
 800411a:	041a      	lsls	r2, r3, #16
 800411c:	89fb      	ldrh	r3, [r7, #14]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004122:	697b      	ldr	r3, [r7, #20]
}
 8004124:	4618      	mov	r0, r3
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr

0800412e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b084      	sub	sp, #16
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004138:	2300      	movs	r3, #0
 800413a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f85d 	bl	80041fc <RTC_EnterInitMode>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	73fb      	strb	r3, [r7, #15]
 800414c:	e011      	b.n	8004172 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	0c12      	lsrs	r2, r2, #16
 8004156:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	b292      	uxth	r2, r2
 8004160:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f872 	bl	800424c <RTC_ExitInitMode>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004172:	7bfb      	ldrb	r3, [r7, #15]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	81fb      	strh	r3, [r7, #14]
 8004188:	2300      	movs	r3, #0
 800418a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800419c:	89fb      	ldrh	r3, [r7, #14]
 800419e:	041a      	lsls	r2, r3, #16
 80041a0:	89bb      	ldrh	r3, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bc80      	pop	{r7}
 80041ac:	4770      	bx	lr

080041ae <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f81d 	bl	80041fc <RTC_EnterInitMode>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
 80041cc:	e011      	b.n	80041f2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	0c12      	lsrs	r2, r2, #16
 80041d6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	b292      	uxth	r2, r2
 80041e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f832 	bl	800424c <RTC_ExitInitMode>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004208:	f7fd fd0e 	bl	8001c28 <HAL_GetTick>
 800420c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800420e:	e009      	b.n	8004224 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004210:	f7fd fd0a 	bl	8001c28 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800421e:	d901      	bls.n	8004224 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e00f      	b.n	8004244 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f003 0320 	and.w	r3, r3, #32
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0ee      	beq.n	8004210 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0210 	orr.w	r2, r2, #16
 8004240:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0210 	bic.w	r2, r2, #16
 8004266:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004268:	f7fd fcde 	bl	8001c28 <HAL_GetTick>
 800426c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800426e:	e009      	b.n	8004284 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004270:	f7fd fcda 	bl	8001c28 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800427e:	d901      	bls.n	8004284 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e007      	b.n	8004294 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0ee      	beq.n	8004270 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80042aa:	e005      	b.n	80042b8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	3301      	adds	r3, #1
 80042b0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	3b0a      	subs	r3, #10
 80042b6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80042b8:	79fb      	ldrb	r3, [r7, #7]
 80042ba:	2b09      	cmp	r3, #9
 80042bc:	d8f6      	bhi.n	80042ac <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	b2db      	uxtb	r3, r3
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr

080042d6 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b085      	sub	sp, #20
 80042da:	af00      	add	r7, sp, #0
 80042dc:	4603      	mov	r3, r0
 80042de:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	091b      	lsrs	r3, r3, #4
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	461a      	mov	r2, r3
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	f003 030f 	and.w	r3, r3, #15
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	4413      	add	r3, r2
 8004304:	b2db      	uxtb	r3, r3
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr

08004310 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	2300      	movs	r3, #0
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	7bdb      	ldrb	r3, [r3, #15]
 800432e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	7b5b      	ldrb	r3, [r3, #13]
 8004334:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	7b9b      	ldrb	r3, [r3, #14]
 800433a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800433c:	2300      	movs	r3, #0
 800433e:	60bb      	str	r3, [r7, #8]
 8004340:	e06f      	b.n	8004422 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d011      	beq.n	800436c <RTC_DateUpdate+0x5c>
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	2b03      	cmp	r3, #3
 800434c:	d00e      	beq.n	800436c <RTC_DateUpdate+0x5c>
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b05      	cmp	r3, #5
 8004352:	d00b      	beq.n	800436c <RTC_DateUpdate+0x5c>
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	2b07      	cmp	r3, #7
 8004358:	d008      	beq.n	800436c <RTC_DateUpdate+0x5c>
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b08      	cmp	r3, #8
 800435e:	d005      	beq.n	800436c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b0a      	cmp	r3, #10
 8004364:	d002      	beq.n	800436c <RTC_DateUpdate+0x5c>
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2b0c      	cmp	r3, #12
 800436a:	d117      	bne.n	800439c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b1e      	cmp	r3, #30
 8004370:	d803      	bhi.n	800437a <RTC_DateUpdate+0x6a>
      {
        day++;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3301      	adds	r3, #1
 8004376:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004378:	e050      	b.n	800441c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b0c      	cmp	r3, #12
 800437e:	d005      	beq.n	800438c <RTC_DateUpdate+0x7c>
        {
          month++;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	3301      	adds	r3, #1
 8004384:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004386:	2301      	movs	r3, #1
 8004388:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800438a:	e047      	b.n	800441c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800438c:	2301      	movs	r3, #1
 800438e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004390:	2301      	movs	r3, #1
 8004392:	60fb      	str	r3, [r7, #12]
          year++;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	3301      	adds	r3, #1
 8004398:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800439a:	e03f      	b.n	800441c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d008      	beq.n	80043b4 <RTC_DateUpdate+0xa4>
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	2b06      	cmp	r3, #6
 80043a6:	d005      	beq.n	80043b4 <RTC_DateUpdate+0xa4>
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	2b09      	cmp	r3, #9
 80043ac:	d002      	beq.n	80043b4 <RTC_DateUpdate+0xa4>
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	2b0b      	cmp	r3, #11
 80043b2:	d10c      	bne.n	80043ce <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b1d      	cmp	r3, #29
 80043b8:	d803      	bhi.n	80043c2 <RTC_DateUpdate+0xb2>
      {
        day++;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3301      	adds	r3, #1
 80043be:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80043c0:	e02c      	b.n	800441c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	3301      	adds	r3, #1
 80043c6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80043c8:	2301      	movs	r3, #1
 80043ca:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80043cc:	e026      	b.n	800441c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d123      	bne.n	800441c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b1b      	cmp	r3, #27
 80043d8:	d803      	bhi.n	80043e2 <RTC_DateUpdate+0xd2>
      {
        day++;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3301      	adds	r3, #1
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	e01c      	b.n	800441c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2b1c      	cmp	r3, #28
 80043e6:	d111      	bne.n	800440c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 f839 	bl	8004464 <RTC_IsLeapYear>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <RTC_DateUpdate+0xf0>
        {
          day++;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3301      	adds	r3, #1
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	e00d      	b.n	800441c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	3301      	adds	r3, #1
 8004404:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004406:	2301      	movs	r3, #1
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	e007      	b.n	800441c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b1d      	cmp	r3, #29
 8004410:	d104      	bne.n	800441c <RTC_DateUpdate+0x10c>
      {
        month++;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	3301      	adds	r3, #1
 8004416:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004418:	2301      	movs	r3, #1
 800441a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	3301      	adds	r3, #1
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d38b      	bcc.n	8004342 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	b2da      	uxtb	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	b2da      	uxtb	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	b2da      	uxtb	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	4619      	mov	r1, r3
 800444c:	6978      	ldr	r0, [r7, #20]
 800444e:	f000 f83b 	bl	80044c8 <RTC_WeekDayNum>
 8004452:	4603      	mov	r3, r0
 8004454:	461a      	mov	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	731a      	strb	r2, [r3, #12]
}
 800445a:	bf00      	nop
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	4603      	mov	r3, r0
 800446c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800446e:	88fb      	ldrh	r3, [r7, #6]
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	e01d      	b.n	80044ba <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800447e:	88fb      	ldrh	r3, [r7, #6]
 8004480:	4a10      	ldr	r2, [pc, #64]	@ (80044c4 <RTC_IsLeapYear+0x60>)
 8004482:	fba2 1203 	umull	r1, r2, r2, r3
 8004486:	0952      	lsrs	r2, r2, #5
 8004488:	2164      	movs	r1, #100	@ 0x64
 800448a:	fb01 f202 	mul.w	r2, r1, r2
 800448e:	1a9b      	subs	r3, r3, r2
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004496:	2301      	movs	r3, #1
 8004498:	e00f      	b.n	80044ba <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800449a:	88fb      	ldrh	r3, [r7, #6]
 800449c:	4a09      	ldr	r2, [pc, #36]	@ (80044c4 <RTC_IsLeapYear+0x60>)
 800449e:	fba2 1203 	umull	r1, r2, r2, r3
 80044a2:	09d2      	lsrs	r2, r2, #7
 80044a4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80044a8:	fb01 f202 	mul.w	r2, r1, r2
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80044b8:	2300      	movs	r3, #0
  }
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr
 80044c4:	51eb851f 	.word	0x51eb851f

080044c8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	70fb      	strb	r3, [r7, #3]
 80044d4:	4613      	mov	r3, r2
 80044d6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	60bb      	str	r3, [r7, #8]
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80044e6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d82d      	bhi.n	800454a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80044ee:	78fa      	ldrb	r2, [r7, #3]
 80044f0:	4613      	mov	r3, r2
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	4413      	add	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	4a2c      	ldr	r2, [pc, #176]	@ (80045ac <RTC_WeekDayNum+0xe4>)
 80044fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004500:	085a      	lsrs	r2, r3, #1
 8004502:	78bb      	ldrb	r3, [r7, #2]
 8004504:	441a      	add	r2, r3
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	441a      	add	r2, r3
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	3b01      	subs	r3, #1
 800450e:	089b      	lsrs	r3, r3, #2
 8004510:	441a      	add	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	3b01      	subs	r3, #1
 8004516:	4926      	ldr	r1, [pc, #152]	@ (80045b0 <RTC_WeekDayNum+0xe8>)
 8004518:	fba1 1303 	umull	r1, r3, r1, r3
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	1ad2      	subs	r2, r2, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	3b01      	subs	r3, #1
 8004524:	4922      	ldr	r1, [pc, #136]	@ (80045b0 <RTC_WeekDayNum+0xe8>)
 8004526:	fba1 1303 	umull	r1, r3, r1, r3
 800452a:	09db      	lsrs	r3, r3, #7
 800452c:	4413      	add	r3, r2
 800452e:	1d1a      	adds	r2, r3, #4
 8004530:	4b20      	ldr	r3, [pc, #128]	@ (80045b4 <RTC_WeekDayNum+0xec>)
 8004532:	fba3 1302 	umull	r1, r3, r3, r2
 8004536:	1ad1      	subs	r1, r2, r3
 8004538:	0849      	lsrs	r1, r1, #1
 800453a:	440b      	add	r3, r1
 800453c:	0899      	lsrs	r1, r3, #2
 800453e:	460b      	mov	r3, r1
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	1a5b      	subs	r3, r3, r1
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	e029      	b.n	800459e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800454a:	78fa      	ldrb	r2, [r7, #3]
 800454c:	4613      	mov	r3, r2
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	4413      	add	r3, r2
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	1a9b      	subs	r3, r3, r2
 8004556:	4a15      	ldr	r2, [pc, #84]	@ (80045ac <RTC_WeekDayNum+0xe4>)
 8004558:	fba2 2303 	umull	r2, r3, r2, r3
 800455c:	085a      	lsrs	r2, r3, #1
 800455e:	78bb      	ldrb	r3, [r7, #2]
 8004560:	441a      	add	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	441a      	add	r2, r3
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	089b      	lsrs	r3, r3, #2
 800456a:	441a      	add	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4910      	ldr	r1, [pc, #64]	@ (80045b0 <RTC_WeekDayNum+0xe8>)
 8004570:	fba1 1303 	umull	r1, r3, r1, r3
 8004574:	095b      	lsrs	r3, r3, #5
 8004576:	1ad2      	subs	r2, r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	490d      	ldr	r1, [pc, #52]	@ (80045b0 <RTC_WeekDayNum+0xe8>)
 800457c:	fba1 1303 	umull	r1, r3, r1, r3
 8004580:	09db      	lsrs	r3, r3, #7
 8004582:	4413      	add	r3, r2
 8004584:	1c9a      	adds	r2, r3, #2
 8004586:	4b0b      	ldr	r3, [pc, #44]	@ (80045b4 <RTC_WeekDayNum+0xec>)
 8004588:	fba3 1302 	umull	r1, r3, r3, r2
 800458c:	1ad1      	subs	r1, r2, r3
 800458e:	0849      	lsrs	r1, r1, #1
 8004590:	440b      	add	r3, r1
 8004592:	0899      	lsrs	r1, r3, #2
 8004594:	460b      	mov	r3, r1
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	1a5b      	subs	r3, r3, r1
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	b2db      	uxtb	r3, r3
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr
 80045ac:	38e38e39 	.word	0x38e38e39
 80045b0:	51eb851f 	.word	0x51eb851f
 80045b4:	24924925 	.word	0x24924925

080045b8 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d027      	beq.n	800461e <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d020      	beq.n	800461e <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00b      	beq.n	8004602 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f824 	bl	8004638 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0204 	mvn.w	r2, #4
 80045f8:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2204      	movs	r2, #4
 80045fe:	745a      	strb	r2, [r3, #17]
 8004600:	e005      	b.n	800460e <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f80f 	bl	8004626 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0201 	bic.w	r2, r2, #1
 800461c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr

08004638 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr

0800464a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b082      	sub	sp, #8
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e076      	b.n	800474a <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	2b00      	cmp	r3, #0
 8004662:	d108      	bne.n	8004676 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800466c:	d009      	beq.n	8004682 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	61da      	str	r2, [r3, #28]
 8004674:	e005      	b.n	8004682 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d106      	bne.n	80046a2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7fd f921 	bl	80018e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2202      	movs	r2, #2
 80046a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046b8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004706:	ea42 0103 	orr.w	r1, r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800470e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	0c1a      	lsrs	r2, r3, #16
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f002 0204 	and.w	r2, r2, #4
 8004728:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004738:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b088      	sub	sp, #32
 8004756:	af00      	add	r7, sp, #0
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	603b      	str	r3, [r7, #0]
 800475e:	4613      	mov	r3, r2
 8004760:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004762:	f7fd fa61 	bl	8001c28 <HAL_GetTick>
 8004766:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004768:	88fb      	ldrh	r3, [r7, #6]
 800476a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	d001      	beq.n	800477c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004778:	2302      	movs	r3, #2
 800477a:	e12a      	b.n	80049d2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_SPI_Transmit+0x36>
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e122      	b.n	80049d2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <HAL_SPI_Transmit+0x48>
 8004796:	2302      	movs	r3, #2
 8004798:	e11b      	b.n	80049d2 <HAL_SPI_Transmit+0x280>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2203      	movs	r2, #3
 80047a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	88fa      	ldrh	r2, [r7, #6]
 80047ba:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	88fa      	ldrh	r2, [r7, #6]
 80047c0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047e8:	d10f      	bne.n	800480a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004808:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004814:	2b40      	cmp	r3, #64	@ 0x40
 8004816:	d007      	beq.n	8004828 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004826:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004830:	d152      	bne.n	80048d8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <HAL_SPI_Transmit+0xee>
 800483a:	8b7b      	ldrh	r3, [r7, #26]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d145      	bne.n	80048cc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004844:	881a      	ldrh	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004850:	1c9a      	adds	r2, r3, #2
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800485a:	b29b      	uxth	r3, r3
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004864:	e032      	b.n	80048cc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b02      	cmp	r3, #2
 8004872:	d112      	bne.n	800489a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004878:	881a      	ldrh	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004884:	1c9a      	adds	r2, r3, #2
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004898:	e018      	b.n	80048cc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800489a:	f7fd f9c5 	bl	8001c28 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d803      	bhi.n	80048b2 <HAL_SPI_Transmit+0x160>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b0:	d102      	bne.n	80048b8 <HAL_SPI_Transmit+0x166>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d109      	bne.n	80048cc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e082      	b.n	80049d2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1c7      	bne.n	8004866 <HAL_SPI_Transmit+0x114>
 80048d6:	e053      	b.n	8004980 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <HAL_SPI_Transmit+0x194>
 80048e0:	8b7b      	ldrh	r3, [r7, #26]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d147      	bne.n	8004976 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	330c      	adds	r3, #12
 80048f0:	7812      	ldrb	r2, [r2, #0]
 80048f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004902:	b29b      	uxth	r3, r3
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800490c:	e033      	b.n	8004976 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b02      	cmp	r3, #2
 800491a:	d113      	bne.n	8004944 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	330c      	adds	r3, #12
 8004926:	7812      	ldrb	r2, [r2, #0]
 8004928:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004938:	b29b      	uxth	r3, r3
 800493a:	3b01      	subs	r3, #1
 800493c:	b29a      	uxth	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004942:	e018      	b.n	8004976 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004944:	f7fd f970 	bl	8001c28 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d803      	bhi.n	800495c <HAL_SPI_Transmit+0x20a>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495a:	d102      	bne.n	8004962 <HAL_SPI_Transmit+0x210>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e02d      	b.n	80049d2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1c6      	bne.n	800490e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	6839      	ldr	r1, [r7, #0]
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 fbd1 	bl	800512c <SPI_EndRxTxTransaction>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2220      	movs	r2, #32
 8004994:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10a      	bne.n	80049b4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	617b      	str	r3, [r7, #20]
 80049b2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80049d0:	2300      	movs	r3, #0
  }
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3720      	adds	r7, #32
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b088      	sub	sp, #32
 80049de:	af02      	add	r7, sp, #8
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	603b      	str	r3, [r7, #0]
 80049e6:	4613      	mov	r3, r2
 80049e8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d001      	beq.n	80049fa <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80049f6:	2302      	movs	r3, #2
 80049f8:	e104      	b.n	8004c04 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a02:	d112      	bne.n	8004a2a <HAL_SPI_Receive+0x50>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10e      	bne.n	8004a2a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2204      	movs	r2, #4
 8004a10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a14:	88fa      	ldrh	r2, [r7, #6]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f8f3 	bl	8004c0c <HAL_SPI_TransmitReceive>
 8004a26:	4603      	mov	r3, r0
 8004a28:	e0ec      	b.n	8004c04 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a2a:	f7fd f8fd 	bl	8001c28 <HAL_GetTick>
 8004a2e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <HAL_SPI_Receive+0x62>
 8004a36:	88fb      	ldrh	r3, [r7, #6]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0e1      	b.n	8004c04 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d101      	bne.n	8004a4e <HAL_SPI_Receive+0x74>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e0da      	b.n	8004c04 <HAL_SPI_Receive+0x22a>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2204      	movs	r2, #4
 8004a5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	88fa      	ldrh	r2, [r7, #6]
 8004a6e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	88fa      	ldrh	r2, [r7, #6]
 8004a74:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a9c:	d10f      	bne.n	8004abe <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004aac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004abc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac8:	2b40      	cmp	r3, #64	@ 0x40
 8004aca:	d007      	beq.n	8004adc <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ada:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d170      	bne.n	8004bc6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004ae4:	e035      	b.n	8004b52 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d115      	bne.n	8004b20 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f103 020c 	add.w	r2, r3, #12
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b00:	7812      	ldrb	r2, [r2, #0]
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b1e:	e018      	b.n	8004b52 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b20:	f7fd f882 	bl	8001c28 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d803      	bhi.n	8004b38 <HAL_SPI_Receive+0x15e>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b36:	d102      	bne.n	8004b3e <HAL_SPI_Receive+0x164>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d109      	bne.n	8004b52 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e058      	b.n	8004c04 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1c4      	bne.n	8004ae6 <HAL_SPI_Receive+0x10c>
 8004b5c:	e038      	b.n	8004bd0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d113      	bne.n	8004b94 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b76:	b292      	uxth	r2, r2
 8004b78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7e:	1c9a      	adds	r2, r3, #2
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b92:	e018      	b.n	8004bc6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b94:	f7fd f848 	bl	8001c28 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d803      	bhi.n	8004bac <HAL_SPI_Receive+0x1d2>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004baa:	d102      	bne.n	8004bb2 <HAL_SPI_Receive+0x1d8>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d109      	bne.n	8004bc6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e01e      	b.n	8004c04 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1c6      	bne.n	8004b5e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	6839      	ldr	r1, [r7, #0]
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 fa57 	bl	8005088 <SPI_EndRxTransaction>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004c02:	2300      	movs	r3, #0
  }
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08a      	sub	sp, #40	@ 0x28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c1e:	f7fd f803 	bl	8001c28 <HAL_GetTick>
 8004c22:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c2a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004c32:	887b      	ldrh	r3, [r7, #2]
 8004c34:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c36:	7ffb      	ldrb	r3, [r7, #31]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d00c      	beq.n	8004c56 <HAL_SPI_TransmitReceive+0x4a>
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c42:	d106      	bne.n	8004c52 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d102      	bne.n	8004c52 <HAL_SPI_TransmitReceive+0x46>
 8004c4c:	7ffb      	ldrb	r3, [r7, #31]
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d001      	beq.n	8004c56 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004c52:	2302      	movs	r3, #2
 8004c54:	e17f      	b.n	8004f56 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_SPI_TransmitReceive+0x5c>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <HAL_SPI_TransmitReceive+0x5c>
 8004c62:	887b      	ldrh	r3, [r7, #2]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e174      	b.n	8004f56 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_SPI_TransmitReceive+0x6e>
 8004c76:	2302      	movs	r3, #2
 8004c78:	e16d      	b.n	8004f56 <HAL_SPI_TransmitReceive+0x34a>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d003      	beq.n	8004c96 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2205      	movs	r2, #5
 8004c92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	887a      	ldrh	r2, [r7, #2]
 8004ca6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	887a      	ldrh	r2, [r7, #2]
 8004cac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	887a      	ldrh	r2, [r7, #2]
 8004cb8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	887a      	ldrh	r2, [r7, #2]
 8004cbe:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd6:	2b40      	cmp	r3, #64	@ 0x40
 8004cd8:	d007      	beq.n	8004cea <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ce8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cf2:	d17e      	bne.n	8004df2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <HAL_SPI_TransmitReceive+0xf6>
 8004cfc:	8afb      	ldrh	r3, [r7, #22]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d16c      	bne.n	8004ddc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d06:	881a      	ldrh	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d12:	1c9a      	adds	r2, r3, #2
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d26:	e059      	b.n	8004ddc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d11b      	bne.n	8004d6e <HAL_SPI_TransmitReceive+0x162>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d016      	beq.n	8004d6e <HAL_SPI_TransmitReceive+0x162>
 8004d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d113      	bne.n	8004d6e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4a:	881a      	ldrh	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d56:	1c9a      	adds	r2, r3, #2
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d119      	bne.n	8004db0 <HAL_SPI_TransmitReceive+0x1a4>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d014      	beq.n	8004db0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d90:	b292      	uxth	r2, r2
 8004d92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d98:	1c9a      	adds	r2, r3, #2
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dac:	2301      	movs	r3, #1
 8004dae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004db0:	f7fc ff3a 	bl	8001c28 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d80d      	bhi.n	8004ddc <HAL_SPI_TransmitReceive+0x1d0>
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc6:	d009      	beq.n	8004ddc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e0bc      	b.n	8004f56 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1a0      	bne.n	8004d28 <HAL_SPI_TransmitReceive+0x11c>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d19b      	bne.n	8004d28 <HAL_SPI_TransmitReceive+0x11c>
 8004df0:	e082      	b.n	8004ef8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <HAL_SPI_TransmitReceive+0x1f4>
 8004dfa:	8afb      	ldrh	r3, [r7, #22]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d171      	bne.n	8004ee4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	330c      	adds	r3, #12
 8004e0a:	7812      	ldrb	r2, [r2, #0]
 8004e0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e26:	e05d      	b.n	8004ee4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d11c      	bne.n	8004e70 <HAL_SPI_TransmitReceive+0x264>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d017      	beq.n	8004e70 <HAL_SPI_TransmitReceive+0x264>
 8004e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d114      	bne.n	8004e70 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	330c      	adds	r3, #12
 8004e50:	7812      	ldrb	r2, [r2, #0]
 8004e52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d119      	bne.n	8004eb2 <HAL_SPI_TransmitReceive+0x2a6>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d014      	beq.n	8004eb2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004eb2:	f7fc feb9 	bl	8001c28 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d803      	bhi.n	8004eca <HAL_SPI_TransmitReceive+0x2be>
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d102      	bne.n	8004ed0 <HAL_SPI_TransmitReceive+0x2c4>
 8004eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d109      	bne.n	8004ee4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e038      	b.n	8004f56 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d19c      	bne.n	8004e28 <HAL_SPI_TransmitReceive+0x21c>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d197      	bne.n	8004e28 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ef8:	6a3a      	ldr	r2, [r7, #32]
 8004efa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 f915 	bl	800512c <SPI_EndRxTxTransaction>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d008      	beq.n	8004f1a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e01d      	b.n	8004f56 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10a      	bne.n	8004f38 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f22:	2300      	movs	r3, #0
 8004f24:	613b      	str	r3, [r7, #16]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	613b      	str	r3, [r7, #16]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	613b      	str	r3, [r7, #16]
 8004f36:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e000      	b.n	8004f56 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004f54:	2300      	movs	r3, #0
  }
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3728      	adds	r7, #40	@ 0x28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f6c:	b2db      	uxtb	r3, r3
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr

08004f78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	603b      	str	r3, [r7, #0]
 8004f84:	4613      	mov	r3, r2
 8004f86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f88:	f7fc fe4e 	bl	8001c28 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f90:	1a9b      	subs	r3, r3, r2
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	4413      	add	r3, r2
 8004f96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f98:	f7fc fe46 	bl	8001c28 <HAL_GetTick>
 8004f9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f9e:	4b39      	ldr	r3, [pc, #228]	@ (8005084 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	015b      	lsls	r3, r3, #5
 8004fa4:	0d1b      	lsrs	r3, r3, #20
 8004fa6:	69fa      	ldr	r2, [r7, #28]
 8004fa8:	fb02 f303 	mul.w	r3, r2, r3
 8004fac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fae:	e054      	b.n	800505a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb6:	d050      	beq.n	800505a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fb8:	f7fc fe36 	bl	8001c28 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d902      	bls.n	8004fce <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d13d      	bne.n	800504a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fe6:	d111      	bne.n	800500c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ff0:	d004      	beq.n	8004ffc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ffa:	d107      	bne.n	800500c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800500a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005010:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005014:	d10f      	bne.n	8005036 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005034:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e017      	b.n	800507a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	3b01      	subs	r3, #1
 8005058:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4013      	ands	r3, r2
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	429a      	cmp	r2, r3
 8005068:	bf0c      	ite	eq
 800506a:	2301      	moveq	r3, #1
 800506c:	2300      	movne	r3, #0
 800506e:	b2db      	uxtb	r3, r3
 8005070:	461a      	mov	r2, r3
 8005072:	79fb      	ldrb	r3, [r7, #7]
 8005074:	429a      	cmp	r2, r3
 8005076:	d19b      	bne.n	8004fb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3720      	adds	r7, #32
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20000000 	.word	0x20000000

08005088 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af02      	add	r7, sp, #8
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800509c:	d111      	bne.n	80050c2 <SPI_EndRxTransaction+0x3a>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050a6:	d004      	beq.n	80050b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050b0:	d107      	bne.n	80050c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050c0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050ca:	d117      	bne.n	80050fc <SPI_EndRxTransaction+0x74>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050d4:	d112      	bne.n	80050fc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2200      	movs	r2, #0
 80050de:	2101      	movs	r1, #1
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f7ff ff49 	bl	8004f78 <SPI_WaitFlagStateUntilTimeout>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01a      	beq.n	8005122 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f0:	f043 0220 	orr.w	r2, r3, #32
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e013      	b.n	8005124 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	2200      	movs	r2, #0
 8005104:	2180      	movs	r1, #128	@ 0x80
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f7ff ff36 	bl	8004f78 <SPI_WaitFlagStateUntilTimeout>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005116:	f043 0220 	orr.w	r2, r3, #32
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e000      	b.n	8005124 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af02      	add	r7, sp, #8
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2201      	movs	r2, #1
 8005140:	2102      	movs	r1, #2
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f7ff ff18 	bl	8004f78 <SPI_WaitFlagStateUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d007      	beq.n	800515e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005152:	f043 0220 	orr.w	r2, r3, #32
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e013      	b.n	8005186 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2200      	movs	r2, #0
 8005166:	2180      	movs	r1, #128	@ 0x80
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f7ff ff05 	bl	8004f78 <SPI_WaitFlagStateUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d007      	beq.n	8005184 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005178:	f043 0220 	orr.w	r2, r3, #32
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e000      	b.n	8005186 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e041      	b.n	8005224 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d106      	bne.n	80051ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7fc fbdf 	bl	8001978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2202      	movs	r2, #2
 80051be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	3304      	adds	r3, #4
 80051ca:	4619      	mov	r1, r3
 80051cc:	4610      	mov	r0, r2
 80051ce:	f000 f95f 	bl	8005490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b01      	cmp	r3, #1
 800523e:	d001      	beq.n	8005244 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e02d      	b.n	80052a0 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a16      	ldr	r2, [pc, #88]	@ (80052ac <HAL_TIM_Base_Start+0x80>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d009      	beq.n	800526a <HAL_TIM_Base_Start+0x3e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800525e:	d004      	beq.n	800526a <HAL_TIM_Base_Start+0x3e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a12      	ldr	r2, [pc, #72]	@ (80052b0 <HAL_TIM_Base_Start+0x84>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d111      	bne.n	800528e <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b06      	cmp	r3, #6
 800527a:	d010      	beq.n	800529e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528c:	e007      	b.n	800529e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 0201 	orr.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bc80      	pop	{r7}
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40012c00 	.word	0x40012c00
 80052b0:	40000400 	.word	0x40000400

080052b4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6a1a      	ldr	r2, [r3, #32]
 80052c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80052c6:	4013      	ands	r3, r2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10f      	bne.n	80052ec <HAL_TIM_Base_Stop+0x38>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6a1a      	ldr	r2, [r3, #32]
 80052d2:	f240 4344 	movw	r3, #1092	@ 0x444
 80052d6:	4013      	ands	r3, r2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d107      	bne.n	80052ec <HAL_TIM_Base_Stop+0x38>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0201 	bic.w	r2, r2, #1
 80052ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr

08005300 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_TIM_ConfigClockSource+0x1c>
 8005318:	2302      	movs	r3, #2
 800531a:	e0b4      	b.n	8005486 <HAL_TIM_ConfigClockSource+0x186>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800533a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005342:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005354:	d03e      	beq.n	80053d4 <HAL_TIM_ConfigClockSource+0xd4>
 8005356:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800535a:	f200 8087 	bhi.w	800546c <HAL_TIM_ConfigClockSource+0x16c>
 800535e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005362:	f000 8086 	beq.w	8005472 <HAL_TIM_ConfigClockSource+0x172>
 8005366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800536a:	d87f      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
 800536c:	2b70      	cmp	r3, #112	@ 0x70
 800536e:	d01a      	beq.n	80053a6 <HAL_TIM_ConfigClockSource+0xa6>
 8005370:	2b70      	cmp	r3, #112	@ 0x70
 8005372:	d87b      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
 8005374:	2b60      	cmp	r3, #96	@ 0x60
 8005376:	d050      	beq.n	800541a <HAL_TIM_ConfigClockSource+0x11a>
 8005378:	2b60      	cmp	r3, #96	@ 0x60
 800537a:	d877      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
 800537c:	2b50      	cmp	r3, #80	@ 0x50
 800537e:	d03c      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0xfa>
 8005380:	2b50      	cmp	r3, #80	@ 0x50
 8005382:	d873      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
 8005384:	2b40      	cmp	r3, #64	@ 0x40
 8005386:	d058      	beq.n	800543a <HAL_TIM_ConfigClockSource+0x13a>
 8005388:	2b40      	cmp	r3, #64	@ 0x40
 800538a:	d86f      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
 800538c:	2b30      	cmp	r3, #48	@ 0x30
 800538e:	d064      	beq.n	800545a <HAL_TIM_ConfigClockSource+0x15a>
 8005390:	2b30      	cmp	r3, #48	@ 0x30
 8005392:	d86b      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
 8005394:	2b20      	cmp	r3, #32
 8005396:	d060      	beq.n	800545a <HAL_TIM_ConfigClockSource+0x15a>
 8005398:	2b20      	cmp	r3, #32
 800539a:	d867      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
 800539c:	2b00      	cmp	r3, #0
 800539e:	d05c      	beq.n	800545a <HAL_TIM_ConfigClockSource+0x15a>
 80053a0:	2b10      	cmp	r3, #16
 80053a2:	d05a      	beq.n	800545a <HAL_TIM_ConfigClockSource+0x15a>
 80053a4:	e062      	b.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053b6:	f000 f946 	bl	8005646 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	609a      	str	r2, [r3, #8]
      break;
 80053d2:	e04f      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053e4:	f000 f92f 	bl	8005646 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053f6:	609a      	str	r2, [r3, #8]
      break;
 80053f8:	e03c      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005406:	461a      	mov	r2, r3
 8005408:	f000 f8a6 	bl	8005558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2150      	movs	r1, #80	@ 0x50
 8005412:	4618      	mov	r0, r3
 8005414:	f000 f8fd 	bl	8005612 <TIM_ITRx_SetConfig>
      break;
 8005418:	e02c      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005426:	461a      	mov	r2, r3
 8005428:	f000 f8c4 	bl	80055b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2160      	movs	r1, #96	@ 0x60
 8005432:	4618      	mov	r0, r3
 8005434:	f000 f8ed 	bl	8005612 <TIM_ITRx_SetConfig>
      break;
 8005438:	e01c      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005446:	461a      	mov	r2, r3
 8005448:	f000 f886 	bl	8005558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2140      	movs	r1, #64	@ 0x40
 8005452:	4618      	mov	r0, r3
 8005454:	f000 f8dd 	bl	8005612 <TIM_ITRx_SetConfig>
      break;
 8005458:	e00c      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4619      	mov	r1, r3
 8005464:	4610      	mov	r0, r2
 8005466:	f000 f8d4 	bl	8005612 <TIM_ITRx_SetConfig>
      break;
 800546a:	e003      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	73fb      	strb	r3, [r7, #15]
      break;
 8005470:	e000      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005472:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005484:	7bfb      	ldrb	r3, [r7, #15]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a2b      	ldr	r2, [pc, #172]	@ (8005550 <TIM_Base_SetConfig+0xc0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d007      	beq.n	80054b8 <TIM_Base_SetConfig+0x28>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ae:	d003      	beq.n	80054b8 <TIM_Base_SetConfig+0x28>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a28      	ldr	r2, [pc, #160]	@ (8005554 <TIM_Base_SetConfig+0xc4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d108      	bne.n	80054ca <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a20      	ldr	r2, [pc, #128]	@ (8005550 <TIM_Base_SetConfig+0xc0>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d007      	beq.n	80054e2 <TIM_Base_SetConfig+0x52>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d8:	d003      	beq.n	80054e2 <TIM_Base_SetConfig+0x52>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005554 <TIM_Base_SetConfig+0xc4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d108      	bne.n	80054f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a0d      	ldr	r2, [pc, #52]	@ (8005550 <TIM_Base_SetConfig+0xc0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d103      	bne.n	8005528 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	691a      	ldr	r2, [r3, #16]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f023 0201 	bic.w	r2, r3, #1
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	611a      	str	r2, [r3, #16]
  }
}
 8005546:	bf00      	nop
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	bc80      	pop	{r7}
 800554e:	4770      	bx	lr
 8005550:	40012c00 	.word	0x40012c00
 8005554:	40000400 	.word	0x40000400

08005558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005558:	b480      	push	{r7}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	f023 0201 	bic.w	r2, r3, #1
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f023 030a 	bic.w	r3, r3, #10
 8005594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4313      	orrs	r3, r2
 800559c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	621a      	str	r2, [r3, #32]
}
 80055aa:	bf00      	nop
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr

080055b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	f023 0210 	bic.w	r2, r3, #16
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	031b      	lsls	r3, r3, #12
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	621a      	str	r2, [r3, #32]
}
 8005608:	bf00      	nop
 800560a:	371c      	adds	r7, #28
 800560c:	46bd      	mov	sp, r7
 800560e:	bc80      	pop	{r7}
 8005610:	4770      	bx	lr

08005612 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005612:	b480      	push	{r7}
 8005614:	b085      	sub	sp, #20
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005628:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4313      	orrs	r3, r2
 8005630:	f043 0307 	orr.w	r3, r3, #7
 8005634:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	609a      	str	r2, [r3, #8]
}
 800563c:	bf00      	nop
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	bc80      	pop	{r7}
 8005644:	4770      	bx	lr

08005646 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005646:	b480      	push	{r7}
 8005648:	b087      	sub	sp, #28
 800564a:	af00      	add	r7, sp, #0
 800564c:	60f8      	str	r0, [r7, #12]
 800564e:	60b9      	str	r1, [r7, #8]
 8005650:	607a      	str	r2, [r7, #4]
 8005652:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005660:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	021a      	lsls	r2, r3, #8
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	431a      	orrs	r2, r3
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	4313      	orrs	r3, r2
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	609a      	str	r2, [r3, #8]
}
 800567a:	bf00      	nop
 800567c:	371c      	adds	r7, #28
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr

08005684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005698:	2302      	movs	r3, #2
 800569a:	e041      	b.n	8005720 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a14      	ldr	r2, [pc, #80]	@ (800572c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d009      	beq.n	80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e8:	d004      	beq.n	80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a10      	ldr	r2, [pc, #64]	@ (8005730 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d10c      	bne.n	800570e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	4313      	orrs	r3, r2
 8005704:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	bc80      	pop	{r7}
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40012c00 	.word	0x40012c00
 8005730:	40000400 	.word	0x40000400

08005734 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e042      	b.n	80057cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d106      	bne.n	8005760 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7fc f928 	bl	80019b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2224      	movs	r2, #36	@ 0x24
 8005764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005776:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f971 	bl	8005a60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	691a      	ldr	r2, [r3, #16]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800578c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695a      	ldr	r2, [r3, #20]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800579c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68da      	ldr	r2, [r3, #12]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08a      	sub	sp, #40	@ 0x28
 80057d8:	af02      	add	r7, sp, #8
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	4613      	mov	r3, r2
 80057e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b20      	cmp	r3, #32
 80057f2:	d175      	bne.n	80058e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <HAL_UART_Transmit+0x2c>
 80057fa:	88fb      	ldrh	r3, [r7, #6]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e06e      	b.n	80058e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2221      	movs	r2, #33	@ 0x21
 800580e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005812:	f7fc fa09 	bl	8001c28 <HAL_GetTick>
 8005816:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	88fa      	ldrh	r2, [r7, #6]
 800581c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	88fa      	ldrh	r2, [r7, #6]
 8005822:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800582c:	d108      	bne.n	8005840 <HAL_UART_Transmit+0x6c>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d104      	bne.n	8005840 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005836:	2300      	movs	r3, #0
 8005838:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	61bb      	str	r3, [r7, #24]
 800583e:	e003      	b.n	8005848 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005844:	2300      	movs	r3, #0
 8005846:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005848:	e02e      	b.n	80058a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2200      	movs	r2, #0
 8005852:	2180      	movs	r1, #128	@ 0x80
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 f848 	bl	80058ea <UART_WaitOnFlagUntilTimeout>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d005      	beq.n	800586c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2220      	movs	r2, #32
 8005864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e03a      	b.n	80058e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10b      	bne.n	800588a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005880:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	3302      	adds	r3, #2
 8005886:	61bb      	str	r3, [r7, #24]
 8005888:	e007      	b.n	800589a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	781a      	ldrb	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	3301      	adds	r3, #1
 8005898:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1cb      	bne.n	800584a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2200      	movs	r2, #0
 80058ba:	2140      	movs	r1, #64	@ 0x40
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f000 f814 	bl	80058ea <UART_WaitOnFlagUntilTimeout>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d005      	beq.n	80058d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e006      	b.n	80058e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	e000      	b.n	80058e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80058e0:	2302      	movs	r3, #2
  }
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3720      	adds	r7, #32
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b086      	sub	sp, #24
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	60f8      	str	r0, [r7, #12]
 80058f2:	60b9      	str	r1, [r7, #8]
 80058f4:	603b      	str	r3, [r7, #0]
 80058f6:	4613      	mov	r3, r2
 80058f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058fa:	e03b      	b.n	8005974 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005902:	d037      	beq.n	8005974 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005904:	f7fc f990 	bl	8001c28 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	6a3a      	ldr	r2, [r7, #32]
 8005910:	429a      	cmp	r2, r3
 8005912:	d302      	bcc.n	800591a <UART_WaitOnFlagUntilTimeout+0x30>
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e03a      	b.n	8005994 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	d023      	beq.n	8005974 <UART_WaitOnFlagUntilTimeout+0x8a>
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b80      	cmp	r3, #128	@ 0x80
 8005930:	d020      	beq.n	8005974 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b40      	cmp	r3, #64	@ 0x40
 8005936:	d01d      	beq.n	8005974 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0308 	and.w	r3, r3, #8
 8005942:	2b08      	cmp	r3, #8
 8005944:	d116      	bne.n	8005974 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005946:	2300      	movs	r3, #0
 8005948:	617b      	str	r3, [r7, #20]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	617b      	str	r3, [r7, #20]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 f81d 	bl	800599c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2208      	movs	r2, #8
 8005966:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e00f      	b.n	8005994 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	4013      	ands	r3, r2
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	429a      	cmp	r2, r3
 8005982:	bf0c      	ite	eq
 8005984:	2301      	moveq	r3, #1
 8005986:	2300      	movne	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	461a      	mov	r2, r3
 800598c:	79fb      	ldrb	r3, [r7, #7]
 800598e:	429a      	cmp	r2, r3
 8005990:	d0b4      	beq.n	80058fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800599c:	b480      	push	{r7}
 800599e:	b095      	sub	sp, #84	@ 0x54
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	330c      	adds	r3, #12
 80059aa:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	330c      	adds	r3, #12
 80059c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059c4:	643a      	str	r2, [r7, #64]	@ 0x40
 80059c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059cc:	e841 2300 	strex	r3, r2, [r1]
 80059d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e5      	bne.n	80059a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3314      	adds	r3, #20
 80059de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	f023 0301 	bic.w	r3, r3, #1
 80059ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3314      	adds	r3, #20
 80059f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a00:	e841 2300 	strex	r3, r2, [r1]
 8005a04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e5      	bne.n	80059d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d119      	bne.n	8005a48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f023 0310 	bic.w	r3, r3, #16
 8005a2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	330c      	adds	r3, #12
 8005a32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a34:	61ba      	str	r2, [r7, #24]
 8005a36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	6979      	ldr	r1, [r7, #20]
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	e841 2300 	strex	r3, r2, [r1]
 8005a40:	613b      	str	r3, [r7, #16]
   return(result);
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e5      	bne.n	8005a14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a56:	bf00      	nop
 8005a58:	3754      	adds	r7, #84	@ 0x54
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr

08005a60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	431a      	orrs	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005a9a:	f023 030c 	bic.w	r3, r3, #12
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6812      	ldr	r2, [r2, #0]
 8005aa2:	68b9      	ldr	r1, [r7, #8]
 8005aa4:	430b      	orrs	r3, r1
 8005aa6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699a      	ldr	r2, [r3, #24]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8005b74 <UART_SetConfig+0x114>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d103      	bne.n	8005ad0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ac8:	f7fd fd6c 	bl	80035a4 <HAL_RCC_GetPCLK2Freq>
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	e002      	b.n	8005ad6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ad0:	f7fd fd54 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 8005ad4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	009a      	lsls	r2, r3, #2
 8005ae0:	441a      	add	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aec:	4a22      	ldr	r2, [pc, #136]	@ (8005b78 <UART_SetConfig+0x118>)
 8005aee:	fba2 2303 	umull	r2, r3, r2, r3
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	0119      	lsls	r1, r3, #4
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4613      	mov	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	009a      	lsls	r2, r3, #2
 8005b00:	441a      	add	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8005b78 <UART_SetConfig+0x118>)
 8005b0e:	fba3 0302 	umull	r0, r3, r3, r2
 8005b12:	095b      	lsrs	r3, r3, #5
 8005b14:	2064      	movs	r0, #100	@ 0x64
 8005b16:	fb00 f303 	mul.w	r3, r0, r3
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	3332      	adds	r3, #50	@ 0x32
 8005b20:	4a15      	ldr	r2, [pc, #84]	@ (8005b78 <UART_SetConfig+0x118>)
 8005b22:	fba2 2303 	umull	r2, r3, r2, r3
 8005b26:	095b      	lsrs	r3, r3, #5
 8005b28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b2c:	4419      	add	r1, r3
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4613      	mov	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	009a      	lsls	r2, r3, #2
 8005b38:	441a      	add	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b44:	4b0c      	ldr	r3, [pc, #48]	@ (8005b78 <UART_SetConfig+0x118>)
 8005b46:	fba3 0302 	umull	r0, r3, r3, r2
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	2064      	movs	r0, #100	@ 0x64
 8005b4e:	fb00 f303 	mul.w	r3, r0, r3
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	3332      	adds	r3, #50	@ 0x32
 8005b58:	4a07      	ldr	r2, [pc, #28]	@ (8005b78 <UART_SetConfig+0x118>)
 8005b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5e:	095b      	lsrs	r3, r3, #5
 8005b60:	f003 020f 	and.w	r2, r3, #15
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	440a      	add	r2, r1
 8005b6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b6c:	bf00      	nop
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	40013800 	.word	0x40013800
 8005b78:	51eb851f 	.word	0x51eb851f

08005b7c <set_alarm>:
#include "AlarmReset.h"
#include "stm32f1xx_hal.h"

extern RTC_HandleTypeDef hrtc;

void set_alarm(uint8_t sec) {
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4603      	mov	r3, r0
 8005b84:	71fb      	strb	r3, [r7, #7]
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 8005b86:	4b19      	ldr	r3, [pc, #100]	@ (8005bec <set_alarm+0x70>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d10f      	bne.n	8005bb2 <set_alarm+0x36>
		// MCU проснулся из Standby
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8005b92:	4b16      	ldr	r3, [pc, #88]	@ (8005bec <set_alarm+0x70>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a15      	ldr	r2, [pc, #84]	@ (8005bec <set_alarm+0x70>)
 8005b98:	f043 0308 	orr.w	r3, r3, #8
 8005b9c:	6013      	str	r3, [r2, #0]
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8005b9e:	4b13      	ldr	r3, [pc, #76]	@ (8005bec <set_alarm+0x70>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a12      	ldr	r2, [pc, #72]	@ (8005bec <set_alarm+0x70>)
 8005ba4:	f043 0304 	orr.w	r3, r3, #4
 8005ba8:	6013      	str	r3, [r2, #0]

		// ОЧИСТИТЬ БУДИЛЬНИК
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8005baa:	2100      	movs	r1, #0
 8005bac:	4810      	ldr	r0, [pc, #64]	@ (8005bf0 <set_alarm+0x74>)
 8005bae:	f7fe fa01 	bl	8003fb4 <HAL_RTC_DeactivateAlarm>
	}

	RTC_AlarmTypeDef sAlarm = { 0 };
 8005bb2:	f107 0308 	add.w	r3, r7, #8
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	605a      	str	r2, [r3, #4]

	sAlarm.AlarmTime.Hours = 0;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = sec;
 8005bc4:	79fb      	ldrb	r3, [r7, #7]
 8005bc6:	72bb      	strb	r3, [r7, #10]
	sAlarm.Alarm = RTC_ALARM_A;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60fb      	str	r3, [r7, #12]
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 8005bcc:	f107 0308 	add.w	r3, r7, #8
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4806      	ldr	r0, [pc, #24]	@ (8005bf0 <set_alarm+0x74>)
 8005bd6:	f7fe f935 	bl	8003e44 <HAL_RTC_SetAlarm_IT>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <set_alarm+0x68>
		Error_Handler();
 8005be0:	f7fb fd86 	bl	80016f0 <Error_Handler>
	}

}
 8005be4:	bf00      	nop
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	40007000 	.word	0x40007000
 8005bf0:	200000d8 	.word	0x200000d8

08005bf4 <get_battery_level>:

extern Battery_t Battery;

static uint8_t battery_percent_from_voltage(float);

Battery_t get_battery_level() {
 8005bf4:	b590      	push	{r4, r7, lr}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]

	debug("Polling for battery status...");
 8005bfc:	483f      	ldr	r0, [pc, #252]	@ (8005cfc <get_battery_level+0x108>)
 8005bfe:	f000 f925 	bl	8005e4c <debug>
	HAL_ADC_Start(&hadc1);
 8005c02:	483f      	ldr	r0, [pc, #252]	@ (8005d00 <get_battery_level+0x10c>)
 8005c04:	f7fc f9f6 	bl	8001ff4 <HAL_ADC_Start>

	uint16_t adc_val = 0;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	82fb      	strh	r3, [r7, #22]
	uint16_t temp_val;

	for (uint8_t i = 0; i <= 2; i++) {
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	757b      	strb	r3, [r7, #21]
 8005c10:	e014      	b.n	8005c3c <get_battery_level+0x48>

		HAL_ADC_PollForConversion(&hadc1, 10);
 8005c12:	210a      	movs	r1, #10
 8005c14:	483a      	ldr	r0, [pc, #232]	@ (8005d00 <get_battery_level+0x10c>)
 8005c16:	f7fc fac7 	bl	80021a8 <HAL_ADC_PollForConversion>

		temp_val = (uint16_t) HAL_ADC_GetValue(&hadc1);
 8005c1a:	4839      	ldr	r0, [pc, #228]	@ (8005d00 <get_battery_level+0x10c>)
 8005c1c:	f7fc fbca 	bl	80023b4 <HAL_ADC_GetValue>
 8005c20:	4603      	mov	r3, r0
 8005c22:	81fb      	strh	r3, [r7, #14]

		HAL_ADC_Stop(&hadc1);
 8005c24:	4836      	ldr	r0, [pc, #216]	@ (8005d00 <get_battery_level+0x10c>)
 8005c26:	f7fc fa93 	bl	8002150 <HAL_ADC_Stop>

		if (temp_val > adc_val)
 8005c2a:	89fa      	ldrh	r2, [r7, #14]
 8005c2c:	8afb      	ldrh	r3, [r7, #22]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d901      	bls.n	8005c36 <get_battery_level+0x42>
			adc_val = temp_val;
 8005c32:	89fb      	ldrh	r3, [r7, #14]
 8005c34:	82fb      	strh	r3, [r7, #22]
	for (uint8_t i = 0; i <= 2; i++) {
 8005c36:	7d7b      	ldrb	r3, [r7, #21]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	757b      	strb	r3, [r7, #21]
 8005c3c:	7d7b      	ldrb	r3, [r7, #21]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d9e7      	bls.n	8005c12 <get_battery_level+0x1e>
	 *  R2=3.3K
	 *  k=1.675
	 *  => Vmax = 2.7V
	 */

	float vref = 3.3f;
 8005c42:	4b30      	ldr	r3, [pc, #192]	@ (8005d04 <get_battery_level+0x110>)
 8005c44:	613b      	str	r3, [r7, #16]

	Battery.vdd = (vref / 2.7f) * vref * adc_val / 4095.0f;
 8005c46:	4930      	ldr	r1, [pc, #192]	@ (8005d08 <get_battery_level+0x114>)
 8005c48:	6938      	ldr	r0, [r7, #16]
 8005c4a:	f7fb f83f 	bl	8000ccc <__aeabi_fdiv>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	6939      	ldr	r1, [r7, #16]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fa ff86 	bl	8000b64 <__aeabi_fmul>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	461c      	mov	r4, r3
 8005c5c:	8afb      	ldrh	r3, [r7, #22]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fa ff2c 	bl	8000abc <__aeabi_i2f>
 8005c64:	4603      	mov	r3, r0
 8005c66:	4619      	mov	r1, r3
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f7fa ff7b 	bl	8000b64 <__aeabi_fmul>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	4926      	ldr	r1, [pc, #152]	@ (8005d0c <get_battery_level+0x118>)
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7fb f82a 	bl	8000ccc <__aeabi_fdiv>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	4b24      	ldr	r3, [pc, #144]	@ (8005d10 <get_battery_level+0x11c>)
 8005c7e:	601a      	str	r2, [r3, #0]

	Battery.charge_percent = battery_percent_from_voltage(Battery.vdd);
 8005c80:	4b23      	ldr	r3, [pc, #140]	@ (8005d10 <get_battery_level+0x11c>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 f84f 	bl	8005d28 <battery_percent_from_voltage>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4b20      	ldr	r3, [pc, #128]	@ (8005d10 <get_battery_level+0x11c>)
 8005c90:	711a      	strb	r2, [r3, #4]

	debug("Battery status:");
 8005c92:	4820      	ldr	r0, [pc, #128]	@ (8005d14 <get_battery_level+0x120>)
 8005c94:	f000 f8da 	bl	8005e4c <debug>
	debug("\tVDD: %d.%02d", (uint8_t) Battery.vdd,
 8005c98:	4b1d      	ldr	r3, [pc, #116]	@ (8005d10 <get_battery_level+0x11c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7fb f927 	bl	8000ef0 <__aeabi_f2uiz>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	461c      	mov	r4, r3
			(uint16_t) (Battery.vdd * 100) % 100);
 8005ca8:	4b19      	ldr	r3, [pc, #100]	@ (8005d10 <get_battery_level+0x11c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	491a      	ldr	r1, [pc, #104]	@ (8005d18 <get_battery_level+0x124>)
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fa ff58 	bl	8000b64 <__aeabi_fmul>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fb f91a 	bl	8000ef0 <__aeabi_f2uiz>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	b29b      	uxth	r3, r3
	debug("\tVDD: %d.%02d", (uint8_t) Battery.vdd,
 8005cc0:	4a16      	ldr	r2, [pc, #88]	@ (8005d1c <get_battery_level+0x128>)
 8005cc2:	fba2 1203 	umull	r1, r2, r2, r3
 8005cc6:	0952      	lsrs	r2, r2, #5
 8005cc8:	2164      	movs	r1, #100	@ 0x64
 8005cca:	fb01 f202 	mul.w	r2, r1, r2
 8005cce:	1a9b      	subs	r3, r3, r2
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	4812      	ldr	r0, [pc, #72]	@ (8005d20 <get_battery_level+0x12c>)
 8005cd8:	f000 f8b8 	bl	8005e4c <debug>
	debug("\tPercent: %d\n\r", Battery.charge_percent);
 8005cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8005d10 <get_battery_level+0x11c>)
 8005cde:	791b      	ldrb	r3, [r3, #4]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4810      	ldr	r0, [pc, #64]	@ (8005d24 <get_battery_level+0x130>)
 8005ce4:	f000 f8b2 	bl	8005e4c <debug>

	return Battery;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a09      	ldr	r2, [pc, #36]	@ (8005d10 <get_battery_level+0x11c>)
 8005cec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005cf0:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	371c      	adds	r7, #28
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd90      	pop	{r4, r7, pc}
 8005cfc:	080073a0 	.word	0x080073a0
 8005d00:	20000078 	.word	0x20000078
 8005d04:	40533333 	.word	0x40533333
 8005d08:	402ccccd 	.word	0x402ccccd
 8005d0c:	457ff000 	.word	0x457ff000
 8005d10:	200001e0 	.word	0x200001e0
 8005d14:	080073c0 	.word	0x080073c0
 8005d18:	42c80000 	.word	0x42c80000
 8005d1c:	51eb851f 	.word	0x51eb851f
 8005d20:	080073d0 	.word	0x080073d0
 8005d24:	080073e0 	.word	0x080073e0

08005d28 <battery_percent_from_voltage>:

static uint8_t battery_percent_from_voltage(float voltage) {
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]

	if (voltage >= 3.2f)
 8005d30:	4937      	ldr	r1, [pc, #220]	@ (8005e10 <battery_percent_from_voltage+0xe8>)
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7fb f8c8 	bl	8000ec8 <__aeabi_fcmpge>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <battery_percent_from_voltage+0x1a>
		return 100;
 8005d3e:	2364      	movs	r3, #100	@ 0x64
 8005d40:	e061      	b.n	8005e06 <battery_percent_from_voltage+0xde>
	else if (voltage >= 2.9f)
 8005d42:	4934      	ldr	r1, [pc, #208]	@ (8005e14 <battery_percent_from_voltage+0xec>)
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7fb f8bf 	bl	8000ec8 <__aeabi_fcmpge>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d019      	beq.n	8005d84 <battery_percent_from_voltage+0x5c>
		return (uint8_t) (80 + (voltage - 2.9f) / 0.3f * 20);
 8005d50:	4930      	ldr	r1, [pc, #192]	@ (8005e14 <battery_percent_from_voltage+0xec>)
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7fa fdfc 	bl	8000950 <__aeabi_fsub>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	492f      	ldr	r1, [pc, #188]	@ (8005e18 <battery_percent_from_voltage+0xf0>)
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fa ffb5 	bl	8000ccc <__aeabi_fdiv>
 8005d62:	4603      	mov	r3, r0
 8005d64:	492d      	ldr	r1, [pc, #180]	@ (8005e1c <battery_percent_from_voltage+0xf4>)
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fa fefc 	bl	8000b64 <__aeabi_fmul>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	492c      	ldr	r1, [pc, #176]	@ (8005e20 <battery_percent_from_voltage+0xf8>)
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7fa fdef 	bl	8000954 <__addsf3>
 8005d76:	4603      	mov	r3, r0
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fb f8b9 	bl	8000ef0 <__aeabi_f2uiz>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	e040      	b.n	8005e06 <battery_percent_from_voltage+0xde>
	else if (voltage >= 2.5f)
 8005d84:	4927      	ldr	r1, [pc, #156]	@ (8005e24 <battery_percent_from_voltage+0xfc>)
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7fb f89e 	bl	8000ec8 <__aeabi_fcmpge>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d019      	beq.n	8005dc6 <battery_percent_from_voltage+0x9e>
		return (uint8_t) (20 + (voltage - 2.5f) / 0.4f * 60);
 8005d92:	4924      	ldr	r1, [pc, #144]	@ (8005e24 <battery_percent_from_voltage+0xfc>)
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7fa fddb 	bl	8000950 <__aeabi_fsub>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	4922      	ldr	r1, [pc, #136]	@ (8005e28 <battery_percent_from_voltage+0x100>)
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fa ff94 	bl	8000ccc <__aeabi_fdiv>
 8005da4:	4603      	mov	r3, r0
 8005da6:	4921      	ldr	r1, [pc, #132]	@ (8005e2c <battery_percent_from_voltage+0x104>)
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fa fedb 	bl	8000b64 <__aeabi_fmul>
 8005dae:	4603      	mov	r3, r0
 8005db0:	491a      	ldr	r1, [pc, #104]	@ (8005e1c <battery_percent_from_voltage+0xf4>)
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fa fdce 	bl	8000954 <__addsf3>
 8005db8:	4603      	mov	r3, r0
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fb f898 	bl	8000ef0 <__aeabi_f2uiz>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	e01f      	b.n	8005e06 <battery_percent_from_voltage+0xde>
	else if (voltage >= 2.0f)
 8005dc6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7fb f87c 	bl	8000ec8 <__aeabi_fcmpge>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d016      	beq.n	8005e04 <battery_percent_from_voltage+0xdc>
		return (uint8_t) ((voltage - 2.0f) / 0.5f * 20);
 8005dd6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7fa fdb8 	bl	8000950 <__aeabi_fsub>
 8005de0:	4603      	mov	r3, r0
 8005de2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fa ff70 	bl	8000ccc <__aeabi_fdiv>
 8005dec:	4603      	mov	r3, r0
 8005dee:	490b      	ldr	r1, [pc, #44]	@ (8005e1c <battery_percent_from_voltage+0xf4>)
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7fa feb7 	bl	8000b64 <__aeabi_fmul>
 8005df6:	4603      	mov	r3, r0
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fb f879 	bl	8000ef0 <__aeabi_f2uiz>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	e000      	b.n	8005e06 <battery_percent_from_voltage+0xde>
	else
		return 0;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	404ccccd 	.word	0x404ccccd
 8005e14:	4039999a 	.word	0x4039999a
 8005e18:	3e99999a 	.word	0x3e99999a
 8005e1c:	41a00000 	.word	0x41a00000
 8005e20:	42a00000 	.word	0x42a00000
 8005e24:	40200000 	.word	0x40200000
 8005e28:	3ecccccd 	.word	0x3ecccccd
 8005e2c:	42700000 	.word	0x42700000

08005e30 <debug_init>:
#include <string.h>
#include "main.h"

static UART_HandleTypeDef *huart;

void debug_init(UART_HandleTypeDef *hu) {
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
	huart = hu;
 8005e38:	4a03      	ldr	r2, [pc, #12]	@ (8005e48 <debug_init+0x18>)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6013      	str	r3, [r2, #0]
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bc80      	pop	{r7}
 8005e46:	4770      	bx	lr
 8005e48:	20000200 	.word	0x20000200

08005e4c <debug>:

void debug(const char *format, ...) {
 8005e4c:	b40f      	push	{r0, r1, r2, r3}
 8005e4e:	b590      	push	{r4, r7, lr}
 8005e50:	b0bd      	sub	sp, #244	@ 0xf4
 8005e52:	af02      	add	r7, sp, #8
	char buffer[128];

	char msg[96];

	va_list args;
	va_start(args, format);
 8005e54:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8005e58:	607b      	str	r3, [r7, #4]
	vsnprintf(msg, sizeof(msg), format, args);
 8005e5a:	f107 0008 	add.w	r0, r7, #8
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8005e64:	2160      	movs	r1, #96	@ 0x60
 8005e66:	f000 fd61 	bl	800692c <vsniprintf>
	va_end(args);

	snprintf(buffer, sizeof(buffer), "[%4lu ms] %s\n\r", HAL_GetTick(), msg);
 8005e6a:	f7fb fedd 	bl	8001c28 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8005e74:	f107 0308 	add.w	r3, r7, #8
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8005eb4 <debug+0x68>)
 8005e7e:	2180      	movs	r1, #128	@ 0x80
 8005e80:	f000 fcf0 	bl	8006864 <sniprintf>

	HAL_UART_Transmit(huart, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8005e84:	4b0c      	ldr	r3, [pc, #48]	@ (8005eb8 <debug+0x6c>)
 8005e86:	681c      	ldr	r4, [r3, #0]
 8005e88:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7fa f95d 	bl	800014c <strlen>
 8005e92:	4603      	mov	r3, r0
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8005e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f7ff fc98 	bl	80057d4 <HAL_UART_Transmit>
}
 8005ea4:	bf00      	nop
 8005ea6:	37ec      	adds	r7, #236	@ 0xec
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005eae:	b004      	add	sp, #16
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	080073f0 	.word	0x080073f0
 8005eb8:	20000200 	.word	0x20000200

08005ebc <TIM2_Delay_us>:
#include <stdint.h>
#include "stm32f1xx_hal.h"

extern TIM_HandleTypeDef htim2;

void TIM2_Delay_us(uint32_t us) {
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]

	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8005ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef0 <TIM2_Delay_us+0x34>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_Base_Start(&htim2);
 8005ecc:	4808      	ldr	r0, [pc, #32]	@ (8005ef0 <TIM2_Delay_us+0x34>)
 8005ece:	f7ff f9ad 	bl	800522c <HAL_TIM_Base_Start>

	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8005ed2:	bf00      	nop
 8005ed4:	4b06      	ldr	r3, [pc, #24]	@ (8005ef0 <TIM2_Delay_us+0x34>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d8f9      	bhi.n	8005ed4 <TIM2_Delay_us+0x18>
		;

	HAL_TIM_Base_Stop(&htim2);
 8005ee0:	4803      	ldr	r0, [pc, #12]	@ (8005ef0 <TIM2_Delay_us+0x34>)
 8005ee2:	f7ff f9e7 	bl	80052b4 <HAL_TIM_Base_Stop>
}
 8005ee6:	bf00      	nop
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20000144 	.word	0x20000144

08005ef4 <poll_sensor>:
#include "Delay_ns.h"

static ADC_HandleTypeDef *hadc;
static float alarm_level;

static float poll_sensor(uint8_t times) {
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	4603      	mov	r3, r0
 8005efc:	71fb      	strb	r3, [r7, #7]

	uint32_t adc_V0 = 0;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60fb      	str	r3, [r7, #12]

	for (uint8_t i = 1; i <= times; i++) {
 8005f02:	2301      	movs	r3, #1
 8005f04:	72fb      	strb	r3, [r7, #11]
 8005f06:	e035      	b.n	8005f74 <poll_sensor+0x80>

		HAL_GPIO_WritePin(V_LED_GPIO_Port, V_LED_Pin, GPIO_PIN_RESET);
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f0e:	4827      	ldr	r0, [pc, #156]	@ (8005fac <poll_sensor+0xb8>)
 8005f10:	f7fc ff2e 	bl	8002d70 <HAL_GPIO_WritePin>

		TIM2_Delay_us(280);
 8005f14:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8005f18:	f7ff ffd0 	bl	8005ebc <TIM2_Delay_us>

		HAL_ADC_Start(hadc);
 8005f1c:	4b24      	ldr	r3, [pc, #144]	@ (8005fb0 <poll_sensor+0xbc>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fc f867 	bl	8001ff4 <HAL_ADC_Start>

		HAL_ADC_PollForConversion(hadc, 10);
 8005f26:	4b22      	ldr	r3, [pc, #136]	@ (8005fb0 <poll_sensor+0xbc>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	210a      	movs	r1, #10
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fc f93b 	bl	80021a8 <HAL_ADC_PollForConversion>

		uint16_t v_temp = (uint16_t) HAL_ADC_GetValue(hadc);
 8005f32:	4b1f      	ldr	r3, [pc, #124]	@ (8005fb0 <poll_sensor+0xbc>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fc fa3c 	bl	80023b4 <HAL_ADC_GetValue>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	813b      	strh	r3, [r7, #8]

		HAL_ADC_Stop(hadc);
 8005f40:	4b1b      	ldr	r3, [pc, #108]	@ (8005fb0 <poll_sensor+0xbc>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7fc f903 	bl	8002150 <HAL_ADC_Stop>

		if (v_temp > adc_V0)
 8005f4a:	893b      	ldrh	r3, [r7, #8]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d201      	bcs.n	8005f56 <poll_sensor+0x62>
			adc_V0 = v_temp;
 8005f52:	893b      	ldrh	r3, [r7, #8]
 8005f54:	60fb      	str	r3, [r7, #12]

		TIM2_Delay_us(40);
 8005f56:	2028      	movs	r0, #40	@ 0x28
 8005f58:	f7ff ffb0 	bl	8005ebc <TIM2_Delay_us>

		HAL_GPIO_WritePin(V_LED_GPIO_Port, V_LED_Pin, GPIO_PIN_SET);
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f62:	4812      	ldr	r0, [pc, #72]	@ (8005fac <poll_sensor+0xb8>)
 8005f64:	f7fc ff04 	bl	8002d70 <HAL_GPIO_WritePin>

		HAL_Delay(10);
 8005f68:	200a      	movs	r0, #10
 8005f6a:	f7fb fe67 	bl	8001c3c <HAL_Delay>
	for (uint8_t i = 1; i <= times; i++) {
 8005f6e:	7afb      	ldrb	r3, [r7, #11]
 8005f70:	3301      	adds	r3, #1
 8005f72:	72fb      	strb	r3, [r7, #11]
 8005f74:	7afa      	ldrb	r2, [r7, #11]
 8005f76:	79fb      	ldrb	r3, [r7, #7]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d9c5      	bls.n	8005f08 <poll_sensor+0x14>
	 *  R2=10k
	 *  k=0.5
	 *
	 */

	return adc_V0 / 4095.0f * 3.3f * 2.0f;
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f7fa fd99 	bl	8000ab4 <__aeabi_ui2f>
 8005f82:	4603      	mov	r3, r0
 8005f84:	490b      	ldr	r1, [pc, #44]	@ (8005fb4 <poll_sensor+0xc0>)
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fa fea0 	bl	8000ccc <__aeabi_fdiv>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	490a      	ldr	r1, [pc, #40]	@ (8005fb8 <poll_sensor+0xc4>)
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fa fde7 	bl	8000b64 <__aeabi_fmul>
 8005f96:	4603      	mov	r3, r0
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fa fcda 	bl	8000954 <__addsf3>
 8005fa0:	4603      	mov	r3, r0

}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	40010c00 	.word	0x40010c00
 8005fb0:	20000204 	.word	0x20000204
 8005fb4:	457ff000 	.word	0x457ff000
 8005fb8:	40533333 	.word	0x40533333

08005fbc <get_infra_sensor_data>:

float get_infra_sensor_data(ADC_HandleTypeDef *ha, float alarm_lvl) {
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]

	hadc = ha;
 8005fc6:	4a0f      	ldr	r2, [pc, #60]	@ (8006004 <get_infra_sensor_data+0x48>)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6013      	str	r3, [r2, #0]
	alarm_level = alarm_lvl;
 8005fcc:	4a0e      	ldr	r2, [pc, #56]	@ (8006008 <get_infra_sensor_data+0x4c>)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	6013      	str	r3, [r2, #0]

	// Sensor stabilization for 100ms
	HAL_Delay(100);
 8005fd2:	2064      	movs	r0, #100	@ 0x64
 8005fd4:	f7fb fe32 	bl	8001c3c <HAL_Delay>

	float real_adc_V0;

	real_adc_V0 = poll_sensor(1);
 8005fd8:	2001      	movs	r0, #1
 8005fda:	f7ff ff8b 	bl	8005ef4 <poll_sensor>
 8005fde:	60f8      	str	r0, [r7, #12]

	// Recheck when alarm threshold is exceeded
	if (real_adc_V0 >= alarm_level) {
 8005fe0:	4b09      	ldr	r3, [pc, #36]	@ (8006008 <get_infra_sensor_data+0x4c>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f7fa ff6e 	bl	8000ec8 <__aeabi_fcmpge>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <get_infra_sensor_data+0x3e>
		real_adc_V0 = poll_sensor(3);
 8005ff2:	2003      	movs	r0, #3
 8005ff4:	f7ff ff7e 	bl	8005ef4 <poll_sensor>
 8005ff8:	60f8      	str	r0, [r7, #12]
	}

	return real_adc_V0;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	20000204 	.word	0x20000204
 8006008:	20000208 	.word	0x20000208

0800600c <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 800600c:	b4b0      	push	{r4, r5, r7}
 800600e:	b08f      	sub	sp, #60	@ 0x3c
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8006014:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8006018:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800601a:	2307      	movs	r3, #7
 800601c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8006020:	2307      	movs	r3, #7
 8006022:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8006026:	2301      	movs	r3, #1
 8006028:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 800602c:	23ff      	movs	r3, #255	@ 0xff
 800602e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8006032:	2364      	movs	r3, #100	@ 0x64
 8006034:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8006038:	2308      	movs	r3, #8
 800603a:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	461d      	mov	r5, r3
 8006040:	f107 040c 	add.w	r4, r7, #12
 8006044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800604a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800604c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006050:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	373c      	adds	r7, #60	@ 0x3c
 8006058:	46bd      	mov	sp, r7
 800605a:	bcb0      	pop	{r4, r5, r7}
 800605c:	4770      	bx	lr

0800605e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8006068:	2101      	movs	r1, #1
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f9ff 	bl	800646e <LoRa_read>
 8006070:	4603      	mov	r3, r0
 8006072:	73bb      	strb	r3, [r7, #14]
	data = read;
 8006074:	7bbb      	ldrb	r3, [r7, #14]
 8006076:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d107      	bne.n	800608e <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800607e:	7bbb      	ldrb	r3, [r7, #14]
 8006080:	f023 0307 	bic.w	r3, r3, #7
 8006084:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	61da      	str	r2, [r3, #28]
 800608c:	e03e      	b.n	800610c <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d10c      	bne.n	80060ae <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8006094:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006098:	f023 0307 	bic.w	r3, r3, #7
 800609c:	b25b      	sxtb	r3, r3
 800609e:	f043 0301 	orr.w	r3, r3, #1
 80060a2:	b25b      	sxtb	r3, r3
 80060a4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	61da      	str	r2, [r3, #28]
 80060ac:	e02e      	b.n	800610c <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d10c      	bne.n	80060ce <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80060b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060b8:	f023 0307 	bic.w	r3, r3, #7
 80060bc:	b25b      	sxtb	r3, r3
 80060be:	f043 0303 	orr.w	r3, r3, #3
 80060c2:	b25b      	sxtb	r3, r3
 80060c4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2203      	movs	r2, #3
 80060ca:	61da      	str	r2, [r3, #28]
 80060cc:	e01e      	b.n	800610c <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b05      	cmp	r3, #5
 80060d2:	d10c      	bne.n	80060ee <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80060d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060d8:	f023 0307 	bic.w	r3, r3, #7
 80060dc:	b25b      	sxtb	r3, r3
 80060de:	f043 0305 	orr.w	r3, r3, #5
 80060e2:	b25b      	sxtb	r3, r3
 80060e4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2205      	movs	r2, #5
 80060ea:	61da      	str	r2, [r3, #28]
 80060ec:	e00e      	b.n	800610c <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b06      	cmp	r3, #6
 80060f2:	d10b      	bne.n	800610c <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80060f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060f8:	f023 0307 	bic.w	r3, r3, #7
 80060fc:	b25b      	sxtb	r3, r3
 80060fe:	f043 0306 	orr.w	r3, r3, #6
 8006102:	b25b      	sxtb	r3, r3
 8006104:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2206      	movs	r2, #6
 800610a:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 800610c:	7bfb      	ldrb	r3, [r7, #15]
 800610e:	461a      	mov	r2, r3
 8006110:	2101      	movs	r1, #1
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f9c5 	bl	80064a2 <LoRa_write>
	//HAL_Delay(10);
}
 8006118:	bf00      	nop
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	603b      	str	r3, [r7, #0]
 800612c:	4613      	mov	r3, r2
 800612e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6818      	ldr	r0, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	889b      	ldrh	r3, [r3, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	4619      	mov	r1, r3
 800613c:	f7fc fe18 	bl	8002d70 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6998      	ldr	r0, [r3, #24]
 8006144:	88fa      	ldrh	r2, [r7, #6]
 8006146:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	f7fe fb01 	bl	8004752 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8006150:	bf00      	nop
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	4618      	mov	r0, r3
 8006158:	f7fe ff01 	bl	8004f5e <HAL_SPI_GetState>
 800615c:	4603      	mov	r3, r0
 800615e:	2b01      	cmp	r3, #1
 8006160:	d1f7      	bne.n	8006152 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6998      	ldr	r0, [r3, #24]
 8006166:	8b3a      	ldrh	r2, [r7, #24]
 8006168:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800616c:	6839      	ldr	r1, [r7, #0]
 800616e:	f7fe fc34 	bl	80049da <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8006172:	bf00      	nop
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	4618      	mov	r0, r3
 800617a:	f7fe fef0 	bl	8004f5e <HAL_SPI_GetState>
 800617e:	4603      	mov	r3, r0
 8006180:	2b01      	cmp	r3, #1
 8006182:	d1f7      	bne.n	8006174 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6818      	ldr	r0, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	889b      	ldrh	r3, [r3, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	4619      	mov	r1, r3
 8006190:	f7fc fdee 	bl	8002d70 <HAL_GPIO_WritePin>
}
 8006194:	bf00      	nop
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	603b      	str	r3, [r7, #0]
 80061a8:	4613      	mov	r3, r2
 80061aa:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6818      	ldr	r0, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	889b      	ldrh	r3, [r3, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	4619      	mov	r1, r3
 80061b8:	f7fc fdda 	bl	8002d70 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6998      	ldr	r0, [r3, #24]
 80061c0:	88fa      	ldrh	r2, [r7, #6]
 80061c2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80061c6:	68b9      	ldr	r1, [r7, #8]
 80061c8:	f7fe fac3 	bl	8004752 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80061cc:	bf00      	nop
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fe fec3 	bl	8004f5e <HAL_SPI_GetState>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d1f7      	bne.n	80061ce <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6998      	ldr	r0, [r3, #24]
 80061e2:	8b3a      	ldrh	r2, [r7, #24]
 80061e4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80061e8:	6839      	ldr	r1, [r7, #0]
 80061ea:	f7fe fab2 	bl	8004752 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80061ee:	bf00      	nop
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7fe feb2 	bl	8004f5e <HAL_SPI_GetState>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d1f7      	bne.n	80061f0 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6818      	ldr	r0, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	889b      	ldrh	r3, [r3, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	4619      	mov	r1, r3
 800620c:	f7fc fdb0 	bl	8002d70 <HAL_GPIO_WritePin>
}
 8006210:	bf00      	nop
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	460b      	mov	r3, r1
 8006222:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8006224:	2126      	movs	r1, #38	@ 0x26
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f921 	bl	800646e <LoRa_read>
 800622c:	4603      	mov	r3, r0
 800622e:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d004      	beq.n	8006240 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8006236:	7bbb      	ldrb	r3, [r7, #14]
 8006238:	f043 0308 	orr.w	r3, r3, #8
 800623c:	73fb      	strb	r3, [r7, #15]
 800623e:	e003      	b.n	8006248 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8006240:	7bbb      	ldrb	r3, [r7, #14]
 8006242:	f023 0308 	bic.w	r3, r3, #8
 8006246:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	461a      	mov	r2, r3
 800624c:	2126      	movs	r1, #38	@ 0x26
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f927 	bl	80064a2 <LoRa_write>
	HAL_Delay(10);
 8006254:	200a      	movs	r0, #10
 8006256:	f7fb fcf1 	bl	8001c3c <HAL_Delay>
}
 800625a:	bf00      	nop
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
	...

08006264 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8006264:	b580      	push	{r7, lr}
 8006266:	b096      	sub	sp, #88	@ 0x58
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 800626c:	4a17      	ldr	r2, [pc, #92]	@ (80062cc <LoRa_setAutoLDO+0x68>)
 800626e:	f107 0308 	add.w	r3, r7, #8
 8006272:	4611      	mov	r1, r2
 8006274:	2250      	movs	r2, #80	@ 0x50
 8006276:	4618      	mov	r0, r3
 8006278:	f000 fb9a 	bl	80069b0 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006282:	461a      	mov	r2, r3
 8006284:	2301      	movs	r3, #1
 8006286:	4093      	lsls	r3, r2
 8006288:	4618      	mov	r0, r3
 800628a:	f7fa f8b9 	bl	8000400 <__aeabi_i2d>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006294:	00db      	lsls	r3, r3, #3
 8006296:	3358      	adds	r3, #88	@ 0x58
 8006298:	443b      	add	r3, r7
 800629a:	3b50      	subs	r3, #80	@ 0x50
 800629c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a0:	f7fa fa42 	bl	8000728 <__aeabi_ddiv>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4610      	mov	r0, r2
 80062aa:	4619      	mov	r1, r3
 80062ac:	f7fa fb24 	bl	80008f8 <__aeabi_d2iz>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b10      	cmp	r3, #16
 80062b4:	bfcc      	ite	gt
 80062b6:	2301      	movgt	r3, #1
 80062b8:	2300      	movle	r3, #0
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	4619      	mov	r1, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff ffaa 	bl	8006218 <LoRa_setLowDaraRateOptimization>
}
 80062c4:	bf00      	nop
 80062c6:	3758      	adds	r7, #88	@ 0x58
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	08007400 	.word	0x08007400

080062d0 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	04db      	lsls	r3, r3, #19
 80062de:	115b      	asrs	r3, r3, #5
 80062e0:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	0c1b      	lsrs	r3, r3, #16
 80062e6:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80062e8:	7afb      	ldrb	r3, [r7, #11]
 80062ea:	461a      	mov	r2, r3
 80062ec:	2106      	movs	r1, #6
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f8d7 	bl	80064a2 <LoRa_write>
	HAL_Delay(5);
 80062f4:	2005      	movs	r0, #5
 80062f6:	f7fb fca1 	bl	8001c3c <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	0a1b      	lsrs	r3, r3, #8
 80062fe:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8006300:	7afb      	ldrb	r3, [r7, #11]
 8006302:	461a      	mov	r2, r3
 8006304:	2107      	movs	r1, #7
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f8cb 	bl	80064a2 <LoRa_write>
	HAL_Delay(5);
 800630c:	2005      	movs	r0, #5
 800630e:	f7fb fc95 	bl	8001c3c <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8006316:	7afb      	ldrb	r3, [r7, #11]
 8006318:	461a      	mov	r2, r3
 800631a:	2108      	movs	r1, #8
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f8c0 	bl	80064a2 <LoRa_write>
	HAL_Delay(5);
 8006322:	2005      	movs	r0, #5
 8006324:	f7fb fc8a 	bl	8001c3c <HAL_Delay>
}
 8006328:	bf00      	nop
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b0c      	cmp	r3, #12
 800633e:	dd01      	ble.n	8006344 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8006340:	230c      	movs	r3, #12
 8006342:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2b06      	cmp	r3, #6
 8006348:	dc01      	bgt.n	800634e <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800634a:	2307      	movs	r3, #7
 800634c:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800634e:	211e      	movs	r1, #30
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f88c 	bl	800646e <LoRa_read>
 8006356:	4603      	mov	r3, r0
 8006358:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800635a:	200a      	movs	r0, #10
 800635c:	f7fb fc6e 	bl	8001c3c <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	b2db      	uxtb	r3, r3
 8006364:	011b      	lsls	r3, r3, #4
 8006366:	b2da      	uxtb	r2, r3
 8006368:	7bfb      	ldrb	r3, [r7, #15]
 800636a:	f003 030f 	and.w	r3, r3, #15
 800636e:	b2db      	uxtb	r3, r3
 8006370:	4413      	add	r3, r2
 8006372:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8006374:	7bbb      	ldrb	r3, [r7, #14]
 8006376:	461a      	mov	r2, r3
 8006378:	211e      	movs	r1, #30
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f891 	bl	80064a2 <LoRa_write>
	HAL_Delay(10);
 8006380:	200a      	movs	r0, #10
 8006382:	f7fb fc5b 	bl	8001c3c <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff ff6c 	bl	8006264 <LoRa_setAutoLDO>
}
 800638c:	bf00      	nop
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	461a      	mov	r2, r3
 80063a4:	2109      	movs	r1, #9
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f87b 	bl	80064a2 <LoRa_write>
	HAL_Delay(10);
 80063ac:	200a      	movs	r0, #10
 80063ae:	f7fb fc45 	bl	8001c3c <HAL_Delay>
}
 80063b2:	bf00      	nop
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80063cc:	78fb      	ldrb	r3, [r7, #3]
 80063ce:	2b2c      	cmp	r3, #44	@ 0x2c
 80063d0:	d801      	bhi.n	80063d6 <LoRa_setOCP+0x1a>
		current = 45;
 80063d2:	232d      	movs	r3, #45	@ 0x2d
 80063d4:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80063d6:	78fb      	ldrb	r3, [r7, #3]
 80063d8:	2bf0      	cmp	r3, #240	@ 0xf0
 80063da:	d901      	bls.n	80063e0 <LoRa_setOCP+0x24>
		current = 240;
 80063dc:	23f0      	movs	r3, #240	@ 0xf0
 80063de:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80063e0:	78fb      	ldrb	r3, [r7, #3]
 80063e2:	2b78      	cmp	r3, #120	@ 0x78
 80063e4:	d809      	bhi.n	80063fa <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80063e6:	78fb      	ldrb	r3, [r7, #3]
 80063e8:	3b2d      	subs	r3, #45	@ 0x2d
 80063ea:	4a12      	ldr	r2, [pc, #72]	@ (8006434 <LoRa_setOCP+0x78>)
 80063ec:	fb82 1203 	smull	r1, r2, r2, r3
 80063f0:	1052      	asrs	r2, r2, #1
 80063f2:	17db      	asrs	r3, r3, #31
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	73fb      	strb	r3, [r7, #15]
 80063f8:	e00b      	b.n	8006412 <LoRa_setOCP+0x56>
	else if(current <= 240)
 80063fa:	78fb      	ldrb	r3, [r7, #3]
 80063fc:	2bf0      	cmp	r3, #240	@ 0xf0
 80063fe:	d808      	bhi.n	8006412 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	331e      	adds	r3, #30
 8006404:	4a0b      	ldr	r2, [pc, #44]	@ (8006434 <LoRa_setOCP+0x78>)
 8006406:	fb82 1203 	smull	r1, r2, r2, r3
 800640a:	1092      	asrs	r2, r2, #2
 800640c:	17db      	asrs	r3, r3, #31
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8006412:	7bfb      	ldrb	r3, [r7, #15]
 8006414:	3320      	adds	r3, #32
 8006416:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8006418:	7bfb      	ldrb	r3, [r7, #15]
 800641a:	461a      	mov	r2, r3
 800641c:	210b      	movs	r1, #11
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f83f 	bl	80064a2 <LoRa_write>
	HAL_Delay(10);
 8006424:	200a      	movs	r0, #10
 8006426:	f7fb fc09 	bl	8001c3c <HAL_Delay>
}
 800642a:	bf00      	nop
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	66666667 	.word	0x66666667

08006438 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8006440:	211e      	movs	r1, #30
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f813 	bl	800646e <LoRa_read>
 8006448:	4603      	mov	r3, r0
 800644a:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 800644c:	7bfb      	ldrb	r3, [r7, #15]
 800644e:	f043 0307 	orr.w	r3, r3, #7
 8006452:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8006454:	7bbb      	ldrb	r3, [r7, #14]
 8006456:	461a      	mov	r2, r3
 8006458:	211e      	movs	r1, #30
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f821 	bl	80064a2 <LoRa_write>
	HAL_Delay(10);
 8006460:	200a      	movs	r0, #10
 8006462:	f7fb fbeb 	bl	8001c3c <HAL_Delay>
}
 8006466:	bf00      	nop
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 800646e:	b580      	push	{r7, lr}
 8006470:	b086      	sub	sp, #24
 8006472:	af02      	add	r7, sp, #8
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	460b      	mov	r3, r1
 8006478:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800647a:	78fb      	ldrb	r3, [r7, #3]
 800647c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006480:	b2db      	uxtb	r3, r3
 8006482:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8006484:	f107 030f 	add.w	r3, r7, #15
 8006488:	f107 010e 	add.w	r1, r7, #14
 800648c:	2201      	movs	r2, #1
 800648e:	9200      	str	r2, [sp, #0]
 8006490:	2201      	movs	r2, #1
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff fe44 	bl	8006120 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8006498:	7bfb      	ldrb	r3, [r7, #15]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b086      	sub	sp, #24
 80064a6:	af02      	add	r7, sp, #8
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	460b      	mov	r3, r1
 80064ac:	70fb      	strb	r3, [r7, #3]
 80064ae:	4613      	mov	r3, r2
 80064b0:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80064b2:	78fb      	ldrb	r3, [r7, #3]
 80064b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	73bb      	strb	r3, [r7, #14]
	data = value;
 80064bc:	78bb      	ldrb	r3, [r7, #2]
 80064be:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80064c0:	f107 030f 	add.w	r3, r7, #15
 80064c4:	f107 010e 	add.w	r1, r7, #14
 80064c8:	2201      	movs	r2, #1
 80064ca:	9200      	str	r2, [sp, #0]
 80064cc:	2201      	movs	r2, #1
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7ff fe64 	bl	800619c <LoRa_writeReg>
	//HAL_Delay(5);
}
 80064d4:	bf00      	nop
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	607a      	str	r2, [r7, #4]
 80064e6:	461a      	mov	r2, r3
 80064e8:	460b      	mov	r3, r1
 80064ea:	72fb      	strb	r3, [r7, #11]
 80064ec:	4613      	mov	r3, r2
 80064ee:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 80064f0:	7afb      	ldrb	r3, [r7, #11]
 80064f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6818      	ldr	r0, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	889b      	ldrh	r3, [r3, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	4619      	mov	r1, r3
 8006506:	f7fc fc33 	bl	8002d70 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6998      	ldr	r0, [r3, #24]
 800650e:	f107 0117 	add.w	r1, r7, #23
 8006512:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8006516:	2201      	movs	r2, #1
 8006518:	f7fe f91b 	bl	8004752 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800651c:	bf00      	nop
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	4618      	mov	r0, r3
 8006524:	f7fe fd1b 	bl	8004f5e <HAL_SPI_GetState>
 8006528:	4603      	mov	r3, r0
 800652a:	2b01      	cmp	r3, #1
 800652c:	d1f7      	bne.n	800651e <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6998      	ldr	r0, [r3, #24]
 8006532:	7abb      	ldrb	r3, [r7, #10]
 8006534:	b29a      	uxth	r2, r3
 8006536:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	f7fe f909 	bl	8004752 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8006540:	bf00      	nop
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	4618      	mov	r0, r3
 8006548:	f7fe fd09 	bl	8004f5e <HAL_SPI_GetState>
 800654c:	4603      	mov	r3, r0
 800654e:	2b01      	cmp	r3, #1
 8006550:	d1f7      	bne.n	8006542 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6818      	ldr	r0, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	889b      	ldrh	r3, [r3, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	4619      	mov	r1, r3
 800655e:	f7fc fc07 	bl	8002d70 <HAL_GPIO_WritePin>
}
 8006562:	bf00      	nop
 8006564:	3718      	adds	r7, #24
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]

	return 1;
 8006572:	2301      	movs	r3, #1
}
 8006574:	4618      	mov	r0, r3
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	bc80      	pop	{r7}
 800657c:	4770      	bx	lr

0800657e <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 800657e:	b580      	push	{r7, lr}
 8006580:	b086      	sub	sp, #24
 8006582:	af00      	add	r7, sp, #0
 8006584:	60f8      	str	r0, [r7, #12]
 8006586:	60b9      	str	r1, [r7, #8]
 8006588:	4611      	mov	r1, r2
 800658a:	461a      	mov	r2, r3
 800658c:	460b      	mov	r3, r1
 800658e:	71fb      	strb	r3, [r7, #7]
 8006590:	4613      	mov	r3, r2
 8006592:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800659a:	2101      	movs	r1, #1
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f7ff fd5e 	bl	800605e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80065a2:	210e      	movs	r1, #14
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f7ff ff62 	bl	800646e <LoRa_read>
 80065aa:	4603      	mov	r3, r0
 80065ac:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80065ae:	7cfb      	ldrb	r3, [r7, #19]
 80065b0:	461a      	mov	r2, r3
 80065b2:	210d      	movs	r1, #13
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f7ff ff74 	bl	80064a2 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80065ba:	79fb      	ldrb	r3, [r7, #7]
 80065bc:	461a      	mov	r2, r3
 80065be:	2122      	movs	r1, #34	@ 0x22
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f7ff ff6e 	bl	80064a2 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80065c6:	79fb      	ldrb	r3, [r7, #7]
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	2100      	movs	r1, #0
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f7ff ff85 	bl	80064dc <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80065d2:	2103      	movs	r1, #3
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f7ff fd42 	bl	800605e <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80065da:	2112      	movs	r1, #18
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7ff ff46 	bl	800646e <LoRa_read>
 80065e2:	4603      	mov	r3, r0
 80065e4:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 80065e6:	7cfb      	ldrb	r3, [r7, #19]
 80065e8:	f003 0308 	and.w	r3, r3, #8
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00a      	beq.n	8006606 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80065f0:	22ff      	movs	r2, #255	@ 0xff
 80065f2:	2112      	movs	r1, #18
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f7ff ff54 	bl	80064a2 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 80065fa:	6979      	ldr	r1, [r7, #20]
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f7ff fd2e 	bl	800605e <LoRa_gotoMode>
			return 1;
 8006602:	2301      	movs	r3, #1
 8006604:	e00f      	b.n	8006626 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8006606:	88bb      	ldrh	r3, [r7, #4]
 8006608:	3b01      	subs	r3, #1
 800660a:	80bb      	strh	r3, [r7, #4]
 800660c:	88bb      	ldrh	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d105      	bne.n	800661e <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8006612:	6979      	ldr	r1, [r7, #20]
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f7ff fd22 	bl	800605e <LoRa_gotoMode>
				return 0;
 800661a:	2300      	movs	r3, #0
 800661c:	e003      	b.n	8006626 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 800661e:	2001      	movs	r0, #1
 8006620:	f7fb fb0c 	bl	8001c3c <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8006624:	e7d9      	b.n	80065da <LoRa_transmit+0x5c>
	}
}
 8006626:	4618      	mov	r0, r3
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800662e:	b580      	push	{r7, lr}
 8006630:	b084      	sub	sp, #16
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7ff ff97 	bl	800656a <LoRa_isvalid>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 8096 	beq.w	8006770 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8006644:	2100      	movs	r1, #0
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7ff fd09 	bl	800605e <LoRa_gotoMode>
			HAL_Delay(10);
 800664c:	200a      	movs	r0, #10
 800664e:	f7fb faf5 	bl	8001c3c <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8006652:	2101      	movs	r1, #1
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7ff ff0a 	bl	800646e <LoRa_read>
 800665a:	4603      	mov	r3, r0
 800665c:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 800665e:	200a      	movs	r0, #10
 8006660:	f7fb faec 	bl	8001c3c <HAL_Delay>
			data = read | 0x80;
 8006664:	7bfb      	ldrb	r3, [r7, #15]
 8006666:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800666a:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 800666c:	7bbb      	ldrb	r3, [r7, #14]
 800666e:	461a      	mov	r2, r3
 8006670:	2101      	movs	r1, #1
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7ff ff15 	bl	80064a2 <LoRa_write>
			HAL_Delay(100);
 8006678:	2064      	movs	r0, #100	@ 0x64
 800667a:	f7fb fadf 	bl	8001c3c <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	4619      	mov	r1, r3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7ff fe23 	bl	80062d0 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7ff fe7e 	bl	8006394 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800669e:	4619      	mov	r1, r3
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7ff fe8b 	bl	80063bc <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80066a6:	2223      	movs	r2, #35	@ 0x23
 80066a8:	210c      	movs	r1, #12
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7ff fef9 	bl	80064a2 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7ff fec1 	bl	8006438 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7ff fe36 	bl	8006330 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80066c4:	22ff      	movs	r2, #255	@ 0xff
 80066c6:	211f      	movs	r1, #31
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff feea 	bl	80064a2 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80066ce:	2300      	movs	r3, #0
 80066d0:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80066d8:	011b      	lsls	r3, r3, #4
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	4413      	add	r3, r2
 80066e8:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
 80066ec:	461a      	mov	r2, r3
 80066ee:	211d      	movs	r1, #29
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7ff fed6 	bl	80064a2 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7ff fdb4 	bl	8006264 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006700:	0a1b      	lsrs	r3, r3, #8
 8006702:	b29b      	uxth	r3, r3
 8006704:	b2db      	uxtb	r3, r3
 8006706:	461a      	mov	r2, r3
 8006708:	2120      	movs	r1, #32
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7ff fec9 	bl	80064a2 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006714:	b2db      	uxtb	r3, r3
 8006716:	461a      	mov	r2, r3
 8006718:	2121      	movs	r1, #33	@ 0x21
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7ff fec1 	bl	80064a2 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8006720:	2140      	movs	r1, #64	@ 0x40
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7ff fea3 	bl	800646e <LoRa_read>
 8006728:	4603      	mov	r3, r0
 800672a:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 800672c:	7bfb      	ldrb	r3, [r7, #15]
 800672e:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8006732:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8006734:	7bbb      	ldrb	r3, [r7, #14]
 8006736:	461a      	mov	r2, r3
 8006738:	2140      	movs	r1, #64	@ 0x40
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff feb1 	bl	80064a2 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8006740:	2101      	movs	r1, #1
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7ff fc8b 	bl	800605e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 800674e:	200a      	movs	r0, #10
 8006750:	f7fb fa74 	bl	8001c3c <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8006754:	2142      	movs	r1, #66	@ 0x42
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7ff fe89 	bl	800646e <LoRa_read>
 800675c:	4603      	mov	r3, r0
 800675e:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8006760:	7bfb      	ldrb	r3, [r7, #15]
 8006762:	2b12      	cmp	r3, #18
 8006764:	d101      	bne.n	800676a <LoRa_init+0x13c>
				return LORA_OK;
 8006766:	23c8      	movs	r3, #200	@ 0xc8
 8006768:	e004      	b.n	8006774 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 800676a:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 800676e:	e001      	b.n	8006774 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8006770:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <SX1278_Init>:

extern SPI_HandleTypeDef hspi1;

LoRa myLoRa;

void SX1278_Init(void) {
 800677c:	b5b0      	push	{r4, r5, r7, lr}
 800677e:	b08c      	sub	sp, #48	@ 0x30
 8006780:	af00      	add	r7, sp, #0
	myLoRa = newLoRa();
 8006782:	4c15      	ldr	r4, [pc, #84]	@ (80067d8 <SX1278_Init+0x5c>)
 8006784:	463b      	mov	r3, r7
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff fc40 	bl	800600c <newLoRa>
 800678c:	4625      	mov	r5, r4
 800678e:	463c      	mov	r4, r7
 8006790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006798:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800679c:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	myLoRa.CS_port = NSS_SIGNAL_GPIO_Port;
 80067a0:	4b0d      	ldr	r3, [pc, #52]	@ (80067d8 <SX1278_Init+0x5c>)
 80067a2:	4a0e      	ldr	r2, [pc, #56]	@ (80067dc <SX1278_Init+0x60>)
 80067a4:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin = NSS_SIGNAL_Pin;
 80067a6:	4b0c      	ldr	r3, [pc, #48]	@ (80067d8 <SX1278_Init+0x5c>)
 80067a8:	2210      	movs	r2, #16
 80067aa:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port = GPIOB;
 80067ac:	4b0a      	ldr	r3, [pc, #40]	@ (80067d8 <SX1278_Init+0x5c>)
 80067ae:	4a0c      	ldr	r2, [pc, #48]	@ (80067e0 <SX1278_Init+0x64>)
 80067b0:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin = RST_SIGNAL_Pin;
 80067b2:	4b09      	ldr	r3, [pc, #36]	@ (80067d8 <SX1278_Init+0x5c>)
 80067b4:	2202      	movs	r2, #2
 80067b6:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port = DIO0_INT_GPIO_Port;
 80067b8:	4b07      	ldr	r3, [pc, #28]	@ (80067d8 <SX1278_Init+0x5c>)
 80067ba:	4a09      	ldr	r2, [pc, #36]	@ (80067e0 <SX1278_Init+0x64>)
 80067bc:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin = DIO0_INT_Pin;
 80067be:	4b06      	ldr	r3, [pc, #24]	@ (80067d8 <SX1278_Init+0x5c>)
 80067c0:	2201      	movs	r2, #1
 80067c2:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx = &hspi1;
 80067c4:	4b04      	ldr	r3, [pc, #16]	@ (80067d8 <SX1278_Init+0x5c>)
 80067c6:	4a07      	ldr	r2, [pc, #28]	@ (80067e4 <SX1278_Init+0x68>)
 80067c8:	619a      	str	r2, [r3, #24]

	LoRa_init(&myLoRa);
 80067ca:	4803      	ldr	r0, [pc, #12]	@ (80067d8 <SX1278_Init+0x5c>)
 80067cc:	f7ff ff2f 	bl	800662e <LoRa_init>
}
 80067d0:	bf00      	nop
 80067d2:	3730      	adds	r7, #48	@ 0x30
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bdb0      	pop	{r4, r5, r7, pc}
 80067d8:	2000020c 	.word	0x2000020c
 80067dc:	40010800 	.word	0x40010800
 80067e0:	40010c00 	.word	0x40010c00
 80067e4:	200000ec 	.word	0x200000ec

080067e8 <send_packet>:

void send_packet(SendPacket_t packet) {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	1d3b      	adds	r3, r7, #4
 80067f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	SX1278_Init();
 80067f4:	f7ff ffc2 	bl	800677c <SX1278_Init>

	LoRa_transmit(&myLoRa, (uint8_t*) &packet, sizeof(SendPacket_t), 100);
 80067f8:	1d39      	adds	r1, r7, #4
 80067fa:	2364      	movs	r3, #100	@ 0x64
 80067fc:	220c      	movs	r2, #12
 80067fe:	4803      	ldr	r0, [pc, #12]	@ (800680c <send_packet+0x24>)
 8006800:	f7ff febd 	bl	800657e <LoRa_transmit>
//	SX1278_Transmit((uint8_t*) &packet, sizeof(SendPacket_t));
}
 8006804:	bf00      	nop
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	2000020c 	.word	0x2000020c

08006810 <get_serial_number>:

#include "SerialNumber.h"
#include "stm32f1xx_hal.h"
#include "DebugLog.h"

SerialNumber_t get_serial_number() {
 8006810:	b590      	push	{r4, r7, lr}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
	debug("Polling for HW Serial...");
 8006818:	4810      	ldr	r0, [pc, #64]	@ (800685c <get_serial_number+0x4c>)
 800681a:	f7ff fb17 	bl	8005e4c <debug>

	SerialNumber_t Serial;

	Serial.byte_0 = HAL_GetUIDw0();
 800681e:	f7fb fa31 	bl	8001c84 <HAL_GetUIDw0>
 8006822:	4603      	mov	r3, r0
 8006824:	60fb      	str	r3, [r7, #12]
	Serial.byte_1 = HAL_GetUIDw1();
 8006826:	f7fb fa37 	bl	8001c98 <HAL_GetUIDw1>
 800682a:	4603      	mov	r3, r0
 800682c:	613b      	str	r3, [r7, #16]
	Serial.byte_2 = HAL_GetUIDw2();
 800682e:	f7fb fa3d 	bl	8001cac <HAL_GetUIDw2>
 8006832:	4603      	mov	r3, r0
 8006834:	617b      	str	r3, [r7, #20]

	debug("HW Serial: %d %d %d\n\r", Serial.byte_0, Serial.byte_1,
 8006836:	68f9      	ldr	r1, [r7, #12]
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	4808      	ldr	r0, [pc, #32]	@ (8006860 <get_serial_number+0x50>)
 800683e:	f7ff fb05 	bl	8005e4c <debug>
			Serial.byte_2);

	return Serial;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	461c      	mov	r4, r3
 8006846:	f107 030c 	add.w	r3, r7, #12
 800684a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800684e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	371c      	adds	r7, #28
 8006856:	46bd      	mov	sp, r7
 8006858:	bd90      	pop	{r4, r7, pc}
 800685a:	bf00      	nop
 800685c:	08007450 	.word	0x08007450
 8006860:	0800746c 	.word	0x0800746c

08006864 <sniprintf>:
 8006864:	b40c      	push	{r2, r3}
 8006866:	b530      	push	{r4, r5, lr}
 8006868:	4b18      	ldr	r3, [pc, #96]	@ (80068cc <sniprintf+0x68>)
 800686a:	1e0c      	subs	r4, r1, #0
 800686c:	681d      	ldr	r5, [r3, #0]
 800686e:	b09d      	sub	sp, #116	@ 0x74
 8006870:	da08      	bge.n	8006884 <sniprintf+0x20>
 8006872:	238b      	movs	r3, #139	@ 0x8b
 8006874:	f04f 30ff 	mov.w	r0, #4294967295
 8006878:	602b      	str	r3, [r5, #0]
 800687a:	b01d      	add	sp, #116	@ 0x74
 800687c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006880:	b002      	add	sp, #8
 8006882:	4770      	bx	lr
 8006884:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006888:	f8ad 3014 	strh.w	r3, [sp, #20]
 800688c:	f04f 0300 	mov.w	r3, #0
 8006890:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006892:	bf0c      	ite	eq
 8006894:	4623      	moveq	r3, r4
 8006896:	f104 33ff 	addne.w	r3, r4, #4294967295
 800689a:	9304      	str	r3, [sp, #16]
 800689c:	9307      	str	r3, [sp, #28]
 800689e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80068a2:	9002      	str	r0, [sp, #8]
 80068a4:	9006      	str	r0, [sp, #24]
 80068a6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80068aa:	4628      	mov	r0, r5
 80068ac:	ab21      	add	r3, sp, #132	@ 0x84
 80068ae:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80068b0:	a902      	add	r1, sp, #8
 80068b2:	9301      	str	r3, [sp, #4]
 80068b4:	f000 f9dc 	bl	8006c70 <_svfiprintf_r>
 80068b8:	1c43      	adds	r3, r0, #1
 80068ba:	bfbc      	itt	lt
 80068bc:	238b      	movlt	r3, #139	@ 0x8b
 80068be:	602b      	strlt	r3, [r5, #0]
 80068c0:	2c00      	cmp	r4, #0
 80068c2:	d0da      	beq.n	800687a <sniprintf+0x16>
 80068c4:	2200      	movs	r2, #0
 80068c6:	9b02      	ldr	r3, [sp, #8]
 80068c8:	701a      	strb	r2, [r3, #0]
 80068ca:	e7d6      	b.n	800687a <sniprintf+0x16>
 80068cc:	2000000c 	.word	0x2000000c

080068d0 <_vsniprintf_r>:
 80068d0:	b530      	push	{r4, r5, lr}
 80068d2:	4614      	mov	r4, r2
 80068d4:	2c00      	cmp	r4, #0
 80068d6:	4605      	mov	r5, r0
 80068d8:	461a      	mov	r2, r3
 80068da:	b09b      	sub	sp, #108	@ 0x6c
 80068dc:	da05      	bge.n	80068ea <_vsniprintf_r+0x1a>
 80068de:	238b      	movs	r3, #139	@ 0x8b
 80068e0:	6003      	str	r3, [r0, #0]
 80068e2:	f04f 30ff 	mov.w	r0, #4294967295
 80068e6:	b01b      	add	sp, #108	@ 0x6c
 80068e8:	bd30      	pop	{r4, r5, pc}
 80068ea:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80068ee:	f8ad 300c 	strh.w	r3, [sp, #12]
 80068f2:	f04f 0300 	mov.w	r3, #0
 80068f6:	9319      	str	r3, [sp, #100]	@ 0x64
 80068f8:	bf0c      	ite	eq
 80068fa:	4623      	moveq	r3, r4
 80068fc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006900:	9302      	str	r3, [sp, #8]
 8006902:	9305      	str	r3, [sp, #20]
 8006904:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006908:	9100      	str	r1, [sp, #0]
 800690a:	9104      	str	r1, [sp, #16]
 800690c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006910:	4669      	mov	r1, sp
 8006912:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006914:	f000 f9ac 	bl	8006c70 <_svfiprintf_r>
 8006918:	1c43      	adds	r3, r0, #1
 800691a:	bfbc      	itt	lt
 800691c:	238b      	movlt	r3, #139	@ 0x8b
 800691e:	602b      	strlt	r3, [r5, #0]
 8006920:	2c00      	cmp	r4, #0
 8006922:	d0e0      	beq.n	80068e6 <_vsniprintf_r+0x16>
 8006924:	2200      	movs	r2, #0
 8006926:	9b00      	ldr	r3, [sp, #0]
 8006928:	701a      	strb	r2, [r3, #0]
 800692a:	e7dc      	b.n	80068e6 <_vsniprintf_r+0x16>

0800692c <vsniprintf>:
 800692c:	b507      	push	{r0, r1, r2, lr}
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	4613      	mov	r3, r2
 8006932:	460a      	mov	r2, r1
 8006934:	4601      	mov	r1, r0
 8006936:	4803      	ldr	r0, [pc, #12]	@ (8006944 <vsniprintf+0x18>)
 8006938:	6800      	ldr	r0, [r0, #0]
 800693a:	f7ff ffc9 	bl	80068d0 <_vsniprintf_r>
 800693e:	b003      	add	sp, #12
 8006940:	f85d fb04 	ldr.w	pc, [sp], #4
 8006944:	2000000c 	.word	0x2000000c

08006948 <memset>:
 8006948:	4603      	mov	r3, r0
 800694a:	4402      	add	r2, r0
 800694c:	4293      	cmp	r3, r2
 800694e:	d100      	bne.n	8006952 <memset+0xa>
 8006950:	4770      	bx	lr
 8006952:	f803 1b01 	strb.w	r1, [r3], #1
 8006956:	e7f9      	b.n	800694c <memset+0x4>

08006958 <__errno>:
 8006958:	4b01      	ldr	r3, [pc, #4]	@ (8006960 <__errno+0x8>)
 800695a:	6818      	ldr	r0, [r3, #0]
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	2000000c 	.word	0x2000000c

08006964 <__libc_init_array>:
 8006964:	b570      	push	{r4, r5, r6, lr}
 8006966:	2600      	movs	r6, #0
 8006968:	4d0c      	ldr	r5, [pc, #48]	@ (800699c <__libc_init_array+0x38>)
 800696a:	4c0d      	ldr	r4, [pc, #52]	@ (80069a0 <__libc_init_array+0x3c>)
 800696c:	1b64      	subs	r4, r4, r5
 800696e:	10a4      	asrs	r4, r4, #2
 8006970:	42a6      	cmp	r6, r4
 8006972:	d109      	bne.n	8006988 <__libc_init_array+0x24>
 8006974:	f000 fc76 	bl	8007264 <_init>
 8006978:	2600      	movs	r6, #0
 800697a:	4d0a      	ldr	r5, [pc, #40]	@ (80069a4 <__libc_init_array+0x40>)
 800697c:	4c0a      	ldr	r4, [pc, #40]	@ (80069a8 <__libc_init_array+0x44>)
 800697e:	1b64      	subs	r4, r4, r5
 8006980:	10a4      	asrs	r4, r4, #2
 8006982:	42a6      	cmp	r6, r4
 8006984:	d105      	bne.n	8006992 <__libc_init_array+0x2e>
 8006986:	bd70      	pop	{r4, r5, r6, pc}
 8006988:	f855 3b04 	ldr.w	r3, [r5], #4
 800698c:	4798      	blx	r3
 800698e:	3601      	adds	r6, #1
 8006990:	e7ee      	b.n	8006970 <__libc_init_array+0xc>
 8006992:	f855 3b04 	ldr.w	r3, [r5], #4
 8006996:	4798      	blx	r3
 8006998:	3601      	adds	r6, #1
 800699a:	e7f2      	b.n	8006982 <__libc_init_array+0x1e>
 800699c:	08007500 	.word	0x08007500
 80069a0:	08007500 	.word	0x08007500
 80069a4:	08007500 	.word	0x08007500
 80069a8:	08007504 	.word	0x08007504

080069ac <__retarget_lock_acquire_recursive>:
 80069ac:	4770      	bx	lr

080069ae <__retarget_lock_release_recursive>:
 80069ae:	4770      	bx	lr

080069b0 <memcpy>:
 80069b0:	440a      	add	r2, r1
 80069b2:	4291      	cmp	r1, r2
 80069b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80069b8:	d100      	bne.n	80069bc <memcpy+0xc>
 80069ba:	4770      	bx	lr
 80069bc:	b510      	push	{r4, lr}
 80069be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069c2:	4291      	cmp	r1, r2
 80069c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069c8:	d1f9      	bne.n	80069be <memcpy+0xe>
 80069ca:	bd10      	pop	{r4, pc}

080069cc <_free_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	4605      	mov	r5, r0
 80069d0:	2900      	cmp	r1, #0
 80069d2:	d040      	beq.n	8006a56 <_free_r+0x8a>
 80069d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069d8:	1f0c      	subs	r4, r1, #4
 80069da:	2b00      	cmp	r3, #0
 80069dc:	bfb8      	it	lt
 80069de:	18e4      	addlt	r4, r4, r3
 80069e0:	f000 f8de 	bl	8006ba0 <__malloc_lock>
 80069e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006a58 <_free_r+0x8c>)
 80069e6:	6813      	ldr	r3, [r2, #0]
 80069e8:	b933      	cbnz	r3, 80069f8 <_free_r+0x2c>
 80069ea:	6063      	str	r3, [r4, #4]
 80069ec:	6014      	str	r4, [r2, #0]
 80069ee:	4628      	mov	r0, r5
 80069f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069f4:	f000 b8da 	b.w	8006bac <__malloc_unlock>
 80069f8:	42a3      	cmp	r3, r4
 80069fa:	d908      	bls.n	8006a0e <_free_r+0x42>
 80069fc:	6820      	ldr	r0, [r4, #0]
 80069fe:	1821      	adds	r1, r4, r0
 8006a00:	428b      	cmp	r3, r1
 8006a02:	bf01      	itttt	eq
 8006a04:	6819      	ldreq	r1, [r3, #0]
 8006a06:	685b      	ldreq	r3, [r3, #4]
 8006a08:	1809      	addeq	r1, r1, r0
 8006a0a:	6021      	streq	r1, [r4, #0]
 8006a0c:	e7ed      	b.n	80069ea <_free_r+0x1e>
 8006a0e:	461a      	mov	r2, r3
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	b10b      	cbz	r3, 8006a18 <_free_r+0x4c>
 8006a14:	42a3      	cmp	r3, r4
 8006a16:	d9fa      	bls.n	8006a0e <_free_r+0x42>
 8006a18:	6811      	ldr	r1, [r2, #0]
 8006a1a:	1850      	adds	r0, r2, r1
 8006a1c:	42a0      	cmp	r0, r4
 8006a1e:	d10b      	bne.n	8006a38 <_free_r+0x6c>
 8006a20:	6820      	ldr	r0, [r4, #0]
 8006a22:	4401      	add	r1, r0
 8006a24:	1850      	adds	r0, r2, r1
 8006a26:	4283      	cmp	r3, r0
 8006a28:	6011      	str	r1, [r2, #0]
 8006a2a:	d1e0      	bne.n	80069ee <_free_r+0x22>
 8006a2c:	6818      	ldr	r0, [r3, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	4408      	add	r0, r1
 8006a32:	6010      	str	r0, [r2, #0]
 8006a34:	6053      	str	r3, [r2, #4]
 8006a36:	e7da      	b.n	80069ee <_free_r+0x22>
 8006a38:	d902      	bls.n	8006a40 <_free_r+0x74>
 8006a3a:	230c      	movs	r3, #12
 8006a3c:	602b      	str	r3, [r5, #0]
 8006a3e:	e7d6      	b.n	80069ee <_free_r+0x22>
 8006a40:	6820      	ldr	r0, [r4, #0]
 8006a42:	1821      	adds	r1, r4, r0
 8006a44:	428b      	cmp	r3, r1
 8006a46:	bf01      	itttt	eq
 8006a48:	6819      	ldreq	r1, [r3, #0]
 8006a4a:	685b      	ldreq	r3, [r3, #4]
 8006a4c:	1809      	addeq	r1, r1, r0
 8006a4e:	6021      	streq	r1, [r4, #0]
 8006a50:	6063      	str	r3, [r4, #4]
 8006a52:	6054      	str	r4, [r2, #4]
 8006a54:	e7cb      	b.n	80069ee <_free_r+0x22>
 8006a56:	bd38      	pop	{r3, r4, r5, pc}
 8006a58:	2000037c 	.word	0x2000037c

08006a5c <sbrk_aligned>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	4e0f      	ldr	r6, [pc, #60]	@ (8006a9c <sbrk_aligned+0x40>)
 8006a60:	460c      	mov	r4, r1
 8006a62:	6831      	ldr	r1, [r6, #0]
 8006a64:	4605      	mov	r5, r0
 8006a66:	b911      	cbnz	r1, 8006a6e <sbrk_aligned+0x12>
 8006a68:	f000 fba8 	bl	80071bc <_sbrk_r>
 8006a6c:	6030      	str	r0, [r6, #0]
 8006a6e:	4621      	mov	r1, r4
 8006a70:	4628      	mov	r0, r5
 8006a72:	f000 fba3 	bl	80071bc <_sbrk_r>
 8006a76:	1c43      	adds	r3, r0, #1
 8006a78:	d103      	bne.n	8006a82 <sbrk_aligned+0x26>
 8006a7a:	f04f 34ff 	mov.w	r4, #4294967295
 8006a7e:	4620      	mov	r0, r4
 8006a80:	bd70      	pop	{r4, r5, r6, pc}
 8006a82:	1cc4      	adds	r4, r0, #3
 8006a84:	f024 0403 	bic.w	r4, r4, #3
 8006a88:	42a0      	cmp	r0, r4
 8006a8a:	d0f8      	beq.n	8006a7e <sbrk_aligned+0x22>
 8006a8c:	1a21      	subs	r1, r4, r0
 8006a8e:	4628      	mov	r0, r5
 8006a90:	f000 fb94 	bl	80071bc <_sbrk_r>
 8006a94:	3001      	adds	r0, #1
 8006a96:	d1f2      	bne.n	8006a7e <sbrk_aligned+0x22>
 8006a98:	e7ef      	b.n	8006a7a <sbrk_aligned+0x1e>
 8006a9a:	bf00      	nop
 8006a9c:	20000378 	.word	0x20000378

08006aa0 <_malloc_r>:
 8006aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aa4:	1ccd      	adds	r5, r1, #3
 8006aa6:	f025 0503 	bic.w	r5, r5, #3
 8006aaa:	3508      	adds	r5, #8
 8006aac:	2d0c      	cmp	r5, #12
 8006aae:	bf38      	it	cc
 8006ab0:	250c      	movcc	r5, #12
 8006ab2:	2d00      	cmp	r5, #0
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	db01      	blt.n	8006abc <_malloc_r+0x1c>
 8006ab8:	42a9      	cmp	r1, r5
 8006aba:	d904      	bls.n	8006ac6 <_malloc_r+0x26>
 8006abc:	230c      	movs	r3, #12
 8006abe:	6033      	str	r3, [r6, #0]
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ac6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b9c <_malloc_r+0xfc>
 8006aca:	f000 f869 	bl	8006ba0 <__malloc_lock>
 8006ace:	f8d8 3000 	ldr.w	r3, [r8]
 8006ad2:	461c      	mov	r4, r3
 8006ad4:	bb44      	cbnz	r4, 8006b28 <_malloc_r+0x88>
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	4630      	mov	r0, r6
 8006ada:	f7ff ffbf 	bl	8006a5c <sbrk_aligned>
 8006ade:	1c43      	adds	r3, r0, #1
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	d158      	bne.n	8006b96 <_malloc_r+0xf6>
 8006ae4:	f8d8 4000 	ldr.w	r4, [r8]
 8006ae8:	4627      	mov	r7, r4
 8006aea:	2f00      	cmp	r7, #0
 8006aec:	d143      	bne.n	8006b76 <_malloc_r+0xd6>
 8006aee:	2c00      	cmp	r4, #0
 8006af0:	d04b      	beq.n	8006b8a <_malloc_r+0xea>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	4639      	mov	r1, r7
 8006af6:	4630      	mov	r0, r6
 8006af8:	eb04 0903 	add.w	r9, r4, r3
 8006afc:	f000 fb5e 	bl	80071bc <_sbrk_r>
 8006b00:	4581      	cmp	r9, r0
 8006b02:	d142      	bne.n	8006b8a <_malloc_r+0xea>
 8006b04:	6821      	ldr	r1, [r4, #0]
 8006b06:	4630      	mov	r0, r6
 8006b08:	1a6d      	subs	r5, r5, r1
 8006b0a:	4629      	mov	r1, r5
 8006b0c:	f7ff ffa6 	bl	8006a5c <sbrk_aligned>
 8006b10:	3001      	adds	r0, #1
 8006b12:	d03a      	beq.n	8006b8a <_malloc_r+0xea>
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	442b      	add	r3, r5
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	bb62      	cbnz	r2, 8006b7c <_malloc_r+0xdc>
 8006b22:	f8c8 7000 	str.w	r7, [r8]
 8006b26:	e00f      	b.n	8006b48 <_malloc_r+0xa8>
 8006b28:	6822      	ldr	r2, [r4, #0]
 8006b2a:	1b52      	subs	r2, r2, r5
 8006b2c:	d420      	bmi.n	8006b70 <_malloc_r+0xd0>
 8006b2e:	2a0b      	cmp	r2, #11
 8006b30:	d917      	bls.n	8006b62 <_malloc_r+0xc2>
 8006b32:	1961      	adds	r1, r4, r5
 8006b34:	42a3      	cmp	r3, r4
 8006b36:	6025      	str	r5, [r4, #0]
 8006b38:	bf18      	it	ne
 8006b3a:	6059      	strne	r1, [r3, #4]
 8006b3c:	6863      	ldr	r3, [r4, #4]
 8006b3e:	bf08      	it	eq
 8006b40:	f8c8 1000 	streq.w	r1, [r8]
 8006b44:	5162      	str	r2, [r4, r5]
 8006b46:	604b      	str	r3, [r1, #4]
 8006b48:	4630      	mov	r0, r6
 8006b4a:	f000 f82f 	bl	8006bac <__malloc_unlock>
 8006b4e:	f104 000b 	add.w	r0, r4, #11
 8006b52:	1d23      	adds	r3, r4, #4
 8006b54:	f020 0007 	bic.w	r0, r0, #7
 8006b58:	1ac2      	subs	r2, r0, r3
 8006b5a:	bf1c      	itt	ne
 8006b5c:	1a1b      	subne	r3, r3, r0
 8006b5e:	50a3      	strne	r3, [r4, r2]
 8006b60:	e7af      	b.n	8006ac2 <_malloc_r+0x22>
 8006b62:	6862      	ldr	r2, [r4, #4]
 8006b64:	42a3      	cmp	r3, r4
 8006b66:	bf0c      	ite	eq
 8006b68:	f8c8 2000 	streq.w	r2, [r8]
 8006b6c:	605a      	strne	r2, [r3, #4]
 8006b6e:	e7eb      	b.n	8006b48 <_malloc_r+0xa8>
 8006b70:	4623      	mov	r3, r4
 8006b72:	6864      	ldr	r4, [r4, #4]
 8006b74:	e7ae      	b.n	8006ad4 <_malloc_r+0x34>
 8006b76:	463c      	mov	r4, r7
 8006b78:	687f      	ldr	r7, [r7, #4]
 8006b7a:	e7b6      	b.n	8006aea <_malloc_r+0x4a>
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	42a3      	cmp	r3, r4
 8006b82:	d1fb      	bne.n	8006b7c <_malloc_r+0xdc>
 8006b84:	2300      	movs	r3, #0
 8006b86:	6053      	str	r3, [r2, #4]
 8006b88:	e7de      	b.n	8006b48 <_malloc_r+0xa8>
 8006b8a:	230c      	movs	r3, #12
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	6033      	str	r3, [r6, #0]
 8006b90:	f000 f80c 	bl	8006bac <__malloc_unlock>
 8006b94:	e794      	b.n	8006ac0 <_malloc_r+0x20>
 8006b96:	6005      	str	r5, [r0, #0]
 8006b98:	e7d6      	b.n	8006b48 <_malloc_r+0xa8>
 8006b9a:	bf00      	nop
 8006b9c:	2000037c 	.word	0x2000037c

08006ba0 <__malloc_lock>:
 8006ba0:	4801      	ldr	r0, [pc, #4]	@ (8006ba8 <__malloc_lock+0x8>)
 8006ba2:	f7ff bf03 	b.w	80069ac <__retarget_lock_acquire_recursive>
 8006ba6:	bf00      	nop
 8006ba8:	20000374 	.word	0x20000374

08006bac <__malloc_unlock>:
 8006bac:	4801      	ldr	r0, [pc, #4]	@ (8006bb4 <__malloc_unlock+0x8>)
 8006bae:	f7ff befe 	b.w	80069ae <__retarget_lock_release_recursive>
 8006bb2:	bf00      	nop
 8006bb4:	20000374 	.word	0x20000374

08006bb8 <__ssputs_r>:
 8006bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bbc:	461f      	mov	r7, r3
 8006bbe:	688e      	ldr	r6, [r1, #8]
 8006bc0:	4682      	mov	sl, r0
 8006bc2:	42be      	cmp	r6, r7
 8006bc4:	460c      	mov	r4, r1
 8006bc6:	4690      	mov	r8, r2
 8006bc8:	680b      	ldr	r3, [r1, #0]
 8006bca:	d82d      	bhi.n	8006c28 <__ssputs_r+0x70>
 8006bcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bd0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006bd4:	d026      	beq.n	8006c24 <__ssputs_r+0x6c>
 8006bd6:	6965      	ldr	r5, [r4, #20]
 8006bd8:	6909      	ldr	r1, [r1, #16]
 8006bda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bde:	eba3 0901 	sub.w	r9, r3, r1
 8006be2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006be6:	1c7b      	adds	r3, r7, #1
 8006be8:	444b      	add	r3, r9
 8006bea:	106d      	asrs	r5, r5, #1
 8006bec:	429d      	cmp	r5, r3
 8006bee:	bf38      	it	cc
 8006bf0:	461d      	movcc	r5, r3
 8006bf2:	0553      	lsls	r3, r2, #21
 8006bf4:	d527      	bpl.n	8006c46 <__ssputs_r+0x8e>
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	f7ff ff52 	bl	8006aa0 <_malloc_r>
 8006bfc:	4606      	mov	r6, r0
 8006bfe:	b360      	cbz	r0, 8006c5a <__ssputs_r+0xa2>
 8006c00:	464a      	mov	r2, r9
 8006c02:	6921      	ldr	r1, [r4, #16]
 8006c04:	f7ff fed4 	bl	80069b0 <memcpy>
 8006c08:	89a3      	ldrh	r3, [r4, #12]
 8006c0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c12:	81a3      	strh	r3, [r4, #12]
 8006c14:	6126      	str	r6, [r4, #16]
 8006c16:	444e      	add	r6, r9
 8006c18:	6026      	str	r6, [r4, #0]
 8006c1a:	463e      	mov	r6, r7
 8006c1c:	6165      	str	r5, [r4, #20]
 8006c1e:	eba5 0509 	sub.w	r5, r5, r9
 8006c22:	60a5      	str	r5, [r4, #8]
 8006c24:	42be      	cmp	r6, r7
 8006c26:	d900      	bls.n	8006c2a <__ssputs_r+0x72>
 8006c28:	463e      	mov	r6, r7
 8006c2a:	4632      	mov	r2, r6
 8006c2c:	4641      	mov	r1, r8
 8006c2e:	6820      	ldr	r0, [r4, #0]
 8006c30:	f000 faaa 	bl	8007188 <memmove>
 8006c34:	2000      	movs	r0, #0
 8006c36:	68a3      	ldr	r3, [r4, #8]
 8006c38:	1b9b      	subs	r3, r3, r6
 8006c3a:	60a3      	str	r3, [r4, #8]
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	4433      	add	r3, r6
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c46:	462a      	mov	r2, r5
 8006c48:	f000 fad6 	bl	80071f8 <_realloc_r>
 8006c4c:	4606      	mov	r6, r0
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	d1e0      	bne.n	8006c14 <__ssputs_r+0x5c>
 8006c52:	4650      	mov	r0, sl
 8006c54:	6921      	ldr	r1, [r4, #16]
 8006c56:	f7ff feb9 	bl	80069cc <_free_r>
 8006c5a:	230c      	movs	r3, #12
 8006c5c:	f8ca 3000 	str.w	r3, [sl]
 8006c60:	89a3      	ldrh	r3, [r4, #12]
 8006c62:	f04f 30ff 	mov.w	r0, #4294967295
 8006c66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c6a:	81a3      	strh	r3, [r4, #12]
 8006c6c:	e7e9      	b.n	8006c42 <__ssputs_r+0x8a>
	...

08006c70 <_svfiprintf_r>:
 8006c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c74:	4698      	mov	r8, r3
 8006c76:	898b      	ldrh	r3, [r1, #12]
 8006c78:	4607      	mov	r7, r0
 8006c7a:	061b      	lsls	r3, r3, #24
 8006c7c:	460d      	mov	r5, r1
 8006c7e:	4614      	mov	r4, r2
 8006c80:	b09d      	sub	sp, #116	@ 0x74
 8006c82:	d510      	bpl.n	8006ca6 <_svfiprintf_r+0x36>
 8006c84:	690b      	ldr	r3, [r1, #16]
 8006c86:	b973      	cbnz	r3, 8006ca6 <_svfiprintf_r+0x36>
 8006c88:	2140      	movs	r1, #64	@ 0x40
 8006c8a:	f7ff ff09 	bl	8006aa0 <_malloc_r>
 8006c8e:	6028      	str	r0, [r5, #0]
 8006c90:	6128      	str	r0, [r5, #16]
 8006c92:	b930      	cbnz	r0, 8006ca2 <_svfiprintf_r+0x32>
 8006c94:	230c      	movs	r3, #12
 8006c96:	603b      	str	r3, [r7, #0]
 8006c98:	f04f 30ff 	mov.w	r0, #4294967295
 8006c9c:	b01d      	add	sp, #116	@ 0x74
 8006c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca2:	2340      	movs	r3, #64	@ 0x40
 8006ca4:	616b      	str	r3, [r5, #20]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006caa:	2320      	movs	r3, #32
 8006cac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006cb0:	2330      	movs	r3, #48	@ 0x30
 8006cb2:	f04f 0901 	mov.w	r9, #1
 8006cb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cba:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006e54 <_svfiprintf_r+0x1e4>
 8006cbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006cc2:	4623      	mov	r3, r4
 8006cc4:	469a      	mov	sl, r3
 8006cc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cca:	b10a      	cbz	r2, 8006cd0 <_svfiprintf_r+0x60>
 8006ccc:	2a25      	cmp	r2, #37	@ 0x25
 8006cce:	d1f9      	bne.n	8006cc4 <_svfiprintf_r+0x54>
 8006cd0:	ebba 0b04 	subs.w	fp, sl, r4
 8006cd4:	d00b      	beq.n	8006cee <_svfiprintf_r+0x7e>
 8006cd6:	465b      	mov	r3, fp
 8006cd8:	4622      	mov	r2, r4
 8006cda:	4629      	mov	r1, r5
 8006cdc:	4638      	mov	r0, r7
 8006cde:	f7ff ff6b 	bl	8006bb8 <__ssputs_r>
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	f000 80a7 	beq.w	8006e36 <_svfiprintf_r+0x1c6>
 8006ce8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cea:	445a      	add	r2, fp
 8006cec:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cee:	f89a 3000 	ldrb.w	r3, [sl]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 809f 	beq.w	8006e36 <_svfiprintf_r+0x1c6>
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8006cfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d02:	f10a 0a01 	add.w	sl, sl, #1
 8006d06:	9304      	str	r3, [sp, #16]
 8006d08:	9307      	str	r3, [sp, #28]
 8006d0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d10:	4654      	mov	r4, sl
 8006d12:	2205      	movs	r2, #5
 8006d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d18:	484e      	ldr	r0, [pc, #312]	@ (8006e54 <_svfiprintf_r+0x1e4>)
 8006d1a:	f000 fa5f 	bl	80071dc <memchr>
 8006d1e:	9a04      	ldr	r2, [sp, #16]
 8006d20:	b9d8      	cbnz	r0, 8006d5a <_svfiprintf_r+0xea>
 8006d22:	06d0      	lsls	r0, r2, #27
 8006d24:	bf44      	itt	mi
 8006d26:	2320      	movmi	r3, #32
 8006d28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d2c:	0711      	lsls	r1, r2, #28
 8006d2e:	bf44      	itt	mi
 8006d30:	232b      	movmi	r3, #43	@ 0x2b
 8006d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d36:	f89a 3000 	ldrb.w	r3, [sl]
 8006d3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d3c:	d015      	beq.n	8006d6a <_svfiprintf_r+0xfa>
 8006d3e:	4654      	mov	r4, sl
 8006d40:	2000      	movs	r0, #0
 8006d42:	f04f 0c0a 	mov.w	ip, #10
 8006d46:	9a07      	ldr	r2, [sp, #28]
 8006d48:	4621      	mov	r1, r4
 8006d4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d4e:	3b30      	subs	r3, #48	@ 0x30
 8006d50:	2b09      	cmp	r3, #9
 8006d52:	d94b      	bls.n	8006dec <_svfiprintf_r+0x17c>
 8006d54:	b1b0      	cbz	r0, 8006d84 <_svfiprintf_r+0x114>
 8006d56:	9207      	str	r2, [sp, #28]
 8006d58:	e014      	b.n	8006d84 <_svfiprintf_r+0x114>
 8006d5a:	eba0 0308 	sub.w	r3, r0, r8
 8006d5e:	fa09 f303 	lsl.w	r3, r9, r3
 8006d62:	4313      	orrs	r3, r2
 8006d64:	46a2      	mov	sl, r4
 8006d66:	9304      	str	r3, [sp, #16]
 8006d68:	e7d2      	b.n	8006d10 <_svfiprintf_r+0xa0>
 8006d6a:	9b03      	ldr	r3, [sp, #12]
 8006d6c:	1d19      	adds	r1, r3, #4
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	9103      	str	r1, [sp, #12]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	bfbb      	ittet	lt
 8006d76:	425b      	neglt	r3, r3
 8006d78:	f042 0202 	orrlt.w	r2, r2, #2
 8006d7c:	9307      	strge	r3, [sp, #28]
 8006d7e:	9307      	strlt	r3, [sp, #28]
 8006d80:	bfb8      	it	lt
 8006d82:	9204      	strlt	r2, [sp, #16]
 8006d84:	7823      	ldrb	r3, [r4, #0]
 8006d86:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d88:	d10a      	bne.n	8006da0 <_svfiprintf_r+0x130>
 8006d8a:	7863      	ldrb	r3, [r4, #1]
 8006d8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d8e:	d132      	bne.n	8006df6 <_svfiprintf_r+0x186>
 8006d90:	9b03      	ldr	r3, [sp, #12]
 8006d92:	3402      	adds	r4, #2
 8006d94:	1d1a      	adds	r2, r3, #4
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	9203      	str	r2, [sp, #12]
 8006d9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d9e:	9305      	str	r3, [sp, #20]
 8006da0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006e58 <_svfiprintf_r+0x1e8>
 8006da4:	2203      	movs	r2, #3
 8006da6:	4650      	mov	r0, sl
 8006da8:	7821      	ldrb	r1, [r4, #0]
 8006daa:	f000 fa17 	bl	80071dc <memchr>
 8006dae:	b138      	cbz	r0, 8006dc0 <_svfiprintf_r+0x150>
 8006db0:	2240      	movs	r2, #64	@ 0x40
 8006db2:	9b04      	ldr	r3, [sp, #16]
 8006db4:	eba0 000a 	sub.w	r0, r0, sl
 8006db8:	4082      	lsls	r2, r0
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	3401      	adds	r4, #1
 8006dbe:	9304      	str	r3, [sp, #16]
 8006dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dc4:	2206      	movs	r2, #6
 8006dc6:	4825      	ldr	r0, [pc, #148]	@ (8006e5c <_svfiprintf_r+0x1ec>)
 8006dc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006dcc:	f000 fa06 	bl	80071dc <memchr>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	d036      	beq.n	8006e42 <_svfiprintf_r+0x1d2>
 8006dd4:	4b22      	ldr	r3, [pc, #136]	@ (8006e60 <_svfiprintf_r+0x1f0>)
 8006dd6:	bb1b      	cbnz	r3, 8006e20 <_svfiprintf_r+0x1b0>
 8006dd8:	9b03      	ldr	r3, [sp, #12]
 8006dda:	3307      	adds	r3, #7
 8006ddc:	f023 0307 	bic.w	r3, r3, #7
 8006de0:	3308      	adds	r3, #8
 8006de2:	9303      	str	r3, [sp, #12]
 8006de4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006de6:	4433      	add	r3, r6
 8006de8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dea:	e76a      	b.n	8006cc2 <_svfiprintf_r+0x52>
 8006dec:	460c      	mov	r4, r1
 8006dee:	2001      	movs	r0, #1
 8006df0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006df4:	e7a8      	b.n	8006d48 <_svfiprintf_r+0xd8>
 8006df6:	2300      	movs	r3, #0
 8006df8:	f04f 0c0a 	mov.w	ip, #10
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	3401      	adds	r4, #1
 8006e00:	9305      	str	r3, [sp, #20]
 8006e02:	4620      	mov	r0, r4
 8006e04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e08:	3a30      	subs	r2, #48	@ 0x30
 8006e0a:	2a09      	cmp	r2, #9
 8006e0c:	d903      	bls.n	8006e16 <_svfiprintf_r+0x1a6>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0c6      	beq.n	8006da0 <_svfiprintf_r+0x130>
 8006e12:	9105      	str	r1, [sp, #20]
 8006e14:	e7c4      	b.n	8006da0 <_svfiprintf_r+0x130>
 8006e16:	4604      	mov	r4, r0
 8006e18:	2301      	movs	r3, #1
 8006e1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e1e:	e7f0      	b.n	8006e02 <_svfiprintf_r+0x192>
 8006e20:	ab03      	add	r3, sp, #12
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	462a      	mov	r2, r5
 8006e26:	4638      	mov	r0, r7
 8006e28:	4b0e      	ldr	r3, [pc, #56]	@ (8006e64 <_svfiprintf_r+0x1f4>)
 8006e2a:	a904      	add	r1, sp, #16
 8006e2c:	f3af 8000 	nop.w
 8006e30:	1c42      	adds	r2, r0, #1
 8006e32:	4606      	mov	r6, r0
 8006e34:	d1d6      	bne.n	8006de4 <_svfiprintf_r+0x174>
 8006e36:	89ab      	ldrh	r3, [r5, #12]
 8006e38:	065b      	lsls	r3, r3, #25
 8006e3a:	f53f af2d 	bmi.w	8006c98 <_svfiprintf_r+0x28>
 8006e3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e40:	e72c      	b.n	8006c9c <_svfiprintf_r+0x2c>
 8006e42:	ab03      	add	r3, sp, #12
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	462a      	mov	r2, r5
 8006e48:	4638      	mov	r0, r7
 8006e4a:	4b06      	ldr	r3, [pc, #24]	@ (8006e64 <_svfiprintf_r+0x1f4>)
 8006e4c:	a904      	add	r1, sp, #16
 8006e4e:	f000 f87d 	bl	8006f4c <_printf_i>
 8006e52:	e7ed      	b.n	8006e30 <_svfiprintf_r+0x1c0>
 8006e54:	080074c2 	.word	0x080074c2
 8006e58:	080074c8 	.word	0x080074c8
 8006e5c:	080074cc 	.word	0x080074cc
 8006e60:	00000000 	.word	0x00000000
 8006e64:	08006bb9 	.word	0x08006bb9

08006e68 <_printf_common>:
 8006e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e6c:	4616      	mov	r6, r2
 8006e6e:	4698      	mov	r8, r3
 8006e70:	688a      	ldr	r2, [r1, #8]
 8006e72:	690b      	ldr	r3, [r1, #16]
 8006e74:	4607      	mov	r7, r0
 8006e76:	4293      	cmp	r3, r2
 8006e78:	bfb8      	it	lt
 8006e7a:	4613      	movlt	r3, r2
 8006e7c:	6033      	str	r3, [r6, #0]
 8006e7e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e82:	460c      	mov	r4, r1
 8006e84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e88:	b10a      	cbz	r2, 8006e8e <_printf_common+0x26>
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	6033      	str	r3, [r6, #0]
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	0699      	lsls	r1, r3, #26
 8006e92:	bf42      	ittt	mi
 8006e94:	6833      	ldrmi	r3, [r6, #0]
 8006e96:	3302      	addmi	r3, #2
 8006e98:	6033      	strmi	r3, [r6, #0]
 8006e9a:	6825      	ldr	r5, [r4, #0]
 8006e9c:	f015 0506 	ands.w	r5, r5, #6
 8006ea0:	d106      	bne.n	8006eb0 <_printf_common+0x48>
 8006ea2:	f104 0a19 	add.w	sl, r4, #25
 8006ea6:	68e3      	ldr	r3, [r4, #12]
 8006ea8:	6832      	ldr	r2, [r6, #0]
 8006eaa:	1a9b      	subs	r3, r3, r2
 8006eac:	42ab      	cmp	r3, r5
 8006eae:	dc2b      	bgt.n	8006f08 <_printf_common+0xa0>
 8006eb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006eb4:	6822      	ldr	r2, [r4, #0]
 8006eb6:	3b00      	subs	r3, #0
 8006eb8:	bf18      	it	ne
 8006eba:	2301      	movne	r3, #1
 8006ebc:	0692      	lsls	r2, r2, #26
 8006ebe:	d430      	bmi.n	8006f22 <_printf_common+0xba>
 8006ec0:	4641      	mov	r1, r8
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ec8:	47c8      	blx	r9
 8006eca:	3001      	adds	r0, #1
 8006ecc:	d023      	beq.n	8006f16 <_printf_common+0xae>
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	6922      	ldr	r2, [r4, #16]
 8006ed2:	f003 0306 	and.w	r3, r3, #6
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	bf14      	ite	ne
 8006eda:	2500      	movne	r5, #0
 8006edc:	6833      	ldreq	r3, [r6, #0]
 8006ede:	f04f 0600 	mov.w	r6, #0
 8006ee2:	bf08      	it	eq
 8006ee4:	68e5      	ldreq	r5, [r4, #12]
 8006ee6:	f104 041a 	add.w	r4, r4, #26
 8006eea:	bf08      	it	eq
 8006eec:	1aed      	subeq	r5, r5, r3
 8006eee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006ef2:	bf08      	it	eq
 8006ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	bfc4      	itt	gt
 8006efc:	1a9b      	subgt	r3, r3, r2
 8006efe:	18ed      	addgt	r5, r5, r3
 8006f00:	42b5      	cmp	r5, r6
 8006f02:	d11a      	bne.n	8006f3a <_printf_common+0xd2>
 8006f04:	2000      	movs	r0, #0
 8006f06:	e008      	b.n	8006f1a <_printf_common+0xb2>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	4652      	mov	r2, sl
 8006f0c:	4641      	mov	r1, r8
 8006f0e:	4638      	mov	r0, r7
 8006f10:	47c8      	blx	r9
 8006f12:	3001      	adds	r0, #1
 8006f14:	d103      	bne.n	8006f1e <_printf_common+0xb6>
 8006f16:	f04f 30ff 	mov.w	r0, #4294967295
 8006f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f1e:	3501      	adds	r5, #1
 8006f20:	e7c1      	b.n	8006ea6 <_printf_common+0x3e>
 8006f22:	2030      	movs	r0, #48	@ 0x30
 8006f24:	18e1      	adds	r1, r4, r3
 8006f26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f2a:	1c5a      	adds	r2, r3, #1
 8006f2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f30:	4422      	add	r2, r4
 8006f32:	3302      	adds	r3, #2
 8006f34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f38:	e7c2      	b.n	8006ec0 <_printf_common+0x58>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	4622      	mov	r2, r4
 8006f3e:	4641      	mov	r1, r8
 8006f40:	4638      	mov	r0, r7
 8006f42:	47c8      	blx	r9
 8006f44:	3001      	adds	r0, #1
 8006f46:	d0e6      	beq.n	8006f16 <_printf_common+0xae>
 8006f48:	3601      	adds	r6, #1
 8006f4a:	e7d9      	b.n	8006f00 <_printf_common+0x98>

08006f4c <_printf_i>:
 8006f4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f50:	7e0f      	ldrb	r7, [r1, #24]
 8006f52:	4691      	mov	r9, r2
 8006f54:	2f78      	cmp	r7, #120	@ 0x78
 8006f56:	4680      	mov	r8, r0
 8006f58:	460c      	mov	r4, r1
 8006f5a:	469a      	mov	sl, r3
 8006f5c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f62:	d807      	bhi.n	8006f74 <_printf_i+0x28>
 8006f64:	2f62      	cmp	r7, #98	@ 0x62
 8006f66:	d80a      	bhi.n	8006f7e <_printf_i+0x32>
 8006f68:	2f00      	cmp	r7, #0
 8006f6a:	f000 80d1 	beq.w	8007110 <_printf_i+0x1c4>
 8006f6e:	2f58      	cmp	r7, #88	@ 0x58
 8006f70:	f000 80b8 	beq.w	80070e4 <_printf_i+0x198>
 8006f74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f7c:	e03a      	b.n	8006ff4 <_printf_i+0xa8>
 8006f7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f82:	2b15      	cmp	r3, #21
 8006f84:	d8f6      	bhi.n	8006f74 <_printf_i+0x28>
 8006f86:	a101      	add	r1, pc, #4	@ (adr r1, 8006f8c <_printf_i+0x40>)
 8006f88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f8c:	08006fe5 	.word	0x08006fe5
 8006f90:	08006ff9 	.word	0x08006ff9
 8006f94:	08006f75 	.word	0x08006f75
 8006f98:	08006f75 	.word	0x08006f75
 8006f9c:	08006f75 	.word	0x08006f75
 8006fa0:	08006f75 	.word	0x08006f75
 8006fa4:	08006ff9 	.word	0x08006ff9
 8006fa8:	08006f75 	.word	0x08006f75
 8006fac:	08006f75 	.word	0x08006f75
 8006fb0:	08006f75 	.word	0x08006f75
 8006fb4:	08006f75 	.word	0x08006f75
 8006fb8:	080070f7 	.word	0x080070f7
 8006fbc:	08007023 	.word	0x08007023
 8006fc0:	080070b1 	.word	0x080070b1
 8006fc4:	08006f75 	.word	0x08006f75
 8006fc8:	08006f75 	.word	0x08006f75
 8006fcc:	08007119 	.word	0x08007119
 8006fd0:	08006f75 	.word	0x08006f75
 8006fd4:	08007023 	.word	0x08007023
 8006fd8:	08006f75 	.word	0x08006f75
 8006fdc:	08006f75 	.word	0x08006f75
 8006fe0:	080070b9 	.word	0x080070b9
 8006fe4:	6833      	ldr	r3, [r6, #0]
 8006fe6:	1d1a      	adds	r2, r3, #4
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6032      	str	r2, [r6, #0]
 8006fec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ff0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e09c      	b.n	8007132 <_printf_i+0x1e6>
 8006ff8:	6833      	ldr	r3, [r6, #0]
 8006ffa:	6820      	ldr	r0, [r4, #0]
 8006ffc:	1d19      	adds	r1, r3, #4
 8006ffe:	6031      	str	r1, [r6, #0]
 8007000:	0606      	lsls	r6, r0, #24
 8007002:	d501      	bpl.n	8007008 <_printf_i+0xbc>
 8007004:	681d      	ldr	r5, [r3, #0]
 8007006:	e003      	b.n	8007010 <_printf_i+0xc4>
 8007008:	0645      	lsls	r5, r0, #25
 800700a:	d5fb      	bpl.n	8007004 <_printf_i+0xb8>
 800700c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007010:	2d00      	cmp	r5, #0
 8007012:	da03      	bge.n	800701c <_printf_i+0xd0>
 8007014:	232d      	movs	r3, #45	@ 0x2d
 8007016:	426d      	negs	r5, r5
 8007018:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800701c:	230a      	movs	r3, #10
 800701e:	4858      	ldr	r0, [pc, #352]	@ (8007180 <_printf_i+0x234>)
 8007020:	e011      	b.n	8007046 <_printf_i+0xfa>
 8007022:	6821      	ldr	r1, [r4, #0]
 8007024:	6833      	ldr	r3, [r6, #0]
 8007026:	0608      	lsls	r0, r1, #24
 8007028:	f853 5b04 	ldr.w	r5, [r3], #4
 800702c:	d402      	bmi.n	8007034 <_printf_i+0xe8>
 800702e:	0649      	lsls	r1, r1, #25
 8007030:	bf48      	it	mi
 8007032:	b2ad      	uxthmi	r5, r5
 8007034:	2f6f      	cmp	r7, #111	@ 0x6f
 8007036:	6033      	str	r3, [r6, #0]
 8007038:	bf14      	ite	ne
 800703a:	230a      	movne	r3, #10
 800703c:	2308      	moveq	r3, #8
 800703e:	4850      	ldr	r0, [pc, #320]	@ (8007180 <_printf_i+0x234>)
 8007040:	2100      	movs	r1, #0
 8007042:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007046:	6866      	ldr	r6, [r4, #4]
 8007048:	2e00      	cmp	r6, #0
 800704a:	60a6      	str	r6, [r4, #8]
 800704c:	db05      	blt.n	800705a <_printf_i+0x10e>
 800704e:	6821      	ldr	r1, [r4, #0]
 8007050:	432e      	orrs	r6, r5
 8007052:	f021 0104 	bic.w	r1, r1, #4
 8007056:	6021      	str	r1, [r4, #0]
 8007058:	d04b      	beq.n	80070f2 <_printf_i+0x1a6>
 800705a:	4616      	mov	r6, r2
 800705c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007060:	fb03 5711 	mls	r7, r3, r1, r5
 8007064:	5dc7      	ldrb	r7, [r0, r7]
 8007066:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800706a:	462f      	mov	r7, r5
 800706c:	42bb      	cmp	r3, r7
 800706e:	460d      	mov	r5, r1
 8007070:	d9f4      	bls.n	800705c <_printf_i+0x110>
 8007072:	2b08      	cmp	r3, #8
 8007074:	d10b      	bne.n	800708e <_printf_i+0x142>
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	07df      	lsls	r7, r3, #31
 800707a:	d508      	bpl.n	800708e <_printf_i+0x142>
 800707c:	6923      	ldr	r3, [r4, #16]
 800707e:	6861      	ldr	r1, [r4, #4]
 8007080:	4299      	cmp	r1, r3
 8007082:	bfde      	ittt	le
 8007084:	2330      	movle	r3, #48	@ 0x30
 8007086:	f806 3c01 	strble.w	r3, [r6, #-1]
 800708a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800708e:	1b92      	subs	r2, r2, r6
 8007090:	6122      	str	r2, [r4, #16]
 8007092:	464b      	mov	r3, r9
 8007094:	4621      	mov	r1, r4
 8007096:	4640      	mov	r0, r8
 8007098:	f8cd a000 	str.w	sl, [sp]
 800709c:	aa03      	add	r2, sp, #12
 800709e:	f7ff fee3 	bl	8006e68 <_printf_common>
 80070a2:	3001      	adds	r0, #1
 80070a4:	d14a      	bne.n	800713c <_printf_i+0x1f0>
 80070a6:	f04f 30ff 	mov.w	r0, #4294967295
 80070aa:	b004      	add	sp, #16
 80070ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b0:	6823      	ldr	r3, [r4, #0]
 80070b2:	f043 0320 	orr.w	r3, r3, #32
 80070b6:	6023      	str	r3, [r4, #0]
 80070b8:	2778      	movs	r7, #120	@ 0x78
 80070ba:	4832      	ldr	r0, [pc, #200]	@ (8007184 <_printf_i+0x238>)
 80070bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	6831      	ldr	r1, [r6, #0]
 80070c4:	061f      	lsls	r7, r3, #24
 80070c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80070ca:	d402      	bmi.n	80070d2 <_printf_i+0x186>
 80070cc:	065f      	lsls	r7, r3, #25
 80070ce:	bf48      	it	mi
 80070d0:	b2ad      	uxthmi	r5, r5
 80070d2:	6031      	str	r1, [r6, #0]
 80070d4:	07d9      	lsls	r1, r3, #31
 80070d6:	bf44      	itt	mi
 80070d8:	f043 0320 	orrmi.w	r3, r3, #32
 80070dc:	6023      	strmi	r3, [r4, #0]
 80070de:	b11d      	cbz	r5, 80070e8 <_printf_i+0x19c>
 80070e0:	2310      	movs	r3, #16
 80070e2:	e7ad      	b.n	8007040 <_printf_i+0xf4>
 80070e4:	4826      	ldr	r0, [pc, #152]	@ (8007180 <_printf_i+0x234>)
 80070e6:	e7e9      	b.n	80070bc <_printf_i+0x170>
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	f023 0320 	bic.w	r3, r3, #32
 80070ee:	6023      	str	r3, [r4, #0]
 80070f0:	e7f6      	b.n	80070e0 <_printf_i+0x194>
 80070f2:	4616      	mov	r6, r2
 80070f4:	e7bd      	b.n	8007072 <_printf_i+0x126>
 80070f6:	6833      	ldr	r3, [r6, #0]
 80070f8:	6825      	ldr	r5, [r4, #0]
 80070fa:	1d18      	adds	r0, r3, #4
 80070fc:	6961      	ldr	r1, [r4, #20]
 80070fe:	6030      	str	r0, [r6, #0]
 8007100:	062e      	lsls	r6, r5, #24
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	d501      	bpl.n	800710a <_printf_i+0x1be>
 8007106:	6019      	str	r1, [r3, #0]
 8007108:	e002      	b.n	8007110 <_printf_i+0x1c4>
 800710a:	0668      	lsls	r0, r5, #25
 800710c:	d5fb      	bpl.n	8007106 <_printf_i+0x1ba>
 800710e:	8019      	strh	r1, [r3, #0]
 8007110:	2300      	movs	r3, #0
 8007112:	4616      	mov	r6, r2
 8007114:	6123      	str	r3, [r4, #16]
 8007116:	e7bc      	b.n	8007092 <_printf_i+0x146>
 8007118:	6833      	ldr	r3, [r6, #0]
 800711a:	2100      	movs	r1, #0
 800711c:	1d1a      	adds	r2, r3, #4
 800711e:	6032      	str	r2, [r6, #0]
 8007120:	681e      	ldr	r6, [r3, #0]
 8007122:	6862      	ldr	r2, [r4, #4]
 8007124:	4630      	mov	r0, r6
 8007126:	f000 f859 	bl	80071dc <memchr>
 800712a:	b108      	cbz	r0, 8007130 <_printf_i+0x1e4>
 800712c:	1b80      	subs	r0, r0, r6
 800712e:	6060      	str	r0, [r4, #4]
 8007130:	6863      	ldr	r3, [r4, #4]
 8007132:	6123      	str	r3, [r4, #16]
 8007134:	2300      	movs	r3, #0
 8007136:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800713a:	e7aa      	b.n	8007092 <_printf_i+0x146>
 800713c:	4632      	mov	r2, r6
 800713e:	4649      	mov	r1, r9
 8007140:	4640      	mov	r0, r8
 8007142:	6923      	ldr	r3, [r4, #16]
 8007144:	47d0      	blx	sl
 8007146:	3001      	adds	r0, #1
 8007148:	d0ad      	beq.n	80070a6 <_printf_i+0x15a>
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	079b      	lsls	r3, r3, #30
 800714e:	d413      	bmi.n	8007178 <_printf_i+0x22c>
 8007150:	68e0      	ldr	r0, [r4, #12]
 8007152:	9b03      	ldr	r3, [sp, #12]
 8007154:	4298      	cmp	r0, r3
 8007156:	bfb8      	it	lt
 8007158:	4618      	movlt	r0, r3
 800715a:	e7a6      	b.n	80070aa <_printf_i+0x15e>
 800715c:	2301      	movs	r3, #1
 800715e:	4632      	mov	r2, r6
 8007160:	4649      	mov	r1, r9
 8007162:	4640      	mov	r0, r8
 8007164:	47d0      	blx	sl
 8007166:	3001      	adds	r0, #1
 8007168:	d09d      	beq.n	80070a6 <_printf_i+0x15a>
 800716a:	3501      	adds	r5, #1
 800716c:	68e3      	ldr	r3, [r4, #12]
 800716e:	9903      	ldr	r1, [sp, #12]
 8007170:	1a5b      	subs	r3, r3, r1
 8007172:	42ab      	cmp	r3, r5
 8007174:	dcf2      	bgt.n	800715c <_printf_i+0x210>
 8007176:	e7eb      	b.n	8007150 <_printf_i+0x204>
 8007178:	2500      	movs	r5, #0
 800717a:	f104 0619 	add.w	r6, r4, #25
 800717e:	e7f5      	b.n	800716c <_printf_i+0x220>
 8007180:	080074d3 	.word	0x080074d3
 8007184:	080074e4 	.word	0x080074e4

08007188 <memmove>:
 8007188:	4288      	cmp	r0, r1
 800718a:	b510      	push	{r4, lr}
 800718c:	eb01 0402 	add.w	r4, r1, r2
 8007190:	d902      	bls.n	8007198 <memmove+0x10>
 8007192:	4284      	cmp	r4, r0
 8007194:	4623      	mov	r3, r4
 8007196:	d807      	bhi.n	80071a8 <memmove+0x20>
 8007198:	1e43      	subs	r3, r0, #1
 800719a:	42a1      	cmp	r1, r4
 800719c:	d008      	beq.n	80071b0 <memmove+0x28>
 800719e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071a6:	e7f8      	b.n	800719a <memmove+0x12>
 80071a8:	4601      	mov	r1, r0
 80071aa:	4402      	add	r2, r0
 80071ac:	428a      	cmp	r2, r1
 80071ae:	d100      	bne.n	80071b2 <memmove+0x2a>
 80071b0:	bd10      	pop	{r4, pc}
 80071b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071ba:	e7f7      	b.n	80071ac <memmove+0x24>

080071bc <_sbrk_r>:
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	2300      	movs	r3, #0
 80071c0:	4d05      	ldr	r5, [pc, #20]	@ (80071d8 <_sbrk_r+0x1c>)
 80071c2:	4604      	mov	r4, r0
 80071c4:	4608      	mov	r0, r1
 80071c6:	602b      	str	r3, [r5, #0]
 80071c8:	f7fa fc74 	bl	8001ab4 <_sbrk>
 80071cc:	1c43      	adds	r3, r0, #1
 80071ce:	d102      	bne.n	80071d6 <_sbrk_r+0x1a>
 80071d0:	682b      	ldr	r3, [r5, #0]
 80071d2:	b103      	cbz	r3, 80071d6 <_sbrk_r+0x1a>
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	bd38      	pop	{r3, r4, r5, pc}
 80071d8:	20000370 	.word	0x20000370

080071dc <memchr>:
 80071dc:	4603      	mov	r3, r0
 80071de:	b510      	push	{r4, lr}
 80071e0:	b2c9      	uxtb	r1, r1
 80071e2:	4402      	add	r2, r0
 80071e4:	4293      	cmp	r3, r2
 80071e6:	4618      	mov	r0, r3
 80071e8:	d101      	bne.n	80071ee <memchr+0x12>
 80071ea:	2000      	movs	r0, #0
 80071ec:	e003      	b.n	80071f6 <memchr+0x1a>
 80071ee:	7804      	ldrb	r4, [r0, #0]
 80071f0:	3301      	adds	r3, #1
 80071f2:	428c      	cmp	r4, r1
 80071f4:	d1f6      	bne.n	80071e4 <memchr+0x8>
 80071f6:	bd10      	pop	{r4, pc}

080071f8 <_realloc_r>:
 80071f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071fc:	4607      	mov	r7, r0
 80071fe:	4614      	mov	r4, r2
 8007200:	460d      	mov	r5, r1
 8007202:	b921      	cbnz	r1, 800720e <_realloc_r+0x16>
 8007204:	4611      	mov	r1, r2
 8007206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800720a:	f7ff bc49 	b.w	8006aa0 <_malloc_r>
 800720e:	b92a      	cbnz	r2, 800721c <_realloc_r+0x24>
 8007210:	f7ff fbdc 	bl	80069cc <_free_r>
 8007214:	4625      	mov	r5, r4
 8007216:	4628      	mov	r0, r5
 8007218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800721c:	f000 f81a 	bl	8007254 <_malloc_usable_size_r>
 8007220:	4284      	cmp	r4, r0
 8007222:	4606      	mov	r6, r0
 8007224:	d802      	bhi.n	800722c <_realloc_r+0x34>
 8007226:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800722a:	d8f4      	bhi.n	8007216 <_realloc_r+0x1e>
 800722c:	4621      	mov	r1, r4
 800722e:	4638      	mov	r0, r7
 8007230:	f7ff fc36 	bl	8006aa0 <_malloc_r>
 8007234:	4680      	mov	r8, r0
 8007236:	b908      	cbnz	r0, 800723c <_realloc_r+0x44>
 8007238:	4645      	mov	r5, r8
 800723a:	e7ec      	b.n	8007216 <_realloc_r+0x1e>
 800723c:	42b4      	cmp	r4, r6
 800723e:	4622      	mov	r2, r4
 8007240:	4629      	mov	r1, r5
 8007242:	bf28      	it	cs
 8007244:	4632      	movcs	r2, r6
 8007246:	f7ff fbb3 	bl	80069b0 <memcpy>
 800724a:	4629      	mov	r1, r5
 800724c:	4638      	mov	r0, r7
 800724e:	f7ff fbbd 	bl	80069cc <_free_r>
 8007252:	e7f1      	b.n	8007238 <_realloc_r+0x40>

08007254 <_malloc_usable_size_r>:
 8007254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007258:	1f18      	subs	r0, r3, #4
 800725a:	2b00      	cmp	r3, #0
 800725c:	bfbc      	itt	lt
 800725e:	580b      	ldrlt	r3, [r1, r0]
 8007260:	18c0      	addlt	r0, r0, r3
 8007262:	4770      	bx	lr

08007264 <_init>:
 8007264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007266:	bf00      	nop
 8007268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800726a:	bc08      	pop	{r3}
 800726c:	469e      	mov	lr, r3
 800726e:	4770      	bx	lr

08007270 <_fini>:
 8007270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007272:	bf00      	nop
 8007274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007276:	bc08      	pop	{r3}
 8007278:	469e      	mov	lr, r3
 800727a:	4770      	bx	lr

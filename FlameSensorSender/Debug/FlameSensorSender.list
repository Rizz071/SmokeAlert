
FlameSensorSender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fd8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080060e8  080060e8  000070e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006178  08006178  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006178  08006178  0000800c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006178  08006178  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006178  08006178  00007178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800617c  0800617c  0000717c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006180  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000000c  0800618c  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  0800618c  0000818c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f63f  00000000  00000000  00008035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dcf  00000000  00000000  00017674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  0001a448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c52  00000000  00000000  0001b470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196df  00000000  00000000  0001c0c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013953  00000000  00000000  000357a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f951  00000000  00000000  000490f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8a45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004434  00000000  00000000  000d8a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000dcebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	080060d0 	.word	0x080060d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	080060d0 	.word	0x080060d0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	@ 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c4a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	@ 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	@ 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	@ 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__gesf2>:
 8000e98:	f04f 3cff 	mov.w	ip, #4294967295
 8000e9c:	e006      	b.n	8000eac <__cmpsf2+0x4>
 8000e9e:	bf00      	nop

08000ea0 <__lesf2>:
 8000ea0:	f04f 0c01 	mov.w	ip, #1
 8000ea4:	e002      	b.n	8000eac <__cmpsf2+0x4>
 8000ea6:	bf00      	nop

08000ea8 <__cmpsf2>:
 8000ea8:	f04f 0c01 	mov.w	ip, #1
 8000eac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d011      	beq.n	8000ee8 <__cmpsf2+0x40>
 8000ec4:	b001      	add	sp, #4
 8000ec6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eca:	bf18      	it	ne
 8000ecc:	ea90 0f01 	teqne	r0, r1
 8000ed0:	bf58      	it	pl
 8000ed2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed6:	bf88      	it	hi
 8000ed8:	17c8      	asrhi	r0, r1, #31
 8000eda:	bf38      	it	cc
 8000edc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee0:	bf18      	it	ne
 8000ee2:	f040 0001 	orrne.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eec:	d102      	bne.n	8000ef4 <__cmpsf2+0x4c>
 8000eee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef2:	d105      	bne.n	8000f00 <__cmpsf2+0x58>
 8000ef4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef8:	d1e4      	bne.n	8000ec4 <__cmpsf2+0x1c>
 8000efa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efe:	d0e1      	beq.n	8000ec4 <__cmpsf2+0x1c>
 8000f00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_cfrcmple>:
 8000f08:	4684      	mov	ip, r0
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	e7ff      	b.n	8000f10 <__aeabi_cfcmpeq>

08000f10 <__aeabi_cfcmpeq>:
 8000f10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f12:	f7ff ffc9 	bl	8000ea8 <__cmpsf2>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	bf48      	it	mi
 8000f1a:	f110 0f00 	cmnmi.w	r0, #0
 8000f1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f20 <__aeabi_fcmpeq>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff fff4 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f28:	bf0c      	ite	eq
 8000f2a:	2001      	moveq	r0, #1
 8000f2c:	2000      	movne	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmplt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffea 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmple>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffe0 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f50:	bf94      	ite	ls
 8000f52:	2001      	movls	r0, #1
 8000f54:	2000      	movhi	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmpge>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffd2 	bl	8000f08 <__aeabi_cfrcmple>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpgt>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffc8 	bl	8000f08 <__aeabi_cfrcmple>
 8000f78:	bf34      	ite	cc
 8000f7a:	2001      	movcc	r0, #1
 8000f7c:	2000      	movcs	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2uiz>:
 8000f84:	0042      	lsls	r2, r0, #1
 8000f86:	d20e      	bcs.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f8c:	d30b      	bcc.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f8e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d409      	bmi.n	8000fac <__aeabi_f2uiz+0x28>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fa0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr
 8000fac:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_f2uiz+0x32>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d102      	bne.n	8000fbc <__aeabi_f2uiz+0x38>
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fba:	4770      	bx	lr
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fca:	f000 fc93 	bl	80018f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fce:	f000 f869 	bl	80010a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd2:	f000 fa05 	bl	80013e0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000fd6:	f000 f937 	bl	8001248 <MX_RTC_Init>
  MX_TIM2_Init();
 8000fda:	f000 f9b5 	bl	8001348 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	// Getting hardware serial for self identity
	hw_serial = get_serial_number();
 8000fde:	4c2b      	ldr	r4, [pc, #172]	@ (800108c <main+0xc8>)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f005 f81e 	bl	8006024 <get_serial_number>
 8000fe8:	463b      	mov	r3, r7
 8000fea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fee:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	MX_ADC1_Init();
 8000ff2:	f000 f8ad 	bl	8001150 <MX_ADC1_Init>
	Battery = get_battery_level();
 8000ff6:	4c26      	ldr	r4, [pc, #152]	@ (8001090 <main+0xcc>)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f004 fa80 	bl	8005500 <get_battery_level>
 8001000:	4622      	mov	r2, r4
 8001002:	463b      	mov	r3, r7
 8001004:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001008:	e882 0003 	stmia.w	r2, {r0, r1}
	HAL_ADC_DeInit(&hadc1);
 800100c:	4821      	ldr	r0, [pc, #132]	@ (8001094 <main+0xd0>)
 800100e:	f000 fded 	bl	8001bec <HAL_ADC_DeInit>

	// Enable VCC to Smoke Sensor and getting data
	HAL_GPIO_WritePin(GPIOB, MOSFET_GATE_SENSOR_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001018:	481f      	ldr	r0, [pc, #124]	@ (8001098 <main+0xd4>)
 800101a:	f001 fd67 	bl	8002aec <HAL_GPIO_WritePin>
	MX_ADC2_Init();
 800101e:	f000 f8d5 	bl	80011cc <MX_ADC2_Init>
	float sensor_data = get_infra_sensor_data(Battery);
 8001022:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <main+0xcc>)
 8001024:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001028:	f004 fb6a 	bl	8005700 <get_infra_sensor_data>
 800102c:	6178      	str	r0, [r7, #20]
	HAL_ADC_DeInit(&hadc2);
 800102e:	481b      	ldr	r0, [pc, #108]	@ (800109c <main+0xd8>)
 8001030:	f000 fddc 	bl	8001bec <HAL_ADC_DeInit>
	HAL_GPIO_WritePin(GPIOB, MOSFET_GATE_SENSOR_Pin, GPIO_PIN_SET);
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800103a:	4817      	ldr	r0, [pc, #92]	@ (8001098 <main+0xd4>)
 800103c:	f001 fd56 	bl	8002aec <HAL_GPIO_WritePin>

	// Forming a packet to send
	packet.ID = hw_serial.byte_2;
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <main+0xc8>)
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	4a16      	ldr	r2, [pc, #88]	@ (80010a0 <main+0xdc>)
 8001046:	6013      	str	r3, [r2, #0]
	packet.battery_level = Battery.charge_percent;
 8001048:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <main+0xcc>)
 800104a:	791a      	ldrb	r2, [r3, #4]
 800104c:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <main+0xdc>)
 800104e:	721a      	strb	r2, [r3, #8]
	packet.sensor_data = sensor_data;
 8001050:	4a13      	ldr	r2, [pc, #76]	@ (80010a0 <main+0xdc>)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	6053      	str	r3, [r2, #4]

// Enabling LoRa and sending packet to Base Station
	HAL_GPIO_WritePin(GPIOB, MOSFET_GATE_LORA_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800105c:	480e      	ldr	r0, [pc, #56]	@ (8001098 <main+0xd4>)
 800105e:	f001 fd45 	bl	8002aec <HAL_GPIO_WritePin>
	MX_SPI1_Init();
 8001062:	f000 f93b 	bl	80012dc <MX_SPI1_Init>
	send_packet(packet);
 8001066:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <main+0xdc>)
 8001068:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800106c:	f004 ffc6 	bl	8005ffc <send_packet>
	HAL_GPIO_WritePin(GPIOB, MOSFET_GATE_LORA_Pin, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001076:	4808      	ldr	r0, [pc, #32]	@ (8001098 <main+0xd4>)
 8001078:	f001 fd38 	bl	8002aec <HAL_GPIO_WritePin>

	// Sleeping
	set_alarm(3);
 800107c:	2003      	movs	r0, #3
 800107e:	f004 fa03 	bl	8005488 <set_alarm>
	HAL_PWR_EnterSTANDBYMode();
 8001082:	f001 fd57 	bl	8002b34 <HAL_PWR_EnterSTANDBYMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001086:	bf00      	nop
 8001088:	e7fd      	b.n	8001086 <main+0xc2>
 800108a:	bf00      	nop
 800108c:	2000013c 	.word	0x2000013c
 8001090:	20000148 	.word	0x20000148
 8001094:	20000028 	.word	0x20000028
 8001098:	40010c00 	.word	0x40010c00
 800109c:	20000058 	.word	0x20000058
 80010a0:	20000150 	.word	0x20000150

080010a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b094      	sub	sp, #80	@ 0x50
 80010a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010ae:	2228      	movs	r2, #40	@ 0x28
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f004 ffd2 	bl	800605c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80010d4:	230a      	movs	r3, #10
 80010d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d8:	2301      	movs	r3, #1
 80010da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010dc:	2310      	movs	r3, #16
 80010de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010e0:	2301      	movs	r3, #1
 80010e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fd39 	bl	8002b64 <HAL_RCC_OscConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010f8:	f000 fa3a 	bl	8001570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fc:	230f      	movs	r3, #15
 80010fe:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001104:	23a0      	movs	r3, #160	@ 0xa0
 8001106:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f001 ffa6 	bl	8003068 <HAL_RCC_ClockConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001122:	f000 fa25 	bl	8001570 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001126:	2303      	movs	r3, #3
 8001128:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800112a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800112e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	4618      	mov	r0, r3
 8001138:	f002 f910 	bl	800335c <HAL_RCCEx_PeriphCLKConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001142:	f000 fa15 	bl	8001570 <Error_Handler>
  }
}
 8001146:	bf00      	nop
 8001148:	3750      	adds	r7, #80	@ 0x50
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001160:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <MX_ADC1_Init+0x74>)
 8001162:	4a19      	ldr	r2, [pc, #100]	@ (80011c8 <MX_ADC1_Init+0x78>)
 8001164:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001166:	4b17      	ldr	r3, [pc, #92]	@ (80011c4 <MX_ADC1_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800116c:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <MX_ADC1_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001172:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <MX_ADC1_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <MX_ADC1_Init+0x74>)
 800117a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800117e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001180:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <MX_ADC1_Init+0x74>)
 8001182:	2200      	movs	r2, #0
 8001184:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001186:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_ADC1_Init+0x74>)
 8001188:	2201      	movs	r2, #1
 800118a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800118c:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <MX_ADC1_Init+0x74>)
 800118e:	f000 fc55 	bl	8001a3c <HAL_ADC_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001198:	f000 f9ea 	bl	8001570 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800119c:	2301      	movs	r3, #1
 800119e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80011a4:	2307      	movs	r3, #7
 80011a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <MX_ADC1_Init+0x74>)
 80011ae:	f000 ffcb 	bl	8002148 <HAL_ADC_ConfigChannel>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80011b8:	f000 f9da 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000028 	.word	0x20000028
 80011c8:	40012400 	.word	0x40012400

080011cc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011dc:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <MX_ADC2_Init+0x74>)
 80011de:	4a19      	ldr	r2, [pc, #100]	@ (8001244 <MX_ADC2_Init+0x78>)
 80011e0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e2:	4b17      	ldr	r3, [pc, #92]	@ (8001240 <MX_ADC2_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011e8:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <MX_ADC2_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011ee:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <MX_ADC2_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <MX_ADC2_Init+0x74>)
 80011f6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80011fa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011fc:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <MX_ADC2_Init+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001202:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <MX_ADC2_Init+0x74>)
 8001204:	2201      	movs	r2, #1
 8001206:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001208:	480d      	ldr	r0, [pc, #52]	@ (8001240 <MX_ADC2_Init+0x74>)
 800120a:	f000 fc17 	bl	8001a3c <HAL_ADC_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001214:	f000 f9ac 	bl	8001570 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800121c:	2301      	movs	r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001220:	2307      	movs	r3, #7
 8001222:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	@ (8001240 <MX_ADC2_Init+0x74>)
 800122a:	f000 ff8d 	bl	8002148 <HAL_ADC_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001234:	f000 f99c 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000058 	.word	0x20000058
 8001244:	40012800 	.word	0x40012800

08001248 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2100      	movs	r1, #0
 8001252:	460a      	mov	r2, r1
 8001254:	801a      	strh	r2, [r3, #0]
 8001256:	460a      	mov	r2, r1
 8001258:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800125a:	2300      	movs	r3, #0
 800125c:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800125e:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <MX_RTC_Init+0x8c>)
 8001260:	4a1d      	ldr	r2, [pc, #116]	@ (80012d8 <MX_RTC_Init+0x90>)
 8001262:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001264:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <MX_RTC_Init+0x8c>)
 8001266:	f04f 32ff 	mov.w	r2, #4294967295
 800126a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 800126c:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <MX_RTC_Init+0x8c>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001272:	4818      	ldr	r0, [pc, #96]	@ (80012d4 <MX_RTC_Init+0x8c>)
 8001274:	f002 f9de 	bl	8003634 <HAL_RTC_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 800127e:	f000 f977 	bl	8001570 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2200      	movs	r2, #0
 8001292:	4619      	mov	r1, r3
 8001294:	480f      	ldr	r0, [pc, #60]	@ (80012d4 <MX_RTC_Init+0x8c>)
 8001296:	f002 fa59 	bl	800374c <HAL_RTC_SetTime>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 80012a0:	f000 f966 	bl	8001570 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80012a4:	2301      	movs	r3, #1
 80012a6:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80012a8:	2301      	movs	r3, #1
 80012aa:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 80012b4:	463b      	mov	r3, r7
 80012b6:	2200      	movs	r2, #0
 80012b8:	4619      	mov	r1, r3
 80012ba:	4806      	ldr	r0, [pc, #24]	@ (80012d4 <MX_RTC_Init+0x8c>)
 80012bc:	f002 fbb6 	bl	8003a2c <HAL_RTC_SetDate>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80012c6:	f000 f953 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000088 	.word	0x20000088
 80012d8:	40002800 	.word	0x40002800

080012dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012e0:	4b17      	ldr	r3, [pc, #92]	@ (8001340 <MX_SPI1_Init+0x64>)
 80012e2:	4a18      	ldr	r2, [pc, #96]	@ (8001344 <MX_SPI1_Init+0x68>)
 80012e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012e6:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <MX_SPI1_Init+0x64>)
 80012e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012ee:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <MX_SPI1_Init+0x64>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <MX_SPI1_Init+0x64>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MX_SPI1_Init+0x64>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001300:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <MX_SPI1_Init+0x64>)
 8001302:	2200      	movs	r2, #0
 8001304:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <MX_SPI1_Init+0x64>)
 8001308:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800130c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800130e:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <MX_SPI1_Init+0x64>)
 8001310:	2210      	movs	r2, #16
 8001312:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001314:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <MX_SPI1_Init+0x64>)
 8001316:	2200      	movs	r2, #0
 8001318:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <MX_SPI1_Init+0x64>)
 800131c:	2200      	movs	r2, #0
 800131e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001320:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <MX_SPI1_Init+0x64>)
 8001322:	2200      	movs	r2, #0
 8001324:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <MX_SPI1_Init+0x64>)
 8001328:	220a      	movs	r2, #10
 800132a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800132c:	4804      	ldr	r0, [pc, #16]	@ (8001340 <MX_SPI1_Init+0x64>)
 800132e:	f003 f836 	bl	800439e <HAL_SPI_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001338:	f000 f91a 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000009c 	.word	0x2000009c
 8001344:	40013000 	.word	0x40013000

08001348 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	463b      	mov	r3, r7
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001364:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <MX_TIM2_Init+0x94>)
 8001366:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800136a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <MX_TIM2_Init+0x94>)
 800136e:	2200      	movs	r2, #0
 8001370:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001372:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <MX_TIM2_Init+0x94>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001378:	4b18      	ldr	r3, [pc, #96]	@ (80013dc <MX_TIM2_Init+0x94>)
 800137a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800137e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001380:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <MX_TIM2_Init+0x94>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <MX_TIM2_Init+0x94>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800138c:	4813      	ldr	r0, [pc, #76]	@ (80013dc <MX_TIM2_Init+0x94>)
 800138e:	f003 fda8 	bl	8004ee2 <HAL_TIM_Base_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001398:	f000 f8ea 	bl	8001570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	4619      	mov	r1, r3
 80013a8:	480c      	ldr	r0, [pc, #48]	@ (80013dc <MX_TIM2_Init+0x94>)
 80013aa:	f003 fe53 	bl	8005054 <HAL_TIM_ConfigClockSource>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013b4:	f000 f8dc 	bl	8001570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	@ (80013dc <MX_TIM2_Init+0x94>)
 80013c6:	f004 f807 	bl	80053d8 <HAL_TIMEx_MasterConfigSynchronization>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013d0:	f000 f8ce 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200000f4 	.word	0x200000f4

080013e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	@ 0x28
 80013e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f4:	4b57      	ldr	r3, [pc, #348]	@ (8001554 <MX_GPIO_Init+0x174>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	4a56      	ldr	r2, [pc, #344]	@ (8001554 <MX_GPIO_Init+0x174>)
 80013fa:	f043 0310 	orr.w	r3, r3, #16
 80013fe:	6193      	str	r3, [r2, #24]
 8001400:	4b54      	ldr	r3, [pc, #336]	@ (8001554 <MX_GPIO_Init+0x174>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f003 0310 	and.w	r3, r3, #16
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140c:	4b51      	ldr	r3, [pc, #324]	@ (8001554 <MX_GPIO_Init+0x174>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a50      	ldr	r2, [pc, #320]	@ (8001554 <MX_GPIO_Init+0x174>)
 8001412:	f043 0320 	orr.w	r3, r3, #32
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b4e      	ldr	r3, [pc, #312]	@ (8001554 <MX_GPIO_Init+0x174>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0320 	and.w	r3, r3, #32
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001424:	4b4b      	ldr	r3, [pc, #300]	@ (8001554 <MX_GPIO_Init+0x174>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a4a      	ldr	r2, [pc, #296]	@ (8001554 <MX_GPIO_Init+0x174>)
 800142a:	f043 0304 	orr.w	r3, r3, #4
 800142e:	6193      	str	r3, [r2, #24]
 8001430:	4b48      	ldr	r3, [pc, #288]	@ (8001554 <MX_GPIO_Init+0x174>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143c:	4b45      	ldr	r3, [pc, #276]	@ (8001554 <MX_GPIO_Init+0x174>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	4a44      	ldr	r2, [pc, #272]	@ (8001554 <MX_GPIO_Init+0x174>)
 8001442:	f043 0308 	orr.w	r3, r3, #8
 8001446:	6193      	str	r3, [r2, #24]
 8001448:	4b42      	ldr	r3, [pc, #264]	@ (8001554 <MX_GPIO_Init+0x174>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_SIGNAL_GPIO_Port, NSS_SIGNAL_Pin, GPIO_PIN_SET);
 8001454:	2201      	movs	r2, #1
 8001456:	2110      	movs	r1, #16
 8001458:	483f      	ldr	r0, [pc, #252]	@ (8001558 <MX_GPIO_Init+0x178>)
 800145a:	f001 fb47 	bl	8002aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_SIGNAL_Pin|MOSFET_GATE_SENSOR_Pin|MOSFET_GATE_LORA_Pin|V_LED_Pin, GPIO_PIN_SET);
 800145e:	2201      	movs	r2, #1
 8001460:	f641 4102 	movw	r1, #7170	@ 0x1c02
 8001464:	483d      	ldr	r0, [pc, #244]	@ (800155c <MX_GPIO_Init+0x17c>)
 8001466:	f001 fb41 	bl	8002aec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800146a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800146e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001470:	2303      	movs	r3, #3
 8001472:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4619      	mov	r1, r3
 800147a:	4839      	ldr	r0, [pc, #228]	@ (8001560 <MX_GPIO_Init+0x180>)
 800147c:	f001 f906 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001480:	2303      	movs	r3, #3
 8001482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001484:	2303      	movs	r3, #3
 8001486:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	4835      	ldr	r0, [pc, #212]	@ (8001564 <MX_GPIO_Init+0x184>)
 8001490:	f001 f8fc 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8001494:	f649 730c 	movw	r3, #40716	@ 0x9f0c
 8001498:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149a:	2303      	movs	r3, #3
 800149c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	482c      	ldr	r0, [pc, #176]	@ (8001558 <MX_GPIO_Init+0x178>)
 80014a6:	f001 f8f1 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_SIGNAL_Pin */
  GPIO_InitStruct.Pin = NSS_SIGNAL_Pin;
 80014aa:	2310      	movs	r3, #16
 80014ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2302      	movs	r3, #2
 80014b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	4825      	ldr	r0, [pc, #148]	@ (8001558 <MX_GPIO_Init+0x178>)
 80014c2:	f001 f8e3 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_INT_Pin */
  GPIO_InitStruct.Pin = DIO0_INT_Pin;
 80014c6:	2301      	movs	r3, #1
 80014c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ca:	4b27      	ldr	r3, [pc, #156]	@ (8001568 <MX_GPIO_Init+0x188>)
 80014cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_INT_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	4820      	ldr	r0, [pc, #128]	@ (800155c <MX_GPIO_Init+0x17c>)
 80014da:	f001 f8d7 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_SIGNAL_Pin */
  GPIO_InitStruct.Pin = RST_SIGNAL_Pin;
 80014de:	2302      	movs	r3, #2
 80014e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014e6:	2302      	movs	r3, #2
 80014e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2302      	movs	r3, #2
 80014ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	4819      	ldr	r0, [pc, #100]	@ (800155c <MX_GPIO_Init+0x17c>)
 80014f6:	f001 f8c9 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80014fa:	f24e 33fc 	movw	r3, #58364	@ 0xe3fc
 80014fe:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001500:	2303      	movs	r3, #3
 8001502:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4814      	ldr	r0, [pc, #80]	@ (800155c <MX_GPIO_Init+0x17c>)
 800150c:	f001 f8be 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOSFET_GATE_SENSOR_Pin MOSFET_GATE_LORA_Pin V_LED_Pin */
  GPIO_InitStruct.Pin = MOSFET_GATE_SENSOR_Pin|MOSFET_GATE_LORA_Pin|V_LED_Pin;
 8001510:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151a:	2301      	movs	r3, #1
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2302      	movs	r3, #2
 8001520:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	480c      	ldr	r0, [pc, #48]	@ (800155c <MX_GPIO_Init+0x17c>)
 800152a:	f001 f8af 	bl	800268c <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 800152e:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <MX_GPIO_Init+0x18c>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
 8001534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001536:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
 800153c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
 8001544:	4a09      	ldr	r2, [pc, #36]	@ (800156c <MX_GPIO_Init+0x18c>)
 8001546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001548:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800154a:	bf00      	nop
 800154c:	3728      	adds	r7, #40	@ 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	40010800 	.word	0x40010800
 800155c:	40010c00 	.word	0x40010c00
 8001560:	40011000 	.word	0x40011000
 8001564:	40011400 	.word	0x40011400
 8001568:	10110000 	.word	0x10110000
 800156c:	40010000 	.word	0x40010000

08001570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001574:	b672      	cpsid	i
}
 8001576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <Error_Handler+0x8>

0800157c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <HAL_MspInit+0x5c>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	4a14      	ldr	r2, [pc, #80]	@ (80015d8 <HAL_MspInit+0x5c>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6193      	str	r3, [r2, #24]
 800158e:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <HAL_MspInit+0x5c>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <HAL_MspInit+0x5c>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	4a0e      	ldr	r2, [pc, #56]	@ (80015d8 <HAL_MspInit+0x5c>)
 80015a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a4:	61d3      	str	r3, [r2, #28]
 80015a6:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <HAL_MspInit+0x5c>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015b2:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <HAL_MspInit+0x60>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	4a04      	ldr	r2, [pc, #16]	@ (80015dc <HAL_MspInit+0x60>)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40010000 	.word	0x40010000

080015e0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	@ 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0318 	add.w	r3, r7, #24
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a28      	ldr	r2, [pc, #160]	@ (800169c <HAL_ADC_MspInit+0xbc>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d122      	bne.n	8001646 <HAL_ADC_MspInit+0x66>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001600:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <HAL_ADC_MspInit+0xc0>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	4a26      	ldr	r2, [pc, #152]	@ (80016a0 <HAL_ADC_MspInit+0xc0>)
 8001606:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800160a:	6193      	str	r3, [r2, #24]
 800160c:	4b24      	ldr	r3, [pc, #144]	@ (80016a0 <HAL_ADC_MspInit+0xc0>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001618:	4b21      	ldr	r3, [pc, #132]	@ (80016a0 <HAL_ADC_MspInit+0xc0>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a20      	ldr	r2, [pc, #128]	@ (80016a0 <HAL_ADC_MspInit+0xc0>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b1e      	ldr	r3, [pc, #120]	@ (80016a0 <HAL_ADC_MspInit+0xc0>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = VCC_BAT_Pin;
 8001630:	2302      	movs	r3, #2
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001634:	2303      	movs	r3, #3
 8001636:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCC_BAT_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 0318 	add.w	r3, r7, #24
 800163c:	4619      	mov	r1, r3
 800163e:	4819      	ldr	r0, [pc, #100]	@ (80016a4 <HAL_ADC_MspInit+0xc4>)
 8001640:	f001 f824 	bl	800268c <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001644:	e026      	b.n	8001694 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a17      	ldr	r2, [pc, #92]	@ (80016a8 <HAL_ADC_MspInit+0xc8>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d121      	bne.n	8001694 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001650:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <HAL_ADC_MspInit+0xc0>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a12      	ldr	r2, [pc, #72]	@ (80016a0 <HAL_ADC_MspInit+0xc0>)
 8001656:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <HAL_ADC_MspInit+0xc0>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <HAL_ADC_MspInit+0xc0>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a0c      	ldr	r2, [pc, #48]	@ (80016a0 <HAL_ADC_MspInit+0xc0>)
 800166e:	f043 0304 	orr.w	r3, r3, #4
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <HAL_ADC_MspInit+0xc0>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = V0_Pin;
 8001680:	2301      	movs	r3, #1
 8001682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001684:	2303      	movs	r3, #3
 8001686:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V0_GPIO_Port, &GPIO_InitStruct);
 8001688:	f107 0318 	add.w	r3, r7, #24
 800168c:	4619      	mov	r1, r3
 800168e:	4805      	ldr	r0, [pc, #20]	@ (80016a4 <HAL_ADC_MspInit+0xc4>)
 8001690:	f000 fffc 	bl	800268c <HAL_GPIO_Init>
}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	@ 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40012400 	.word	0x40012400
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40010800 	.word	0x40010800
 80016a8:	40012800 	.word	0x40012800

080016ac <HAL_ADC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a10      	ldr	r2, [pc, #64]	@ (80016fc <HAL_ADC_MspDeInit+0x50>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d10a      	bne.n	80016d4 <HAL_ADC_MspDeInit+0x28>
  {
    /* USER CODE BEGIN ADC1_MspDeInit 0 */

    /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <HAL_ADC_MspDeInit+0x54>)
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001700 <HAL_ADC_MspDeInit+0x54>)
 80016c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80016c8:	6193      	str	r3, [r2, #24]

    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    HAL_GPIO_DeInit(VCC_BAT_GPIO_Port, VCC_BAT_Pin);
 80016ca:	2102      	movs	r1, #2
 80016cc:	480d      	ldr	r0, [pc, #52]	@ (8001704 <HAL_ADC_MspDeInit+0x58>)
 80016ce:	f001 f959 	bl	8002984 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN ADC2_MspDeInit 1 */

    /* USER CODE END ADC2_MspDeInit 1 */
  }

}
 80016d2:	e00e      	b.n	80016f2 <HAL_ADC_MspDeInit+0x46>
  else if(hadc->Instance==ADC2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001708 <HAL_ADC_MspDeInit+0x5c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d109      	bne.n	80016f2 <HAL_ADC_MspDeInit+0x46>
    __HAL_RCC_ADC2_CLK_DISABLE();
 80016de:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <HAL_ADC_MspDeInit+0x54>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	4a07      	ldr	r2, [pc, #28]	@ (8001700 <HAL_ADC_MspDeInit+0x54>)
 80016e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80016e8:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(V0_GPIO_Port, V0_Pin);
 80016ea:	2101      	movs	r1, #1
 80016ec:	4805      	ldr	r0, [pc, #20]	@ (8001704 <HAL_ADC_MspDeInit+0x58>)
 80016ee:	f001 f949 	bl	8002984 <HAL_GPIO_DeInit>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40012400 	.word	0x40012400
 8001700:	40021000 	.word	0x40021000
 8001704:	40010800 	.word	0x40010800
 8001708:	40012800 	.word	0x40012800

0800170c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0f      	ldr	r2, [pc, #60]	@ (8001758 <HAL_RTC_MspInit+0x4c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d118      	bne.n	8001750 <HAL_RTC_MspInit+0x44>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800171e:	f001 f9fd 	bl	8002b1c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001722:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <HAL_RTC_MspInit+0x50>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	4a0d      	ldr	r2, [pc, #52]	@ (800175c <HAL_RTC_MspInit+0x50>)
 8001728:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800172c:	61d3      	str	r3, [r2, #28]
 800172e:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <HAL_RTC_MspInit+0x50>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800173a:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <HAL_RTC_MspInit+0x54>)
 800173c:	2201      	movs	r2, #1
 800173e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	2003      	movs	r0, #3
 8001746:	f000 ff6a 	bl	800261e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800174a:	2003      	movs	r0, #3
 800174c:	f000 ff83 	bl	8002656 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40002800 	.word	0x40002800
 800175c:	40021000 	.word	0x40021000
 8001760:	4242043c 	.word	0x4242043c

08001764 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0310 	add.w	r3, r7, #16
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a1b      	ldr	r2, [pc, #108]	@ (80017ec <HAL_SPI_MspInit+0x88>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d12f      	bne.n	80017e4 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001784:	4b1a      	ldr	r3, [pc, #104]	@ (80017f0 <HAL_SPI_MspInit+0x8c>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4a19      	ldr	r2, [pc, #100]	@ (80017f0 <HAL_SPI_MspInit+0x8c>)
 800178a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800178e:	6193      	str	r3, [r2, #24]
 8001790:	4b17      	ldr	r3, [pc, #92]	@ (80017f0 <HAL_SPI_MspInit+0x8c>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179c:	4b14      	ldr	r3, [pc, #80]	@ (80017f0 <HAL_SPI_MspInit+0x8c>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	4a13      	ldr	r2, [pc, #76]	@ (80017f0 <HAL_SPI_MspInit+0x8c>)
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	6193      	str	r3, [r2, #24]
 80017a8:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <HAL_SPI_MspInit+0x8c>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017b4:	23a0      	movs	r3, #160	@ 0xa0
 80017b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c0:	f107 0310 	add.w	r3, r7, #16
 80017c4:	4619      	mov	r1, r3
 80017c6:	480b      	ldr	r0, [pc, #44]	@ (80017f4 <HAL_SPI_MspInit+0x90>)
 80017c8:	f000 ff60 	bl	800268c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017cc:	2340      	movs	r3, #64	@ 0x40
 80017ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	4619      	mov	r1, r3
 80017de:	4805      	ldr	r0, [pc, #20]	@ (80017f4 <HAL_SPI_MspInit+0x90>)
 80017e0:	f000 ff54 	bl	800268c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80017e4:	bf00      	nop
 80017e6:	3720      	adds	r7, #32
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40013000 	.word	0x40013000
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40010800 	.word	0x40010800

080017f8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001808:	d10b      	bne.n	8001822 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800180a:	4b08      	ldr	r3, [pc, #32]	@ (800182c <HAL_TIM_Base_MspInit+0x34>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	4a07      	ldr	r2, [pc, #28]	@ (800182c <HAL_TIM_Base_MspInit+0x34>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	61d3      	str	r3, [r2, #28]
 8001816:	4b05      	ldr	r3, [pc, #20]	@ (800182c <HAL_TIM_Base_MspInit+0x34>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	40021000 	.word	0x40021000

08001830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <NMI_Handler+0x4>

08001838 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <HardFault_Handler+0x4>

08001840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <MemManage_Handler+0x4>

08001848 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <BusFault_Handler+0x4>

08001850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <UsageFault_Handler+0x4>

08001858 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001880:	f000 f87e 	bl	8001980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 800188c:	4802      	ldr	r0, [pc, #8]	@ (8001898 <RTC_IRQHandler+0x10>)
 800188e:	f002 fd3d 	bl	800430c <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//	HAL_Delay(50);
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  /* USER CODE END RTC_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000088 	.word	0x20000088

0800189c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018a8:	f7ff fff8 	bl	800189c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ac:	480b      	ldr	r0, [pc, #44]	@ (80018dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018ae:	490c      	ldr	r1, [pc, #48]	@ (80018e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018b0:	4a0c      	ldr	r2, [pc, #48]	@ (80018e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b4:	e002      	b.n	80018bc <LoopCopyDataInit>

080018b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ba:	3304      	adds	r3, #4

080018bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c0:	d3f9      	bcc.n	80018b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c2:	4a09      	ldr	r2, [pc, #36]	@ (80018e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018c4:	4c09      	ldr	r4, [pc, #36]	@ (80018ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c8:	e001      	b.n	80018ce <LoopFillZerobss>

080018ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018cc:	3204      	adds	r2, #4

080018ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d0:	d3fb      	bcc.n	80018ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018d2:	f004 fbcb 	bl	800606c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018d6:	f7ff fb75 	bl	8000fc4 <main>
  bx lr
 80018da:	4770      	bx	lr
  ldr r0, =_sdata
 80018dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018e4:	08006180 	.word	0x08006180
  ldr r2, =_sbss
 80018e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018ec:	2000018c 	.word	0x2000018c

080018f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <ADC1_2_IRQHandler>
	...

080018f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f8:	4b08      	ldr	r3, [pc, #32]	@ (800191c <HAL_Init+0x28>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a07      	ldr	r2, [pc, #28]	@ (800191c <HAL_Init+0x28>)
 80018fe:	f043 0310 	orr.w	r3, r3, #16
 8001902:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001904:	2003      	movs	r0, #3
 8001906:	f000 fe7f 	bl	8002608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800190a:	200f      	movs	r0, #15
 800190c:	f000 f808 	bl	8001920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001910:	f7ff fe34 	bl	800157c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40022000 	.word	0x40022000

08001920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001928:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <HAL_InitTick+0x54>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <HAL_InitTick+0x58>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4619      	mov	r1, r3
 8001932:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001936:	fbb3 f3f1 	udiv	r3, r3, r1
 800193a:	fbb2 f3f3 	udiv	r3, r2, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f000 fe97 	bl	8002672 <HAL_SYSTICK_Config>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e00e      	b.n	800196c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b0f      	cmp	r3, #15
 8001952:	d80a      	bhi.n	800196a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001954:	2200      	movs	r2, #0
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f000 fe5f 	bl	800261e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001960:	4a06      	ldr	r2, [pc, #24]	@ (800197c <HAL_InitTick+0x5c>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e000      	b.n	800196c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000000 	.word	0x20000000
 8001978:	20000008 	.word	0x20000008
 800197c:	20000004 	.word	0x20000004

08001980 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001984:	4b05      	ldr	r3, [pc, #20]	@ (800199c <HAL_IncTick+0x1c>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <HAL_IncTick+0x20>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4413      	add	r3, r2
 8001990:	4a03      	ldr	r2, [pc, #12]	@ (80019a0 <HAL_IncTick+0x20>)
 8001992:	6013      	str	r3, [r2, #0]
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	20000008 	.word	0x20000008
 80019a0:	2000015c 	.word	0x2000015c

080019a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return uwTick;
 80019a8:	4b02      	ldr	r3, [pc, #8]	@ (80019b4 <HAL_GetTick+0x10>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	2000015c 	.word	0x2000015c

080019b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c0:	f7ff fff0 	bl	80019a4 <HAL_GetTick>
 80019c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d0:	d005      	beq.n	80019de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d2:	4b0a      	ldr	r3, [pc, #40]	@ (80019fc <HAL_Delay+0x44>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019de:	bf00      	nop
 80019e0:	f7ff ffe0 	bl	80019a4 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d8f7      	bhi.n	80019e0 <HAL_Delay+0x28>
  {
  }
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000008 	.word	0x20000008

08001a00 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8001a04:	4b02      	ldr	r3, [pc, #8]	@ (8001a10 <HAL_GetUIDw0+0x10>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	1ffff7e8 	.word	0x1ffff7e8

08001a14 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001a18:	4b02      	ldr	r3, [pc, #8]	@ (8001a24 <HAL_GetUIDw1+0x10>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	1ffff7ec 	.word	0x1ffff7ec

08001a28 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001a2c:	4b02      	ldr	r3, [pc, #8]	@ (8001a38 <HAL_GetUIDw2+0x10>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	1ffff7f0 	.word	0x1ffff7f0

08001a3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e0be      	b.n	8001bdc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d109      	bne.n	8001a80 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff fdb0 	bl	80015e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 fcb3 	bl	80023ec <ADC_ConversionStop_Disable>
 8001a86:	4603      	mov	r3, r0
 8001a88:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f040 8099 	bne.w	8001bca <HAL_ADC_Init+0x18e>
 8001a98:	7dfb      	ldrb	r3, [r7, #23]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 8095 	bne.w	8001bca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001aa8:	f023 0302 	bic.w	r3, r3, #2
 8001aac:	f043 0202 	orr.w	r2, r3, #2
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001abc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7b1b      	ldrb	r3, [r3, #12]
 8001ac2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ac4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ad4:	d003      	beq.n	8001ade <HAL_ADC_Init+0xa2>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d102      	bne.n	8001ae4 <HAL_ADC_Init+0xa8>
 8001ade:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ae2:	e000      	b.n	8001ae6 <HAL_ADC_Init+0xaa>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	7d1b      	ldrb	r3, [r3, #20]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d119      	bne.n	8001b28 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7b1b      	ldrb	r3, [r3, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d109      	bne.n	8001b10 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	035a      	lsls	r2, r3, #13
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	e00b      	b.n	8001b28 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b14:	f043 0220 	orr.w	r2, r3, #32
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b20:	f043 0201 	orr.w	r2, r3, #1
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	4b28      	ldr	r3, [pc, #160]	@ (8001be4 <HAL_ADC_Init+0x1a8>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	68b9      	ldr	r1, [r7, #8]
 8001b4c:	430b      	orrs	r3, r1
 8001b4e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b58:	d003      	beq.n	8001b62 <HAL_ADC_Init+0x126>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d104      	bne.n	8001b6c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	051b      	lsls	r3, r3, #20
 8001b6a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b72:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	4b18      	ldr	r3, [pc, #96]	@ (8001be8 <HAL_ADC_Init+0x1ac>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d10b      	bne.n	8001ba8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9a:	f023 0303 	bic.w	r3, r3, #3
 8001b9e:	f043 0201 	orr.w	r2, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ba6:	e018      	b.n	8001bda <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bac:	f023 0312 	bic.w	r3, r3, #18
 8001bb0:	f043 0210 	orr.w	r2, r3, #16
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bbc:	f043 0201 	orr.w	r2, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bc8:	e007      	b.n	8001bda <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bce:	f043 0210 	orr.w	r2, r3, #16
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	ffe1f7fd 	.word	0xffe1f7fd
 8001be8:	ff1f0efe 	.word	0xff1f0efe

08001bec <HAL_ADC_DeInit>:
  *         function HAL_ADC_MspDeInit().
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_DeInit+0x16>
  {
     return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e0ad      	b.n	8001d5e <HAL_ADC_DeInit+0x172>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c06:	f043 0202 	orr.w	r2, r3, #2
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 fbec 	bl	80023ec <ADC_ConversionStop_Disable>
 8001c14:	4603      	mov	r3, r0
 8001c16:	73fb      	strb	r3, [r7, #15]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status == HAL_OK)
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f040 809a 	bne.w	8001d54 <HAL_ADC_DeInit+0x168>




    /* Reset register SR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 021f 	mvn.w	r2, #31
 8001c28:	601a      	str	r2, [r3, #0]
                                ADC_FLAG_JSTRT | ADC_FLAG_STRT));
                         
    /* Reset register CR1 */
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6859      	ldr	r1, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b4c      	ldr	r3, [pc, #304]	@ (8001d68 <HAL_ADC_DeInit+0x17c>)
 8001c36:	400b      	ands	r3, r1
 8001c38:	6053      	str	r3, [r2, #4]
                                    ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
                                    ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
                                    ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
    
    /* Reset register CR2 */
    CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6899      	ldr	r1, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b49      	ldr	r3, [pc, #292]	@ (8001d6c <HAL_ADC_DeInit+0x180>)
 8001c46:	400b      	ands	r3, r1
 8001c48:	6093      	str	r3, [r2, #8]
                                    ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
                                    ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |          
                                    ADC_CR2_ADON                                          ));
    
    /* Reset register SMPR1 */
    CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8001c58:	60da      	str	r2, [r3, #12]
                                      ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
                                      ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10                    ));
    
    /* Reset register SMPR2 */
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8001c68:	611a      	str	r2, [r3, #16]
                                      ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
                                      ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
                                      ADC_SMPR2_SMP0                                    ));

    /* Reset register JOFR1 */
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001c78:	f023 030f 	bic.w	r3, r3, #15
 8001c7c:	6153      	str	r3, [r2, #20]
    /* Reset register JOFR2 */
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001c8c:	f023 030f 	bic.w	r3, r3, #15
 8001c90:	6193      	str	r3, [r2, #24]
    /* Reset register JOFR3 */
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001ca0:	f023 030f 	bic.w	r3, r3, #15
 8001ca4:	61d3      	str	r3, [r2, #28]
    /* Reset register JOFR4 */
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001cb4:	f023 030f 	bic.w	r3, r3, #15
 8001cb8:	6213      	str	r3, [r2, #32]
    
    /* Reset register HTR */
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001cc8:	f023 030f 	bic.w	r3, r3, #15
 8001ccc:	6253      	str	r3, [r2, #36]	@ 0x24
    /* Reset register LTR */
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001cdc:	f023 030f 	bic.w	r3, r3, #15
 8001ce0:	6293      	str	r3, [r2, #40]	@ 0x28
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8001cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8001d00:	62da      	str	r2, [r3, #44]	@ 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR2 */
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8001d10:	631a      	str	r2, [r3, #48]	@ 0x30
                                    ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
    
    /* Reset register SQR3 */
    CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8001d20:	635a      	str	r2, [r3, #52]	@ 0x34
                                    ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	0d9b      	lsrs	r3, r3, #22
 8001d2e:	059b      	lsls	r3, r3, #22
 8001d30:	6393      	str	r3, [r2, #56]	@ 0x38
                                    ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
                                    ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	0d9b      	lsrs	r3, r3, #22
 8001d3e:	059b      	lsls	r3, r3, #22
 8001d40:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff fcb2 	bl	80016ac <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET; 
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	629a      	str	r2, [r3, #40]	@ 0x28
  
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	ff3f0000 	.word	0xff3f0000
 8001d6c:	ff0106f0 	.word	0xff0106f0

08001d70 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_ADC_Start+0x1a>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e098      	b.n	8001ebc <HAL_ADC_Start+0x14c>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 fad0 	bl	8002338 <ADC_Enable>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f040 8087 	bne.w	8001eb2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dac:	f023 0301 	bic.w	r3, r3, #1
 8001db0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a41      	ldr	r2, [pc, #260]	@ (8001ec4 <HAL_ADC_Start+0x154>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d105      	bne.n	8001dce <HAL_ADC_Start+0x5e>
 8001dc2:	4b41      	ldr	r3, [pc, #260]	@ (8001ec8 <HAL_ADC_Start+0x158>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d115      	bne.n	8001dfa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d026      	beq.n	8001e36 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001df0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001df8:	e01d      	b.n	8001e36 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ec8 <HAL_ADC_Start+0x158>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d004      	beq.n	8001e1a <HAL_ADC_Start+0xaa>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a2b      	ldr	r2, [pc, #172]	@ (8001ec4 <HAL_ADC_Start+0x154>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10d      	bne.n	8001e36 <HAL_ADC_Start+0xc6>
 8001e1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec8 <HAL_ADC_Start+0x158>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d007      	beq.n	8001e36 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e2e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d006      	beq.n	8001e50 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e46:	f023 0206 	bic.w	r2, r3, #6
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e4e:	e002      	b.n	8001e56 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f06f 0202 	mvn.w	r2, #2
 8001e66:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e72:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e76:	d113      	bne.n	8001ea0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e7c:	4a11      	ldr	r2, [pc, #68]	@ (8001ec4 <HAL_ADC_Start+0x154>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d105      	bne.n	8001e8e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e82:	4b11      	ldr	r3, [pc, #68]	@ (8001ec8 <HAL_ADC_Start+0x158>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d108      	bne.n	8001ea0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	e00c      	b.n	8001eba <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	e003      	b.n	8001eba <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40012800 	.word	0x40012800
 8001ec8:	40012400 	.word	0x40012400

08001ecc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_Stop+0x1a>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e01a      	b.n	8001f1c <HAL_ADC_Stop+0x50>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 fa7c 	bl	80023ec <ADC_ConversionStop_Disable>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d109      	bne.n	8001f12 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f02:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f06:	f023 0301 	bic.w	r3, r3, #1
 8001f0a:	f043 0201 	orr.w	r2, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f3a:	f7ff fd33 	bl	80019a4 <HAL_GetTick>
 8001f3e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00b      	beq.n	8001f66 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f52:	f043 0220 	orr.w	r2, r3, #32
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e0d3      	b.n	800210e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d131      	bne.n	8001fd8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d12a      	bne.n	8001fd8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001f82:	e021      	b.n	8001fc8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8a:	d01d      	beq.n	8001fc8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <HAL_ADC_PollForConversion+0x7e>
 8001f92:	f7ff fd07 	bl	80019a4 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d212      	bcs.n	8001fc8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10b      	bne.n	8001fc8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb4:	f043 0204 	orr.w	r2, r3, #4
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e0a2      	b.n	800210e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0d6      	beq.n	8001f84 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001fd6:	e070      	b.n	80020ba <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001fd8:	4b4f      	ldr	r3, [pc, #316]	@ (8002118 <HAL_ADC_PollForConversion+0x1f4>)
 8001fda:	681c      	ldr	r4, [r3, #0]
 8001fdc:	2002      	movs	r0, #2
 8001fde:	f001 fa73 	bl	80034c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6919      	ldr	r1, [r3, #16]
 8001fee:	4b4b      	ldr	r3, [pc, #300]	@ (800211c <HAL_ADC_PollForConversion+0x1f8>)
 8001ff0:	400b      	ands	r3, r1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d118      	bne.n	8002028 <HAL_ADC_PollForConversion+0x104>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68d9      	ldr	r1, [r3, #12]
 8001ffc:	4b48      	ldr	r3, [pc, #288]	@ (8002120 <HAL_ADC_PollForConversion+0x1fc>)
 8001ffe:	400b      	ands	r3, r1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d111      	bne.n	8002028 <HAL_ADC_PollForConversion+0x104>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6919      	ldr	r1, [r3, #16]
 800200a:	4b46      	ldr	r3, [pc, #280]	@ (8002124 <HAL_ADC_PollForConversion+0x200>)
 800200c:	400b      	ands	r3, r1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d108      	bne.n	8002024 <HAL_ADC_PollForConversion+0x100>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68d9      	ldr	r1, [r3, #12]
 8002018:	4b43      	ldr	r3, [pc, #268]	@ (8002128 <HAL_ADC_PollForConversion+0x204>)
 800201a:	400b      	ands	r3, r1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_ADC_PollForConversion+0x100>
 8002020:	2314      	movs	r3, #20
 8002022:	e020      	b.n	8002066 <HAL_ADC_PollForConversion+0x142>
 8002024:	2329      	movs	r3, #41	@ 0x29
 8002026:	e01e      	b.n	8002066 <HAL_ADC_PollForConversion+0x142>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6919      	ldr	r1, [r3, #16]
 800202e:	4b3d      	ldr	r3, [pc, #244]	@ (8002124 <HAL_ADC_PollForConversion+0x200>)
 8002030:	400b      	ands	r3, r1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <HAL_ADC_PollForConversion+0x120>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68d9      	ldr	r1, [r3, #12]
 800203c:	4b3a      	ldr	r3, [pc, #232]	@ (8002128 <HAL_ADC_PollForConversion+0x204>)
 800203e:	400b      	ands	r3, r1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00d      	beq.n	8002060 <HAL_ADC_PollForConversion+0x13c>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6919      	ldr	r1, [r3, #16]
 800204a:	4b38      	ldr	r3, [pc, #224]	@ (800212c <HAL_ADC_PollForConversion+0x208>)
 800204c:	400b      	ands	r3, r1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d108      	bne.n	8002064 <HAL_ADC_PollForConversion+0x140>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68d9      	ldr	r1, [r3, #12]
 8002058:	4b34      	ldr	r3, [pc, #208]	@ (800212c <HAL_ADC_PollForConversion+0x208>)
 800205a:	400b      	ands	r3, r1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_ADC_PollForConversion+0x140>
 8002060:	2354      	movs	r3, #84	@ 0x54
 8002062:	e000      	b.n	8002066 <HAL_ADC_PollForConversion+0x142>
 8002064:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002066:	fb02 f303 	mul.w	r3, r2, r3
 800206a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800206c:	e021      	b.n	80020b2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d01a      	beq.n	80020ac <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d007      	beq.n	800208c <HAL_ADC_PollForConversion+0x168>
 800207c:	f7ff fc92 	bl	80019a4 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d20f      	bcs.n	80020ac <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	429a      	cmp	r2, r3
 8002092:	d90b      	bls.n	80020ac <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	f043 0204 	orr.w	r2, r3, #4
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e030      	b.n	800210e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	3301      	adds	r3, #1
 80020b0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d8d9      	bhi.n	800206e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f06f 0212 	mvn.w	r2, #18
 80020c2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80020da:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80020de:	d115      	bne.n	800210c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d111      	bne.n	800210c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d105      	bne.n	800210c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002104:	f043 0201 	orr.w	r2, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	371c      	adds	r7, #28
 8002112:	46bd      	mov	sp, r7
 8002114:	bd90      	pop	{r4, r7, pc}
 8002116:	bf00      	nop
 8002118:	20000000 	.word	0x20000000
 800211c:	24924924 	.word	0x24924924
 8002120:	00924924 	.word	0x00924924
 8002124:	12492492 	.word	0x12492492
 8002128:	00492492 	.word	0x00492492
 800212c:	00249249 	.word	0x00249249

08002130 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x20>
 8002164:	2302      	movs	r3, #2
 8002166:	e0dc      	b.n	8002322 <HAL_ADC_ConfigChannel+0x1da>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b06      	cmp	r3, #6
 8002176:	d81c      	bhi.n	80021b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	3b05      	subs	r3, #5
 800218a:	221f      	movs	r2, #31
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	4019      	ands	r1, r3
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	3b05      	subs	r3, #5
 80021a4:	fa00 f203 	lsl.w	r2, r0, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80021b0:	e03c      	b.n	800222c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b0c      	cmp	r3, #12
 80021b8:	d81c      	bhi.n	80021f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	3b23      	subs	r3, #35	@ 0x23
 80021cc:	221f      	movs	r2, #31
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	4019      	ands	r1, r3
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	3b23      	subs	r3, #35	@ 0x23
 80021e6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80021f2:	e01b      	b.n	800222c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	3b41      	subs	r3, #65	@ 0x41
 8002206:	221f      	movs	r2, #31
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	4019      	ands	r1, r3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	3b41      	subs	r3, #65	@ 0x41
 8002220:	fa00 f203 	lsl.w	r2, r0, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b09      	cmp	r3, #9
 8002232:	d91c      	bls.n	800226e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68d9      	ldr	r1, [r3, #12]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	4613      	mov	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4413      	add	r3, r2
 8002244:	3b1e      	subs	r3, #30
 8002246:	2207      	movs	r2, #7
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	4019      	ands	r1, r3
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	6898      	ldr	r0, [r3, #8]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	3b1e      	subs	r3, #30
 8002260:	fa00 f203 	lsl.w	r2, r0, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	60da      	str	r2, [r3, #12]
 800226c:	e019      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6919      	ldr	r1, [r3, #16]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4613      	mov	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4413      	add	r3, r2
 800227e:	2207      	movs	r2, #7
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	4019      	ands	r1, r3
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	6898      	ldr	r0, [r3, #8]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4613      	mov	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4413      	add	r3, r2
 8002296:	fa00 f203 	lsl.w	r2, r0, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b10      	cmp	r3, #16
 80022a8:	d003      	beq.n	80022b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022ae:	2b11      	cmp	r3, #17
 80022b0:	d132      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a1d      	ldr	r2, [pc, #116]	@ (800232c <HAL_ADC_ConfigChannel+0x1e4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d125      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d126      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80022d8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b10      	cmp	r3, #16
 80022e0:	d11a      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022e2:	4b13      	ldr	r3, [pc, #76]	@ (8002330 <HAL_ADC_ConfigChannel+0x1e8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a13      	ldr	r2, [pc, #76]	@ (8002334 <HAL_ADC_ConfigChannel+0x1ec>)
 80022e8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ec:	0c9a      	lsrs	r2, r3, #18
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022f8:	e002      	b.n	8002300 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	3b01      	subs	r3, #1
 80022fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f9      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x1b2>
 8002306:	e007      	b.n	8002318 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230c:	f043 0220 	orr.w	r2, r3, #32
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002320:	7bfb      	ldrb	r3, [r7, #15]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr
 800232c:	40012400 	.word	0x40012400
 8002330:	20000000 	.word	0x20000000
 8002334:	431bde83 	.word	0x431bde83

08002338 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b01      	cmp	r3, #1
 8002354:	d040      	beq.n	80023d8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0201 	orr.w	r2, r2, #1
 8002364:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002366:	4b1f      	ldr	r3, [pc, #124]	@ (80023e4 <ADC_Enable+0xac>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a1f      	ldr	r2, [pc, #124]	@ (80023e8 <ADC_Enable+0xb0>)
 800236c:	fba2 2303 	umull	r2, r3, r2, r3
 8002370:	0c9b      	lsrs	r3, r3, #18
 8002372:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002374:	e002      	b.n	800237c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	3b01      	subs	r3, #1
 800237a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f9      	bne.n	8002376 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002382:	f7ff fb0f 	bl	80019a4 <HAL_GetTick>
 8002386:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002388:	e01f      	b.n	80023ca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800238a:	f7ff fb0b 	bl	80019a4 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d918      	bls.n	80023ca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d011      	beq.n	80023ca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023aa:	f043 0210 	orr.w	r2, r3, #16
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b6:	f043 0201 	orr.w	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e007      	b.n	80023da <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d1d8      	bne.n	800238a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000000 	.word	0x20000000
 80023e8:	431bde83 	.word	0x431bde83

080023ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b01      	cmp	r3, #1
 8002404:	d12e      	bne.n	8002464 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0201 	bic.w	r2, r2, #1
 8002414:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002416:	f7ff fac5 	bl	80019a4 <HAL_GetTick>
 800241a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800241c:	e01b      	b.n	8002456 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800241e:	f7ff fac1 	bl	80019a4 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d914      	bls.n	8002456 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b01      	cmp	r3, #1
 8002438:	d10d      	bne.n	8002456 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243e:	f043 0210 	orr.w	r2, r3, #16
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244a:	f043 0201 	orr.w	r2, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e007      	b.n	8002466 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b01      	cmp	r3, #1
 8002462:	d0dc      	beq.n	800241e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002480:	4b0c      	ldr	r3, [pc, #48]	@ (80024b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800248c:	4013      	ands	r3, r2
 800248e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002498:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800249c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024a2:	4a04      	ldr	r2, [pc, #16]	@ (80024b4 <__NVIC_SetPriorityGrouping+0x44>)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	60d3      	str	r3, [r2, #12]
}
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024bc:	4b04      	ldr	r3, [pc, #16]	@ (80024d0 <__NVIC_GetPriorityGrouping+0x18>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	f003 0307 	and.w	r3, r3, #7
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	db0b      	blt.n	80024fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	f003 021f 	and.w	r2, r3, #31
 80024ec:	4906      	ldr	r1, [pc, #24]	@ (8002508 <__NVIC_EnableIRQ+0x34>)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	2001      	movs	r0, #1
 80024f6:	fa00 f202 	lsl.w	r2, r0, r2
 80024fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr
 8002508:	e000e100 	.word	0xe000e100

0800250c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	6039      	str	r1, [r7, #0]
 8002516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251c:	2b00      	cmp	r3, #0
 800251e:	db0a      	blt.n	8002536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	b2da      	uxtb	r2, r3
 8002524:	490c      	ldr	r1, [pc, #48]	@ (8002558 <__NVIC_SetPriority+0x4c>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	0112      	lsls	r2, r2, #4
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	440b      	add	r3, r1
 8002530:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002534:	e00a      	b.n	800254c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4908      	ldr	r1, [pc, #32]	@ (800255c <__NVIC_SetPriority+0x50>)
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	3b04      	subs	r3, #4
 8002544:	0112      	lsls	r2, r2, #4
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	440b      	add	r3, r1
 800254a:	761a      	strb	r2, [r3, #24]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000e100 	.word	0xe000e100
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	@ 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f1c3 0307 	rsb	r3, r3, #7
 800257a:	2b04      	cmp	r3, #4
 800257c:	bf28      	it	cs
 800257e:	2304      	movcs	r3, #4
 8002580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3304      	adds	r3, #4
 8002586:	2b06      	cmp	r3, #6
 8002588:	d902      	bls.n	8002590 <NVIC_EncodePriority+0x30>
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3b03      	subs	r3, #3
 800258e:	e000      	b.n	8002592 <NVIC_EncodePriority+0x32>
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002594:	f04f 32ff 	mov.w	r2, #4294967295
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43da      	mvns	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	401a      	ands	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	43d9      	mvns	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	4313      	orrs	r3, r2
         );
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3724      	adds	r7, #36	@ 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr

080025c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025d4:	d301      	bcc.n	80025da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025d6:	2301      	movs	r3, #1
 80025d8:	e00f      	b.n	80025fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025da:	4a0a      	ldr	r2, [pc, #40]	@ (8002604 <SysTick_Config+0x40>)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e2:	210f      	movs	r1, #15
 80025e4:	f04f 30ff 	mov.w	r0, #4294967295
 80025e8:	f7ff ff90 	bl	800250c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025ec:	4b05      	ldr	r3, [pc, #20]	@ (8002604 <SysTick_Config+0x40>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f2:	4b04      	ldr	r3, [pc, #16]	@ (8002604 <SysTick_Config+0x40>)
 80025f4:	2207      	movs	r2, #7
 80025f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	e000e010 	.word	0xe000e010

08002608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ff2d 	bl	8002470 <__NVIC_SetPriorityGrouping>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800261e:	b580      	push	{r7, lr}
 8002620:	b086      	sub	sp, #24
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
 800262a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002630:	f7ff ff42 	bl	80024b8 <__NVIC_GetPriorityGrouping>
 8002634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	6978      	ldr	r0, [r7, #20]
 800263c:	f7ff ff90 	bl	8002560 <NVIC_EncodePriority>
 8002640:	4602      	mov	r2, r0
 8002642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff5f 	bl	800250c <__NVIC_SetPriority>
}
 800264e:	bf00      	nop
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	4603      	mov	r3, r0
 800265e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff35 	bl	80024d4 <__NVIC_EnableIRQ>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff ffa2 	bl	80025c4 <SysTick_Config>
 8002680:	4603      	mov	r3, r0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800268c:	b480      	push	{r7}
 800268e:	b08b      	sub	sp, #44	@ 0x2c
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002696:	2300      	movs	r3, #0
 8002698:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800269a:	2300      	movs	r3, #0
 800269c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800269e:	e161      	b.n	8002964 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026a0:	2201      	movs	r2, #1
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	f040 8150 	bne.w	800295e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4a97      	ldr	r2, [pc, #604]	@ (8002920 <HAL_GPIO_Init+0x294>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d05e      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
 80026c8:	4a95      	ldr	r2, [pc, #596]	@ (8002920 <HAL_GPIO_Init+0x294>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d875      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 80026ce:	4a95      	ldr	r2, [pc, #596]	@ (8002924 <HAL_GPIO_Init+0x298>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d058      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
 80026d4:	4a93      	ldr	r2, [pc, #588]	@ (8002924 <HAL_GPIO_Init+0x298>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d86f      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 80026da:	4a93      	ldr	r2, [pc, #588]	@ (8002928 <HAL_GPIO_Init+0x29c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d052      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
 80026e0:	4a91      	ldr	r2, [pc, #580]	@ (8002928 <HAL_GPIO_Init+0x29c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d869      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 80026e6:	4a91      	ldr	r2, [pc, #580]	@ (800292c <HAL_GPIO_Init+0x2a0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d04c      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
 80026ec:	4a8f      	ldr	r2, [pc, #572]	@ (800292c <HAL_GPIO_Init+0x2a0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d863      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 80026f2:	4a8f      	ldr	r2, [pc, #572]	@ (8002930 <HAL_GPIO_Init+0x2a4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d046      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
 80026f8:	4a8d      	ldr	r2, [pc, #564]	@ (8002930 <HAL_GPIO_Init+0x2a4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d85d      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 80026fe:	2b12      	cmp	r3, #18
 8002700:	d82a      	bhi.n	8002758 <HAL_GPIO_Init+0xcc>
 8002702:	2b12      	cmp	r3, #18
 8002704:	d859      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 8002706:	a201      	add	r2, pc, #4	@ (adr r2, 800270c <HAL_GPIO_Init+0x80>)
 8002708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270c:	08002787 	.word	0x08002787
 8002710:	08002761 	.word	0x08002761
 8002714:	08002773 	.word	0x08002773
 8002718:	080027b5 	.word	0x080027b5
 800271c:	080027bb 	.word	0x080027bb
 8002720:	080027bb 	.word	0x080027bb
 8002724:	080027bb 	.word	0x080027bb
 8002728:	080027bb 	.word	0x080027bb
 800272c:	080027bb 	.word	0x080027bb
 8002730:	080027bb 	.word	0x080027bb
 8002734:	080027bb 	.word	0x080027bb
 8002738:	080027bb 	.word	0x080027bb
 800273c:	080027bb 	.word	0x080027bb
 8002740:	080027bb 	.word	0x080027bb
 8002744:	080027bb 	.word	0x080027bb
 8002748:	080027bb 	.word	0x080027bb
 800274c:	080027bb 	.word	0x080027bb
 8002750:	08002769 	.word	0x08002769
 8002754:	0800277d 	.word	0x0800277d
 8002758:	4a76      	ldr	r2, [pc, #472]	@ (8002934 <HAL_GPIO_Init+0x2a8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d013      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800275e:	e02c      	b.n	80027ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	623b      	str	r3, [r7, #32]
          break;
 8002766:	e029      	b.n	80027bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	3304      	adds	r3, #4
 800276e:	623b      	str	r3, [r7, #32]
          break;
 8002770:	e024      	b.n	80027bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	3308      	adds	r3, #8
 8002778:	623b      	str	r3, [r7, #32]
          break;
 800277a:	e01f      	b.n	80027bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	330c      	adds	r3, #12
 8002782:	623b      	str	r3, [r7, #32]
          break;
 8002784:	e01a      	b.n	80027bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d102      	bne.n	8002794 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800278e:	2304      	movs	r3, #4
 8002790:	623b      	str	r3, [r7, #32]
          break;
 8002792:	e013      	b.n	80027bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800279c:	2308      	movs	r3, #8
 800279e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	611a      	str	r2, [r3, #16]
          break;
 80027a6:	e009      	b.n	80027bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027a8:	2308      	movs	r3, #8
 80027aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	615a      	str	r2, [r3, #20]
          break;
 80027b2:	e003      	b.n	80027bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027b4:	2300      	movs	r3, #0
 80027b6:	623b      	str	r3, [r7, #32]
          break;
 80027b8:	e000      	b.n	80027bc <HAL_GPIO_Init+0x130>
          break;
 80027ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	2bff      	cmp	r3, #255	@ 0xff
 80027c0:	d801      	bhi.n	80027c6 <HAL_GPIO_Init+0x13a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	e001      	b.n	80027ca <HAL_GPIO_Init+0x13e>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3304      	adds	r3, #4
 80027ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	2bff      	cmp	r3, #255	@ 0xff
 80027d0:	d802      	bhi.n	80027d8 <HAL_GPIO_Init+0x14c>
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	e002      	b.n	80027de <HAL_GPIO_Init+0x152>
 80027d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027da:	3b08      	subs	r3, #8
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	210f      	movs	r1, #15
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	401a      	ands	r2, r3
 80027f0:	6a39      	ldr	r1, [r7, #32]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	431a      	orrs	r2, r3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 80a9 	beq.w	800295e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800280c:	4b4a      	ldr	r3, [pc, #296]	@ (8002938 <HAL_GPIO_Init+0x2ac>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	4a49      	ldr	r2, [pc, #292]	@ (8002938 <HAL_GPIO_Init+0x2ac>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6193      	str	r3, [r2, #24]
 8002818:	4b47      	ldr	r3, [pc, #284]	@ (8002938 <HAL_GPIO_Init+0x2ac>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002824:	4a45      	ldr	r2, [pc, #276]	@ (800293c <HAL_GPIO_Init+0x2b0>)
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	089b      	lsrs	r3, r3, #2
 800282a:	3302      	adds	r3, #2
 800282c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002830:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	220f      	movs	r2, #15
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4013      	ands	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a3d      	ldr	r2, [pc, #244]	@ (8002940 <HAL_GPIO_Init+0x2b4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d00d      	beq.n	800286c <HAL_GPIO_Init+0x1e0>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a3c      	ldr	r2, [pc, #240]	@ (8002944 <HAL_GPIO_Init+0x2b8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d007      	beq.n	8002868 <HAL_GPIO_Init+0x1dc>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a3b      	ldr	r2, [pc, #236]	@ (8002948 <HAL_GPIO_Init+0x2bc>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d101      	bne.n	8002864 <HAL_GPIO_Init+0x1d8>
 8002860:	2302      	movs	r3, #2
 8002862:	e004      	b.n	800286e <HAL_GPIO_Init+0x1e2>
 8002864:	2303      	movs	r3, #3
 8002866:	e002      	b.n	800286e <HAL_GPIO_Init+0x1e2>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <HAL_GPIO_Init+0x1e2>
 800286c:	2300      	movs	r3, #0
 800286e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002870:	f002 0203 	and.w	r2, r2, #3
 8002874:	0092      	lsls	r2, r2, #2
 8002876:	4093      	lsls	r3, r2
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800287e:	492f      	ldr	r1, [pc, #188]	@ (800293c <HAL_GPIO_Init+0x2b0>)
 8002880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002882:	089b      	lsrs	r3, r3, #2
 8002884:	3302      	adds	r3, #2
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d006      	beq.n	80028a6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002898:	4b2c      	ldr	r3, [pc, #176]	@ (800294c <HAL_GPIO_Init+0x2c0>)
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	492b      	ldr	r1, [pc, #172]	@ (800294c <HAL_GPIO_Init+0x2c0>)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	608b      	str	r3, [r1, #8]
 80028a4:	e006      	b.n	80028b4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028a6:	4b29      	ldr	r3, [pc, #164]	@ (800294c <HAL_GPIO_Init+0x2c0>)
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	4927      	ldr	r1, [pc, #156]	@ (800294c <HAL_GPIO_Init+0x2c0>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d006      	beq.n	80028ce <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028c0:	4b22      	ldr	r3, [pc, #136]	@ (800294c <HAL_GPIO_Init+0x2c0>)
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	4921      	ldr	r1, [pc, #132]	@ (800294c <HAL_GPIO_Init+0x2c0>)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60cb      	str	r3, [r1, #12]
 80028cc:	e006      	b.n	80028dc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028ce:	4b1f      	ldr	r3, [pc, #124]	@ (800294c <HAL_GPIO_Init+0x2c0>)
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	491d      	ldr	r1, [pc, #116]	@ (800294c <HAL_GPIO_Init+0x2c0>)
 80028d8:	4013      	ands	r3, r2
 80028da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d006      	beq.n	80028f6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028e8:	4b18      	ldr	r3, [pc, #96]	@ (800294c <HAL_GPIO_Init+0x2c0>)
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	4917      	ldr	r1, [pc, #92]	@ (800294c <HAL_GPIO_Init+0x2c0>)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	604b      	str	r3, [r1, #4]
 80028f4:	e006      	b.n	8002904 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028f6:	4b15      	ldr	r3, [pc, #84]	@ (800294c <HAL_GPIO_Init+0x2c0>)
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	4913      	ldr	r1, [pc, #76]	@ (800294c <HAL_GPIO_Init+0x2c0>)
 8002900:	4013      	ands	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d01f      	beq.n	8002950 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002910:	4b0e      	ldr	r3, [pc, #56]	@ (800294c <HAL_GPIO_Init+0x2c0>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	490d      	ldr	r1, [pc, #52]	@ (800294c <HAL_GPIO_Init+0x2c0>)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	600b      	str	r3, [r1, #0]
 800291c:	e01f      	b.n	800295e <HAL_GPIO_Init+0x2d2>
 800291e:	bf00      	nop
 8002920:	10320000 	.word	0x10320000
 8002924:	10310000 	.word	0x10310000
 8002928:	10220000 	.word	0x10220000
 800292c:	10210000 	.word	0x10210000
 8002930:	10120000 	.word	0x10120000
 8002934:	10110000 	.word	0x10110000
 8002938:	40021000 	.word	0x40021000
 800293c:	40010000 	.word	0x40010000
 8002940:	40010800 	.word	0x40010800
 8002944:	40010c00 	.word	0x40010c00
 8002948:	40011000 	.word	0x40011000
 800294c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002950:	4b0b      	ldr	r3, [pc, #44]	@ (8002980 <HAL_GPIO_Init+0x2f4>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	43db      	mvns	r3, r3
 8002958:	4909      	ldr	r1, [pc, #36]	@ (8002980 <HAL_GPIO_Init+0x2f4>)
 800295a:	4013      	ands	r3, r2
 800295c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	3301      	adds	r3, #1
 8002962:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296a:	fa22 f303 	lsr.w	r3, r2, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	f47f ae96 	bne.w	80026a0 <HAL_GPIO_Init+0x14>
  }
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	372c      	adds	r7, #44	@ 0x2c
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	40010400 	.word	0x40010400

08002984 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	@ 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8002992:	e094      	b.n	8002abe <HAL_GPIO_DeInit+0x13a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002994:	2201      	movs	r2, #1
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 8087 	beq.w	8002ab8 <HAL_GPIO_DeInit+0x134>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80029aa:	4a4b      	ldr	r2, [pc, #300]	@ (8002ad8 <HAL_GPIO_DeInit+0x154>)
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	089b      	lsrs	r3, r3, #2
 80029b0:	3302      	adds	r3, #2
 80029b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	220f      	movs	r2, #15
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4013      	ands	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a43      	ldr	r2, [pc, #268]	@ (8002adc <HAL_GPIO_DeInit+0x158>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00d      	beq.n	80029f0 <HAL_GPIO_DeInit+0x6c>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a42      	ldr	r2, [pc, #264]	@ (8002ae0 <HAL_GPIO_DeInit+0x15c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d007      	beq.n	80029ec <HAL_GPIO_DeInit+0x68>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a41      	ldr	r2, [pc, #260]	@ (8002ae4 <HAL_GPIO_DeInit+0x160>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d101      	bne.n	80029e8 <HAL_GPIO_DeInit+0x64>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e004      	b.n	80029f2 <HAL_GPIO_DeInit+0x6e>
 80029e8:	2303      	movs	r3, #3
 80029ea:	e002      	b.n	80029f2 <HAL_GPIO_DeInit+0x6e>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <HAL_GPIO_DeInit+0x6e>
 80029f0:	2300      	movs	r3, #0
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	f002 0203 	and.w	r2, r2, #3
 80029f8:	0092      	lsls	r2, r2, #2
 80029fa:	4093      	lsls	r3, r2
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d132      	bne.n	8002a68 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002a02:	4b39      	ldr	r3, [pc, #228]	@ (8002ae8 <HAL_GPIO_DeInit+0x164>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	4937      	ldr	r1, [pc, #220]	@ (8002ae8 <HAL_GPIO_DeInit+0x164>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002a10:	4b35      	ldr	r3, [pc, #212]	@ (8002ae8 <HAL_GPIO_DeInit+0x164>)
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	4933      	ldr	r1, [pc, #204]	@ (8002ae8 <HAL_GPIO_DeInit+0x164>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002a1e:	4b32      	ldr	r3, [pc, #200]	@ (8002ae8 <HAL_GPIO_DeInit+0x164>)
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	4930      	ldr	r1, [pc, #192]	@ (8002ae8 <HAL_GPIO_DeInit+0x164>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002a2c:	4b2e      	ldr	r3, [pc, #184]	@ (8002ae8 <HAL_GPIO_DeInit+0x164>)
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	492c      	ldr	r1, [pc, #176]	@ (8002ae8 <HAL_GPIO_DeInit+0x164>)
 8002a36:	4013      	ands	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	220f      	movs	r2, #15
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8002a4a:	4a23      	ldr	r2, [pc, #140]	@ (8002ad8 <HAL_GPIO_DeInit+0x154>)
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	089b      	lsrs	r3, r3, #2
 8002a50:	3302      	adds	r3, #2
 8002a52:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	43da      	mvns	r2, r3
 8002a5a:	481f      	ldr	r0, [pc, #124]	@ (8002ad8 <HAL_GPIO_DeInit+0x154>)
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	089b      	lsrs	r3, r3, #2
 8002a60:	400a      	ands	r2, r1
 8002a62:	3302      	adds	r3, #2
 8002a64:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	2bff      	cmp	r3, #255	@ 0xff
 8002a6c:	d801      	bhi.n	8002a72 <HAL_GPIO_DeInit+0xee>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	e001      	b.n	8002a76 <HAL_GPIO_DeInit+0xf2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3304      	adds	r3, #4
 8002a76:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	2bff      	cmp	r3, #255	@ 0xff
 8002a7c:	d802      	bhi.n	8002a84 <HAL_GPIO_DeInit+0x100>
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	e002      	b.n	8002a8a <HAL_GPIO_DeInit+0x106>
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	3b08      	subs	r3, #8
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	210f      	movs	r1, #15
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	fa01 f303 	lsl.w	r3, r1, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	2104      	movs	r1, #4
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	3301      	adds	r3, #1
 8002abc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f47f af64 	bne.w	8002994 <HAL_GPIO_DeInit+0x10>
  }
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	3724      	adds	r7, #36	@ 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	40010000 	.word	0x40010000
 8002adc:	40010800 	.word	0x40010800
 8002ae0:	40010c00 	.word	0x40010c00
 8002ae4:	40011000 	.word	0x40011000
 8002ae8:	40010400 	.word	0x40010400

08002aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	807b      	strh	r3, [r7, #2]
 8002af8:	4613      	mov	r3, r2
 8002afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002afc:	787b      	ldrb	r3, [r7, #1]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b02:	887a      	ldrh	r2, [r7, #2]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b08:	e003      	b.n	8002b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b0a:	887b      	ldrh	r3, [r7, #2]
 8002b0c:	041a      	lsls	r2, r3, #16
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	611a      	str	r2, [r3, #16]
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002b20:	4b03      	ldr	r3, [pc, #12]	@ (8002b30 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	601a      	str	r2, [r3, #0]
}
 8002b26:	bf00      	nop
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	420e0020 	.word	0x420e0020

08002b34 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8002b38:	4b08      	ldr	r3, [pc, #32]	@ (8002b5c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a07      	ldr	r2, [pc, #28]	@ (8002b5c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002b3e:	f043 0302 	orr.w	r3, r3, #2
 8002b42:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002b44:	4b06      	ldr	r3, [pc, #24]	@ (8002b60 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	4a05      	ldr	r2, [pc, #20]	@ (8002b60 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002b4a:	f043 0304 	orr.w	r3, r3, #4
 8002b4e:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8002b50:	bf30      	wfi
}
 8002b52:	bf00      	nop
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40007000 	.word	0x40007000
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e272      	b.n	800305c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 8087 	beq.w	8002c92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b84:	4b92      	ldr	r3, [pc, #584]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 030c 	and.w	r3, r3, #12
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d00c      	beq.n	8002baa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b90:	4b8f      	ldr	r3, [pc, #572]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 030c 	and.w	r3, r3, #12
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d112      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x5e>
 8002b9c:	4b8c      	ldr	r3, [pc, #560]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba8:	d10b      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002baa:	4b89      	ldr	r3, [pc, #548]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d06c      	beq.n	8002c90 <HAL_RCC_OscConfig+0x12c>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d168      	bne.n	8002c90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e24c      	b.n	800305c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bca:	d106      	bne.n	8002bda <HAL_RCC_OscConfig+0x76>
 8002bcc:	4b80      	ldr	r3, [pc, #512]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a7f      	ldr	r2, [pc, #508]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002bd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	e02e      	b.n	8002c38 <HAL_RCC_OscConfig+0xd4>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x98>
 8002be2:	4b7b      	ldr	r3, [pc, #492]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a7a      	ldr	r2, [pc, #488]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b78      	ldr	r3, [pc, #480]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a77      	ldr	r2, [pc, #476]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e01d      	b.n	8002c38 <HAL_RCC_OscConfig+0xd4>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCC_OscConfig+0xbc>
 8002c06:	4b72      	ldr	r3, [pc, #456]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a71      	ldr	r2, [pc, #452]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	4b6f      	ldr	r3, [pc, #444]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a6e      	ldr	r2, [pc, #440]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	e00b      	b.n	8002c38 <HAL_RCC_OscConfig+0xd4>
 8002c20:	4b6b      	ldr	r3, [pc, #428]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a6a      	ldr	r2, [pc, #424]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	4b68      	ldr	r3, [pc, #416]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a67      	ldr	r2, [pc, #412]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d013      	beq.n	8002c68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7fe feb0 	bl	80019a4 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c48:	f7fe feac 	bl	80019a4 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	@ 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e200      	b.n	800305c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	4b5d      	ldr	r3, [pc, #372]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0xe4>
 8002c66:	e014      	b.n	8002c92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fe fe9c 	bl	80019a4 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c70:	f7fe fe98 	bl	80019a4 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	@ 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e1ec      	b.n	800305c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c82:	4b53      	ldr	r3, [pc, #332]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x10c>
 8002c8e:	e000      	b.n	8002c92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d063      	beq.n	8002d66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c9e:	4b4c      	ldr	r3, [pc, #304]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00b      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002caa:	4b49      	ldr	r3, [pc, #292]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d11c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x18c>
 8002cb6:	4b46      	ldr	r3, [pc, #280]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d116      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc2:	4b43      	ldr	r3, [pc, #268]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d005      	beq.n	8002cda <HAL_RCC_OscConfig+0x176>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d001      	beq.n	8002cda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e1c0      	b.n	800305c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cda:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4939      	ldr	r1, [pc, #228]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cee:	e03a      	b.n	8002d66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d020      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf8:	4b36      	ldr	r3, [pc, #216]	@ (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7fe fe51 	bl	80019a4 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d06:	f7fe fe4d 	bl	80019a4 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e1a1      	b.n	800305c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d18:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d24:	4b2a      	ldr	r3, [pc, #168]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4927      	ldr	r1, [pc, #156]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	600b      	str	r3, [r1, #0]
 8002d38:	e015      	b.n	8002d66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d3a:	4b26      	ldr	r3, [pc, #152]	@ (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7fe fe30 	bl	80019a4 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d48:	f7fe fe2c 	bl	80019a4 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e180      	b.n	800305c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d03a      	beq.n	8002de8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d019      	beq.n	8002dae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7a:	4b17      	ldr	r3, [pc, #92]	@ (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d80:	f7fe fe10 	bl	80019a4 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d88:	f7fe fe0c 	bl	80019a4 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e160      	b.n	800305c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002da6:	2001      	movs	r0, #1
 8002da8:	f000 faba 	bl	8003320 <RCC_Delay>
 8002dac:	e01c      	b.n	8002de8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dae:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db4:	f7fe fdf6 	bl	80019a4 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dba:	e00f      	b.n	8002ddc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dbc:	f7fe fdf2 	bl	80019a4 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d908      	bls.n	8002ddc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e146      	b.n	800305c <HAL_RCC_OscConfig+0x4f8>
 8002dce:	bf00      	nop
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	42420000 	.word	0x42420000
 8002dd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ddc:	4b92      	ldr	r3, [pc, #584]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1e9      	bne.n	8002dbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80a6 	beq.w	8002f42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df6:	2300      	movs	r3, #0
 8002df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dfa:	4b8b      	ldr	r3, [pc, #556]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10d      	bne.n	8002e22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e06:	4b88      	ldr	r3, [pc, #544]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	4a87      	ldr	r2, [pc, #540]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e10:	61d3      	str	r3, [r2, #28]
 8002e12:	4b85      	ldr	r3, [pc, #532]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e22:	4b82      	ldr	r3, [pc, #520]	@ (800302c <HAL_RCC_OscConfig+0x4c8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d118      	bne.n	8002e60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e2e:	4b7f      	ldr	r3, [pc, #508]	@ (800302c <HAL_RCC_OscConfig+0x4c8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a7e      	ldr	r2, [pc, #504]	@ (800302c <HAL_RCC_OscConfig+0x4c8>)
 8002e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e3a:	f7fe fdb3 	bl	80019a4 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e42:	f7fe fdaf 	bl	80019a4 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b64      	cmp	r3, #100	@ 0x64
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e103      	b.n	800305c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e54:	4b75      	ldr	r3, [pc, #468]	@ (800302c <HAL_RCC_OscConfig+0x4c8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d106      	bne.n	8002e76 <HAL_RCC_OscConfig+0x312>
 8002e68:	4b6f      	ldr	r3, [pc, #444]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	4a6e      	ldr	r2, [pc, #440]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	6213      	str	r3, [r2, #32]
 8002e74:	e02d      	b.n	8002ed2 <HAL_RCC_OscConfig+0x36e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x334>
 8002e7e:	4b6a      	ldr	r3, [pc, #424]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	4a69      	ldr	r2, [pc, #420]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	6213      	str	r3, [r2, #32]
 8002e8a:	4b67      	ldr	r3, [pc, #412]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	4a66      	ldr	r2, [pc, #408]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	f023 0304 	bic.w	r3, r3, #4
 8002e94:	6213      	str	r3, [r2, #32]
 8002e96:	e01c      	b.n	8002ed2 <HAL_RCC_OscConfig+0x36e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2b05      	cmp	r3, #5
 8002e9e:	d10c      	bne.n	8002eba <HAL_RCC_OscConfig+0x356>
 8002ea0:	4b61      	ldr	r3, [pc, #388]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4a60      	ldr	r2, [pc, #384]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002ea6:	f043 0304 	orr.w	r3, r3, #4
 8002eaa:	6213      	str	r3, [r2, #32]
 8002eac:	4b5e      	ldr	r3, [pc, #376]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	4a5d      	ldr	r2, [pc, #372]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6213      	str	r3, [r2, #32]
 8002eb8:	e00b      	b.n	8002ed2 <HAL_RCC_OscConfig+0x36e>
 8002eba:	4b5b      	ldr	r3, [pc, #364]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	4a5a      	ldr	r2, [pc, #360]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	f023 0301 	bic.w	r3, r3, #1
 8002ec4:	6213      	str	r3, [r2, #32]
 8002ec6:	4b58      	ldr	r3, [pc, #352]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	4a57      	ldr	r2, [pc, #348]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002ecc:	f023 0304 	bic.w	r3, r3, #4
 8002ed0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d015      	beq.n	8002f06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eda:	f7fe fd63 	bl	80019a4 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee0:	e00a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee2:	f7fe fd5f 	bl	80019a4 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e0b1      	b.n	800305c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef8:	4b4b      	ldr	r3, [pc, #300]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0ee      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x37e>
 8002f04:	e014      	b.n	8002f30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f06:	f7fe fd4d 	bl	80019a4 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0e:	f7fe fd49 	bl	80019a4 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e09b      	b.n	800305c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f24:	4b40      	ldr	r3, [pc, #256]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1ee      	bne.n	8002f0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f30:	7dfb      	ldrb	r3, [r7, #23]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d105      	bne.n	8002f42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f36:	4b3c      	ldr	r3, [pc, #240]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	4a3b      	ldr	r2, [pc, #236]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002f3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 8087 	beq.w	800305a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f4c:	4b36      	ldr	r3, [pc, #216]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 030c 	and.w	r3, r3, #12
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d061      	beq.n	800301c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d146      	bne.n	8002fee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f60:	4b33      	ldr	r3, [pc, #204]	@ (8003030 <HAL_RCC_OscConfig+0x4cc>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f66:	f7fe fd1d 	bl	80019a4 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6e:	f7fe fd19 	bl	80019a4 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e06d      	b.n	800305c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f80:	4b29      	ldr	r3, [pc, #164]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1f0      	bne.n	8002f6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f94:	d108      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f96:	4b24      	ldr	r3, [pc, #144]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	4921      	ldr	r1, [pc, #132]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a19      	ldr	r1, [r3, #32]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	491b      	ldr	r1, [pc, #108]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003030 <HAL_RCC_OscConfig+0x4cc>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc6:	f7fe fced 	bl	80019a4 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fce:	f7fe fce9 	bl	80019a4 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e03d      	b.n	800305c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fe0:	4b11      	ldr	r3, [pc, #68]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x46a>
 8002fec:	e035      	b.n	800305a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fee:	4b10      	ldr	r3, [pc, #64]	@ (8003030 <HAL_RCC_OscConfig+0x4cc>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7fe fcd6 	bl	80019a4 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffc:	f7fe fcd2 	bl	80019a4 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e026      	b.n	800305c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800300e:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <HAL_RCC_OscConfig+0x4c4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x498>
 800301a:	e01e      	b.n	800305a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d107      	bne.n	8003034 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e019      	b.n	800305c <HAL_RCC_OscConfig+0x4f8>
 8003028:	40021000 	.word	0x40021000
 800302c:	40007000 	.word	0x40007000
 8003030:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003034:	4b0b      	ldr	r3, [pc, #44]	@ (8003064 <HAL_RCC_OscConfig+0x500>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	429a      	cmp	r2, r3
 8003046:	d106      	bne.n	8003056 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	429a      	cmp	r2, r3
 8003054:	d001      	beq.n	800305a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40021000 	.word	0x40021000

08003068 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0d0      	b.n	800321e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800307c:	4b6a      	ldr	r3, [pc, #424]	@ (8003228 <HAL_RCC_ClockConfig+0x1c0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d910      	bls.n	80030ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308a:	4b67      	ldr	r3, [pc, #412]	@ (8003228 <HAL_RCC_ClockConfig+0x1c0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 0207 	bic.w	r2, r3, #7
 8003092:	4965      	ldr	r1, [pc, #404]	@ (8003228 <HAL_RCC_ClockConfig+0x1c0>)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800309a:	4b63      	ldr	r3, [pc, #396]	@ (8003228 <HAL_RCC_ClockConfig+0x1c0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0b8      	b.n	800321e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d020      	beq.n	80030fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030c4:	4b59      	ldr	r3, [pc, #356]	@ (800322c <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4a58      	ldr	r2, [pc, #352]	@ (800322c <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80030ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030dc:	4b53      	ldr	r3, [pc, #332]	@ (800322c <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4a52      	ldr	r2, [pc, #328]	@ (800322c <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80030e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e8:	4b50      	ldr	r3, [pc, #320]	@ (800322c <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	494d      	ldr	r1, [pc, #308]	@ (800322c <HAL_RCC_ClockConfig+0x1c4>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d040      	beq.n	8003188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d107      	bne.n	800311e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310e:	4b47      	ldr	r3, [pc, #284]	@ (800322c <HAL_RCC_ClockConfig+0x1c4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d115      	bne.n	8003146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e07f      	b.n	800321e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d107      	bne.n	8003136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003126:	4b41      	ldr	r3, [pc, #260]	@ (800322c <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d109      	bne.n	8003146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e073      	b.n	800321e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003136:	4b3d      	ldr	r3, [pc, #244]	@ (800322c <HAL_RCC_ClockConfig+0x1c4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e06b      	b.n	800321e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003146:	4b39      	ldr	r3, [pc, #228]	@ (800322c <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f023 0203 	bic.w	r2, r3, #3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	4936      	ldr	r1, [pc, #216]	@ (800322c <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	4313      	orrs	r3, r2
 8003156:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003158:	f7fe fc24 	bl	80019a4 <HAL_GetTick>
 800315c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315e:	e00a      	b.n	8003176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003160:	f7fe fc20 	bl	80019a4 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800316e:	4293      	cmp	r3, r2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e053      	b.n	800321e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003176:	4b2d      	ldr	r3, [pc, #180]	@ (800322c <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 020c 	and.w	r2, r3, #12
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	429a      	cmp	r2, r3
 8003186:	d1eb      	bne.n	8003160 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003188:	4b27      	ldr	r3, [pc, #156]	@ (8003228 <HAL_RCC_ClockConfig+0x1c0>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	d210      	bcs.n	80031b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003196:	4b24      	ldr	r3, [pc, #144]	@ (8003228 <HAL_RCC_ClockConfig+0x1c0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 0207 	bic.w	r2, r3, #7
 800319e:	4922      	ldr	r1, [pc, #136]	@ (8003228 <HAL_RCC_ClockConfig+0x1c0>)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a6:	4b20      	ldr	r3, [pc, #128]	@ (8003228 <HAL_RCC_ClockConfig+0x1c0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e032      	b.n	800321e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c4:	4b19      	ldr	r3, [pc, #100]	@ (800322c <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4916      	ldr	r1, [pc, #88]	@ (800322c <HAL_RCC_ClockConfig+0x1c4>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d009      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031e2:	4b12      	ldr	r3, [pc, #72]	@ (800322c <HAL_RCC_ClockConfig+0x1c4>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	490e      	ldr	r1, [pc, #56]	@ (800322c <HAL_RCC_ClockConfig+0x1c4>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031f6:	f000 f821 	bl	800323c <HAL_RCC_GetSysClockFreq>
 80031fa:	4602      	mov	r2, r0
 80031fc:	4b0b      	ldr	r3, [pc, #44]	@ (800322c <HAL_RCC_ClockConfig+0x1c4>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	490a      	ldr	r1, [pc, #40]	@ (8003230 <HAL_RCC_ClockConfig+0x1c8>)
 8003208:	5ccb      	ldrb	r3, [r1, r3]
 800320a:	fa22 f303 	lsr.w	r3, r2, r3
 800320e:	4a09      	ldr	r2, [pc, #36]	@ (8003234 <HAL_RCC_ClockConfig+0x1cc>)
 8003210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003212:	4b09      	ldr	r3, [pc, #36]	@ (8003238 <HAL_RCC_ClockConfig+0x1d0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe fb82 	bl	8001920 <HAL_InitTick>

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40022000 	.word	0x40022000
 800322c:	40021000 	.word	0x40021000
 8003230:	08006138 	.word	0x08006138
 8003234:	20000000 	.word	0x20000000
 8003238:	20000004 	.word	0x20000004

0800323c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	2300      	movs	r3, #0
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	2300      	movs	r3, #0
 8003250:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003256:	4b1e      	ldr	r3, [pc, #120]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	2b04      	cmp	r3, #4
 8003264:	d002      	beq.n	800326c <HAL_RCC_GetSysClockFreq+0x30>
 8003266:	2b08      	cmp	r3, #8
 8003268:	d003      	beq.n	8003272 <HAL_RCC_GetSysClockFreq+0x36>
 800326a:	e027      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800326c:	4b19      	ldr	r3, [pc, #100]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800326e:	613b      	str	r3, [r7, #16]
      break;
 8003270:	e027      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	0c9b      	lsrs	r3, r3, #18
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	4a17      	ldr	r2, [pc, #92]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800327c:	5cd3      	ldrb	r3, [r2, r3]
 800327e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d010      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800328a:	4b11      	ldr	r3, [pc, #68]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	0c5b      	lsrs	r3, r3, #17
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	4a11      	ldr	r2, [pc, #68]	@ (80032dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003296:	5cd3      	ldrb	r3, [r2, r3]
 8003298:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a0d      	ldr	r2, [pc, #52]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800329e:	fb03 f202 	mul.w	r2, r3, r2
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	e004      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a0c      	ldr	r2, [pc, #48]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80032b0:	fb02 f303 	mul.w	r3, r2, r3
 80032b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	613b      	str	r3, [r7, #16]
      break;
 80032ba:	e002      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032bc:	4b05      	ldr	r3, [pc, #20]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80032be:	613b      	str	r3, [r7, #16]
      break;
 80032c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032c2:	693b      	ldr	r3, [r7, #16]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000
 80032d4:	007a1200 	.word	0x007a1200
 80032d8:	08006150 	.word	0x08006150
 80032dc:	08006160 	.word	0x08006160
 80032e0:	003d0900 	.word	0x003d0900

080032e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e8:	4b02      	ldr	r3, [pc, #8]	@ (80032f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80032ea:	681b      	ldr	r3, [r3, #0]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr
 80032f4:	20000000 	.word	0x20000000

080032f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032fc:	f7ff fff2 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 8003300:	4602      	mov	r2, r0
 8003302:	4b05      	ldr	r3, [pc, #20]	@ (8003318 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	0adb      	lsrs	r3, r3, #11
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	4903      	ldr	r1, [pc, #12]	@ (800331c <HAL_RCC_GetPCLK2Freq+0x24>)
 800330e:	5ccb      	ldrb	r3, [r1, r3]
 8003310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003314:	4618      	mov	r0, r3
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40021000 	.word	0x40021000
 800331c:	08006148 	.word	0x08006148

08003320 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003328:	4b0a      	ldr	r3, [pc, #40]	@ (8003354 <RCC_Delay+0x34>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a0a      	ldr	r2, [pc, #40]	@ (8003358 <RCC_Delay+0x38>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	0a5b      	lsrs	r3, r3, #9
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	fb02 f303 	mul.w	r3, r2, r3
 800333a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800333c:	bf00      	nop
  }
  while (Delay --);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1e5a      	subs	r2, r3, #1
 8003342:	60fa      	str	r2, [r7, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f9      	bne.n	800333c <RCC_Delay+0x1c>
}
 8003348:	bf00      	nop
 800334a:	bf00      	nop
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	20000000 	.word	0x20000000
 8003358:	10624dd3 	.word	0x10624dd3

0800335c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d07d      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003378:	2300      	movs	r3, #0
 800337a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337c:	4b4f      	ldr	r3, [pc, #316]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10d      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003388:	4b4c      	ldr	r3, [pc, #304]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	4a4b      	ldr	r2, [pc, #300]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003392:	61d3      	str	r3, [r2, #28]
 8003394:	4b49      	ldr	r3, [pc, #292]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a0:	2301      	movs	r3, #1
 80033a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a4:	4b46      	ldr	r3, [pc, #280]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d118      	bne.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b0:	4b43      	ldr	r3, [pc, #268]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a42      	ldr	r2, [pc, #264]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033bc:	f7fe faf2 	bl	80019a4 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c2:	e008      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c4:	f7fe faee 	bl	80019a4 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b64      	cmp	r3, #100	@ 0x64
 80033d0:	d901      	bls.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e06d      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d6:	4b3a      	ldr	r3, [pc, #232]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033e2:	4b36      	ldr	r3, [pc, #216]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d02e      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d027      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003400:	4b2e      	ldr	r3, [pc, #184]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003408:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800340a:	4b2e      	ldr	r3, [pc, #184]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800340c:	2201      	movs	r2, #1
 800340e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003410:	4b2c      	ldr	r3, [pc, #176]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003416:	4a29      	ldr	r2, [pc, #164]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d014      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7fe fabd 	bl	80019a4 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342c:	e00a      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342e:	f7fe fab9 	bl	80019a4 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800343c:	4293      	cmp	r3, r2
 800343e:	d901      	bls.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e036      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003444:	4b1d      	ldr	r3, [pc, #116]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0ee      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003450:	4b1a      	ldr	r3, [pc, #104]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4917      	ldr	r1, [pc, #92]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345e:	4313      	orrs	r3, r2
 8003460:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003462:	7dfb      	ldrb	r3, [r7, #23]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d105      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003468:	4b14      	ldr	r3, [pc, #80]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	4a13      	ldr	r2, [pc, #76]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003472:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003480:	4b0e      	ldr	r3, [pc, #56]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	490b      	ldr	r1, [pc, #44]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348e:	4313      	orrs	r3, r2
 8003490:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	2b00      	cmp	r3, #0
 800349c:	d008      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800349e:	4b07      	ldr	r3, [pc, #28]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	4904      	ldr	r1, [pc, #16]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40007000 	.word	0x40007000
 80034c4:	42420440 	.word	0x42420440

080034c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	2300      	movs	r3, #0
 80034d6:	61fb      	str	r3, [r7, #28]
 80034d8:	2300      	movs	r3, #0
 80034da:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	2300      	movs	r3, #0
 80034e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b10      	cmp	r3, #16
 80034e8:	d00a      	beq.n	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b10      	cmp	r3, #16
 80034ee:	f200 808a 	bhi.w	8003606 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d045      	beq.n	8003584 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d075      	beq.n	80035ea <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80034fe:	e082      	b.n	8003606 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003500:	4b46      	ldr	r3, [pc, #280]	@ (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003506:	4b45      	ldr	r3, [pc, #276]	@ (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d07b      	beq.n	800360a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	0c9b      	lsrs	r3, r3, #18
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	4a41      	ldr	r2, [pc, #260]	@ (8003620 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800351c:	5cd3      	ldrb	r3, [r2, r3]
 800351e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d015      	beq.n	8003556 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800352a:	4b3c      	ldr	r3, [pc, #240]	@ (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	0c5b      	lsrs	r3, r3, #17
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	4a3b      	ldr	r2, [pc, #236]	@ (8003624 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003536:	5cd3      	ldrb	r3, [r2, r3]
 8003538:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00d      	beq.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003544:	4a38      	ldr	r2, [pc, #224]	@ (8003628 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	fbb2 f2f3 	udiv	r2, r2, r3
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	fb02 f303 	mul.w	r3, r2, r3
 8003552:	61fb      	str	r3, [r7, #28]
 8003554:	e004      	b.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4a34      	ldr	r2, [pc, #208]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800355a:	fb02 f303 	mul.w	r3, r2, r3
 800355e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003560:	4b2e      	ldr	r3, [pc, #184]	@ (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003568:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800356c:	d102      	bne.n	8003574 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	61bb      	str	r3, [r7, #24]
      break;
 8003572:	e04a      	b.n	800360a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	4a2d      	ldr	r2, [pc, #180]	@ (8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	085b      	lsrs	r3, r3, #1
 8003580:	61bb      	str	r3, [r7, #24]
      break;
 8003582:	e042      	b.n	800360a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003584:	4b25      	ldr	r3, [pc, #148]	@ (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003590:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003594:	d108      	bne.n	80035a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80035a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035a4:	61bb      	str	r3, [r7, #24]
 80035a6:	e01f      	b.n	80035e8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035b2:	d109      	bne.n	80035c8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80035b4:	4b19      	ldr	r3, [pc, #100]	@ (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80035c0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	e00f      	b.n	80035e8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035d2:	d11c      	bne.n	800360e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80035d4:	4b11      	ldr	r3, [pc, #68]	@ (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d016      	beq.n	800360e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80035e0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80035e4:	61bb      	str	r3, [r7, #24]
      break;
 80035e6:	e012      	b.n	800360e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80035e8:	e011      	b.n	800360e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80035ea:	f7ff fe85 	bl	80032f8 <HAL_RCC_GetPCLK2Freq>
 80035ee:	4602      	mov	r2, r0
 80035f0:	4b0a      	ldr	r3, [pc, #40]	@ (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	0b9b      	lsrs	r3, r3, #14
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	3301      	adds	r3, #1
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003602:	61bb      	str	r3, [r7, #24]
      break;
 8003604:	e004      	b.n	8003610 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003606:	bf00      	nop
 8003608:	e002      	b.n	8003610 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800360a:	bf00      	nop
 800360c:	e000      	b.n	8003610 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800360e:	bf00      	nop
    }
  }
  return (frequency);
 8003610:	69bb      	ldr	r3, [r7, #24]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3720      	adds	r7, #32
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	08006164 	.word	0x08006164
 8003624:	08006174 	.word	0x08006174
 8003628:	007a1200 	.word	0x007a1200
 800362c:	003d0900 	.word	0x003d0900
 8003630:	aaaaaaab 	.word	0xaaaaaaab

08003634 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e07a      	b.n	8003740 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	7c5b      	ldrb	r3, [r3, #17]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d105      	bne.n	8003660 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fe f856 	bl	800170c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fbae 	bl	8003dc8 <HAL_RTC_WaitForSynchro>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d004      	beq.n	800367c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2204      	movs	r2, #4
 8003676:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e061      	b.n	8003740 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 fc67 	bl	8003f50 <RTC_EnterInitMode>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d004      	beq.n	8003692 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2204      	movs	r2, #4
 800368c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e056      	b.n	8003740 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0207 	bic.w	r2, r2, #7
 80036a0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d005      	beq.n	80036b6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80036aa:	4b27      	ldr	r3, [pc, #156]	@ (8003748 <HAL_RTC_Init+0x114>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ae:	4a26      	ldr	r2, [pc, #152]	@ (8003748 <HAL_RTC_Init+0x114>)
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80036b6:	4b24      	ldr	r3, [pc, #144]	@ (8003748 <HAL_RTC_Init+0x114>)
 80036b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ba:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	4921      	ldr	r1, [pc, #132]	@ (8003748 <HAL_RTC_Init+0x114>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d0:	d003      	beq.n	80036da <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	e00e      	b.n	80036f8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80036da:	2001      	movs	r0, #1
 80036dc:	f7ff fef4 	bl	80034c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80036e0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d104      	bne.n	80036f2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2204      	movs	r2, #4
 80036ec:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e026      	b.n	8003740 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	0c1a      	lsrs	r2, r3, #16
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f002 020f 	and.w	r2, r2, #15
 8003704:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	b292      	uxth	r2, r2
 800370e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fc45 	bl	8003fa0 <RTC_ExitInitMode>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d004      	beq.n	8003726 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2204      	movs	r2, #4
 8003720:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e00c      	b.n	8003740 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800373e:	2300      	movs	r3, #0
  }
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40006c00 	.word	0x40006c00

0800374c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800374c:	b590      	push	{r4, r7, lr}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <HAL_RTC_SetTime+0x20>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e080      	b.n	8003872 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	7c1b      	ldrb	r3, [r3, #16]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_RTC_SetTime+0x30>
 8003778:	2302      	movs	r3, #2
 800377a:	e07a      	b.n	8003872 <HAL_RTC_SetTime+0x126>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2201      	movs	r2, #1
 8003780:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2202      	movs	r2, #2
 8003786:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d113      	bne.n	80037b6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003798:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	785b      	ldrb	r3, [r3, #1]
 80037a0:	4619      	mov	r1, r3
 80037a2:	460b      	mov	r3, r1
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	1a5b      	subs	r3, r3, r1
 80037a8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80037aa:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80037b0:	4413      	add	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	e01e      	b.n	80037f4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fc35 	bl	800402a <RTC_Bcd2ToByte>
 80037c0:	4603      	mov	r3, r0
 80037c2:	461a      	mov	r2, r3
 80037c4:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80037c8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	785b      	ldrb	r3, [r3, #1]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 fc2a 	bl	800402a <RTC_Bcd2ToByte>
 80037d6:	4603      	mov	r3, r0
 80037d8:	461a      	mov	r2, r3
 80037da:	4613      	mov	r3, r2
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80037e2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	789b      	ldrb	r3, [r3, #2]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fc1e 	bl	800402a <RTC_Bcd2ToByte>
 80037ee:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80037f0:	4423      	add	r3, r4
 80037f2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80037f4:	6979      	ldr	r1, [r7, #20]
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 fb43 	bl	8003e82 <RTC_WriteTimeCounter>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2204      	movs	r2, #4
 8003806:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e02f      	b.n	8003872 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0205 	bic.w	r2, r2, #5
 8003820:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 fb54 	bl	8003ed0 <RTC_ReadAlarmCounter>
 8003828:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d018      	beq.n	8003864 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	429a      	cmp	r2, r3
 8003838:	d214      	bcs.n	8003864 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003840:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003844:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003846:	6939      	ldr	r1, [r7, #16]
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 fb5a 	bl	8003f02 <RTC_WriteAlarmCounter>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d007      	beq.n	8003864 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2204      	movs	r2, #4
 8003858:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e006      	b.n	8003872 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2201      	movs	r2, #1
 8003868:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003870:	2300      	movs	r3, #0
  }
}
 8003872:	4618      	mov	r0, r3
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	bd90      	pop	{r4, r7, pc}
	...

0800387c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	61bb      	str	r3, [r7, #24]
 800388c:	2300      	movs	r3, #0
 800388e:	61fb      	str	r3, [r7, #28]
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	2300      	movs	r3, #0
 8003896:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_RTC_GetTime+0x28>
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e0b5      	b.n	8003a14 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e0ac      	b.n	8003a14 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 fab1 	bl	8003e22 <RTC_ReadTimeCounter>
 80038c0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	4a55      	ldr	r2, [pc, #340]	@ (8003a1c <HAL_RTC_GetTime+0x1a0>)
 80038c6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ca:	0adb      	lsrs	r3, r3, #11
 80038cc:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4b52      	ldr	r3, [pc, #328]	@ (8003a1c <HAL_RTC_GetTime+0x1a0>)
 80038d2:	fba3 1302 	umull	r1, r3, r3, r2
 80038d6:	0adb      	lsrs	r3, r3, #11
 80038d8:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80038dc:	fb01 f303 	mul.w	r3, r1, r3
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	4a4f      	ldr	r2, [pc, #316]	@ (8003a20 <HAL_RTC_GetTime+0x1a4>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	095b      	lsrs	r3, r3, #5
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	4a4a      	ldr	r2, [pc, #296]	@ (8003a1c <HAL_RTC_GetTime+0x1a0>)
 80038f4:	fba2 1203 	umull	r1, r2, r2, r3
 80038f8:	0ad2      	lsrs	r2, r2, #11
 80038fa:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80038fe:	fb01 f202 	mul.w	r2, r1, r2
 8003902:	1a9a      	subs	r2, r3, r2
 8003904:	4b46      	ldr	r3, [pc, #280]	@ (8003a20 <HAL_RTC_GetTime+0x1a4>)
 8003906:	fba3 1302 	umull	r1, r3, r3, r2
 800390a:	0959      	lsrs	r1, r3, #5
 800390c:	460b      	mov	r3, r1
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	1a5b      	subs	r3, r3, r1
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	1ad1      	subs	r1, r2, r3
 8003916:	b2ca      	uxtb	r2, r1
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	2b17      	cmp	r3, #23
 8003920:	d955      	bls.n	80039ce <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4a3f      	ldr	r2, [pc, #252]	@ (8003a24 <HAL_RTC_GetTime+0x1a8>)
 8003926:	fba2 2303 	umull	r2, r3, r2, r3
 800392a:	091b      	lsrs	r3, r3, #4
 800392c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800392e:	6939      	ldr	r1, [r7, #16]
 8003930:	4b3c      	ldr	r3, [pc, #240]	@ (8003a24 <HAL_RTC_GetTime+0x1a8>)
 8003932:	fba3 2301 	umull	r2, r3, r3, r1
 8003936:	091a      	lsrs	r2, r3, #4
 8003938:	4613      	mov	r3, r2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	4413      	add	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	1aca      	subs	r2, r1, r3
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 fac1 	bl	8003ed0 <RTC_ReadAlarmCounter>
 800394e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003956:	d008      	beq.n	800396a <HAL_RTC_GetTime+0xee>
 8003958:	69fa      	ldr	r2, [r7, #28]
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	429a      	cmp	r2, r3
 800395e:	d904      	bls.n	800396a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	61fb      	str	r3, [r7, #28]
 8003968:	e002      	b.n	8003970 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800396a:	f04f 33ff 	mov.w	r3, #4294967295
 800396e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	4a2d      	ldr	r2, [pc, #180]	@ (8003a28 <HAL_RTC_GetTime+0x1ac>)
 8003974:	fb02 f303 	mul.w	r3, r2, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800397e:	69b9      	ldr	r1, [r7, #24]
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fa7e 	bl	8003e82 <RTC_WriteTimeCounter>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e041      	b.n	8003a14 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003996:	d00c      	beq.n	80039b2 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003998:	69fa      	ldr	r2, [r7, #28]
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	4413      	add	r3, r2
 800399e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80039a0:	69f9      	ldr	r1, [r7, #28]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 faad 	bl	8003f02 <RTC_WriteAlarmCounter>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e030      	b.n	8003a14 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80039b2:	69f9      	ldr	r1, [r7, #28]
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 faa4 	bl	8003f02 <RTC_WriteAlarmCounter>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e027      	b.n	8003a14 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80039c4:	6979      	ldr	r1, [r7, #20]
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 fb4c 	bl	8004064 <RTC_DateUpdate>
 80039cc:	e003      	b.n	80039d6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01a      	beq.n	8003a12 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fb05 	bl	8003ff0 <RTC_ByteToBcd2>
 80039e6:	4603      	mov	r3, r0
 80039e8:	461a      	mov	r2, r3
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	785b      	ldrb	r3, [r3, #1]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fafc 	bl	8003ff0 <RTC_ByteToBcd2>
 80039f8:	4603      	mov	r3, r0
 80039fa:	461a      	mov	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	789b      	ldrb	r3, [r3, #2]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 faf3 	bl	8003ff0 <RTC_ByteToBcd2>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3720      	adds	r7, #32
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	91a2b3c5 	.word	0x91a2b3c5
 8003a20:	88888889 	.word	0x88888889
 8003a24:	aaaaaaab 	.word	0xaaaaaaab
 8003a28:	00015180 	.word	0x00015180

08003a2c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61fb      	str	r3, [r7, #28]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61bb      	str	r3, [r7, #24]
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <HAL_RTC_SetDate+0x24>
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e097      	b.n	8003b84 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	7c1b      	ldrb	r3, [r3, #16]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_RTC_SetDate+0x34>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e091      	b.n	8003b84 <HAL_RTC_SetDate+0x158>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2201      	movs	r2, #1
 8003a64:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10c      	bne.n	8003a8c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	78da      	ldrb	r2, [r3, #3]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	785a      	ldrb	r2, [r3, #1]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	789a      	ldrb	r2, [r3, #2]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	739a      	strb	r2, [r3, #14]
 8003a8a:	e01a      	b.n	8003ac2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	78db      	ldrb	r3, [r3, #3]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 faca 	bl	800402a <RTC_Bcd2ToByte>
 8003a96:	4603      	mov	r3, r0
 8003a98:	461a      	mov	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	785b      	ldrb	r3, [r3, #1]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fac1 	bl	800402a <RTC_Bcd2ToByte>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	461a      	mov	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	789b      	ldrb	r3, [r3, #2]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fab8 	bl	800402a <RTC_Bcd2ToByte>
 8003aba:	4603      	mov	r3, r0
 8003abc:	461a      	mov	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	7bdb      	ldrb	r3, [r3, #15]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	7b59      	ldrb	r1, [r3, #13]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	7b9b      	ldrb	r3, [r3, #14]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	f000 fba3 	bl	800421c <RTC_WeekDayNum>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	461a      	mov	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	7b1a      	ldrb	r2, [r3, #12]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f99b 	bl	8003e22 <RTC_ReadTimeCounter>
 8003aec:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	4a26      	ldr	r2, [pc, #152]	@ (8003b8c <HAL_RTC_SetDate+0x160>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	0adb      	lsrs	r3, r3, #11
 8003af8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2b18      	cmp	r3, #24
 8003afe:	d93a      	bls.n	8003b76 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	4a23      	ldr	r2, [pc, #140]	@ (8003b90 <HAL_RTC_SetDate+0x164>)
 8003b04:	fba2 2303 	umull	r2, r3, r2, r3
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	4a22      	ldr	r2, [pc, #136]	@ (8003b94 <HAL_RTC_SetDate+0x168>)
 8003b0c:	fb02 f303 	mul.w	r3, r2, r3
 8003b10:	69fa      	ldr	r2, [r7, #28]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003b16:	69f9      	ldr	r1, [r7, #28]
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f9b2 	bl	8003e82 <RTC_WriteTimeCounter>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d007      	beq.n	8003b34 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2204      	movs	r2, #4
 8003b28:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e027      	b.n	8003b84 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 f9cb 	bl	8003ed0 <RTC_ReadAlarmCounter>
 8003b3a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b42:	d018      	beq.n	8003b76 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d214      	bcs.n	8003b76 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003b52:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003b56:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003b58:	69b9      	ldr	r1, [r7, #24]
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 f9d1 	bl	8003f02 <RTC_WriteAlarmCounter>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d007      	beq.n	8003b76 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2204      	movs	r2, #4
 8003b6a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e006      	b.n	8003b84 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3720      	adds	r7, #32
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	91a2b3c5 	.word	0x91a2b3c5
 8003b90:	aaaaaaab 	.word	0xaaaaaaab
 8003b94:	00015180 	.word	0x00015180

08003b98 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b089      	sub	sp, #36	@ 0x24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8003ba8:	f107 0314 	add.w	r3, r7, #20
 8003bac:	2100      	movs	r1, #0
 8003bae:	460a      	mov	r2, r1
 8003bb0:	801a      	strh	r2, [r3, #0]
 8003bb2:	460a      	mov	r2, r1
 8003bb4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <HAL_RTC_SetAlarm_IT+0x2a>
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e099      	b.n	8003cfa <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	7c1b      	ldrb	r3, [r3, #16]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_RTC_SetAlarm_IT+0x3a>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e093      	b.n	8003cfa <HAL_RTC_SetAlarm_IT+0x162>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003bde:	f107 0314 	add.w	r3, r7, #20
 8003be2:	2200      	movs	r2, #0
 8003be4:	4619      	mov	r1, r3
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f7ff fe48 	bl	800387c <HAL_RTC_GetTime>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e081      	b.n	8003cfa <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003bf6:	7d3b      	ldrb	r3, [r7, #20]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003bfe:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8003c02:	7d7b      	ldrb	r3, [r7, #21]
 8003c04:	4619      	mov	r1, r3
 8003c06:	460b      	mov	r3, r1
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	1a5b      	subs	r3, r3, r1
 8003c0c:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003c0e:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8003c10:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003c12:	4413      	add	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d113      	bne.n	8003c44 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003c26:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	785b      	ldrb	r3, [r3, #1]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	460b      	mov	r3, r1
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	1a5b      	subs	r3, r3, r1
 8003c36:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003c38:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003c3e:	4413      	add	r3, r2
 8003c40:	61fb      	str	r3, [r7, #28]
 8003c42:	e01e      	b.n	8003c82 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 f9ee 	bl	800402a <RTC_Bcd2ToByte>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	461a      	mov	r2, r3
 8003c52:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003c56:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	785b      	ldrb	r3, [r3, #1]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 f9e3 	bl	800402a <RTC_Bcd2ToByte>
 8003c64:	4603      	mov	r3, r0
 8003c66:	461a      	mov	r2, r3
 8003c68:	4613      	mov	r3, r2
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	1a9b      	subs	r3, r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003c70:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	789b      	ldrb	r3, [r3, #2]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 f9d7 	bl	800402a <RTC_Bcd2ToByte>
 8003c7c:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003c7e:	4423      	add	r3, r4
 8003c80:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d205      	bcs.n	8003c96 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003c90:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003c94:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003c96:	69f9      	ldr	r1, [r7, #28]
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 f932 	bl	8003f02 <RTC_WriteAlarmCounter>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2204      	movs	r2, #4
 8003ca8:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e022      	b.n	8003cfa <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0202 	bic.w	r2, r2, #2
 8003cc2:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0202 	orr.w	r2, r2, #2
 8003cd2:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d04 <HAL_RTC_SetAlarm_IT+0x16c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8003d04 <HAL_RTC_SetAlarm_IT+0x16c>)
 8003cda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cde:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003ce0:	4b08      	ldr	r3, [pc, #32]	@ (8003d04 <HAL_RTC_SetAlarm_IT+0x16c>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	4a07      	ldr	r2, [pc, #28]	@ (8003d04 <HAL_RTC_SetAlarm_IT+0x16c>)
 8003ce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cea:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
  }
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3724      	adds	r7, #36	@ 0x24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd90      	pop	{r4, r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40010400 	.word	0x40010400

08003d08 <HAL_RTC_DeactivateAlarm>:
  *          This parameter can be one of the following values:
  *            @arg RTC_ALARM_A:  AlarmA
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Check input parameters */
  if (hrtc == NULL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_RTC_DeactivateAlarm+0x14>
  {
    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e04e      	b.n	8003dba <HAL_RTC_DeactivateAlarm+0xb2>
  }

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	7c1b      	ldrb	r3, [r3, #16]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_RTC_DeactivateAlarm+0x20>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e048      	b.n	8003dba <HAL_RTC_DeactivateAlarm+0xb2>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2202      	movs	r2, #2
 8003d32:	745a      	strb	r2, [r3, #17]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0202 	bic.w	r2, r2, #2
 8003d42:	601a      	str	r2, [r3, #0]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f903 	bl	8003f50 <RTC_EnterInitMode>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <HAL_RTC_DeactivateAlarm+0x58>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2204      	movs	r2, #4
 8003d54:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e02c      	b.n	8003dba <HAL_RTC_DeactivateAlarm+0xb2>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0202 	bic.w	r2, r2, #2
 8003d6e:	605a      	str	r2, [r3, #4]

    /* Set to default values ALRH & ALRL registers */
    WRITE_REG(hrtc->Instance->ALRH, RTC_ALARM_RESETVALUE_REGISTER);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d78:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, RTC_ALARM_RESETVALUE_REGISTER);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d82:	625a      	str	r2, [r3, #36]	@ 0x24

    /* RTC Alarm Interrupt Configuration: Disable EXTI configuration */
    __HAL_RTC_ALARM_EXTI_DISABLE_IT();
 8003d84:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc4 <HAL_RTC_DeactivateAlarm+0xbc>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a0e      	ldr	r2, [pc, #56]	@ (8003dc4 <HAL_RTC_DeactivateAlarm+0xbc>)
 8003d8a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003d8e:	6013      	str	r3, [r2, #0]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f905 	bl	8003fa0 <RTC_ExitInitMode>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d007      	beq.n	8003dac <HAL_RTC_DeactivateAlarm+0xa4>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2204      	movs	r2, #4
 8003da0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e006      	b.n	8003dba <HAL_RTC_DeactivateAlarm+0xb2>
    }
  }
  hrtc->State = HAL_RTC_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40010400 	.word	0x40010400

08003dc8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e01d      	b.n	8003e1a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0208 	bic.w	r2, r2, #8
 8003dec:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003dee:	f7fd fdd9 	bl	80019a4 <HAL_GetTick>
 8003df2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003df4:	e009      	b.n	8003e0a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003df6:	f7fd fdd5 	bl	80019a4 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e04:	d901      	bls.n	8003e0a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e007      	b.n	8003e1a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0ee      	beq.n	8003df6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b087      	sub	sp, #28
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	827b      	strh	r3, [r7, #18]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	823b      	strh	r3, [r7, #16]
 8003e32:	2300      	movs	r3, #0
 8003e34:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003e52:	8a7a      	ldrh	r2, [r7, #18]
 8003e54:	8a3b      	ldrh	r3, [r7, #16]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d008      	beq.n	8003e6c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003e5a:	8a3b      	ldrh	r3, [r7, #16]
 8003e5c:	041a      	lsls	r2, r3, #16
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	4313      	orrs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	e004      	b.n	8003e76 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003e6c:	8a7b      	ldrh	r3, [r7, #18]
 8003e6e:	041a      	lsls	r2, r3, #16
 8003e70:	89fb      	ldrh	r3, [r7, #14]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003e76:	697b      	ldr	r3, [r7, #20]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	371c      	adds	r7, #28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr

08003e82 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f85d 	bl	8003f50 <RTC_EnterInitMode>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	73fb      	strb	r3, [r7, #15]
 8003ea0:	e011      	b.n	8003ec6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	0c12      	lsrs	r2, r2, #16
 8003eaa:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	b292      	uxth	r2, r2
 8003eb4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f872 	bl	8003fa0 <RTC_ExitInitMode>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	81fb      	strh	r3, [r7, #14]
 8003edc:	2300      	movs	r3, #0
 8003ede:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eee:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003ef0:	89fb      	ldrh	r3, [r7, #14]
 8003ef2:	041a      	lsls	r2, r3, #16
 8003ef4:	89bb      	ldrh	r3, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr

08003f02 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f81d 	bl	8003f50 <RTC_EnterInitMode>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
 8003f20:	e011      	b.n	8003f46 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	0c12      	lsrs	r2, r2, #16
 8003f2a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	b292      	uxth	r2, r2
 8003f34:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f832 	bl	8003fa0 <RTC_ExitInitMode>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003f5c:	f7fd fd22 	bl	80019a4 <HAL_GetTick>
 8003f60:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003f62:	e009      	b.n	8003f78 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003f64:	f7fd fd1e 	bl	80019a4 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f72:	d901      	bls.n	8003f78 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e00f      	b.n	8003f98 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0ee      	beq.n	8003f64 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0210 	orr.w	r2, r2, #16
 8003f94:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0210 	bic.w	r2, r2, #16
 8003fba:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003fbc:	f7fd fcf2 	bl	80019a4 <HAL_GetTick>
 8003fc0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003fc2:	e009      	b.n	8003fd8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003fc4:	f7fd fcee 	bl	80019a4 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003fd2:	d901      	bls.n	8003fd8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e007      	b.n	8003fe8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0ee      	beq.n	8003fc4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003ffe:	e005      	b.n	800400c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3301      	adds	r3, #1
 8004004:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004006:	79fb      	ldrb	r3, [r7, #7]
 8004008:	3b0a      	subs	r3, #10
 800400a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	2b09      	cmp	r3, #9
 8004010:	d8f6      	bhi.n	8004000 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	b2db      	uxtb	r3, r3
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	b2da      	uxtb	r2, r3
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	4313      	orrs	r3, r2
 800401e:	b2db      	uxtb	r3, r3
}
 8004020:	4618      	mov	r0, r3
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr

0800402a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800402a:	b480      	push	{r7}
 800402c:	b085      	sub	sp, #20
 800402e:	af00      	add	r7, sp, #0
 8004030:	4603      	mov	r3, r0
 8004032:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	091b      	lsrs	r3, r3, #4
 800403c:	b2db      	uxtb	r3, r3
 800403e:	461a      	mov	r2, r3
 8004040:	4613      	mov	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	b2da      	uxtb	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	b2db      	uxtb	r3, r3
 8004056:	4413      	add	r3, r2
 8004058:	b2db      	uxtb	r3, r3
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr

08004064 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	2300      	movs	r3, #0
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	7bdb      	ldrb	r3, [r3, #15]
 8004082:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	7b5b      	ldrb	r3, [r3, #13]
 8004088:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	7b9b      	ldrb	r3, [r3, #14]
 800408e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004090:	2300      	movs	r3, #0
 8004092:	60bb      	str	r3, [r7, #8]
 8004094:	e06f      	b.n	8004176 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d011      	beq.n	80040c0 <RTC_DateUpdate+0x5c>
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d00e      	beq.n	80040c0 <RTC_DateUpdate+0x5c>
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	2b05      	cmp	r3, #5
 80040a6:	d00b      	beq.n	80040c0 <RTC_DateUpdate+0x5c>
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	2b07      	cmp	r3, #7
 80040ac:	d008      	beq.n	80040c0 <RTC_DateUpdate+0x5c>
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d005      	beq.n	80040c0 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	2b0a      	cmp	r3, #10
 80040b8:	d002      	beq.n	80040c0 <RTC_DateUpdate+0x5c>
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	2b0c      	cmp	r3, #12
 80040be:	d117      	bne.n	80040f0 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b1e      	cmp	r3, #30
 80040c4:	d803      	bhi.n	80040ce <RTC_DateUpdate+0x6a>
      {
        day++;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	3301      	adds	r3, #1
 80040ca:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80040cc:	e050      	b.n	8004170 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	2b0c      	cmp	r3, #12
 80040d2:	d005      	beq.n	80040e0 <RTC_DateUpdate+0x7c>
        {
          month++;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	3301      	adds	r3, #1
 80040d8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80040da:	2301      	movs	r3, #1
 80040dc:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80040de:	e047      	b.n	8004170 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80040e0:	2301      	movs	r3, #1
 80040e2:	613b      	str	r3, [r7, #16]
          day = 1U;
 80040e4:	2301      	movs	r3, #1
 80040e6:	60fb      	str	r3, [r7, #12]
          year++;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	3301      	adds	r3, #1
 80040ec:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80040ee:	e03f      	b.n	8004170 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d008      	beq.n	8004108 <RTC_DateUpdate+0xa4>
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	2b06      	cmp	r3, #6
 80040fa:	d005      	beq.n	8004108 <RTC_DateUpdate+0xa4>
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	2b09      	cmp	r3, #9
 8004100:	d002      	beq.n	8004108 <RTC_DateUpdate+0xa4>
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	2b0b      	cmp	r3, #11
 8004106:	d10c      	bne.n	8004122 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b1d      	cmp	r3, #29
 800410c:	d803      	bhi.n	8004116 <RTC_DateUpdate+0xb2>
      {
        day++;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3301      	adds	r3, #1
 8004112:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004114:	e02c      	b.n	8004170 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	3301      	adds	r3, #1
 800411a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800411c:	2301      	movs	r3, #1
 800411e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004120:	e026      	b.n	8004170 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d123      	bne.n	8004170 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b1b      	cmp	r3, #27
 800412c:	d803      	bhi.n	8004136 <RTC_DateUpdate+0xd2>
      {
        day++;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3301      	adds	r3, #1
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	e01c      	b.n	8004170 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b1c      	cmp	r3, #28
 800413a:	d111      	bne.n	8004160 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	b29b      	uxth	r3, r3
 8004140:	4618      	mov	r0, r3
 8004142:	f000 f839 	bl	80041b8 <RTC_IsLeapYear>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <RTC_DateUpdate+0xf0>
        {
          day++;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3301      	adds	r3, #1
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	e00d      	b.n	8004170 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	3301      	adds	r3, #1
 8004158:	613b      	str	r3, [r7, #16]
          day = 1U;
 800415a:	2301      	movs	r3, #1
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	e007      	b.n	8004170 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b1d      	cmp	r3, #29
 8004164:	d104      	bne.n	8004170 <RTC_DateUpdate+0x10c>
      {
        month++;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	3301      	adds	r3, #1
 800416a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800416c:	2301      	movs	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	3301      	adds	r3, #1
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d38b      	bcc.n	8004096 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	b2da      	uxtb	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	b2da      	uxtb	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	4619      	mov	r1, r3
 80041a0:	6978      	ldr	r0, [r7, #20]
 80041a2:	f000 f83b 	bl	800421c <RTC_WeekDayNum>
 80041a6:	4603      	mov	r3, r0
 80041a8:	461a      	mov	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	731a      	strb	r2, [r3, #12]
}
 80041ae:	bf00      	nop
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80041c2:	88fb      	ldrh	r3, [r7, #6]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e01d      	b.n	800420e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80041d2:	88fb      	ldrh	r3, [r7, #6]
 80041d4:	4a10      	ldr	r2, [pc, #64]	@ (8004218 <RTC_IsLeapYear+0x60>)
 80041d6:	fba2 1203 	umull	r1, r2, r2, r3
 80041da:	0952      	lsrs	r2, r2, #5
 80041dc:	2164      	movs	r1, #100	@ 0x64
 80041de:	fb01 f202 	mul.w	r2, r1, r2
 80041e2:	1a9b      	subs	r3, r3, r2
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e00f      	b.n	800420e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80041ee:	88fb      	ldrh	r3, [r7, #6]
 80041f0:	4a09      	ldr	r2, [pc, #36]	@ (8004218 <RTC_IsLeapYear+0x60>)
 80041f2:	fba2 1203 	umull	r1, r2, r2, r3
 80041f6:	09d2      	lsrs	r2, r2, #7
 80041f8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80041fc:	fb01 f202 	mul.w	r2, r1, r2
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800420c:	2300      	movs	r3, #0
  }
}
 800420e:	4618      	mov	r0, r3
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr
 8004218:	51eb851f 	.word	0x51eb851f

0800421c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	70fb      	strb	r3, [r7, #3]
 8004228:	4613      	mov	r3, r2
 800422a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	60bb      	str	r3, [r7, #8]
 8004230:	2300      	movs	r3, #0
 8004232:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800423a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d82d      	bhi.n	800429e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004242:	78fa      	ldrb	r2, [r7, #3]
 8004244:	4613      	mov	r3, r2
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	4413      	add	r3, r2
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	1a9b      	subs	r3, r3, r2
 800424e:	4a2c      	ldr	r2, [pc, #176]	@ (8004300 <RTC_WeekDayNum+0xe4>)
 8004250:	fba2 2303 	umull	r2, r3, r2, r3
 8004254:	085a      	lsrs	r2, r3, #1
 8004256:	78bb      	ldrb	r3, [r7, #2]
 8004258:	441a      	add	r2, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	441a      	add	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	3b01      	subs	r3, #1
 8004262:	089b      	lsrs	r3, r3, #2
 8004264:	441a      	add	r2, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	3b01      	subs	r3, #1
 800426a:	4926      	ldr	r1, [pc, #152]	@ (8004304 <RTC_WeekDayNum+0xe8>)
 800426c:	fba1 1303 	umull	r1, r3, r1, r3
 8004270:	095b      	lsrs	r3, r3, #5
 8004272:	1ad2      	subs	r2, r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	3b01      	subs	r3, #1
 8004278:	4922      	ldr	r1, [pc, #136]	@ (8004304 <RTC_WeekDayNum+0xe8>)
 800427a:	fba1 1303 	umull	r1, r3, r1, r3
 800427e:	09db      	lsrs	r3, r3, #7
 8004280:	4413      	add	r3, r2
 8004282:	1d1a      	adds	r2, r3, #4
 8004284:	4b20      	ldr	r3, [pc, #128]	@ (8004308 <RTC_WeekDayNum+0xec>)
 8004286:	fba3 1302 	umull	r1, r3, r3, r2
 800428a:	1ad1      	subs	r1, r2, r3
 800428c:	0849      	lsrs	r1, r1, #1
 800428e:	440b      	add	r3, r1
 8004290:	0899      	lsrs	r1, r3, #2
 8004292:	460b      	mov	r3, r1
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	1a5b      	subs	r3, r3, r1
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	e029      	b.n	80042f2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	4613      	mov	r3, r2
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	4413      	add	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	4a15      	ldr	r2, [pc, #84]	@ (8004300 <RTC_WeekDayNum+0xe4>)
 80042ac:	fba2 2303 	umull	r2, r3, r2, r3
 80042b0:	085a      	lsrs	r2, r3, #1
 80042b2:	78bb      	ldrb	r3, [r7, #2]
 80042b4:	441a      	add	r2, r3
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	441a      	add	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	089b      	lsrs	r3, r3, #2
 80042be:	441a      	add	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4910      	ldr	r1, [pc, #64]	@ (8004304 <RTC_WeekDayNum+0xe8>)
 80042c4:	fba1 1303 	umull	r1, r3, r1, r3
 80042c8:	095b      	lsrs	r3, r3, #5
 80042ca:	1ad2      	subs	r2, r2, r3
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	490d      	ldr	r1, [pc, #52]	@ (8004304 <RTC_WeekDayNum+0xe8>)
 80042d0:	fba1 1303 	umull	r1, r3, r1, r3
 80042d4:	09db      	lsrs	r3, r3, #7
 80042d6:	4413      	add	r3, r2
 80042d8:	1c9a      	adds	r2, r3, #2
 80042da:	4b0b      	ldr	r3, [pc, #44]	@ (8004308 <RTC_WeekDayNum+0xec>)
 80042dc:	fba3 1302 	umull	r1, r3, r3, r2
 80042e0:	1ad1      	subs	r1, r2, r3
 80042e2:	0849      	lsrs	r1, r1, #1
 80042e4:	440b      	add	r3, r1
 80042e6:	0899      	lsrs	r1, r3, #2
 80042e8:	460b      	mov	r3, r1
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	1a5b      	subs	r3, r3, r1
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	b2db      	uxtb	r3, r3
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr
 8004300:	38e38e39 	.word	0x38e38e39
 8004304:	51eb851f 	.word	0x51eb851f
 8004308:	24924925 	.word	0x24924925

0800430c <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d027      	beq.n	8004372 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d020      	beq.n	8004372 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00b      	beq.n	8004356 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f824 	bl	800438c <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0204 	mvn.w	r2, #4
 800434c:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2204      	movs	r2, #4
 8004352:	745a      	strb	r2, [r3, #17]
 8004354:	e005      	b.n	8004362 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f80f 	bl	800437a <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0201 	bic.w	r2, r2, #1
 8004370:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr

0800438c <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	bc80      	pop	{r7}
 800439c:	4770      	bx	lr

0800439e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b082      	sub	sp, #8
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e076      	b.n	800449e <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d108      	bne.n	80043ca <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043c0:	d009      	beq.n	80043d6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	61da      	str	r2, [r3, #28]
 80043c8:	e005      	b.n	80043d6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d106      	bne.n	80043f6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7fd f9b7 	bl	8001764 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2202      	movs	r2, #2
 80043fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800440c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800445a:	ea42 0103 	orr.w	r1, r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004462:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	0c1a      	lsrs	r2, r3, #16
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f002 0204 	and.w	r2, r2, #4
 800447c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800448c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b088      	sub	sp, #32
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	603b      	str	r3, [r7, #0]
 80044b2:	4613      	mov	r3, r2
 80044b4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044b6:	f7fd fa75 	bl	80019a4 <HAL_GetTick>
 80044ba:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80044bc:	88fb      	ldrh	r3, [r7, #6]
 80044be:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d001      	beq.n	80044d0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80044cc:	2302      	movs	r3, #2
 80044ce:	e12a      	b.n	8004726 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <HAL_SPI_Transmit+0x36>
 80044d6:	88fb      	ldrh	r3, [r7, #6]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e122      	b.n	8004726 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_SPI_Transmit+0x48>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e11b      	b.n	8004726 <HAL_SPI_Transmit+0x280>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2203      	movs	r2, #3
 80044fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	88fa      	ldrh	r2, [r7, #6]
 800450e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	88fa      	ldrh	r2, [r7, #6]
 8004514:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800453c:	d10f      	bne.n	800455e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800454c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800455c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004568:	2b40      	cmp	r3, #64	@ 0x40
 800456a:	d007      	beq.n	800457c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800457a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004584:	d152      	bne.n	800462c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <HAL_SPI_Transmit+0xee>
 800458e:	8b7b      	ldrh	r3, [r7, #26]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d145      	bne.n	8004620 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004598:	881a      	ldrh	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a4:	1c9a      	adds	r2, r3, #2
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045b8:	e032      	b.n	8004620 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d112      	bne.n	80045ee <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045cc:	881a      	ldrh	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d8:	1c9a      	adds	r2, r3, #2
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045ec:	e018      	b.n	8004620 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045ee:	f7fd f9d9 	bl	80019a4 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d803      	bhi.n	8004606 <HAL_SPI_Transmit+0x160>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004604:	d102      	bne.n	800460c <HAL_SPI_Transmit+0x166>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d109      	bne.n	8004620 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e082      	b.n	8004726 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1c7      	bne.n	80045ba <HAL_SPI_Transmit+0x114>
 800462a:	e053      	b.n	80046d4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <HAL_SPI_Transmit+0x194>
 8004634:	8b7b      	ldrh	r3, [r7, #26]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d147      	bne.n	80046ca <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	330c      	adds	r3, #12
 8004644:	7812      	ldrb	r2, [r2, #0]
 8004646:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004660:	e033      	b.n	80046ca <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b02      	cmp	r3, #2
 800466e:	d113      	bne.n	8004698 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	330c      	adds	r3, #12
 800467a:	7812      	ldrb	r2, [r2, #0]
 800467c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800468c:	b29b      	uxth	r3, r3
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004696:	e018      	b.n	80046ca <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004698:	f7fd f984 	bl	80019a4 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d803      	bhi.n	80046b0 <HAL_SPI_Transmit+0x20a>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ae:	d102      	bne.n	80046b6 <HAL_SPI_Transmit+0x210>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d109      	bne.n	80046ca <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e02d      	b.n	8004726 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1c6      	bne.n	8004662 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046d4:	69fa      	ldr	r2, [r7, #28]
 80046d6:	6839      	ldr	r1, [r7, #0]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 fbd1 	bl	8004e80 <SPI_EndRxTxTransaction>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2220      	movs	r2, #32
 80046e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10a      	bne.n	8004708 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046f2:	2300      	movs	r3, #0
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	617b      	str	r3, [r7, #20]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004724:	2300      	movs	r3, #0
  }
}
 8004726:	4618      	mov	r0, r3
 8004728:	3720      	adds	r7, #32
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b088      	sub	sp, #32
 8004732:	af02      	add	r7, sp, #8
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	603b      	str	r3, [r7, #0]
 800473a:	4613      	mov	r3, r2
 800473c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b01      	cmp	r3, #1
 8004748:	d001      	beq.n	800474e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800474a:	2302      	movs	r3, #2
 800474c:	e104      	b.n	8004958 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004756:	d112      	bne.n	800477e <HAL_SPI_Receive+0x50>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10e      	bne.n	800477e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2204      	movs	r2, #4
 8004764:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004768:	88fa      	ldrh	r2, [r7, #6]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	4613      	mov	r3, r2
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	68b9      	ldr	r1, [r7, #8]
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f8f3 	bl	8004960 <HAL_SPI_TransmitReceive>
 800477a:	4603      	mov	r3, r0
 800477c:	e0ec      	b.n	8004958 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800477e:	f7fd f911 	bl	80019a4 <HAL_GetTick>
 8004782:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <HAL_SPI_Receive+0x62>
 800478a:	88fb      	ldrh	r3, [r7, #6]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e0e1      	b.n	8004958 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_SPI_Receive+0x74>
 800479e:	2302      	movs	r3, #2
 80047a0:	e0da      	b.n	8004958 <HAL_SPI_Receive+0x22a>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2204      	movs	r2, #4
 80047ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	88fa      	ldrh	r2, [r7, #6]
 80047c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	88fa      	ldrh	r2, [r7, #6]
 80047c8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047f0:	d10f      	bne.n	8004812 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004800:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004810:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800481c:	2b40      	cmp	r3, #64	@ 0x40
 800481e:	d007      	beq.n	8004830 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800482e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d170      	bne.n	800491a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004838:	e035      	b.n	80048a6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b01      	cmp	r3, #1
 8004846:	d115      	bne.n	8004874 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f103 020c 	add.w	r2, r3, #12
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004854:	7812      	ldrb	r2, [r2, #0]
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004872:	e018      	b.n	80048a6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004874:	f7fd f896 	bl	80019a4 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d803      	bhi.n	800488c <HAL_SPI_Receive+0x15e>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488a:	d102      	bne.n	8004892 <HAL_SPI_Receive+0x164>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d109      	bne.n	80048a6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e058      	b.n	8004958 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1c4      	bne.n	800483a <HAL_SPI_Receive+0x10c>
 80048b0:	e038      	b.n	8004924 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d113      	bne.n	80048e8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ca:	b292      	uxth	r2, r2
 80048cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d2:	1c9a      	adds	r2, r3, #2
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048dc:	b29b      	uxth	r3, r3
 80048de:	3b01      	subs	r3, #1
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048e6:	e018      	b.n	800491a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048e8:	f7fd f85c 	bl	80019a4 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d803      	bhi.n	8004900 <HAL_SPI_Receive+0x1d2>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fe:	d102      	bne.n	8004906 <HAL_SPI_Receive+0x1d8>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d109      	bne.n	800491a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e01e      	b.n	8004958 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1c6      	bne.n	80048b2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	6839      	ldr	r1, [r7, #0]
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 fa57 	bl	8004ddc <SPI_EndRxTransaction>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004956:	2300      	movs	r3, #0
  }
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08a      	sub	sp, #40	@ 0x28
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800496e:	2301      	movs	r3, #1
 8004970:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004972:	f7fd f817 	bl	80019a4 <HAL_GetTick>
 8004976:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800497e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004986:	887b      	ldrh	r3, [r7, #2]
 8004988:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800498a:	7ffb      	ldrb	r3, [r7, #31]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d00c      	beq.n	80049aa <HAL_SPI_TransmitReceive+0x4a>
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004996:	d106      	bne.n	80049a6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d102      	bne.n	80049a6 <HAL_SPI_TransmitReceive+0x46>
 80049a0:	7ffb      	ldrb	r3, [r7, #31]
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d001      	beq.n	80049aa <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80049a6:	2302      	movs	r3, #2
 80049a8:	e17f      	b.n	8004caa <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <HAL_SPI_TransmitReceive+0x5c>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_SPI_TransmitReceive+0x5c>
 80049b6:	887b      	ldrh	r3, [r7, #2]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e174      	b.n	8004caa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_SPI_TransmitReceive+0x6e>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e16d      	b.n	8004caa <HAL_SPI_TransmitReceive+0x34a>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d003      	beq.n	80049ea <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2205      	movs	r2, #5
 80049e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	887a      	ldrh	r2, [r7, #2]
 80049fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	887a      	ldrh	r2, [r7, #2]
 8004a00:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	887a      	ldrh	r2, [r7, #2]
 8004a0c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	887a      	ldrh	r2, [r7, #2]
 8004a12:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a2a:	2b40      	cmp	r3, #64	@ 0x40
 8004a2c:	d007      	beq.n	8004a3e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a46:	d17e      	bne.n	8004b46 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <HAL_SPI_TransmitReceive+0xf6>
 8004a50:	8afb      	ldrh	r3, [r7, #22]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d16c      	bne.n	8004b30 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5a:	881a      	ldrh	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a66:	1c9a      	adds	r2, r3, #2
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a7a:	e059      	b.n	8004b30 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d11b      	bne.n	8004ac2 <HAL_SPI_TransmitReceive+0x162>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d016      	beq.n	8004ac2 <HAL_SPI_TransmitReceive+0x162>
 8004a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d113      	bne.n	8004ac2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9e:	881a      	ldrh	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aaa:	1c9a      	adds	r2, r3, #2
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d119      	bne.n	8004b04 <HAL_SPI_TransmitReceive+0x1a4>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d014      	beq.n	8004b04 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae4:	b292      	uxth	r2, r2
 8004ae6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aec:	1c9a      	adds	r2, r3, #2
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b00:	2301      	movs	r3, #1
 8004b02:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b04:	f7fc ff4e 	bl	80019a4 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d80d      	bhi.n	8004b30 <HAL_SPI_TransmitReceive+0x1d0>
 8004b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1a:	d009      	beq.n	8004b30 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e0bc      	b.n	8004caa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1a0      	bne.n	8004a7c <HAL_SPI_TransmitReceive+0x11c>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d19b      	bne.n	8004a7c <HAL_SPI_TransmitReceive+0x11c>
 8004b44:	e082      	b.n	8004c4c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <HAL_SPI_TransmitReceive+0x1f4>
 8004b4e:	8afb      	ldrh	r3, [r7, #22]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d171      	bne.n	8004c38 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	330c      	adds	r3, #12
 8004b5e:	7812      	ldrb	r2, [r2, #0]
 8004b60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b66:	1c5a      	adds	r2, r3, #1
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b7a:	e05d      	b.n	8004c38 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d11c      	bne.n	8004bc4 <HAL_SPI_TransmitReceive+0x264>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d017      	beq.n	8004bc4 <HAL_SPI_TransmitReceive+0x264>
 8004b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d114      	bne.n	8004bc4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	330c      	adds	r3, #12
 8004ba4:	7812      	ldrb	r2, [r2, #0]
 8004ba6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d119      	bne.n	8004c06 <HAL_SPI_TransmitReceive+0x2a6>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d014      	beq.n	8004c06 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c02:	2301      	movs	r3, #1
 8004c04:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c06:	f7fc fecd 	bl	80019a4 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d803      	bhi.n	8004c1e <HAL_SPI_TransmitReceive+0x2be>
 8004c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1c:	d102      	bne.n	8004c24 <HAL_SPI_TransmitReceive+0x2c4>
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d109      	bne.n	8004c38 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e038      	b.n	8004caa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d19c      	bne.n	8004b7c <HAL_SPI_TransmitReceive+0x21c>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d197      	bne.n	8004b7c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c4c:	6a3a      	ldr	r2, [r7, #32]
 8004c4e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 f915 	bl	8004e80 <SPI_EndRxTxTransaction>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d008      	beq.n	8004c6e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e01d      	b.n	8004caa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10a      	bne.n	8004c8c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c76:	2300      	movs	r3, #0
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
  }
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3728      	adds	r7, #40	@ 0x28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cc0:	b2db      	uxtb	r3, r3
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr

08004ccc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b088      	sub	sp, #32
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	603b      	str	r3, [r7, #0]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cdc:	f7fc fe62 	bl	80019a4 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce4:	1a9b      	subs	r3, r3, r2
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	4413      	add	r3, r2
 8004cea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cec:	f7fc fe5a 	bl	80019a4 <HAL_GetTick>
 8004cf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cf2:	4b39      	ldr	r3, [pc, #228]	@ (8004dd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	015b      	lsls	r3, r3, #5
 8004cf8:	0d1b      	lsrs	r3, r3, #20
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	fb02 f303 	mul.w	r3, r2, r3
 8004d00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d02:	e054      	b.n	8004dae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0a:	d050      	beq.n	8004dae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d0c:	f7fc fe4a 	bl	80019a4 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	69fa      	ldr	r2, [r7, #28]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d902      	bls.n	8004d22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d13d      	bne.n	8004d9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d3a:	d111      	bne.n	8004d60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d44:	d004      	beq.n	8004d50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d4e:	d107      	bne.n	8004d60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d68:	d10f      	bne.n	8004d8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e017      	b.n	8004dce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	3b01      	subs	r3, #1
 8004dac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4013      	ands	r3, r2
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	bf0c      	ite	eq
 8004dbe:	2301      	moveq	r3, #1
 8004dc0:	2300      	movne	r3, #0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	79fb      	ldrb	r3, [r7, #7]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d19b      	bne.n	8004d04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3720      	adds	r7, #32
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000000 	.word	0x20000000

08004ddc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004df0:	d111      	bne.n	8004e16 <SPI_EndRxTransaction+0x3a>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dfa:	d004      	beq.n	8004e06 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e04:	d107      	bne.n	8004e16 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e14:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e1e:	d117      	bne.n	8004e50 <SPI_EndRxTransaction+0x74>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e28:	d112      	bne.n	8004e50 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2200      	movs	r2, #0
 8004e32:	2101      	movs	r1, #1
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f7ff ff49 	bl	8004ccc <SPI_WaitFlagStateUntilTimeout>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d01a      	beq.n	8004e76 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e44:	f043 0220 	orr.w	r2, r3, #32
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e013      	b.n	8004e78 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2200      	movs	r2, #0
 8004e58:	2180      	movs	r1, #128	@ 0x80
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f7ff ff36 	bl	8004ccc <SPI_WaitFlagStateUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d007      	beq.n	8004e76 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e6a:	f043 0220 	orr.w	r2, r3, #32
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e000      	b.n	8004e78 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2201      	movs	r2, #1
 8004e94:	2102      	movs	r1, #2
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f7ff ff18 	bl	8004ccc <SPI_WaitFlagStateUntilTimeout>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d007      	beq.n	8004eb2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea6:	f043 0220 	orr.w	r2, r3, #32
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e013      	b.n	8004eda <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2180      	movs	r1, #128	@ 0x80
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f7ff ff05 	bl	8004ccc <SPI_WaitFlagStateUntilTimeout>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d007      	beq.n	8004ed8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ecc:	f043 0220 	orr.w	r2, r3, #32
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e000      	b.n	8004eda <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e041      	b.n	8004f78 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d106      	bne.n	8004f0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7fc fc75 	bl	80017f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2202      	movs	r2, #2
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4610      	mov	r0, r2
 8004f22:	f000 f95f 	bl	80051e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d001      	beq.n	8004f98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e02d      	b.n	8004ff4 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a16      	ldr	r2, [pc, #88]	@ (8005000 <HAL_TIM_Base_Start+0x80>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d009      	beq.n	8004fbe <HAL_TIM_Base_Start+0x3e>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fb2:	d004      	beq.n	8004fbe <HAL_TIM_Base_Start+0x3e>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a12      	ldr	r2, [pc, #72]	@ (8005004 <HAL_TIM_Base_Start+0x84>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d111      	bne.n	8004fe2 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b06      	cmp	r3, #6
 8004fce:	d010      	beq.n	8004ff2 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe0:	e007      	b.n	8004ff2 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f042 0201 	orr.w	r2, r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bc80      	pop	{r7}
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40012c00 	.word	0x40012c00
 8005004:	40000400 	.word	0x40000400

08005008 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6a1a      	ldr	r2, [r3, #32]
 8005016:	f241 1311 	movw	r3, #4369	@ 0x1111
 800501a:	4013      	ands	r3, r2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10f      	bne.n	8005040 <HAL_TIM_Base_Stop+0x38>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6a1a      	ldr	r2, [r3, #32]
 8005026:	f240 4344 	movw	r3, #1092	@ 0x444
 800502a:	4013      	ands	r3, r2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d107      	bne.n	8005040 <HAL_TIM_Base_Stop+0x38>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0201 	bic.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr

08005054 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_TIM_ConfigClockSource+0x1c>
 800506c:	2302      	movs	r3, #2
 800506e:	e0b4      	b.n	80051da <HAL_TIM_ConfigClockSource+0x186>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800508e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005096:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050a8:	d03e      	beq.n	8005128 <HAL_TIM_ConfigClockSource+0xd4>
 80050aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050ae:	f200 8087 	bhi.w	80051c0 <HAL_TIM_ConfigClockSource+0x16c>
 80050b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050b6:	f000 8086 	beq.w	80051c6 <HAL_TIM_ConfigClockSource+0x172>
 80050ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050be:	d87f      	bhi.n	80051c0 <HAL_TIM_ConfigClockSource+0x16c>
 80050c0:	2b70      	cmp	r3, #112	@ 0x70
 80050c2:	d01a      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0xa6>
 80050c4:	2b70      	cmp	r3, #112	@ 0x70
 80050c6:	d87b      	bhi.n	80051c0 <HAL_TIM_ConfigClockSource+0x16c>
 80050c8:	2b60      	cmp	r3, #96	@ 0x60
 80050ca:	d050      	beq.n	800516e <HAL_TIM_ConfigClockSource+0x11a>
 80050cc:	2b60      	cmp	r3, #96	@ 0x60
 80050ce:	d877      	bhi.n	80051c0 <HAL_TIM_ConfigClockSource+0x16c>
 80050d0:	2b50      	cmp	r3, #80	@ 0x50
 80050d2:	d03c      	beq.n	800514e <HAL_TIM_ConfigClockSource+0xfa>
 80050d4:	2b50      	cmp	r3, #80	@ 0x50
 80050d6:	d873      	bhi.n	80051c0 <HAL_TIM_ConfigClockSource+0x16c>
 80050d8:	2b40      	cmp	r3, #64	@ 0x40
 80050da:	d058      	beq.n	800518e <HAL_TIM_ConfigClockSource+0x13a>
 80050dc:	2b40      	cmp	r3, #64	@ 0x40
 80050de:	d86f      	bhi.n	80051c0 <HAL_TIM_ConfigClockSource+0x16c>
 80050e0:	2b30      	cmp	r3, #48	@ 0x30
 80050e2:	d064      	beq.n	80051ae <HAL_TIM_ConfigClockSource+0x15a>
 80050e4:	2b30      	cmp	r3, #48	@ 0x30
 80050e6:	d86b      	bhi.n	80051c0 <HAL_TIM_ConfigClockSource+0x16c>
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d060      	beq.n	80051ae <HAL_TIM_ConfigClockSource+0x15a>
 80050ec:	2b20      	cmp	r3, #32
 80050ee:	d867      	bhi.n	80051c0 <HAL_TIM_ConfigClockSource+0x16c>
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d05c      	beq.n	80051ae <HAL_TIM_ConfigClockSource+0x15a>
 80050f4:	2b10      	cmp	r3, #16
 80050f6:	d05a      	beq.n	80051ae <HAL_TIM_ConfigClockSource+0x15a>
 80050f8:	e062      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800510a:	f000 f946 	bl	800539a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800511c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	609a      	str	r2, [r3, #8]
      break;
 8005126:	e04f      	b.n	80051c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005138:	f000 f92f 	bl	800539a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800514a:	609a      	str	r2, [r3, #8]
      break;
 800514c:	e03c      	b.n	80051c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800515a:	461a      	mov	r2, r3
 800515c:	f000 f8a6 	bl	80052ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2150      	movs	r1, #80	@ 0x50
 8005166:	4618      	mov	r0, r3
 8005168:	f000 f8fd 	bl	8005366 <TIM_ITRx_SetConfig>
      break;
 800516c:	e02c      	b.n	80051c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800517a:	461a      	mov	r2, r3
 800517c:	f000 f8c4 	bl	8005308 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2160      	movs	r1, #96	@ 0x60
 8005186:	4618      	mov	r0, r3
 8005188:	f000 f8ed 	bl	8005366 <TIM_ITRx_SetConfig>
      break;
 800518c:	e01c      	b.n	80051c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800519a:	461a      	mov	r2, r3
 800519c:	f000 f886 	bl	80052ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2140      	movs	r1, #64	@ 0x40
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 f8dd 	bl	8005366 <TIM_ITRx_SetConfig>
      break;
 80051ac:	e00c      	b.n	80051c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4619      	mov	r1, r3
 80051b8:	4610      	mov	r0, r2
 80051ba:	f000 f8d4 	bl	8005366 <TIM_ITRx_SetConfig>
      break;
 80051be:	e003      	b.n	80051c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	73fb      	strb	r3, [r7, #15]
      break;
 80051c4:	e000      	b.n	80051c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
	...

080051e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a2b      	ldr	r2, [pc, #172]	@ (80052a4 <TIM_Base_SetConfig+0xc0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d007      	beq.n	800520c <TIM_Base_SetConfig+0x28>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005202:	d003      	beq.n	800520c <TIM_Base_SetConfig+0x28>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a28      	ldr	r2, [pc, #160]	@ (80052a8 <TIM_Base_SetConfig+0xc4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d108      	bne.n	800521e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005212:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a20      	ldr	r2, [pc, #128]	@ (80052a4 <TIM_Base_SetConfig+0xc0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d007      	beq.n	8005236 <TIM_Base_SetConfig+0x52>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800522c:	d003      	beq.n	8005236 <TIM_Base_SetConfig+0x52>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a1d      	ldr	r2, [pc, #116]	@ (80052a8 <TIM_Base_SetConfig+0xc4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d108      	bne.n	8005248 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800523c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4313      	orrs	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a0d      	ldr	r2, [pc, #52]	@ (80052a4 <TIM_Base_SetConfig+0xc0>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d103      	bne.n	800527c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d005      	beq.n	800529a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f023 0201 	bic.w	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	611a      	str	r2, [r3, #16]
  }
}
 800529a:	bf00      	nop
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	bc80      	pop	{r7}
 80052a2:	4770      	bx	lr
 80052a4:	40012c00 	.word	0x40012c00
 80052a8:	40000400 	.word	0x40000400

080052ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	f023 0201 	bic.w	r2, r3, #1
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f023 030a 	bic.w	r3, r3, #10
 80052e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	621a      	str	r2, [r3, #32]
}
 80052fe:	bf00      	nop
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	bc80      	pop	{r7}
 8005306:	4770      	bx	lr

08005308 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	f023 0210 	bic.w	r2, r3, #16
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	031b      	lsls	r3, r3, #12
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	4313      	orrs	r3, r2
 800533c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005344:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	621a      	str	r2, [r3, #32]
}
 800535c:	bf00      	nop
 800535e:	371c      	adds	r7, #28
 8005360:	46bd      	mov	sp, r7
 8005362:	bc80      	pop	{r7}
 8005364:	4770      	bx	lr

08005366 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005366:	b480      	push	{r7}
 8005368:	b085      	sub	sp, #20
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800537c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	f043 0307 	orr.w	r3, r3, #7
 8005388:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	609a      	str	r2, [r3, #8]
}
 8005390:	bf00      	nop
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr

0800539a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800539a:	b480      	push	{r7}
 800539c:	b087      	sub	sp, #28
 800539e:	af00      	add	r7, sp, #0
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	607a      	str	r2, [r7, #4]
 80053a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	021a      	lsls	r2, r3, #8
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	431a      	orrs	r2, r3
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	609a      	str	r2, [r3, #8]
}
 80053ce:	bf00      	nop
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bc80      	pop	{r7}
 80053d6:	4770      	bx	lr

080053d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d101      	bne.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053ec:	2302      	movs	r3, #2
 80053ee:	e041      	b.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005416:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a14      	ldr	r2, [pc, #80]	@ (8005480 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d009      	beq.n	8005448 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800543c:	d004      	beq.n	8005448 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a10      	ldr	r2, [pc, #64]	@ (8005484 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d10c      	bne.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800544e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	4313      	orrs	r3, r2
 8005458:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	bc80      	pop	{r7}
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40012c00 	.word	0x40012c00
 8005484:	40000400 	.word	0x40000400

08005488 <set_alarm>:
#include "AlarmReset.h"
#include "stm32f1xx_hal.h"

extern RTC_HandleTypeDef hrtc;

void set_alarm(uint8_t sec) {
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	4603      	mov	r3, r0
 8005490:	71fb      	strb	r3, [r7, #7]
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 8005492:	4b19      	ldr	r3, [pc, #100]	@ (80054f8 <set_alarm+0x70>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b02      	cmp	r3, #2
 800549c:	d10f      	bne.n	80054be <set_alarm+0x36>
		// MCU проснулся из Standby
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 800549e:	4b16      	ldr	r3, [pc, #88]	@ (80054f8 <set_alarm+0x70>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a15      	ldr	r2, [pc, #84]	@ (80054f8 <set_alarm+0x70>)
 80054a4:	f043 0308 	orr.w	r3, r3, #8
 80054a8:	6013      	str	r3, [r2, #0]
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80054aa:	4b13      	ldr	r3, [pc, #76]	@ (80054f8 <set_alarm+0x70>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a12      	ldr	r2, [pc, #72]	@ (80054f8 <set_alarm+0x70>)
 80054b0:	f043 0304 	orr.w	r3, r3, #4
 80054b4:	6013      	str	r3, [r2, #0]

		// ОЧИСТИТЬ БУДИЛЬНИК
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80054b6:	2100      	movs	r1, #0
 80054b8:	4810      	ldr	r0, [pc, #64]	@ (80054fc <set_alarm+0x74>)
 80054ba:	f7fe fc25 	bl	8003d08 <HAL_RTC_DeactivateAlarm>
	}

	RTC_AlarmTypeDef sAlarm = { 0 };
 80054be:	f107 0308 	add.w	r3, r7, #8
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	605a      	str	r2, [r3, #4]

	sAlarm.AlarmTime.Hours = 0;
 80054c8:	2300      	movs	r3, #0
 80054ca:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = 0;
 80054cc:	2300      	movs	r3, #0
 80054ce:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = sec;
 80054d0:	79fb      	ldrb	r3, [r7, #7]
 80054d2:	72bb      	strb	r3, [r7, #10]
	sAlarm.Alarm = RTC_ALARM_A;
 80054d4:	2300      	movs	r3, #0
 80054d6:	60fb      	str	r3, [r7, #12]
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 80054d8:	f107 0308 	add.w	r3, r7, #8
 80054dc:	2200      	movs	r2, #0
 80054de:	4619      	mov	r1, r3
 80054e0:	4806      	ldr	r0, [pc, #24]	@ (80054fc <set_alarm+0x74>)
 80054e2:	f7fe fb59 	bl	8003b98 <HAL_RTC_SetAlarm_IT>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <set_alarm+0x68>
		Error_Handler();
 80054ec:	f7fc f840 	bl	8001570 <Error_Handler>
	}

}
 80054f0:	bf00      	nop
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	40007000 	.word	0x40007000
 80054fc:	20000088 	.word	0x20000088

08005500 <get_battery_level>:

extern Battery_t Battery;

static uint8_t battery_percent_from_voltage(float);

Battery_t get_battery_level() {
 8005500:	b5b0      	push	{r4, r5, r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]

	HAL_ADC_Start(&hadc1);
 8005508:	4829      	ldr	r0, [pc, #164]	@ (80055b0 <get_battery_level+0xb0>)
 800550a:	f7fc fc31 	bl	8001d70 <HAL_ADC_Start>

	uint32_t adc_val;
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800550e:	f04f 31ff 	mov.w	r1, #4294967295
 8005512:	4827      	ldr	r0, [pc, #156]	@ (80055b0 <get_battery_level+0xb0>)
 8005514:	f7fc fd06 	bl	8001f24 <HAL_ADC_PollForConversion>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d103      	bne.n	8005526 <get_battery_level+0x26>
		adc_val = HAL_ADC_GetValue(&hadc1);
 800551e:	4824      	ldr	r0, [pc, #144]	@ (80055b0 <get_battery_level+0xb0>)
 8005520:	f7fc fe06 	bl	8002130 <HAL_ADC_GetValue>
 8005524:	60f8      	str	r0, [r7, #12]
	}

	HAL_ADC_Stop(&hadc1);
 8005526:	4822      	ldr	r0, [pc, #136]	@ (80055b0 <get_battery_level+0xb0>)
 8005528:	f7fc fcd0 	bl	8001ecc <HAL_ADC_Stop>
	 *  R2=3.3K
	 *  k=1.675
	 *  => Vmax = 2.7V
	 */

	float vref = 3.3f;
 800552c:	4b21      	ldr	r3, [pc, #132]	@ (80055b4 <get_battery_level+0xb4>)
 800552e:	60bb      	str	r3, [r7, #8]

	Battery.vdd = 1.22* vref * adc_val / 4096.0f;
 8005530:	68b8      	ldr	r0, [r7, #8]
 8005532:	f7fa ff71 	bl	8000418 <__aeabi_f2d>
 8005536:	a31c      	add	r3, pc, #112	@ (adr r3, 80055a8 <get_battery_level+0xa8>)
 8005538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553c:	f7fa ffc4 	bl	80004c8 <__aeabi_dmul>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4614      	mov	r4, r2
 8005546:	461d      	mov	r5, r3
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f7fa ff43 	bl	80003d4 <__aeabi_ui2d>
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	4620      	mov	r0, r4
 8005554:	4629      	mov	r1, r5
 8005556:	f7fa ffb7 	bl	80004c8 <__aeabi_dmul>
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	4610      	mov	r0, r2
 8005560:	4619      	mov	r1, r3
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	4b14      	ldr	r3, [pc, #80]	@ (80055b8 <get_battery_level+0xb8>)
 8005568:	f7fb f8d8 	bl	800071c <__aeabi_ddiv>
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	4610      	mov	r0, r2
 8005572:	4619      	mov	r1, r3
 8005574:	f7fb f9e2 	bl	800093c <__aeabi_d2f>
 8005578:	4603      	mov	r3, r0
 800557a:	4a10      	ldr	r2, [pc, #64]	@ (80055bc <get_battery_level+0xbc>)
 800557c:	6013      	str	r3, [r2, #0]

	Battery.charge_percent = battery_percent_from_voltage(Battery.vdd);
 800557e:	4b0f      	ldr	r3, [pc, #60]	@ (80055bc <get_battery_level+0xbc>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 f81c 	bl	80055c0 <battery_percent_from_voltage>
 8005588:	4603      	mov	r3, r0
 800558a:	461a      	mov	r2, r3
 800558c:	4b0b      	ldr	r3, [pc, #44]	@ (80055bc <get_battery_level+0xbc>)
 800558e:	711a      	strb	r2, [r3, #4]

	return Battery;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a0a      	ldr	r2, [pc, #40]	@ (80055bc <get_battery_level+0xbc>)
 8005594:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005598:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bdb0      	pop	{r4, r5, r7, pc}
 80055a4:	f3af 8000 	nop.w
 80055a8:	b851eb85 	.word	0xb851eb85
 80055ac:	3ff3851e 	.word	0x3ff3851e
 80055b0:	20000028 	.word	0x20000028
 80055b4:	40533333 	.word	0x40533333
 80055b8:	40b00000 	.word	0x40b00000
 80055bc:	20000148 	.word	0x20000148

080055c0 <battery_percent_from_voltage>:

static uint8_t battery_percent_from_voltage(float voltage) {
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]

	if (voltage >= 3.2f)
 80055c8:	4937      	ldr	r1, [pc, #220]	@ (80056a8 <battery_percent_from_voltage+0xe8>)
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7fb fcc6 	bl	8000f5c <__aeabi_fcmpge>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <battery_percent_from_voltage+0x1a>
		return 100;
 80055d6:	2364      	movs	r3, #100	@ 0x64
 80055d8:	e061      	b.n	800569e <battery_percent_from_voltage+0xde>
	else if (voltage >= 2.9f)
 80055da:	4934      	ldr	r1, [pc, #208]	@ (80056ac <battery_percent_from_voltage+0xec>)
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7fb fcbd 	bl	8000f5c <__aeabi_fcmpge>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d019      	beq.n	800561c <battery_percent_from_voltage+0x5c>
		return (uint8_t) (80 + (voltage - 2.9f) / 0.3f * 20);
 80055e8:	4930      	ldr	r1, [pc, #192]	@ (80056ac <battery_percent_from_voltage+0xec>)
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7fb f9fa 	bl	80009e4 <__aeabi_fsub>
 80055f0:	4603      	mov	r3, r0
 80055f2:	492f      	ldr	r1, [pc, #188]	@ (80056b0 <battery_percent_from_voltage+0xf0>)
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fb fbb3 	bl	8000d60 <__aeabi_fdiv>
 80055fa:	4603      	mov	r3, r0
 80055fc:	492d      	ldr	r1, [pc, #180]	@ (80056b4 <battery_percent_from_voltage+0xf4>)
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fb fafa 	bl	8000bf8 <__aeabi_fmul>
 8005604:	4603      	mov	r3, r0
 8005606:	492c      	ldr	r1, [pc, #176]	@ (80056b8 <battery_percent_from_voltage+0xf8>)
 8005608:	4618      	mov	r0, r3
 800560a:	f7fb f9ed 	bl	80009e8 <__addsf3>
 800560e:	4603      	mov	r3, r0
 8005610:	4618      	mov	r0, r3
 8005612:	f7fb fcb7 	bl	8000f84 <__aeabi_f2uiz>
 8005616:	4603      	mov	r3, r0
 8005618:	b2db      	uxtb	r3, r3
 800561a:	e040      	b.n	800569e <battery_percent_from_voltage+0xde>
	else if (voltage >= 2.5f)
 800561c:	4927      	ldr	r1, [pc, #156]	@ (80056bc <battery_percent_from_voltage+0xfc>)
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fb fc9c 	bl	8000f5c <__aeabi_fcmpge>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d019      	beq.n	800565e <battery_percent_from_voltage+0x9e>
		return (uint8_t) (20 + (voltage - 2.5f) / 0.4f * 60);
 800562a:	4924      	ldr	r1, [pc, #144]	@ (80056bc <battery_percent_from_voltage+0xfc>)
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7fb f9d9 	bl	80009e4 <__aeabi_fsub>
 8005632:	4603      	mov	r3, r0
 8005634:	4922      	ldr	r1, [pc, #136]	@ (80056c0 <battery_percent_from_voltage+0x100>)
 8005636:	4618      	mov	r0, r3
 8005638:	f7fb fb92 	bl	8000d60 <__aeabi_fdiv>
 800563c:	4603      	mov	r3, r0
 800563e:	4921      	ldr	r1, [pc, #132]	@ (80056c4 <battery_percent_from_voltage+0x104>)
 8005640:	4618      	mov	r0, r3
 8005642:	f7fb fad9 	bl	8000bf8 <__aeabi_fmul>
 8005646:	4603      	mov	r3, r0
 8005648:	491a      	ldr	r1, [pc, #104]	@ (80056b4 <battery_percent_from_voltage+0xf4>)
 800564a:	4618      	mov	r0, r3
 800564c:	f7fb f9cc 	bl	80009e8 <__addsf3>
 8005650:	4603      	mov	r3, r0
 8005652:	4618      	mov	r0, r3
 8005654:	f7fb fc96 	bl	8000f84 <__aeabi_f2uiz>
 8005658:	4603      	mov	r3, r0
 800565a:	b2db      	uxtb	r3, r3
 800565c:	e01f      	b.n	800569e <battery_percent_from_voltage+0xde>
	else if (voltage >= 2.0f)
 800565e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7fb fc7a 	bl	8000f5c <__aeabi_fcmpge>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d016      	beq.n	800569c <battery_percent_from_voltage+0xdc>
		return (uint8_t) ((voltage - 2.0f) / 0.5f * 20);
 800566e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7fb f9b6 	bl	80009e4 <__aeabi_fsub>
 8005678:	4603      	mov	r3, r0
 800567a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800567e:	4618      	mov	r0, r3
 8005680:	f7fb fb6e 	bl	8000d60 <__aeabi_fdiv>
 8005684:	4603      	mov	r3, r0
 8005686:	490b      	ldr	r1, [pc, #44]	@ (80056b4 <battery_percent_from_voltage+0xf4>)
 8005688:	4618      	mov	r0, r3
 800568a:	f7fb fab5 	bl	8000bf8 <__aeabi_fmul>
 800568e:	4603      	mov	r3, r0
 8005690:	4618      	mov	r0, r3
 8005692:	f7fb fc77 	bl	8000f84 <__aeabi_f2uiz>
 8005696:	4603      	mov	r3, r0
 8005698:	b2db      	uxtb	r3, r3
 800569a:	e000      	b.n	800569e <battery_percent_from_voltage+0xde>
	else
		return 0;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	404ccccd 	.word	0x404ccccd
 80056ac:	4039999a 	.word	0x4039999a
 80056b0:	3e99999a 	.word	0x3e99999a
 80056b4:	41a00000 	.word	0x41a00000
 80056b8:	42a00000 	.word	0x42a00000
 80056bc:	40200000 	.word	0x40200000
 80056c0:	3ecccccd 	.word	0x3ecccccd
 80056c4:	42700000 	.word	0x42700000

080056c8 <TIM2_Delay_us>:
#include <stdint.h>
#include "stm32f1xx_hal.h"

extern TIM_HandleTypeDef htim2;

void TIM2_Delay_us(uint32_t us) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]

	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80056d0:	4b0a      	ldr	r3, [pc, #40]	@ (80056fc <TIM2_Delay_us+0x34>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2200      	movs	r2, #0
 80056d6:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_Base_Start(&htim2);
 80056d8:	4808      	ldr	r0, [pc, #32]	@ (80056fc <TIM2_Delay_us+0x34>)
 80056da:	f7ff fc51 	bl	8004f80 <HAL_TIM_Base_Start>

	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 80056de:	bf00      	nop
 80056e0:	4b06      	ldr	r3, [pc, #24]	@ (80056fc <TIM2_Delay_us+0x34>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d8f9      	bhi.n	80056e0 <TIM2_Delay_us+0x18>
		;

	HAL_TIM_Base_Stop(&htim2);
 80056ec:	4803      	ldr	r0, [pc, #12]	@ (80056fc <TIM2_Delay_us+0x34>)
 80056ee:	f7ff fc8b 	bl	8005008 <HAL_TIM_Base_Stop>
}
 80056f2:	bf00      	nop
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	200000f4 	.word	0x200000f4

08005700 <get_infra_sensor_data>:
#include "BatteryLevel.h"
#include "main.h"

extern ADC_HandleTypeDef hadc2;

float get_infra_sensor_data(Battery_t Battery) {
 8005700:	b580      	push	{r7, lr}
 8005702:	b088      	sub	sp, #32
 8005704:	af00      	add	r7, sp, #0
 8005706:	463b      	mov	r3, r7
 8005708:	e883 0003 	stmia.w	r3, {r0, r1}

	//Sensor stabilization for 100ms
	HAL_GPIO_WritePin(V_LED_GPIO_Port, V_LED_Pin, GPIO_PIN_RESET);
 800570c:	2200      	movs	r2, #0
 800570e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005712:	4832      	ldr	r0, [pc, #200]	@ (80057dc <get_infra_sensor_data+0xdc>)
 8005714:	f7fd f9ea 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005718:	2064      	movs	r0, #100	@ 0x64
 800571a:	f7fc f94d 	bl	80019b8 <HAL_Delay>

	HAL_GPIO_WritePin(V_LED_GPIO_Port, V_LED_Pin, GPIO_PIN_SET);
 800571e:	2201      	movs	r2, #1
 8005720:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005724:	482d      	ldr	r0, [pc, #180]	@ (80057dc <get_infra_sensor_data+0xdc>)
 8005726:	f7fd f9e1 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800572a:	200a      	movs	r0, #10
 800572c:	f7fc f944 	bl	80019b8 <HAL_Delay>

	// Polling sensor 5 times
	uint32_t adc_V0 = 0;
 8005730:	2300      	movs	r3, #0
 8005732:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i <= 4; i++) {
 8005734:	2300      	movs	r3, #0
 8005736:	61bb      	str	r3, [r7, #24]
 8005738:	e031      	b.n	800579e <get_infra_sensor_data+0x9e>

		HAL_ADC_Start(&hadc2);
 800573a:	4829      	ldr	r0, [pc, #164]	@ (80057e0 <get_infra_sensor_data+0xe0>)
 800573c:	f7fc fb18 	bl	8001d70 <HAL_ADC_Start>

		HAL_GPIO_WritePin(V_LED_GPIO_Port, V_LED_Pin, GPIO_PIN_RESET);
 8005740:	2200      	movs	r2, #0
 8005742:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005746:	4825      	ldr	r0, [pc, #148]	@ (80057dc <get_infra_sensor_data+0xdc>)
 8005748:	f7fd f9d0 	bl	8002aec <HAL_GPIO_WritePin>

		TIM2_Delay_us(280);
 800574c:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8005750:	f7ff ffba 	bl	80056c8 <TIM2_Delay_us>

		if (HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK) {
 8005754:	f04f 31ff 	mov.w	r1, #4294967295
 8005758:	4821      	ldr	r0, [pc, #132]	@ (80057e0 <get_infra_sensor_data+0xe0>)
 800575a:	f7fc fbe3 	bl	8001f24 <HAL_ADC_PollForConversion>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d109      	bne.n	8005778 <get_infra_sensor_data+0x78>
			uint32_t v_temp = HAL_ADC_GetValue(&hadc2);
 8005764:	481e      	ldr	r0, [pc, #120]	@ (80057e0 <get_infra_sensor_data+0xe0>)
 8005766:	f7fc fce3 	bl	8002130 <HAL_ADC_GetValue>
 800576a:	60f8      	str	r0, [r7, #12]
			if (v_temp > adc_V0)
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	429a      	cmp	r2, r3
 8005772:	d901      	bls.n	8005778 <get_infra_sensor_data+0x78>
				adc_V0 = v_temp;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	61fb      	str	r3, [r7, #28]
		}

		TIM2_Delay_us(40);
 8005778:	2028      	movs	r0, #40	@ 0x28
 800577a:	f7ff ffa5 	bl	80056c8 <TIM2_Delay_us>

		HAL_GPIO_WritePin(V_LED_GPIO_Port, V_LED_Pin, GPIO_PIN_SET);
 800577e:	2201      	movs	r2, #1
 8005780:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005784:	4815      	ldr	r0, [pc, #84]	@ (80057dc <get_infra_sensor_data+0xdc>)
 8005786:	f7fd f9b1 	bl	8002aec <HAL_GPIO_WritePin>

		HAL_ADC_Stop(&hadc2);
 800578a:	4815      	ldr	r0, [pc, #84]	@ (80057e0 <get_infra_sensor_data+0xe0>)
 800578c:	f7fc fb9e 	bl	8001ecc <HAL_ADC_Stop>

		TIM2_Delay_us(10000 - 280 - 40);
 8005790:	f242 50d0 	movw	r0, #9680	@ 0x25d0
 8005794:	f7ff ff98 	bl	80056c8 <TIM2_Delay_us>
	for (int i = 0; i <= 4; i++) {
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	3301      	adds	r3, #1
 800579c:	61bb      	str	r3, [r7, #24]
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	2b04      	cmp	r3, #4
 80057a2:	ddca      	ble.n	800573a <get_infra_sensor_data+0x3a>
	}

	float Vin = adc_V0 * Battery.vdd / 4096.0f;
 80057a4:	69f8      	ldr	r0, [r7, #28]
 80057a6:	f7fb f9cf 	bl	8000b48 <__aeabi_ui2f>
 80057aa:	4602      	mov	r2, r0
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	4619      	mov	r1, r3
 80057b0:	4610      	mov	r0, r2
 80057b2:	f7fb fa21 	bl	8000bf8 <__aeabi_fmul>
 80057b6:	4603      	mov	r3, r0
 80057b8:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80057bc:	4618      	mov	r0, r3
 80057be:	f7fb facf 	bl	8000d60 <__aeabi_fdiv>
 80057c2:	4603      	mov	r3, r0
 80057c4:	617b      	str	r3, [r7, #20]
	float sensor_data = Vin * 1.67f;
 80057c6:	4907      	ldr	r1, [pc, #28]	@ (80057e4 <get_infra_sensor_data+0xe4>)
 80057c8:	6978      	ldr	r0, [r7, #20]
 80057ca:	f7fb fa15 	bl	8000bf8 <__aeabi_fmul>
 80057ce:	4603      	mov	r3, r0
 80057d0:	613b      	str	r3, [r7, #16]

	return sensor_data;
 80057d2:	693b      	ldr	r3, [r7, #16]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3720      	adds	r7, #32
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	40010c00 	.word	0x40010c00
 80057e0:	20000058 	.word	0x20000058
 80057e4:	3fd5c28f 	.word	0x3fd5c28f

080057e8 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80057e8:	b4b0      	push	{r4, r5, r7}
 80057ea:	b08f      	sub	sp, #60	@ 0x3c
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80057f0:	f240 13b1 	movw	r3, #433	@ 0x1b1
 80057f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80057f6:	2307      	movs	r3, #7
 80057f8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80057fc:	2307      	movs	r3, #7
 80057fe:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8005802:	2301      	movs	r3, #1
 8005804:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8005808:	23ff      	movs	r3, #255	@ 0xff
 800580a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 800580e:	2364      	movs	r3, #100	@ 0x64
 8005810:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8005814:	2308      	movs	r3, #8
 8005816:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	461d      	mov	r5, r3
 800581c:	f107 040c 	add.w	r4, r7, #12
 8005820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005828:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800582c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	373c      	adds	r7, #60	@ 0x3c
 8005834:	46bd      	mov	sp, r7
 8005836:	bcb0      	pop	{r4, r5, r7}
 8005838:	4770      	bx	lr

0800583a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800583a:	b580      	push	{r7, lr}
 800583c:	b084      	sub	sp, #16
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8005844:	2101      	movs	r1, #1
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f9ff 	bl	8005c4a <LoRa_read>
 800584c:	4603      	mov	r3, r0
 800584e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8005850:	7bbb      	ldrb	r3, [r7, #14]
 8005852:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d107      	bne.n	800586a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800585a:	7bbb      	ldrb	r3, [r7, #14]
 800585c:	f023 0307 	bic.w	r3, r3, #7
 8005860:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	61da      	str	r2, [r3, #28]
 8005868:	e03e      	b.n	80058e8 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d10c      	bne.n	800588a <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8005870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005874:	f023 0307 	bic.w	r3, r3, #7
 8005878:	b25b      	sxtb	r3, r3
 800587a:	f043 0301 	orr.w	r3, r3, #1
 800587e:	b25b      	sxtb	r3, r3
 8005880:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	61da      	str	r2, [r3, #28]
 8005888:	e02e      	b.n	80058e8 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b03      	cmp	r3, #3
 800588e:	d10c      	bne.n	80058aa <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8005890:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005894:	f023 0307 	bic.w	r3, r3, #7
 8005898:	b25b      	sxtb	r3, r3
 800589a:	f043 0303 	orr.w	r3, r3, #3
 800589e:	b25b      	sxtb	r3, r3
 80058a0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2203      	movs	r2, #3
 80058a6:	61da      	str	r2, [r3, #28]
 80058a8:	e01e      	b.n	80058e8 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b05      	cmp	r3, #5
 80058ae:	d10c      	bne.n	80058ca <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80058b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058b4:	f023 0307 	bic.w	r3, r3, #7
 80058b8:	b25b      	sxtb	r3, r3
 80058ba:	f043 0305 	orr.w	r3, r3, #5
 80058be:	b25b      	sxtb	r3, r3
 80058c0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2205      	movs	r2, #5
 80058c6:	61da      	str	r2, [r3, #28]
 80058c8:	e00e      	b.n	80058e8 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b06      	cmp	r3, #6
 80058ce:	d10b      	bne.n	80058e8 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80058d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058d4:	f023 0307 	bic.w	r3, r3, #7
 80058d8:	b25b      	sxtb	r3, r3
 80058da:	f043 0306 	orr.w	r3, r3, #6
 80058de:	b25b      	sxtb	r3, r3
 80058e0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2206      	movs	r2, #6
 80058e6:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	461a      	mov	r2, r3
 80058ec:	2101      	movs	r1, #1
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f9c5 	bl	8005c7e <LoRa_write>
	//HAL_Delay(10);
}
 80058f4:	bf00      	nop
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	603b      	str	r3, [r7, #0]
 8005908:	4613      	mov	r3, r2
 800590a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6818      	ldr	r0, [r3, #0]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	889b      	ldrh	r3, [r3, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	4619      	mov	r1, r3
 8005918:	f7fd f8e8 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6998      	ldr	r0, [r3, #24]
 8005920:	88fa      	ldrh	r2, [r7, #6]
 8005922:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005926:	68b9      	ldr	r1, [r7, #8]
 8005928:	f7fe fdbd 	bl	80044a6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800592c:	bf00      	nop
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	4618      	mov	r0, r3
 8005934:	f7ff f9bd 	bl	8004cb2 <HAL_SPI_GetState>
 8005938:	4603      	mov	r3, r0
 800593a:	2b01      	cmp	r3, #1
 800593c:	d1f7      	bne.n	800592e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6998      	ldr	r0, [r3, #24]
 8005942:	8b3a      	ldrh	r2, [r7, #24]
 8005944:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005948:	6839      	ldr	r1, [r7, #0]
 800594a:	f7fe fef0 	bl	800472e <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800594e:	bf00      	nop
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	4618      	mov	r0, r3
 8005956:	f7ff f9ac 	bl	8004cb2 <HAL_SPI_GetState>
 800595a:	4603      	mov	r3, r0
 800595c:	2b01      	cmp	r3, #1
 800595e:	d1f7      	bne.n	8005950 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6818      	ldr	r0, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	889b      	ldrh	r3, [r3, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	4619      	mov	r1, r3
 800596c:	f7fd f8be 	bl	8002aec <HAL_GPIO_WritePin>
}
 8005970:	bf00      	nop
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	603b      	str	r3, [r7, #0]
 8005984:	4613      	mov	r3, r2
 8005986:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6818      	ldr	r0, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	889b      	ldrh	r3, [r3, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	4619      	mov	r1, r3
 8005994:	f7fd f8aa 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6998      	ldr	r0, [r3, #24]
 800599c:	88fa      	ldrh	r2, [r7, #6]
 800599e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80059a2:	68b9      	ldr	r1, [r7, #8]
 80059a4:	f7fe fd7f 	bl	80044a6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80059a8:	bf00      	nop
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7ff f97f 	bl	8004cb2 <HAL_SPI_GetState>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d1f7      	bne.n	80059aa <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6998      	ldr	r0, [r3, #24]
 80059be:	8b3a      	ldrh	r2, [r7, #24]
 80059c0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80059c4:	6839      	ldr	r1, [r7, #0]
 80059c6:	f7fe fd6e 	bl	80044a6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80059ca:	bf00      	nop
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7ff f96e 	bl	8004cb2 <HAL_SPI_GetState>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d1f7      	bne.n	80059cc <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6818      	ldr	r0, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	889b      	ldrh	r3, [r3, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	4619      	mov	r1, r3
 80059e8:	f7fd f880 	bl	8002aec <HAL_GPIO_WritePin>
}
 80059ec:	bf00      	nop
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	460b      	mov	r3, r1
 80059fe:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8005a00:	2126      	movs	r1, #38	@ 0x26
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f921 	bl	8005c4a <LoRa_read>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8005a0c:	78fb      	ldrb	r3, [r7, #3]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d004      	beq.n	8005a1c <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8005a12:	7bbb      	ldrb	r3, [r7, #14]
 8005a14:	f043 0308 	orr.w	r3, r3, #8
 8005a18:	73fb      	strb	r3, [r7, #15]
 8005a1a:	e003      	b.n	8005a24 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8005a1c:	7bbb      	ldrb	r3, [r7, #14]
 8005a1e:	f023 0308 	bic.w	r3, r3, #8
 8005a22:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
 8005a26:	461a      	mov	r2, r3
 8005a28:	2126      	movs	r1, #38	@ 0x26
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f927 	bl	8005c7e <LoRa_write>
	HAL_Delay(10);
 8005a30:	200a      	movs	r0, #10
 8005a32:	f7fb ffc1 	bl	80019b8 <HAL_Delay>
}
 8005a36:	bf00      	nop
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
	...

08005a40 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b096      	sub	sp, #88	@ 0x58
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8005a48:	4a17      	ldr	r2, [pc, #92]	@ (8005aa8 <LoRa_setAutoLDO+0x68>)
 8005a4a:	f107 0308 	add.w	r3, r7, #8
 8005a4e:	4611      	mov	r1, r2
 8005a50:	2250      	movs	r2, #80	@ 0x50
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 fb2e 	bl	80060b4 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005a5e:	461a      	mov	r2, r3
 8005a60:	2301      	movs	r3, #1
 8005a62:	4093      	lsls	r3, r2
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fa fcc5 	bl	80003f4 <__aeabi_i2d>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005a70:	00db      	lsls	r3, r3, #3
 8005a72:	3358      	adds	r3, #88	@ 0x58
 8005a74:	443b      	add	r3, r7
 8005a76:	3b50      	subs	r3, #80	@ 0x50
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	f7fa fe4e 	bl	800071c <__aeabi_ddiv>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4610      	mov	r0, r2
 8005a86:	4619      	mov	r1, r3
 8005a88:	f7fa ff30 	bl	80008ec <__aeabi_d2iz>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b10      	cmp	r3, #16
 8005a90:	bfcc      	ite	gt
 8005a92:	2301      	movgt	r3, #1
 8005a94:	2300      	movle	r3, #0
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff ffaa 	bl	80059f4 <LoRa_setLowDaraRateOptimization>
}
 8005aa0:	bf00      	nop
 8005aa2:	3758      	adds	r7, #88	@ 0x58
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	080060e8 	.word	0x080060e8

08005aac <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	04db      	lsls	r3, r3, #19
 8005aba:	115b      	asrs	r3, r3, #5
 8005abc:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	0c1b      	lsrs	r3, r3, #16
 8005ac2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8005ac4:	7afb      	ldrb	r3, [r7, #11]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	2106      	movs	r1, #6
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f8d7 	bl	8005c7e <LoRa_write>
	HAL_Delay(5);
 8005ad0:	2005      	movs	r0, #5
 8005ad2:	f7fb ff71 	bl	80019b8 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	0a1b      	lsrs	r3, r3, #8
 8005ada:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8005adc:	7afb      	ldrb	r3, [r7, #11]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	2107      	movs	r1, #7
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f8cb 	bl	8005c7e <LoRa_write>
	HAL_Delay(5);
 8005ae8:	2005      	movs	r0, #5
 8005aea:	f7fb ff65 	bl	80019b8 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8005af2:	7afb      	ldrb	r3, [r7, #11]
 8005af4:	461a      	mov	r2, r3
 8005af6:	2108      	movs	r1, #8
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f8c0 	bl	8005c7e <LoRa_write>
	HAL_Delay(5);
 8005afe:	2005      	movs	r0, #5
 8005b00:	f7fb ff5a 	bl	80019b8 <HAL_Delay>
}
 8005b04:	bf00      	nop
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b0c      	cmp	r3, #12
 8005b1a:	dd01      	ble.n	8005b20 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8005b1c:	230c      	movs	r3, #12
 8005b1e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2b06      	cmp	r3, #6
 8005b24:	dc01      	bgt.n	8005b2a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8005b26:	2307      	movs	r3, #7
 8005b28:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8005b2a:	211e      	movs	r1, #30
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f88c 	bl	8005c4a <LoRa_read>
 8005b32:	4603      	mov	r3, r0
 8005b34:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8005b36:	200a      	movs	r0, #10
 8005b38:	f7fb ff3e 	bl	80019b8 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	011b      	lsls	r3, r3, #4
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	4413      	add	r3, r2
 8005b4e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8005b50:	7bbb      	ldrb	r3, [r7, #14]
 8005b52:	461a      	mov	r2, r3
 8005b54:	211e      	movs	r1, #30
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f891 	bl	8005c7e <LoRa_write>
	HAL_Delay(10);
 8005b5c:	200a      	movs	r0, #10
 8005b5e:	f7fb ff2b 	bl	80019b8 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff ff6c 	bl	8005a40 <LoRa_setAutoLDO>
}
 8005b68:	bf00      	nop
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8005b7c:	78fb      	ldrb	r3, [r7, #3]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	2109      	movs	r1, #9
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f87b 	bl	8005c7e <LoRa_write>
	HAL_Delay(10);
 8005b88:	200a      	movs	r0, #10
 8005b8a:	f7fb ff15 	bl	80019b8 <HAL_Delay>
}
 8005b8e:	bf00      	nop
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
	...

08005b98 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	2b2c      	cmp	r3, #44	@ 0x2c
 8005bac:	d801      	bhi.n	8005bb2 <LoRa_setOCP+0x1a>
		current = 45;
 8005bae:	232d      	movs	r3, #45	@ 0x2d
 8005bb0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8005bb2:	78fb      	ldrb	r3, [r7, #3]
 8005bb4:	2bf0      	cmp	r3, #240	@ 0xf0
 8005bb6:	d901      	bls.n	8005bbc <LoRa_setOCP+0x24>
		current = 240;
 8005bb8:	23f0      	movs	r3, #240	@ 0xf0
 8005bba:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8005bbc:	78fb      	ldrb	r3, [r7, #3]
 8005bbe:	2b78      	cmp	r3, #120	@ 0x78
 8005bc0:	d809      	bhi.n	8005bd6 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8005bc2:	78fb      	ldrb	r3, [r7, #3]
 8005bc4:	3b2d      	subs	r3, #45	@ 0x2d
 8005bc6:	4a12      	ldr	r2, [pc, #72]	@ (8005c10 <LoRa_setOCP+0x78>)
 8005bc8:	fb82 1203 	smull	r1, r2, r2, r3
 8005bcc:	1052      	asrs	r2, r2, #1
 8005bce:	17db      	asrs	r3, r3, #31
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	73fb      	strb	r3, [r7, #15]
 8005bd4:	e00b      	b.n	8005bee <LoRa_setOCP+0x56>
	else if(current <= 240)
 8005bd6:	78fb      	ldrb	r3, [r7, #3]
 8005bd8:	2bf0      	cmp	r3, #240	@ 0xf0
 8005bda:	d808      	bhi.n	8005bee <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8005bdc:	78fb      	ldrb	r3, [r7, #3]
 8005bde:	331e      	adds	r3, #30
 8005be0:	4a0b      	ldr	r2, [pc, #44]	@ (8005c10 <LoRa_setOCP+0x78>)
 8005be2:	fb82 1203 	smull	r1, r2, r2, r3
 8005be6:	1092      	asrs	r2, r2, #2
 8005be8:	17db      	asrs	r3, r3, #31
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
 8005bf0:	3320      	adds	r3, #32
 8005bf2:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	210b      	movs	r1, #11
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f83f 	bl	8005c7e <LoRa_write>
	HAL_Delay(10);
 8005c00:	200a      	movs	r0, #10
 8005c02:	f7fb fed9 	bl	80019b8 <HAL_Delay>
}
 8005c06:	bf00      	nop
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	66666667 	.word	0x66666667

08005c14 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8005c1c:	211e      	movs	r1, #30
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f813 	bl	8005c4a <LoRa_read>
 8005c24:	4603      	mov	r3, r0
 8005c26:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
 8005c2a:	f043 0307 	orr.w	r3, r3, #7
 8005c2e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8005c30:	7bbb      	ldrb	r3, [r7, #14]
 8005c32:	461a      	mov	r2, r3
 8005c34:	211e      	movs	r1, #30
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f821 	bl	8005c7e <LoRa_write>
	HAL_Delay(10);
 8005c3c:	200a      	movs	r0, #10
 8005c3e:	f7fb febb 	bl	80019b8 <HAL_Delay>
}
 8005c42:	bf00      	nop
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b086      	sub	sp, #24
 8005c4e:	af02      	add	r7, sp, #8
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	460b      	mov	r3, r1
 8005c54:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8005c56:	78fb      	ldrb	r3, [r7, #3]
 8005c58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8005c60:	f107 030f 	add.w	r3, r7, #15
 8005c64:	f107 010e 	add.w	r1, r7, #14
 8005c68:	2201      	movs	r2, #1
 8005c6a:	9200      	str	r2, [sp, #0]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7ff fe44 	bl	80058fc <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b086      	sub	sp, #24
 8005c82:	af02      	add	r7, sp, #8
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	460b      	mov	r3, r1
 8005c88:	70fb      	strb	r3, [r7, #3]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8005c8e:	78fb      	ldrb	r3, [r7, #3]
 8005c90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	73bb      	strb	r3, [r7, #14]
	data = value;
 8005c98:	78bb      	ldrb	r3, [r7, #2]
 8005c9a:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8005c9c:	f107 030f 	add.w	r3, r7, #15
 8005ca0:	f107 010e 	add.w	r1, r7, #14
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	9200      	str	r2, [sp, #0]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7ff fe64 	bl	8005978 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8005cb0:	bf00      	nop
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	607a      	str	r2, [r7, #4]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	72fb      	strb	r3, [r7, #11]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8005ccc:	7afb      	ldrb	r3, [r7, #11]
 8005cce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	889b      	ldrh	r3, [r3, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	f7fc ff03 	bl	8002aec <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6998      	ldr	r0, [r3, #24]
 8005cea:	f107 0117 	add.w	r1, r7, #23
 8005cee:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f7fe fbd7 	bl	80044a6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8005cf8:	bf00      	nop
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fe ffd7 	bl	8004cb2 <HAL_SPI_GetState>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d1f7      	bne.n	8005cfa <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6998      	ldr	r0, [r3, #24]
 8005d0e:	7abb      	ldrb	r3, [r7, #10]
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	f7fe fbc5 	bl	80044a6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8005d1c:	bf00      	nop
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fe ffc5 	bl	8004cb2 <HAL_SPI_GetState>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d1f7      	bne.n	8005d1e <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6818      	ldr	r0, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	889b      	ldrh	r3, [r3, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	4619      	mov	r1, r3
 8005d3a:	f7fc fed7 	bl	8002aec <HAL_GPIO_WritePin>
}
 8005d3e:	bf00      	nop
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]

	return 1;
 8005d4e:	2301      	movs	r3, #1
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bc80      	pop	{r7}
 8005d58:	4770      	bx	lr

08005d5a <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b086      	sub	sp, #24
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	4611      	mov	r1, r2
 8005d66:	461a      	mov	r2, r3
 8005d68:	460b      	mov	r3, r1
 8005d6a:	71fb      	strb	r3, [r7, #7]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8005d76:	2101      	movs	r1, #1
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f7ff fd5e 	bl	800583a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8005d7e:	210e      	movs	r1, #14
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f7ff ff62 	bl	8005c4a <LoRa_read>
 8005d86:	4603      	mov	r3, r0
 8005d88:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8005d8a:	7cfb      	ldrb	r3, [r7, #19]
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	210d      	movs	r1, #13
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f7ff ff74 	bl	8005c7e <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8005d96:	79fb      	ldrb	r3, [r7, #7]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	2122      	movs	r1, #34	@ 0x22
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f7ff ff6e 	bl	8005c7e <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	2100      	movs	r1, #0
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f7ff ff85 	bl	8005cb8 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8005dae:	2103      	movs	r1, #3
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f7ff fd42 	bl	800583a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8005db6:	2112      	movs	r1, #18
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f7ff ff46 	bl	8005c4a <LoRa_read>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8005dc2:	7cfb      	ldrb	r3, [r7, #19]
 8005dc4:	f003 0308 	and.w	r3, r3, #8
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00a      	beq.n	8005de2 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8005dcc:	22ff      	movs	r2, #255	@ 0xff
 8005dce:	2112      	movs	r1, #18
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f7ff ff54 	bl	8005c7e <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8005dd6:	6979      	ldr	r1, [r7, #20]
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f7ff fd2e 	bl	800583a <LoRa_gotoMode>
			return 1;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e00f      	b.n	8005e02 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8005de2:	88bb      	ldrh	r3, [r7, #4]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	80bb      	strh	r3, [r7, #4]
 8005de8:	88bb      	ldrh	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d105      	bne.n	8005dfa <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8005dee:	6979      	ldr	r1, [r7, #20]
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f7ff fd22 	bl	800583a <LoRa_gotoMode>
				return 0;
 8005df6:	2300      	movs	r3, #0
 8005df8:	e003      	b.n	8005e02 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8005dfa:	2001      	movs	r0, #1
 8005dfc:	f7fb fddc 	bl	80019b8 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8005e00:	e7d9      	b.n	8005db6 <LoRa_transmit+0x5c>
	}
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7ff ff97 	bl	8005d46 <LoRa_isvalid>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 8096 	beq.w	8005f4c <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8005e20:	2100      	movs	r1, #0
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff fd09 	bl	800583a <LoRa_gotoMode>
			HAL_Delay(10);
 8005e28:	200a      	movs	r0, #10
 8005e2a:	f7fb fdc5 	bl	80019b8 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8005e2e:	2101      	movs	r1, #1
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff ff0a 	bl	8005c4a <LoRa_read>
 8005e36:	4603      	mov	r3, r0
 8005e38:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8005e3a:	200a      	movs	r0, #10
 8005e3c:	f7fb fdbc 	bl	80019b8 <HAL_Delay>
			data = read | 0x80;
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e46:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8005e48:	7bbb      	ldrb	r3, [r7, #14]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff ff15 	bl	8005c7e <LoRa_write>
			HAL_Delay(100);
 8005e54:	2064      	movs	r0, #100	@ 0x64
 8005e56:	f7fb fdaf 	bl	80019b8 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7ff fe23 	bl	8005aac <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7ff fe7e 	bl	8005b70 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff fe8b 	bl	8005b98 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8005e82:	2223      	movs	r2, #35	@ 0x23
 8005e84:	210c      	movs	r1, #12
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff fef9 	bl	8005c7e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7ff fec1 	bl	8005c14 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e98:	4619      	mov	r1, r3
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7ff fe36 	bl	8005b0c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8005ea0:	22ff      	movs	r2, #255	@ 0xff
 8005ea2:	211f      	movs	r1, #31
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7ff feea 	bl	8005c7e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	4413      	add	r3, r2
 8005ec4:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8005ec6:	7bbb      	ldrb	r3, [r7, #14]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	211d      	movs	r1, #29
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff fed6 	bl	8005c7e <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7ff fdb4 	bl	8005a40 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005edc:	0a1b      	lsrs	r3, r3, #8
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	2120      	movs	r1, #32
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff fec9 	bl	8005c7e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	2121      	movs	r1, #33	@ 0x21
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff fec1 	bl	8005c7e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8005efc:	2140      	movs	r1, #64	@ 0x40
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7ff fea3 	bl	8005c4a <LoRa_read>
 8005f04:	4603      	mov	r3, r0
 8005f06:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8005f0e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8005f10:	7bbb      	ldrb	r3, [r7, #14]
 8005f12:	461a      	mov	r2, r3
 8005f14:	2140      	movs	r1, #64	@ 0x40
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7ff feb1 	bl	8005c7e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7ff fc8b 	bl	800583a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8005f2a:	200a      	movs	r0, #10
 8005f2c:	f7fb fd44 	bl	80019b8 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8005f30:	2142      	movs	r1, #66	@ 0x42
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff fe89 	bl	8005c4a <LoRa_read>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
 8005f3e:	2b12      	cmp	r3, #18
 8005f40:	d101      	bne.n	8005f46 <LoRa_init+0x13c>
				return LORA_OK;
 8005f42:	23c8      	movs	r3, #200	@ 0xc8
 8005f44:	e004      	b.n	8005f50 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8005f46:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8005f4a:	e001      	b.n	8005f50 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8005f4c:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <init_LoRa>:

extern SPI_HandleTypeDef hspi1;

static LoRa myLoRa;

static void init_LoRa() {
 8005f58:	b5b0      	push	{r4, r5, r7, lr}
 8005f5a:	b08c      	sub	sp, #48	@ 0x30
 8005f5c:	af00      	add	r7, sp, #0
	myLoRa = newLoRa();
 8005f5e:	4c23      	ldr	r4, [pc, #140]	@ (8005fec <init_LoRa+0x94>)
 8005f60:	463b      	mov	r3, r7
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7ff fc40 	bl	80057e8 <newLoRa>
 8005f68:	4625      	mov	r5, r4
 8005f6a:	463c      	mov	r4, r7
 8005f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f74:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005f78:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	myLoRa.CS_port = NSS_SIGNAL_GPIO_Port;
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fec <init_LoRa+0x94>)
 8005f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ff0 <init_LoRa+0x98>)
 8005f80:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin = NSS_SIGNAL_Pin;
 8005f82:	4b1a      	ldr	r3, [pc, #104]	@ (8005fec <init_LoRa+0x94>)
 8005f84:	2210      	movs	r2, #16
 8005f86:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port = RST_SIGNAL_GPIO_Port;
 8005f88:	4b18      	ldr	r3, [pc, #96]	@ (8005fec <init_LoRa+0x94>)
 8005f8a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ff4 <init_LoRa+0x9c>)
 8005f8c:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin = RST_SIGNAL_Pin;
 8005f8e:	4b17      	ldr	r3, [pc, #92]	@ (8005fec <init_LoRa+0x94>)
 8005f90:	2202      	movs	r2, #2
 8005f92:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port = DIO0_INT_GPIO_Port;
 8005f94:	4b15      	ldr	r3, [pc, #84]	@ (8005fec <init_LoRa+0x94>)
 8005f96:	4a17      	ldr	r2, [pc, #92]	@ (8005ff4 <init_LoRa+0x9c>)
 8005f98:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin = DIO0_INT_Pin;
 8005f9a:	4b14      	ldr	r3, [pc, #80]	@ (8005fec <init_LoRa+0x94>)
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx = &hspi1;
 8005fa0:	4b12      	ldr	r3, [pc, #72]	@ (8005fec <init_LoRa+0x94>)
 8005fa2:	4a15      	ldr	r2, [pc, #84]	@ (8005ff8 <init_LoRa+0xa0>)
 8005fa4:	619a      	str	r2, [r3, #24]

	myLoRa.frequency = 433;             // default = 433 MHz
 8005fa6:	4b11      	ldr	r3, [pc, #68]	@ (8005fec <init_LoRa+0x94>)
 8005fa8:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8005fac:	621a      	str	r2, [r3, #32]
//	myLoRa.spredingFactor = SF_12;            // default = SF_7
	myLoRa.bandWidth = BW_125KHz;       // default = BW_125KHz
 8005fae:	4b0f      	ldr	r3, [pc, #60]	@ (8005fec <init_LoRa+0x94>)
 8005fb0:	2207      	movs	r2, #7
 8005fb2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	myLoRa.crcRate = CR_4_8;          // default = CR_4_5
 8005fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005fec <init_LoRa+0x94>)
 8005fb8:	2204      	movs	r2, #4
 8005fba:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	myLoRa.power = POWER_17db;      // default = 20db
 8005fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8005fec <init_LoRa+0x94>)
 8005fc0:	22fc      	movs	r2, #252	@ 0xfc
 8005fc2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	myLoRa.overCurrentProtection = 130;             // default = 100 mA
 8005fc6:	4b09      	ldr	r3, [pc, #36]	@ (8005fec <init_LoRa+0x94>)
 8005fc8:	2282      	movs	r2, #130	@ 0x82
 8005fca:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	myLoRa.preamble = 12;              // default = 8;
 8005fce:	4b07      	ldr	r3, [pc, #28]	@ (8005fec <init_LoRa+0x94>)
 8005fd0:	220c      	movs	r2, #12
 8005fd2:	851a      	strh	r2, [r3, #40]	@ 0x28

	while (LoRa_init(&myLoRa) != 200)
 8005fd4:	bf00      	nop
 8005fd6:	4805      	ldr	r0, [pc, #20]	@ (8005fec <init_LoRa+0x94>)
 8005fd8:	f7ff ff17 	bl	8005e0a <LoRa_init>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2bc8      	cmp	r3, #200	@ 0xc8
 8005fe0:	d1f9      	bne.n	8005fd6 <init_LoRa+0x7e>
		;
}
 8005fe2:	bf00      	nop
 8005fe4:	bf00      	nop
 8005fe6:	3730      	adds	r7, #48	@ 0x30
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bdb0      	pop	{r4, r5, r7, pc}
 8005fec:	20000160 	.word	0x20000160
 8005ff0:	40010800 	.word	0x40010800
 8005ff4:	40010c00 	.word	0x40010c00
 8005ff8:	2000009c 	.word	0x2000009c

08005ffc <send_packet>:

void send_packet(SendPacket_t packet) {
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	1d3b      	adds	r3, r7, #4
 8006004:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	init_LoRa();
 8006008:	f7ff ffa6 	bl	8005f58 <init_LoRa>

	LoRa_transmit(&myLoRa, (uint8_t*) &packet, sizeof(SendPacket_t), 100);
 800600c:	1d39      	adds	r1, r7, #4
 800600e:	2364      	movs	r3, #100	@ 0x64
 8006010:	220c      	movs	r2, #12
 8006012:	4803      	ldr	r0, [pc, #12]	@ (8006020 <send_packet+0x24>)
 8006014:	f7ff fea1 	bl	8005d5a <LoRa_transmit>
}
 8006018:	bf00      	nop
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	20000160 	.word	0x20000160

08006024 <get_serial_number>:
 */

#include "SerialNumber.h"
#include "stm32f1xx_hal.h"

SerialNumber_t get_serial_number() {
 8006024:	b590      	push	{r4, r7, lr}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]

	SerialNumber_t Serial;

	Serial.byte_0 = HAL_GetUIDw0();
 800602c:	f7fb fce8 	bl	8001a00 <HAL_GetUIDw0>
 8006030:	4603      	mov	r3, r0
 8006032:	60fb      	str	r3, [r7, #12]
	Serial.byte_1 = HAL_GetUIDw1();
 8006034:	f7fb fcee 	bl	8001a14 <HAL_GetUIDw1>
 8006038:	4603      	mov	r3, r0
 800603a:	613b      	str	r3, [r7, #16]
	Serial.byte_2 = HAL_GetUIDw2();
 800603c:	f7fb fcf4 	bl	8001a28 <HAL_GetUIDw2>
 8006040:	4603      	mov	r3, r0
 8006042:	617b      	str	r3, [r7, #20]

	return Serial;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	461c      	mov	r4, r3
 8006048:	f107 030c 	add.w	r3, r7, #12
 800604c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006050:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	371c      	adds	r7, #28
 8006058:	46bd      	mov	sp, r7
 800605a:	bd90      	pop	{r4, r7, pc}

0800605c <memset>:
 800605c:	4603      	mov	r3, r0
 800605e:	4402      	add	r2, r0
 8006060:	4293      	cmp	r3, r2
 8006062:	d100      	bne.n	8006066 <memset+0xa>
 8006064:	4770      	bx	lr
 8006066:	f803 1b01 	strb.w	r1, [r3], #1
 800606a:	e7f9      	b.n	8006060 <memset+0x4>

0800606c <__libc_init_array>:
 800606c:	b570      	push	{r4, r5, r6, lr}
 800606e:	2600      	movs	r6, #0
 8006070:	4d0c      	ldr	r5, [pc, #48]	@ (80060a4 <__libc_init_array+0x38>)
 8006072:	4c0d      	ldr	r4, [pc, #52]	@ (80060a8 <__libc_init_array+0x3c>)
 8006074:	1b64      	subs	r4, r4, r5
 8006076:	10a4      	asrs	r4, r4, #2
 8006078:	42a6      	cmp	r6, r4
 800607a:	d109      	bne.n	8006090 <__libc_init_array+0x24>
 800607c:	f000 f828 	bl	80060d0 <_init>
 8006080:	2600      	movs	r6, #0
 8006082:	4d0a      	ldr	r5, [pc, #40]	@ (80060ac <__libc_init_array+0x40>)
 8006084:	4c0a      	ldr	r4, [pc, #40]	@ (80060b0 <__libc_init_array+0x44>)
 8006086:	1b64      	subs	r4, r4, r5
 8006088:	10a4      	asrs	r4, r4, #2
 800608a:	42a6      	cmp	r6, r4
 800608c:	d105      	bne.n	800609a <__libc_init_array+0x2e>
 800608e:	bd70      	pop	{r4, r5, r6, pc}
 8006090:	f855 3b04 	ldr.w	r3, [r5], #4
 8006094:	4798      	blx	r3
 8006096:	3601      	adds	r6, #1
 8006098:	e7ee      	b.n	8006078 <__libc_init_array+0xc>
 800609a:	f855 3b04 	ldr.w	r3, [r5], #4
 800609e:	4798      	blx	r3
 80060a0:	3601      	adds	r6, #1
 80060a2:	e7f2      	b.n	800608a <__libc_init_array+0x1e>
 80060a4:	08006178 	.word	0x08006178
 80060a8:	08006178 	.word	0x08006178
 80060ac:	08006178 	.word	0x08006178
 80060b0:	0800617c 	.word	0x0800617c

080060b4 <memcpy>:
 80060b4:	440a      	add	r2, r1
 80060b6:	4291      	cmp	r1, r2
 80060b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80060bc:	d100      	bne.n	80060c0 <memcpy+0xc>
 80060be:	4770      	bx	lr
 80060c0:	b510      	push	{r4, lr}
 80060c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060c6:	4291      	cmp	r1, r2
 80060c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060cc:	d1f9      	bne.n	80060c2 <memcpy+0xe>
 80060ce:	bd10      	pop	{r4, pc}

080060d0 <_init>:
 80060d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d2:	bf00      	nop
 80060d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060d6:	bc08      	pop	{r3}
 80060d8:	469e      	mov	lr, r3
 80060da:	4770      	bx	lr

080060dc <_fini>:
 80060dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060de:	bf00      	nop
 80060e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e2:	bc08      	pop	{r3}
 80060e4:	469e      	mov	lr, r3
 80060e6:	4770      	bx	lr

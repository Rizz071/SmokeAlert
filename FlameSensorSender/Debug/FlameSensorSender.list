
FlameSensorSender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007160  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08007270  08007270  00008270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074ec  080074ec  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080074ec  080074ec  000084ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074f4  080074f4  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074f4  080074f4  000084f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074f8  080074f8  000084f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080074fc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  2000005c  08007558  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08007558  00009380  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013307  00000000  00000000  00009085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b4  00000000  00000000  0001c38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0001f740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e52  00000000  00000000  000209d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a53c  00000000  00000000  0002182a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017089  00000000  00000000  0003bd66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000924b2  00000000  00000000  00052def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e52a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000541c  00000000  00000000  000e52e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000ea700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007254 	.word	0x08007254

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08007254 	.word	0x08007254

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	@ 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__aeabi_d2iz>:
 80008f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008fc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000900:	d215      	bcs.n	800092e <__aeabi_d2iz+0x36>
 8000902:	d511      	bpl.n	8000928 <__aeabi_d2iz+0x30>
 8000904:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800090c:	d912      	bls.n	8000934 <__aeabi_d2iz+0x3c>
 800090e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000912:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	bf18      	it	ne
 8000924:	4240      	negne	r0, r0
 8000926:	4770      	bx	lr
 8000928:	f04f 0000 	mov.w	r0, #0
 800092c:	4770      	bx	lr
 800092e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000932:	d105      	bne.n	8000940 <__aeabi_d2iz+0x48>
 8000934:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000938:	bf08      	it	eq
 800093a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800093e:	4770      	bx	lr
 8000940:	f04f 0000 	mov.w	r0, #0
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <__aeabi_frsub>:
 8000948:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800094c:	e002      	b.n	8000954 <__addsf3>
 800094e:	bf00      	nop

08000950 <__aeabi_fsub>:
 8000950:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000954 <__addsf3>:
 8000954:	0042      	lsls	r2, r0, #1
 8000956:	bf1f      	itttt	ne
 8000958:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800095c:	ea92 0f03 	teqne	r2, r3
 8000960:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000964:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000968:	d06a      	beq.n	8000a40 <__addsf3+0xec>
 800096a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800096e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000972:	bfc1      	itttt	gt
 8000974:	18d2      	addgt	r2, r2, r3
 8000976:	4041      	eorgt	r1, r0
 8000978:	4048      	eorgt	r0, r1
 800097a:	4041      	eorgt	r1, r0
 800097c:	bfb8      	it	lt
 800097e:	425b      	neglt	r3, r3
 8000980:	2b19      	cmp	r3, #25
 8000982:	bf88      	it	hi
 8000984:	4770      	bxhi	lr
 8000986:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800098a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800098e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000992:	bf18      	it	ne
 8000994:	4240      	negne	r0, r0
 8000996:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800099a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800099e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009a2:	bf18      	it	ne
 80009a4:	4249      	negne	r1, r1
 80009a6:	ea92 0f03 	teq	r2, r3
 80009aa:	d03f      	beq.n	8000a2c <__addsf3+0xd8>
 80009ac:	f1a2 0201 	sub.w	r2, r2, #1
 80009b0:	fa41 fc03 	asr.w	ip, r1, r3
 80009b4:	eb10 000c 	adds.w	r0, r0, ip
 80009b8:	f1c3 0320 	rsb	r3, r3, #32
 80009bc:	fa01 f103 	lsl.w	r1, r1, r3
 80009c0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009c4:	d502      	bpl.n	80009cc <__addsf3+0x78>
 80009c6:	4249      	negs	r1, r1
 80009c8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009cc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009d0:	d313      	bcc.n	80009fa <__addsf3+0xa6>
 80009d2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009d6:	d306      	bcc.n	80009e6 <__addsf3+0x92>
 80009d8:	0840      	lsrs	r0, r0, #1
 80009da:	ea4f 0131 	mov.w	r1, r1, rrx
 80009de:	f102 0201 	add.w	r2, r2, #1
 80009e2:	2afe      	cmp	r2, #254	@ 0xfe
 80009e4:	d251      	bcs.n	8000a8a <__addsf3+0x136>
 80009e6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80009ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ee:	bf08      	it	eq
 80009f0:	f020 0001 	biceq.w	r0, r0, #1
 80009f4:	ea40 0003 	orr.w	r0, r0, r3
 80009f8:	4770      	bx	lr
 80009fa:	0049      	lsls	r1, r1, #1
 80009fc:	eb40 0000 	adc.w	r0, r0, r0
 8000a00:	3a01      	subs	r2, #1
 8000a02:	bf28      	it	cs
 8000a04:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a08:	d2ed      	bcs.n	80009e6 <__addsf3+0x92>
 8000a0a:	fab0 fc80 	clz	ip, r0
 8000a0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a12:	ebb2 020c 	subs.w	r2, r2, ip
 8000a16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a1a:	bfaa      	itet	ge
 8000a1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a20:	4252      	neglt	r2, r2
 8000a22:	4318      	orrge	r0, r3
 8000a24:	bfbc      	itt	lt
 8000a26:	40d0      	lsrlt	r0, r2
 8000a28:	4318      	orrlt	r0, r3
 8000a2a:	4770      	bx	lr
 8000a2c:	f092 0f00 	teq	r2, #0
 8000a30:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a34:	bf06      	itte	eq
 8000a36:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a3a:	3201      	addeq	r2, #1
 8000a3c:	3b01      	subne	r3, #1
 8000a3e:	e7b5      	b.n	80009ac <__addsf3+0x58>
 8000a40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a4e:	d021      	beq.n	8000a94 <__addsf3+0x140>
 8000a50:	ea92 0f03 	teq	r2, r3
 8000a54:	d004      	beq.n	8000a60 <__addsf3+0x10c>
 8000a56:	f092 0f00 	teq	r2, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	4608      	moveq	r0, r1
 8000a5e:	4770      	bx	lr
 8000a60:	ea90 0f01 	teq	r0, r1
 8000a64:	bf1c      	itt	ne
 8000a66:	2000      	movne	r0, #0
 8000a68:	4770      	bxne	lr
 8000a6a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a6e:	d104      	bne.n	8000a7a <__addsf3+0x126>
 8000a70:	0040      	lsls	r0, r0, #1
 8000a72:	bf28      	it	cs
 8000a74:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a78:	4770      	bx	lr
 8000a7a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a7e:	bf3c      	itt	cc
 8000a80:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a84:	4770      	bxcc	lr
 8000a86:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a8a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a92:	4770      	bx	lr
 8000a94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a98:	bf16      	itet	ne
 8000a9a:	4608      	movne	r0, r1
 8000a9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000aa0:	4601      	movne	r1, r0
 8000aa2:	0242      	lsls	r2, r0, #9
 8000aa4:	bf06      	itte	eq
 8000aa6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aaa:	ea90 0f01 	teqeq	r0, r1
 8000aae:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_ui2f>:
 8000ab4:	f04f 0300 	mov.w	r3, #0
 8000ab8:	e004      	b.n	8000ac4 <__aeabi_i2f+0x8>
 8000aba:	bf00      	nop

08000abc <__aeabi_i2f>:
 8000abc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ac0:	bf48      	it	mi
 8000ac2:	4240      	negmi	r0, r0
 8000ac4:	ea5f 0c00 	movs.w	ip, r0
 8000ac8:	bf08      	it	eq
 8000aca:	4770      	bxeq	lr
 8000acc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ad0:	4601      	mov	r1, r0
 8000ad2:	f04f 0000 	mov.w	r0, #0
 8000ad6:	e01c      	b.n	8000b12 <__aeabi_l2f+0x2a>

08000ad8 <__aeabi_ul2f>:
 8000ad8:	ea50 0201 	orrs.w	r2, r0, r1
 8000adc:	bf08      	it	eq
 8000ade:	4770      	bxeq	lr
 8000ae0:	f04f 0300 	mov.w	r3, #0
 8000ae4:	e00a      	b.n	8000afc <__aeabi_l2f+0x14>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_l2f>:
 8000ae8:	ea50 0201 	orrs.w	r2, r0, r1
 8000aec:	bf08      	it	eq
 8000aee:	4770      	bxeq	lr
 8000af0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000af4:	d502      	bpl.n	8000afc <__aeabi_l2f+0x14>
 8000af6:	4240      	negs	r0, r0
 8000af8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000afc:	ea5f 0c01 	movs.w	ip, r1
 8000b00:	bf02      	ittt	eq
 8000b02:	4684      	moveq	ip, r0
 8000b04:	4601      	moveq	r1, r0
 8000b06:	2000      	moveq	r0, #0
 8000b08:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b12:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b16:	fabc f28c 	clz	r2, ip
 8000b1a:	3a08      	subs	r2, #8
 8000b1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b20:	db10      	blt.n	8000b44 <__aeabi_l2f+0x5c>
 8000b22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b26:	4463      	add	r3, ip
 8000b28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b2c:	f1c2 0220 	rsb	r2, r2, #32
 8000b30:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b34:	fa20 f202 	lsr.w	r2, r0, r2
 8000b38:	eb43 0002 	adc.w	r0, r3, r2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f102 0220 	add.w	r2, r2, #32
 8000b48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b4c:	f1c2 0220 	rsb	r2, r2, #32
 8000b50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b54:	fa21 f202 	lsr.w	r2, r1, r2
 8000b58:	eb43 0002 	adc.w	r0, r3, r2
 8000b5c:	bf08      	it	eq
 8000b5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_fmul>:
 8000b64:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b72:	ea92 0f0c 	teqne	r2, ip
 8000b76:	ea93 0f0c 	teqne	r3, ip
 8000b7a:	d06f      	beq.n	8000c5c <__aeabi_fmul+0xf8>
 8000b7c:	441a      	add	r2, r3
 8000b7e:	ea80 0c01 	eor.w	ip, r0, r1
 8000b82:	0240      	lsls	r0, r0, #9
 8000b84:	bf18      	it	ne
 8000b86:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b8a:	d01e      	beq.n	8000bca <__aeabi_fmul+0x66>
 8000b8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b94:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b98:	fba0 3101 	umull	r3, r1, r0, r1
 8000b9c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ba0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ba4:	bf3e      	ittt	cc
 8000ba6:	0049      	lslcc	r1, r1, #1
 8000ba8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bac:	005b      	lslcc	r3, r3, #1
 8000bae:	ea40 0001 	orr.w	r0, r0, r1
 8000bb2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bb6:	2afd      	cmp	r2, #253	@ 0xfd
 8000bb8:	d81d      	bhi.n	8000bf6 <__aeabi_fmul+0x92>
 8000bba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000bbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc2:	bf08      	it	eq
 8000bc4:	f020 0001 	biceq.w	r0, r0, #1
 8000bc8:	4770      	bx	lr
 8000bca:	f090 0f00 	teq	r0, #0
 8000bce:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bd2:	bf08      	it	eq
 8000bd4:	0249      	lsleq	r1, r1, #9
 8000bd6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bda:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bde:	3a7f      	subs	r2, #127	@ 0x7f
 8000be0:	bfc2      	ittt	gt
 8000be2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000be6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bea:	4770      	bxgt	lr
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	f04f 0300 	mov.w	r3, #0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	dc5d      	bgt.n	8000cb4 <__aeabi_fmul+0x150>
 8000bf8:	f112 0f19 	cmn.w	r2, #25
 8000bfc:	bfdc      	itt	le
 8000bfe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c02:	4770      	bxle	lr
 8000c04:	f1c2 0200 	rsb	r2, r2, #0
 8000c08:	0041      	lsls	r1, r0, #1
 8000c0a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c0e:	f1c2 0220 	rsb	r2, r2, #32
 8000c12:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c16:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c1a:	f140 0000 	adc.w	r0, r0, #0
 8000c1e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c22:	bf08      	it	eq
 8000c24:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c28:	4770      	bx	lr
 8000c2a:	f092 0f00 	teq	r2, #0
 8000c2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c32:	bf02      	ittt	eq
 8000c34:	0040      	lsleq	r0, r0, #1
 8000c36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c3a:	3a01      	subeq	r2, #1
 8000c3c:	d0f9      	beq.n	8000c32 <__aeabi_fmul+0xce>
 8000c3e:	ea40 000c 	orr.w	r0, r0, ip
 8000c42:	f093 0f00 	teq	r3, #0
 8000c46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c4a:	bf02      	ittt	eq
 8000c4c:	0049      	lsleq	r1, r1, #1
 8000c4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c52:	3b01      	subeq	r3, #1
 8000c54:	d0f9      	beq.n	8000c4a <__aeabi_fmul+0xe6>
 8000c56:	ea41 010c 	orr.w	r1, r1, ip
 8000c5a:	e78f      	b.n	8000b7c <__aeabi_fmul+0x18>
 8000c5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c60:	ea92 0f0c 	teq	r2, ip
 8000c64:	bf18      	it	ne
 8000c66:	ea93 0f0c 	teqne	r3, ip
 8000c6a:	d00a      	beq.n	8000c82 <__aeabi_fmul+0x11e>
 8000c6c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c70:	bf18      	it	ne
 8000c72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c76:	d1d8      	bne.n	8000c2a <__aeabi_fmul+0xc6>
 8000c78:	ea80 0001 	eor.w	r0, r0, r1
 8000c7c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f090 0f00 	teq	r0, #0
 8000c86:	bf17      	itett	ne
 8000c88:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c8c:	4608      	moveq	r0, r1
 8000c8e:	f091 0f00 	teqne	r1, #0
 8000c92:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c96:	d014      	beq.n	8000cc2 <__aeabi_fmul+0x15e>
 8000c98:	ea92 0f0c 	teq	r2, ip
 8000c9c:	d101      	bne.n	8000ca2 <__aeabi_fmul+0x13e>
 8000c9e:	0242      	lsls	r2, r0, #9
 8000ca0:	d10f      	bne.n	8000cc2 <__aeabi_fmul+0x15e>
 8000ca2:	ea93 0f0c 	teq	r3, ip
 8000ca6:	d103      	bne.n	8000cb0 <__aeabi_fmul+0x14c>
 8000ca8:	024b      	lsls	r3, r1, #9
 8000caa:	bf18      	it	ne
 8000cac:	4608      	movne	r0, r1
 8000cae:	d108      	bne.n	8000cc2 <__aeabi_fmul+0x15e>
 8000cb0:	ea80 0001 	eor.w	r0, r0, r1
 8000cb4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cb8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cbc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc0:	4770      	bx	lr
 8000cc2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_fdiv>:
 8000ccc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd4:	bf1e      	ittt	ne
 8000cd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cda:	ea92 0f0c 	teqne	r2, ip
 8000cde:	ea93 0f0c 	teqne	r3, ip
 8000ce2:	d069      	beq.n	8000db8 <__aeabi_fdiv+0xec>
 8000ce4:	eba2 0203 	sub.w	r2, r2, r3
 8000ce8:	ea80 0c01 	eor.w	ip, r0, r1
 8000cec:	0249      	lsls	r1, r1, #9
 8000cee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cf2:	d037      	beq.n	8000d64 <__aeabi_fdiv+0x98>
 8000cf4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cf8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cfc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d00:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d04:	428b      	cmp	r3, r1
 8000d06:	bf38      	it	cc
 8000d08:	005b      	lslcc	r3, r3, #1
 8000d0a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d0e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d12:	428b      	cmp	r3, r1
 8000d14:	bf24      	itt	cs
 8000d16:	1a5b      	subcs	r3, r3, r1
 8000d18:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d1c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d20:	bf24      	itt	cs
 8000d22:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d26:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d2a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d2e:	bf24      	itt	cs
 8000d30:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d38:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d3c:	bf24      	itt	cs
 8000d3e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d42:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d46:	011b      	lsls	r3, r3, #4
 8000d48:	bf18      	it	ne
 8000d4a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d4e:	d1e0      	bne.n	8000d12 <__aeabi_fdiv+0x46>
 8000d50:	2afd      	cmp	r2, #253	@ 0xfd
 8000d52:	f63f af50 	bhi.w	8000bf6 <__aeabi_fmul+0x92>
 8000d56:	428b      	cmp	r3, r1
 8000d58:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d68:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6c:	327f      	adds	r2, #127	@ 0x7f
 8000d6e:	bfc2      	ittt	gt
 8000d70:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d74:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d78:	4770      	bxgt	lr
 8000d7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d7e:	f04f 0300 	mov.w	r3, #0
 8000d82:	3a01      	subs	r2, #1
 8000d84:	e737      	b.n	8000bf6 <__aeabi_fmul+0x92>
 8000d86:	f092 0f00 	teq	r2, #0
 8000d8a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d8e:	bf02      	ittt	eq
 8000d90:	0040      	lsleq	r0, r0, #1
 8000d92:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d96:	3a01      	subeq	r2, #1
 8000d98:	d0f9      	beq.n	8000d8e <__aeabi_fdiv+0xc2>
 8000d9a:	ea40 000c 	orr.w	r0, r0, ip
 8000d9e:	f093 0f00 	teq	r3, #0
 8000da2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000da6:	bf02      	ittt	eq
 8000da8:	0049      	lsleq	r1, r1, #1
 8000daa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dae:	3b01      	subeq	r3, #1
 8000db0:	d0f9      	beq.n	8000da6 <__aeabi_fdiv+0xda>
 8000db2:	ea41 010c 	orr.w	r1, r1, ip
 8000db6:	e795      	b.n	8000ce4 <__aeabi_fdiv+0x18>
 8000db8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dbc:	ea92 0f0c 	teq	r2, ip
 8000dc0:	d108      	bne.n	8000dd4 <__aeabi_fdiv+0x108>
 8000dc2:	0242      	lsls	r2, r0, #9
 8000dc4:	f47f af7d 	bne.w	8000cc2 <__aeabi_fmul+0x15e>
 8000dc8:	ea93 0f0c 	teq	r3, ip
 8000dcc:	f47f af70 	bne.w	8000cb0 <__aeabi_fmul+0x14c>
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	e776      	b.n	8000cc2 <__aeabi_fmul+0x15e>
 8000dd4:	ea93 0f0c 	teq	r3, ip
 8000dd8:	d104      	bne.n	8000de4 <__aeabi_fdiv+0x118>
 8000dda:	024b      	lsls	r3, r1, #9
 8000ddc:	f43f af4c 	beq.w	8000c78 <__aeabi_fmul+0x114>
 8000de0:	4608      	mov	r0, r1
 8000de2:	e76e      	b.n	8000cc2 <__aeabi_fmul+0x15e>
 8000de4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000de8:	bf18      	it	ne
 8000dea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dee:	d1ca      	bne.n	8000d86 <__aeabi_fdiv+0xba>
 8000df0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000df4:	f47f af5c 	bne.w	8000cb0 <__aeabi_fmul+0x14c>
 8000df8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000dfc:	f47f af3c 	bne.w	8000c78 <__aeabi_fmul+0x114>
 8000e00:	e75f      	b.n	8000cc2 <__aeabi_fmul+0x15e>
 8000e02:	bf00      	nop

08000e04 <__gesf2>:
 8000e04:	f04f 3cff 	mov.w	ip, #4294967295
 8000e08:	e006      	b.n	8000e18 <__cmpsf2+0x4>
 8000e0a:	bf00      	nop

08000e0c <__lesf2>:
 8000e0c:	f04f 0c01 	mov.w	ip, #1
 8000e10:	e002      	b.n	8000e18 <__cmpsf2+0x4>
 8000e12:	bf00      	nop

08000e14 <__cmpsf2>:
 8000e14:	f04f 0c01 	mov.w	ip, #1
 8000e18:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e28:	bf18      	it	ne
 8000e2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e2e:	d011      	beq.n	8000e54 <__cmpsf2+0x40>
 8000e30:	b001      	add	sp, #4
 8000e32:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e36:	bf18      	it	ne
 8000e38:	ea90 0f01 	teqne	r0, r1
 8000e3c:	bf58      	it	pl
 8000e3e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e42:	bf88      	it	hi
 8000e44:	17c8      	asrhi	r0, r1, #31
 8000e46:	bf38      	it	cc
 8000e48:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e4c:	bf18      	it	ne
 8000e4e:	f040 0001 	orrne.w	r0, r0, #1
 8000e52:	4770      	bx	lr
 8000e54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e58:	d102      	bne.n	8000e60 <__cmpsf2+0x4c>
 8000e5a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e5e:	d105      	bne.n	8000e6c <__cmpsf2+0x58>
 8000e60:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e64:	d1e4      	bne.n	8000e30 <__cmpsf2+0x1c>
 8000e66:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e6a:	d0e1      	beq.n	8000e30 <__cmpsf2+0x1c>
 8000e6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <__aeabi_cfrcmple>:
 8000e74:	4684      	mov	ip, r0
 8000e76:	4608      	mov	r0, r1
 8000e78:	4661      	mov	r1, ip
 8000e7a:	e7ff      	b.n	8000e7c <__aeabi_cfcmpeq>

08000e7c <__aeabi_cfcmpeq>:
 8000e7c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e7e:	f7ff ffc9 	bl	8000e14 <__cmpsf2>
 8000e82:	2800      	cmp	r0, #0
 8000e84:	bf48      	it	mi
 8000e86:	f110 0f00 	cmnmi.w	r0, #0
 8000e8a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e8c <__aeabi_fcmpeq>:
 8000e8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e90:	f7ff fff4 	bl	8000e7c <__aeabi_cfcmpeq>
 8000e94:	bf0c      	ite	eq
 8000e96:	2001      	moveq	r0, #1
 8000e98:	2000      	movne	r0, #0
 8000e9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_fcmplt>:
 8000ea0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea4:	f7ff ffea 	bl	8000e7c <__aeabi_cfcmpeq>
 8000ea8:	bf34      	ite	cc
 8000eaa:	2001      	movcc	r0, #1
 8000eac:	2000      	movcs	r0, #0
 8000eae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_fcmple>:
 8000eb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb8:	f7ff ffe0 	bl	8000e7c <__aeabi_cfcmpeq>
 8000ebc:	bf94      	ite	ls
 8000ebe:	2001      	movls	r0, #1
 8000ec0:	2000      	movhi	r0, #0
 8000ec2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec6:	bf00      	nop

08000ec8 <__aeabi_fcmpge>:
 8000ec8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ecc:	f7ff ffd2 	bl	8000e74 <__aeabi_cfrcmple>
 8000ed0:	bf94      	ite	ls
 8000ed2:	2001      	movls	r0, #1
 8000ed4:	2000      	movhi	r0, #0
 8000ed6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eda:	bf00      	nop

08000edc <__aeabi_fcmpgt>:
 8000edc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee0:	f7ff ffc8 	bl	8000e74 <__aeabi_cfrcmple>
 8000ee4:	bf34      	ite	cc
 8000ee6:	2001      	movcc	r0, #1
 8000ee8:	2000      	movcs	r0, #0
 8000eea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eee:	bf00      	nop

08000ef0 <__aeabi_f2uiz>:
 8000ef0:	0042      	lsls	r2, r0, #1
 8000ef2:	d20e      	bcs.n	8000f12 <__aeabi_f2uiz+0x22>
 8000ef4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ef8:	d30b      	bcc.n	8000f12 <__aeabi_f2uiz+0x22>
 8000efa:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000efe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f02:	d409      	bmi.n	8000f18 <__aeabi_f2uiz+0x28>
 8000f04:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f0c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f10:	4770      	bx	lr
 8000f12:	f04f 0000 	mov.w	r0, #0
 8000f16:	4770      	bx	lr
 8000f18:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f1c:	d101      	bne.n	8000f22 <__aeabi_f2uiz+0x32>
 8000f1e:	0242      	lsls	r2, r0, #9
 8000f20:	d102      	bne.n	8000f28 <__aeabi_f2uiz+0x38>
 8000f22:	f04f 30ff 	mov.w	r0, #4294967295
 8000f26:	4770      	bx	lr
 8000f28:	f04f 0000 	mov.w	r0, #0
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f36:	f000 fe65 	bl	8001c04 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f3a:	f000 f979 	bl	8001230 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f3e:	f000 fb3f 	bl	80015c0 <MX_GPIO_Init>
	MX_RTC_Init();
 8000f42:	f000 fa47 	bl	80013d4 <MX_RTC_Init>
	MX_TIM2_Init();
 8000f46:	f000 fac5 	bl	80014d4 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8000f4a:	f000 fb0f 	bl	800156c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	debug_init(&huart1);
 8000f4e:	489a      	ldr	r0, [pc, #616]	@ (80011b8 <main+0x288>)
 8000f50:	f004 ff6a 	bl	8005e28 <debug_init>

	debug("========================");
 8000f54:	4899      	ldr	r0, [pc, #612]	@ (80011bc <main+0x28c>)
 8000f56:	f004 ff75 	bl	8005e44 <debug>
	debug("The device has woken up!");
 8000f5a:	4899      	ldr	r0, [pc, #612]	@ (80011c0 <main+0x290>)
 8000f5c:	f004 ff72 	bl	8005e44 <debug>

	// Defining alarm_level
	alarm_level = 1.1;
 8000f60:	4b98      	ldr	r3, [pc, #608]	@ (80011c4 <main+0x294>)
 8000f62:	4a99      	ldr	r2, [pc, #612]	@ (80011c8 <main+0x298>)
 8000f64:	601a      	str	r2, [r3, #0]
	debug("alarm_level: %d.%02d\n\r", (uint8_t) alarm_level,
 8000f66:	4b97      	ldr	r3, [pc, #604]	@ (80011c4 <main+0x294>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ffc0 	bl	8000ef0 <__aeabi_f2uiz>
 8000f70:	4603      	mov	r3, r0
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	461c      	mov	r4, r3
			(uint16_t) (alarm_level * 100) % 100);
 8000f76:	4b93      	ldr	r3, [pc, #588]	@ (80011c4 <main+0x294>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4994      	ldr	r1, [pc, #592]	@ (80011cc <main+0x29c>)
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fdf1 	bl	8000b64 <__aeabi_fmul>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ffb3 	bl	8000ef0 <__aeabi_f2uiz>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	b29b      	uxth	r3, r3
	debug("alarm_level: %d.%02d\n\r", (uint8_t) alarm_level,
 8000f8e:	4a90      	ldr	r2, [pc, #576]	@ (80011d0 <main+0x2a0>)
 8000f90:	fba2 1203 	umull	r1, r2, r2, r3
 8000f94:	0952      	lsrs	r2, r2, #5
 8000f96:	2164      	movs	r1, #100	@ 0x64
 8000f98:	fb01 f202 	mul.w	r2, r1, r2
 8000f9c:	1a9b      	subs	r3, r3, r2
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4621      	mov	r1, r4
 8000fa4:	488b      	ldr	r0, [pc, #556]	@ (80011d4 <main+0x2a4>)
 8000fa6:	f004 ff4d 	bl	8005e44 <debug>

	HAL_Delay(10);
 8000faa:	200a      	movs	r0, #10
 8000fac:	f000 fe8c 	bl	8001cc8 <HAL_Delay>

	HAL_GPIO_WritePin(V_LED_GPIO_Port, V_LED_Pin, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fb6:	4888      	ldr	r0, [pc, #544]	@ (80011d8 <main+0x2a8>)
 8000fb8:	f001 ff20 	bl	8002dfc <HAL_GPIO_WritePin>

	debug("Polling for HW Serial...");
 8000fbc:	4887      	ldr	r0, [pc, #540]	@ (80011dc <main+0x2ac>)
 8000fbe:	f004 ff41 	bl	8005e44 <debug>
	hw_serial = get_serial_number();
 8000fc2:	4c87      	ldr	r4, [pc, #540]	@ (80011e0 <main+0x2b0>)
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f005 fc28 	bl	800681c <get_serial_number>
 8000fcc:	463b      	mov	r3, r7
 8000fce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	debug("HW Serial: %d %d %d\n\r", hw_serial.byte_0, hw_serial.byte_1,
 8000fd6:	4b82      	ldr	r3, [pc, #520]	@ (80011e0 <main+0x2b0>)
 8000fd8:	6819      	ldr	r1, [r3, #0]
 8000fda:	4b81      	ldr	r3, [pc, #516]	@ (80011e0 <main+0x2b0>)
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	4b80      	ldr	r3, [pc, #512]	@ (80011e0 <main+0x2b0>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	4880      	ldr	r0, [pc, #512]	@ (80011e4 <main+0x2b4>)
 8000fe4:	f004 ff2e 	bl	8005e44 <debug>
			hw_serial.byte_2);

	debug("Polling for battery status...");
 8000fe8:	487f      	ldr	r0, [pc, #508]	@ (80011e8 <main+0x2b8>)
 8000fea:	f004 ff2b 	bl	8005e44 <debug>
	MX_ADC1_Init();
 8000fee:	f000 f975 	bl	80012dc <MX_ADC1_Init>
	Battery = get_battery_level();
 8000ff2:	4c7e      	ldr	r4, [pc, #504]	@ (80011ec <main+0x2bc>)
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f004 fe42 	bl	8005c80 <get_battery_level>
 8000ffc:	4622      	mov	r2, r4
 8000ffe:	463b      	mov	r3, r7
 8001000:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001004:	e882 0003 	stmia.w	r2, {r0, r1}
	HAL_ADC_DeInit(&hadc1);
 8001008:	4879      	ldr	r0, [pc, #484]	@ (80011f0 <main+0x2c0>)
 800100a:	f000 ff77 	bl	8001efc <HAL_ADC_DeInit>
	debug("Battery status:");
 800100e:	4879      	ldr	r0, [pc, #484]	@ (80011f4 <main+0x2c4>)
 8001010:	f004 ff18 	bl	8005e44 <debug>
	debug("\tVDD: %d.%02d", (uint8_t) Battery.vdd,
 8001014:	4b75      	ldr	r3, [pc, #468]	@ (80011ec <main+0x2bc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff69 	bl	8000ef0 <__aeabi_f2uiz>
 800101e:	4603      	mov	r3, r0
 8001020:	b2db      	uxtb	r3, r3
 8001022:	461c      	mov	r4, r3
			(uint16_t) (Battery.vdd * 100) % 100);
 8001024:	4b71      	ldr	r3, [pc, #452]	@ (80011ec <main+0x2bc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4968      	ldr	r1, [pc, #416]	@ (80011cc <main+0x29c>)
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fd9a 	bl	8000b64 <__aeabi_fmul>
 8001030:	4603      	mov	r3, r0
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ff5c 	bl	8000ef0 <__aeabi_f2uiz>
 8001038:	4603      	mov	r3, r0
 800103a:	b29b      	uxth	r3, r3
	debug("\tVDD: %d.%02d", (uint8_t) Battery.vdd,
 800103c:	4a64      	ldr	r2, [pc, #400]	@ (80011d0 <main+0x2a0>)
 800103e:	fba2 1203 	umull	r1, r2, r2, r3
 8001042:	0952      	lsrs	r2, r2, #5
 8001044:	2164      	movs	r1, #100	@ 0x64
 8001046:	fb01 f202 	mul.w	r2, r1, r2
 800104a:	1a9b      	subs	r3, r3, r2
 800104c:	b29b      	uxth	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	4621      	mov	r1, r4
 8001052:	4869      	ldr	r0, [pc, #420]	@ (80011f8 <main+0x2c8>)
 8001054:	f004 fef6 	bl	8005e44 <debug>
	debug("\tPercent: %d\n\r", Battery.charge_percent);
 8001058:	4b64      	ldr	r3, [pc, #400]	@ (80011ec <main+0x2bc>)
 800105a:	791b      	ldrb	r3, [r3, #4]
 800105c:	4619      	mov	r1, r3
 800105e:	4867      	ldr	r0, [pc, #412]	@ (80011fc <main+0x2cc>)
 8001060:	f004 fef0 	bl	8005e44 <debug>

	// Enabling VCC to Smoke Sensor and polling for data
	debug("Polling for dust sensor data...");
 8001064:	4866      	ldr	r0, [pc, #408]	@ (8001200 <main+0x2d0>)
 8001066:	f004 feed 	bl	8005e44 <debug>
	HAL_GPIO_WritePin(GPIOB, MOSFET_GATE_SENSOR_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001070:	4859      	ldr	r0, [pc, #356]	@ (80011d8 <main+0x2a8>)
 8001072:	f001 fec3 	bl	8002dfc <HAL_GPIO_WritePin>
	MX_ADC2_Init();
 8001076:	f000 f96f 	bl	8001358 <MX_ADC2_Init>
	float sensor_data = get_infra_sensor_data(&hadc2, alarm_level);
 800107a:	4b52      	ldr	r3, [pc, #328]	@ (80011c4 <main+0x294>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4619      	mov	r1, r3
 8001080:	4860      	ldr	r0, [pc, #384]	@ (8001204 <main+0x2d4>)
 8001082:	f004 ff95 	bl	8005fb0 <get_infra_sensor_data>
 8001086:	6178      	str	r0, [r7, #20]
	HAL_ADC_DeInit(&hadc2);
 8001088:	485e      	ldr	r0, [pc, #376]	@ (8001204 <main+0x2d4>)
 800108a:	f000 ff37 	bl	8001efc <HAL_ADC_DeInit>
	HAL_GPIO_WritePin(GPIOB, MOSFET_GATE_SENSOR_Pin, GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001094:	4850      	ldr	r0, [pc, #320]	@ (80011d8 <main+0x2a8>)
 8001096:	f001 feb1 	bl	8002dfc <HAL_GPIO_WritePin>
	debug("Sensor: %d.%02d\n\r", (uint8_t) sensor_data,
 800109a:	6978      	ldr	r0, [r7, #20]
 800109c:	f7ff ff28 	bl	8000ef0 <__aeabi_f2uiz>
 80010a0:	4603      	mov	r3, r0
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	461c      	mov	r4, r3
			(uint16_t) (sensor_data * 100) % 100);
 80010a6:	4949      	ldr	r1, [pc, #292]	@ (80011cc <main+0x29c>)
 80010a8:	6978      	ldr	r0, [r7, #20]
 80010aa:	f7ff fd5b 	bl	8000b64 <__aeabi_fmul>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff1d 	bl	8000ef0 <__aeabi_f2uiz>
 80010b6:	4603      	mov	r3, r0
 80010b8:	b29b      	uxth	r3, r3
	debug("Sensor: %d.%02d\n\r", (uint8_t) sensor_data,
 80010ba:	4a45      	ldr	r2, [pc, #276]	@ (80011d0 <main+0x2a0>)
 80010bc:	fba2 1203 	umull	r1, r2, r2, r3
 80010c0:	0952      	lsrs	r2, r2, #5
 80010c2:	2164      	movs	r1, #100	@ 0x64
 80010c4:	fb01 f202 	mul.w	r2, r1, r2
 80010c8:	1a9b      	subs	r3, r3, r2
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	461a      	mov	r2, r3
 80010ce:	4621      	mov	r1, r4
 80010d0:	484d      	ldr	r0, [pc, #308]	@ (8001208 <main+0x2d8>)
 80010d2:	f004 feb7 	bl	8005e44 <debug>

	packet.ID = hw_serial.byte_2;
 80010d6:	4b42      	ldr	r3, [pc, #264]	@ (80011e0 <main+0x2b0>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	4a4c      	ldr	r2, [pc, #304]	@ (800120c <main+0x2dc>)
 80010dc:	6013      	str	r3, [r2, #0]
	packet.battery_level = Battery.charge_percent;
 80010de:	4b43      	ldr	r3, [pc, #268]	@ (80011ec <main+0x2bc>)
 80010e0:	791a      	ldrb	r2, [r3, #4]
 80010e2:	4b4a      	ldr	r3, [pc, #296]	@ (800120c <main+0x2dc>)
 80010e4:	721a      	strb	r2, [r3, #8]
	packet.sensor_data = sensor_data;
 80010e6:	4a49      	ldr	r2, [pc, #292]	@ (800120c <main+0x2dc>)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	6053      	str	r3, [r2, #4]
	debug("Formed packet:");
 80010ec:	4848      	ldr	r0, [pc, #288]	@ (8001210 <main+0x2e0>)
 80010ee:	f004 fea9 	bl	8005e44 <debug>
	debug("\tID: %d", (uint8_t) packet.ID);
 80010f2:	4b46      	ldr	r3, [pc, #280]	@ (800120c <main+0x2dc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	4619      	mov	r1, r3
 80010fa:	4846      	ldr	r0, [pc, #280]	@ (8001214 <main+0x2e4>)
 80010fc:	f004 fea2 	bl	8005e44 <debug>
	debug("\tbattery_level: %d%%", (uint8_t) Battery.charge_percent);
 8001100:	4b3a      	ldr	r3, [pc, #232]	@ (80011ec <main+0x2bc>)
 8001102:	791b      	ldrb	r3, [r3, #4]
 8001104:	4619      	mov	r1, r3
 8001106:	4844      	ldr	r0, [pc, #272]	@ (8001218 <main+0x2e8>)
 8001108:	f004 fe9c 	bl	8005e44 <debug>
	debug("\tsensor_data: %d.%02d\n\r", (uint8_t) sensor_data,
 800110c:	6978      	ldr	r0, [r7, #20]
 800110e:	f7ff feef 	bl	8000ef0 <__aeabi_f2uiz>
 8001112:	4603      	mov	r3, r0
 8001114:	b2db      	uxtb	r3, r3
 8001116:	461c      	mov	r4, r3
			(uint16_t) (sensor_data * 100) % 100);
 8001118:	492c      	ldr	r1, [pc, #176]	@ (80011cc <main+0x29c>)
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff fd22 	bl	8000b64 <__aeabi_fmul>
 8001120:	4603      	mov	r3, r0
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fee4 	bl	8000ef0 <__aeabi_f2uiz>
 8001128:	4603      	mov	r3, r0
 800112a:	b29b      	uxth	r3, r3
	debug("\tsensor_data: %d.%02d\n\r", (uint8_t) sensor_data,
 800112c:	4a28      	ldr	r2, [pc, #160]	@ (80011d0 <main+0x2a0>)
 800112e:	fba2 1203 	umull	r1, r2, r2, r3
 8001132:	0952      	lsrs	r2, r2, #5
 8001134:	2164      	movs	r1, #100	@ 0x64
 8001136:	fb01 f202 	mul.w	r2, r1, r2
 800113a:	1a9b      	subs	r3, r3, r2
 800113c:	b29b      	uxth	r3, r3
 800113e:	461a      	mov	r2, r3
 8001140:	4621      	mov	r1, r4
 8001142:	4836      	ldr	r0, [pc, #216]	@ (800121c <main+0x2ec>)
 8001144:	f004 fe7e 	bl	8005e44 <debug>

	debug("Enabling LoRa...");
 8001148:	4835      	ldr	r0, [pc, #212]	@ (8001220 <main+0x2f0>)
 800114a:	f004 fe7b 	bl	8005e44 <debug>
	HAL_GPIO_WritePin(GPIOB, MOSFET_GATE_LORA_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001154:	4820      	ldr	r0, [pc, #128]	@ (80011d8 <main+0x2a8>)
 8001156:	f001 fe51 	bl	8002dfc <HAL_GPIO_WritePin>
	MX_SPI1_Init();
 800115a:	f000 f985 	bl	8001468 <MX_SPI1_Init>
	HAL_Delay(100);
 800115e:	2064      	movs	r0, #100	@ 0x64
 8001160:	f000 fdb2 	bl	8001cc8 <HAL_Delay>
	debug("Sending packet...");
 8001164:	482f      	ldr	r0, [pc, #188]	@ (8001224 <main+0x2f4>)
 8001166:	f004 fe6d 	bl	8005e44 <debug>
	send_packet(packet);
 800116a:	4b28      	ldr	r3, [pc, #160]	@ (800120c <main+0x2dc>)
 800116c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001170:	f005 fb40 	bl	80067f4 <send_packet>
	debug("\t...sent!");
 8001174:	482c      	ldr	r0, [pc, #176]	@ (8001228 <main+0x2f8>)
 8001176:	f004 fe65 	bl	8005e44 <debug>
	HAL_GPIO_WritePin(GPIOB, MOSFET_GATE_LORA_Pin, GPIO_PIN_SET);
 800117a:	2201      	movs	r2, #1
 800117c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001180:	4815      	ldr	r0, [pc, #84]	@ (80011d8 <main+0x2a8>)
 8001182:	f001 fe3b 	bl	8002dfc <HAL_GPIO_WritePin>

	//  Toggle red led
	HAL_GPIO_WritePin(INFO_LED_GPIO_Port, INFO_LED_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800118c:	4812      	ldr	r0, [pc, #72]	@ (80011d8 <main+0x2a8>)
 800118e:	f001 fe35 	bl	8002dfc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001192:	2001      	movs	r0, #1
 8001194:	f000 fd98 	bl	8001cc8 <HAL_Delay>
	HAL_GPIO_WritePin(INFO_LED_GPIO_Port, INFO_LED_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800119e:	480e      	ldr	r0, [pc, #56]	@ (80011d8 <main+0x2a8>)
 80011a0:	f001 fe2c 	bl	8002dfc <HAL_GPIO_WritePin>

	// Sleeping
	debug("Going sleep (STANDBY MODE)...");
 80011a4:	4821      	ldr	r0, [pc, #132]	@ (800122c <main+0x2fc>)
 80011a6:	f004 fe4d 	bl	8005e44 <debug>
	set_alarm(3);
 80011aa:	2003      	movs	r0, #3
 80011ac:	f004 fd2c 	bl	8005c08 <set_alarm>
	HAL_PWR_EnterSTANDBYMode();
 80011b0:	f001 fe48 	bl	8002e44 <HAL_PWR_EnterSTANDBYMode>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <main+0x284>
 80011b8:	2000018c 	.word	0x2000018c
 80011bc:	08007270 	.word	0x08007270
 80011c0:	0800728c 	.word	0x0800728c
 80011c4:	200001f4 	.word	0x200001f4
 80011c8:	3f8ccccd 	.word	0x3f8ccccd
 80011cc:	42c80000 	.word	0x42c80000
 80011d0:	51eb851f 	.word	0x51eb851f
 80011d4:	080072a8 	.word	0x080072a8
 80011d8:	40010c00 	.word	0x40010c00
 80011dc:	080072c0 	.word	0x080072c0
 80011e0:	200001d4 	.word	0x200001d4
 80011e4:	080072dc 	.word	0x080072dc
 80011e8:	080072f4 	.word	0x080072f4
 80011ec:	200001e0 	.word	0x200001e0
 80011f0:	20000078 	.word	0x20000078
 80011f4:	08007314 	.word	0x08007314
 80011f8:	08007324 	.word	0x08007324
 80011fc:	08007334 	.word	0x08007334
 8001200:	08007344 	.word	0x08007344
 8001204:	200000a8 	.word	0x200000a8
 8001208:	08007364 	.word	0x08007364
 800120c:	200001e8 	.word	0x200001e8
 8001210:	08007378 	.word	0x08007378
 8001214:	08007388 	.word	0x08007388
 8001218:	08007390 	.word	0x08007390
 800121c:	080073a8 	.word	0x080073a8
 8001220:	080073c0 	.word	0x080073c0
 8001224:	080073d4 	.word	0x080073d4
 8001228:	080073e8 	.word	0x080073e8
 800122c:	080073f4 	.word	0x080073f4

08001230 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b094      	sub	sp, #80	@ 0x50
 8001234:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001236:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800123a:	2228      	movs	r2, #40	@ 0x28
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f005 fb7a 	bl	8006938 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001260:	230a      	movs	r3, #10
 8001262:	62bb      	str	r3, [r7, #40]	@ 0x28
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001264:	2301      	movs	r3, #1
 8001266:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001268:	2310      	movs	r3, #16
 800126a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800126c:	2301      	movs	r3, #1
 800126e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001270:	2300      	movs	r3, #0
 8001272:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001274:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001278:	4618      	mov	r0, r3
 800127a:	f001 fdfb 	bl	8002e74 <HAL_RCC_OscConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x58>
		Error_Handler();
 8001284:	f000 fa7a 	bl	800177c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001288:	230f      	movs	r3, #15
 800128a:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f002 f868 	bl	8003378 <HAL_RCC_ClockConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0x82>
		Error_Handler();
 80012ae:	f000 fa65 	bl	800177c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_ADC;
 80012b2:	2303      	movs	r3, #3
 80012b4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012ba:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 f9e6 	bl	8003694 <HAL_RCCEx_PeriphCLKConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0xa2>
		Error_Handler();
 80012ce:	f000 fa55 	bl	800177c <Error_Handler>
	}
}
 80012d2:	bf00      	nop
 80012d4:	3750      	adds	r7, #80	@ 0x50
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80012ec:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <MX_ADC1_Init+0x74>)
 80012ee:	4a19      	ldr	r2, [pc, #100]	@ (8001354 <MX_ADC1_Init+0x78>)
 80012f0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012f2:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <MX_ADC1_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80012f8:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <MX_ADC1_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012fe:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <MX_ADC1_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001304:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <MX_ADC1_Init+0x74>)
 8001306:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800130a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800130c:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <MX_ADC1_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8001312:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <MX_ADC1_Init+0x74>)
 8001314:	2201      	movs	r2, #1
 8001316:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001318:	480d      	ldr	r0, [pc, #52]	@ (8001350 <MX_ADC1_Init+0x74>)
 800131a:	f000 fd17 	bl	8001d4c <HAL_ADC_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8001324:	f000 fa2a 	bl	800177c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001328:	2301      	movs	r3, #1
 800132a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800132c:	2301      	movs	r3, #1
 800132e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001330:	2307      	movs	r3, #7
 8001332:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	@ (8001350 <MX_ADC1_Init+0x74>)
 800133a:	f001 f88d 	bl	8002458 <HAL_ADC_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8001344:	f000 fa1a 	bl	800177c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000078 	.word	0x20000078
 8001354:	40012400 	.word	0x40012400

08001358 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 8001368:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <MX_ADC2_Init+0x74>)
 800136a:	4a19      	ldr	r2, [pc, #100]	@ (80013d0 <MX_ADC2_Init+0x78>)
 800136c:	601a      	str	r2, [r3, #0]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800136e:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <MX_ADC2_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8001374:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <MX_ADC2_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	731a      	strb	r2, [r3, #12]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 800137a:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <MX_ADC2_Init+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	751a      	strb	r2, [r3, #20]
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <MX_ADC2_Init+0x74>)
 8001382:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001386:	61da      	str	r2, [r3, #28]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001388:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <MX_ADC2_Init+0x74>)
 800138a:	2200      	movs	r2, #0
 800138c:	605a      	str	r2, [r3, #4]
	hadc2.Init.NbrOfConversion = 1;
 800138e:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_ADC2_Init+0x74>)
 8001390:	2201      	movs	r2, #1
 8001392:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8001394:	480d      	ldr	r0, [pc, #52]	@ (80013cc <MX_ADC2_Init+0x74>)
 8001396:	f000 fcd9 	bl	8001d4c <HAL_ADC_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_ADC2_Init+0x4c>
		Error_Handler();
 80013a0:	f000 f9ec 	bl	800177c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80013a8:	2301      	movs	r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80013ac:	2307      	movs	r3, #7
 80013ae:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	@ (80013cc <MX_ADC2_Init+0x74>)
 80013b6:	f001 f84f 	bl	8002458 <HAL_ADC_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_ADC2_Init+0x6c>
		Error_Handler();
 80013c0:	f000 f9dc 	bl	800177c <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200000a8 	.word	0x200000a8
 80013d0:	40012800 	.word	0x40012800

080013d4 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2100      	movs	r1, #0
 80013de:	460a      	mov	r2, r1
 80013e0:	801a      	strh	r2, [r3, #0]
 80013e2:	460a      	mov	r2, r1
 80013e4:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef DateToUpdate = { 0 };
 80013e6:	2300      	movs	r3, #0
 80013e8:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80013ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001460 <MX_RTC_Init+0x8c>)
 80013ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001464 <MX_RTC_Init+0x90>)
 80013ee:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80013f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001460 <MX_RTC_Init+0x8c>)
 80013f2:	f04f 32ff 	mov.w	r2, #4294967295
 80013f6:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80013f8:	4b19      	ldr	r3, [pc, #100]	@ (8001460 <MX_RTC_Init+0x8c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80013fe:	4818      	ldr	r0, [pc, #96]	@ (8001460 <MX_RTC_Init+0x8c>)
 8001400:	f002 fab4 	bl	800396c <HAL_RTC_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_RTC_Init+0x3a>
		Error_Handler();
 800140a:	f000 f9b7 	bl	800177c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	71bb      	strb	r3, [r7, #6]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2200      	movs	r2, #0
 800141e:	4619      	mov	r1, r3
 8001420:	480f      	ldr	r0, [pc, #60]	@ (8001460 <MX_RTC_Init+0x8c>)
 8001422:	f002 fb2f 	bl	8003a84 <HAL_RTC_SetTime>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_RTC_Init+0x5c>
		Error_Handler();
 800142c:	f000 f9a6 	bl	800177c <Error_Handler>
	}
	DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001430:	2301      	movs	r3, #1
 8001432:	703b      	strb	r3, [r7, #0]
	DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001434:	2301      	movs	r3, #1
 8001436:	707b      	strb	r3, [r7, #1]
	DateToUpdate.Date = 1;
 8001438:	2301      	movs	r3, #1
 800143a:	70bb      	strb	r3, [r7, #2]
	DateToUpdate.Year = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK) {
 8001440:	463b      	mov	r3, r7
 8001442:	2200      	movs	r2, #0
 8001444:	4619      	mov	r1, r3
 8001446:	4806      	ldr	r0, [pc, #24]	@ (8001460 <MX_RTC_Init+0x8c>)
 8001448:	f002 fc8c 	bl	8003d64 <HAL_RTC_SetDate>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_RTC_Init+0x82>
		Error_Handler();
 8001452:	f000 f993 	bl	800177c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200000d8 	.word	0x200000d8
 8001464:	40002800 	.word	0x40002800

08001468 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800146c:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <MX_SPI1_Init+0x64>)
 800146e:	4a18      	ldr	r2, [pc, #96]	@ (80014d0 <MX_SPI1_Init+0x68>)
 8001470:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001472:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <MX_SPI1_Init+0x64>)
 8001474:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001478:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800147a:	4b14      	ldr	r3, [pc, #80]	@ (80014cc <MX_SPI1_Init+0x64>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <MX_SPI1_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001486:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <MX_SPI1_Init+0x64>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800148c:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <MX_SPI1_Init+0x64>)
 800148e:	2200      	movs	r2, #0
 8001490:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001492:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <MX_SPI1_Init+0x64>)
 8001494:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001498:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800149a:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <MX_SPI1_Init+0x64>)
 800149c:	2200      	movs	r2, #0
 800149e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <MX_SPI1_Init+0x64>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014a6:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <MX_SPI1_Init+0x64>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ac:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <MX_SPI1_Init+0x64>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <MX_SPI1_Init+0x64>)
 80014b4:	220a      	movs	r2, #10
 80014b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80014b8:	4804      	ldr	r0, [pc, #16]	@ (80014cc <MX_SPI1_Init+0x64>)
 80014ba:	f003 f90c 	bl	80046d6 <HAL_SPI_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_SPI1_Init+0x60>
		Error_Handler();
 80014c4:	f000 f95a 	bl	800177c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200000ec 	.word	0x200000ec
 80014d0:	40013000 	.word	0x40013000

080014d4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80014e8:	463b      	mov	r3, r7
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80014f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001568 <MX_TIM2_Init+0x94>)
 80014f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014f6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7;
 80014f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001568 <MX_TIM2_Init+0x94>)
 80014fa:	2207      	movs	r2, #7
 80014fc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001568 <MX_TIM2_Init+0x94>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001504:	4b18      	ldr	r3, [pc, #96]	@ (8001568 <MX_TIM2_Init+0x94>)
 8001506:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800150a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150c:	4b16      	ldr	r3, [pc, #88]	@ (8001568 <MX_TIM2_Init+0x94>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001512:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <MX_TIM2_Init+0x94>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001518:	4813      	ldr	r0, [pc, #76]	@ (8001568 <MX_TIM2_Init+0x94>)
 800151a:	f003 fe7e 	bl	800521a <HAL_TIM_Base_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM2_Init+0x54>
		Error_Handler();
 8001524:	f000 f92a 	bl	800177c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001528:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800152c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800152e:	f107 0308 	add.w	r3, r7, #8
 8001532:	4619      	mov	r1, r3
 8001534:	480c      	ldr	r0, [pc, #48]	@ (8001568 <MX_TIM2_Init+0x94>)
 8001536:	f003 ff29 	bl	800538c <HAL_TIM_ConfigClockSource>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM2_Init+0x70>
		Error_Handler();
 8001540:	f000 f91c 	bl	800177c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800154c:	463b      	mov	r3, r7
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	@ (8001568 <MX_TIM2_Init+0x94>)
 8001552:	f004 f8dd 	bl	8005710 <HAL_TIMEx_MasterConfigSynchronization>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 800155c:	f000 f90e 	bl	800177c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000144 	.word	0x20000144

0800156c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001570:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001572:	4a12      	ldr	r2, [pc, #72]	@ (80015bc <MX_USART1_UART_Init+0x50>)
 8001574:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001576:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001578:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800157c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800157e:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <MX_USART1_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001590:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001592:	220c      	movs	r2, #12
 8001594:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001596:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <MX_USART1_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80015a2:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <MX_USART1_UART_Init+0x4c>)
 80015a4:	f004 f90c 	bl	80057c0 <HAL_UART_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80015ae:	f000 f8e5 	bl	800177c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2000018c 	.word	0x2000018c
 80015bc:	40013800 	.word	0x40013800

080015c0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	@ 0x28
 80015c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015d4:	4b62      	ldr	r3, [pc, #392]	@ (8001760 <MX_GPIO_Init+0x1a0>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a61      	ldr	r2, [pc, #388]	@ (8001760 <MX_GPIO_Init+0x1a0>)
 80015da:	f043 0310 	orr.w	r3, r3, #16
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b5f      	ldr	r3, [pc, #380]	@ (8001760 <MX_GPIO_Init+0x1a0>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0310 	and.w	r3, r3, #16
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80015ec:	4b5c      	ldr	r3, [pc, #368]	@ (8001760 <MX_GPIO_Init+0x1a0>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	4a5b      	ldr	r2, [pc, #364]	@ (8001760 <MX_GPIO_Init+0x1a0>)
 80015f2:	f043 0320 	orr.w	r3, r3, #32
 80015f6:	6193      	str	r3, [r2, #24]
 80015f8:	4b59      	ldr	r3, [pc, #356]	@ (8001760 <MX_GPIO_Init+0x1a0>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0320 	and.w	r3, r3, #32
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001604:	4b56      	ldr	r3, [pc, #344]	@ (8001760 <MX_GPIO_Init+0x1a0>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	4a55      	ldr	r2, [pc, #340]	@ (8001760 <MX_GPIO_Init+0x1a0>)
 800160a:	f043 0304 	orr.w	r3, r3, #4
 800160e:	6193      	str	r3, [r2, #24]
 8001610:	4b53      	ldr	r3, [pc, #332]	@ (8001760 <MX_GPIO_Init+0x1a0>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800161c:	4b50      	ldr	r3, [pc, #320]	@ (8001760 <MX_GPIO_Init+0x1a0>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a4f      	ldr	r2, [pc, #316]	@ (8001760 <MX_GPIO_Init+0x1a0>)
 8001622:	f043 0308 	orr.w	r3, r3, #8
 8001626:	6193      	str	r3, [r2, #24]
 8001628:	4b4d      	ldr	r3, [pc, #308]	@ (8001760 <MX_GPIO_Init+0x1a0>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(NSS_SIGNAL_GPIO_Port, NSS_SIGNAL_Pin, GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	2110      	movs	r1, #16
 8001638:	484a      	ldr	r0, [pc, #296]	@ (8001764 <MX_GPIO_Init+0x1a4>)
 800163a:	f001 fbdf 	bl	8002dfc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800163e:	2201      	movs	r2, #1
 8001640:	f641 4102 	movw	r1, #7170	@ 0x1c02
 8001644:	4848      	ldr	r0, [pc, #288]	@ (8001768 <MX_GPIO_Init+0x1a8>)
 8001646:	f001 fbd9 	bl	8002dfc <HAL_GPIO_WritePin>
	RST_SIGNAL_Pin | MOSFET_GATE_SENSOR_Pin | MOSFET_GATE_LORA_Pin | V_LED_Pin,
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(INFO_LED_GPIO_Port, INFO_LED_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001650:	4845      	ldr	r0, [pc, #276]	@ (8001768 <MX_GPIO_Init+0x1a8>)
 8001652:	f001 fbd3 	bl	8002dfc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001656:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800165a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800165c:	2303      	movs	r3, #3
 800165e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	4841      	ldr	r0, [pc, #260]	@ (800176c <MX_GPIO_Init+0x1ac>)
 8001668:	f001 f998 	bl	800299c <HAL_GPIO_Init>

	/*Configure GPIO pins : PD0 PD1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800166c:	2303      	movs	r3, #3
 800166e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001670:	2303      	movs	r3, #3
 8001672:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4619      	mov	r1, r3
 800167a:	483d      	ldr	r0, [pc, #244]	@ (8001770 <MX_GPIO_Init+0x1b0>)
 800167c:	f001 f98e 	bl	800299c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA2 PA3 PA8 PA11
	 PA12 PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_11
 8001680:	f649 130c 	movw	r3, #39180	@ 0x990c
 8001684:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_12 | GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001686:	2303      	movs	r3, #3
 8001688:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4834      	ldr	r0, [pc, #208]	@ (8001764 <MX_GPIO_Init+0x1a4>)
 8001692:	f001 f983 	bl	800299c <HAL_GPIO_Init>

	/*Configure GPIO pin : NSS_SIGNAL_Pin */
	GPIO_InitStruct.Pin = NSS_SIGNAL_Pin;
 8001696:	2310      	movs	r3, #16
 8001698:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169a:	2301      	movs	r3, #1
 800169c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800169e:	2301      	movs	r3, #1
 80016a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2302      	movs	r3, #2
 80016a4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(NSS_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	482d      	ldr	r0, [pc, #180]	@ (8001764 <MX_GPIO_Init+0x1a4>)
 80016ae:	f001 f975 	bl	800299c <HAL_GPIO_Init>

	/*Configure GPIO pin : DIO0_INT_Pin */
	GPIO_InitStruct.Pin = DIO0_INT_Pin;
 80016b2:	2301      	movs	r3, #1
 80016b4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001774 <MX_GPIO_Init+0x1b4>)
 80016b8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DIO0_INT_GPIO_Port, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	4828      	ldr	r0, [pc, #160]	@ (8001768 <MX_GPIO_Init+0x1a8>)
 80016c6:	f001 f969 	bl	800299c <HAL_GPIO_Init>

	/*Configure GPIO pins : RST_SIGNAL_Pin INFO_LED_Pin */
	GPIO_InitStruct.Pin = RST_SIGNAL_Pin | INFO_LED_Pin;
 80016ca:	f248 0302 	movw	r3, #32770	@ 0x8002
 80016ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016d4:	2302      	movs	r3, #2
 80016d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2302      	movs	r3, #2
 80016da:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	4821      	ldr	r0, [pc, #132]	@ (8001768 <MX_GPIO_Init+0x1a8>)
 80016e4:	f001 f95a 	bl	800299c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB13 PB14 PB3
	 PB4 PB5 PB6 PB7
	 PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_3
 80016e8:	f246 33fc 	movw	r3, #25596	@ 0x63fc
 80016ec:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8
			| GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ee:	2303      	movs	r3, #3
 80016f0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	481b      	ldr	r0, [pc, #108]	@ (8001768 <MX_GPIO_Init+0x1a8>)
 80016fa:	f001 f94f 	bl	800299c <HAL_GPIO_Init>

	/*Configure GPIO pins : MOSFET_GATE_SENSOR_Pin MOSFET_GATE_LORA_Pin */
	GPIO_InitStruct.Pin = MOSFET_GATE_SENSOR_Pin | MOSFET_GATE_LORA_Pin;
 80016fe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001702:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001704:	2301      	movs	r3, #1
 8001706:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001708:	2301      	movs	r3, #1
 800170a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2302      	movs	r3, #2
 800170e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4619      	mov	r1, r3
 8001716:	4814      	ldr	r0, [pc, #80]	@ (8001768 <MX_GPIO_Init+0x1a8>)
 8001718:	f001 f940 	bl	800299c <HAL_GPIO_Init>

	/*Configure GPIO pin : V_LED_Pin */
	GPIO_InitStruct.Pin = V_LED_Pin;
 800171c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001720:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001722:	2301      	movs	r3, #1
 8001724:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800172a:	2303      	movs	r3, #3
 800172c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(V_LED_GPIO_Port, &GPIO_InitStruct);
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4619      	mov	r1, r3
 8001734:	480c      	ldr	r0, [pc, #48]	@ (8001768 <MX_GPIO_Init+0x1a8>)
 8001736:	f001 f931 	bl	800299c <HAL_GPIO_Init>

	/*Configure peripheral I/O remapping */
	__HAL_AFIO_REMAP_PD01_ENABLE();
 800173a:	4b0f      	ldr	r3, [pc, #60]	@ (8001778 <MX_GPIO_Init+0x1b8>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001742:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
 8001748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001750:	4a09      	ldr	r2, [pc, #36]	@ (8001778 <MX_GPIO_Init+0x1b8>)
 8001752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001754:	6053      	str	r3, [r2, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001756:	bf00      	nop
 8001758:	3728      	adds	r7, #40	@ 0x28
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000
 8001764:	40010800 	.word	0x40010800
 8001768:	40010c00 	.word	0x40010c00
 800176c:	40011000 	.word	0x40011000
 8001770:	40011400 	.word	0x40011400
 8001774:	10110000 	.word	0x10110000
 8001778:	40010000 	.word	0x40010000

0800177c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
}
 8001782:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <Error_Handler+0x8>

08001788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800178e:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <HAL_MspInit+0x5c>)
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	4a14      	ldr	r2, [pc, #80]	@ (80017e4 <HAL_MspInit+0x5c>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6193      	str	r3, [r2, #24]
 800179a:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <HAL_MspInit+0x5c>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <HAL_MspInit+0x5c>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	4a0e      	ldr	r2, [pc, #56]	@ (80017e4 <HAL_MspInit+0x5c>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b0:	61d3      	str	r3, [r2, #28]
 80017b2:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <HAL_MspInit+0x5c>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017be:	4b0a      	ldr	r3, [pc, #40]	@ (80017e8 <HAL_MspInit+0x60>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	4a04      	ldr	r2, [pc, #16]	@ (80017e8 <HAL_MspInit+0x60>)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017da:	bf00      	nop
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40010000 	.word	0x40010000

080017ec <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	@ 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0318 	add.w	r3, r7, #24
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a28      	ldr	r2, [pc, #160]	@ (80018a8 <HAL_ADC_MspInit+0xbc>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d122      	bne.n	8001852 <HAL_ADC_MspInit+0x66>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800180c:	4b27      	ldr	r3, [pc, #156]	@ (80018ac <HAL_ADC_MspInit+0xc0>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	4a26      	ldr	r2, [pc, #152]	@ (80018ac <HAL_ADC_MspInit+0xc0>)
 8001812:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001816:	6193      	str	r3, [r2, #24]
 8001818:	4b24      	ldr	r3, [pc, #144]	@ (80018ac <HAL_ADC_MspInit+0xc0>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001824:	4b21      	ldr	r3, [pc, #132]	@ (80018ac <HAL_ADC_MspInit+0xc0>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	4a20      	ldr	r2, [pc, #128]	@ (80018ac <HAL_ADC_MspInit+0xc0>)
 800182a:	f043 0304 	orr.w	r3, r3, #4
 800182e:	6193      	str	r3, [r2, #24]
 8001830:	4b1e      	ldr	r3, [pc, #120]	@ (80018ac <HAL_ADC_MspInit+0xc0>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = VCC_BAT_Pin;
 800183c:	2302      	movs	r3, #2
 800183e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001840:	2303      	movs	r3, #3
 8001842:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCC_BAT_GPIO_Port, &GPIO_InitStruct);
 8001844:	f107 0318 	add.w	r3, r7, #24
 8001848:	4619      	mov	r1, r3
 800184a:	4819      	ldr	r0, [pc, #100]	@ (80018b0 <HAL_ADC_MspInit+0xc4>)
 800184c:	f001 f8a6 	bl	800299c <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001850:	e026      	b.n	80018a0 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a17      	ldr	r2, [pc, #92]	@ (80018b4 <HAL_ADC_MspInit+0xc8>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d121      	bne.n	80018a0 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800185c:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <HAL_ADC_MspInit+0xc0>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4a12      	ldr	r2, [pc, #72]	@ (80018ac <HAL_ADC_MspInit+0xc0>)
 8001862:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001866:	6193      	str	r3, [r2, #24]
 8001868:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <HAL_ADC_MspInit+0xc0>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001874:	4b0d      	ldr	r3, [pc, #52]	@ (80018ac <HAL_ADC_MspInit+0xc0>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	4a0c      	ldr	r2, [pc, #48]	@ (80018ac <HAL_ADC_MspInit+0xc0>)
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	6193      	str	r3, [r2, #24]
 8001880:	4b0a      	ldr	r3, [pc, #40]	@ (80018ac <HAL_ADC_MspInit+0xc0>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = V0_Pin;
 800188c:	2301      	movs	r3, #1
 800188e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001890:	2303      	movs	r3, #3
 8001892:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V0_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 0318 	add.w	r3, r7, #24
 8001898:	4619      	mov	r1, r3
 800189a:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <HAL_ADC_MspInit+0xc4>)
 800189c:	f001 f87e 	bl	800299c <HAL_GPIO_Init>
}
 80018a0:	bf00      	nop
 80018a2:	3728      	adds	r7, #40	@ 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40012400 	.word	0x40012400
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40010800 	.word	0x40010800
 80018b4:	40012800 	.word	0x40012800

080018b8 <HAL_ADC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a10      	ldr	r2, [pc, #64]	@ (8001908 <HAL_ADC_MspDeInit+0x50>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d10a      	bne.n	80018e0 <HAL_ADC_MspDeInit+0x28>
  {
    /* USER CODE BEGIN ADC1_MspDeInit 0 */

    /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80018ca:	4b10      	ldr	r3, [pc, #64]	@ (800190c <HAL_ADC_MspDeInit+0x54>)
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	4a0f      	ldr	r2, [pc, #60]	@ (800190c <HAL_ADC_MspDeInit+0x54>)
 80018d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80018d4:	6193      	str	r3, [r2, #24]

    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    HAL_GPIO_DeInit(VCC_BAT_GPIO_Port, VCC_BAT_Pin);
 80018d6:	2102      	movs	r1, #2
 80018d8:	480d      	ldr	r0, [pc, #52]	@ (8001910 <HAL_ADC_MspDeInit+0x58>)
 80018da:	f001 f9db 	bl	8002c94 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN ADC2_MspDeInit 1 */

    /* USER CODE END ADC2_MspDeInit 1 */
  }

}
 80018de:	e00e      	b.n	80018fe <HAL_ADC_MspDeInit+0x46>
  else if(hadc->Instance==ADC2)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001914 <HAL_ADC_MspDeInit+0x5c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d109      	bne.n	80018fe <HAL_ADC_MspDeInit+0x46>
    __HAL_RCC_ADC2_CLK_DISABLE();
 80018ea:	4b08      	ldr	r3, [pc, #32]	@ (800190c <HAL_ADC_MspDeInit+0x54>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	4a07      	ldr	r2, [pc, #28]	@ (800190c <HAL_ADC_MspDeInit+0x54>)
 80018f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80018f4:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(V0_GPIO_Port, V0_Pin);
 80018f6:	2101      	movs	r1, #1
 80018f8:	4805      	ldr	r0, [pc, #20]	@ (8001910 <HAL_ADC_MspDeInit+0x58>)
 80018fa:	f001 f9cb 	bl	8002c94 <HAL_GPIO_DeInit>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40012400 	.word	0x40012400
 800190c:	40021000 	.word	0x40021000
 8001910:	40010800 	.word	0x40010800
 8001914:	40012800 	.word	0x40012800

08001918 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0f      	ldr	r2, [pc, #60]	@ (8001964 <HAL_RTC_MspInit+0x4c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d118      	bne.n	800195c <HAL_RTC_MspInit+0x44>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800192a:	f001 fa7f 	bl	8002e2c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800192e:	4b0e      	ldr	r3, [pc, #56]	@ (8001968 <HAL_RTC_MspInit+0x50>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	4a0d      	ldr	r2, [pc, #52]	@ (8001968 <HAL_RTC_MspInit+0x50>)
 8001934:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001938:	61d3      	str	r3, [r2, #28]
 800193a:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <HAL_RTC_MspInit+0x50>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001946:	4b09      	ldr	r3, [pc, #36]	@ (800196c <HAL_RTC_MspInit+0x54>)
 8001948:	2201      	movs	r2, #1
 800194a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800194c:	2200      	movs	r2, #0
 800194e:	2100      	movs	r1, #0
 8001950:	2003      	movs	r0, #3
 8001952:	f000 ffec 	bl	800292e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001956:	2003      	movs	r0, #3
 8001958:	f001 f805 	bl	8002966 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800195c:	bf00      	nop
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40002800 	.word	0x40002800
 8001968:	40021000 	.word	0x40021000
 800196c:	4242043c 	.word	0x4242043c

08001970 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 0310 	add.w	r3, r7, #16
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a1b      	ldr	r2, [pc, #108]	@ (80019f8 <HAL_SPI_MspInit+0x88>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d12f      	bne.n	80019f0 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001990:	4b1a      	ldr	r3, [pc, #104]	@ (80019fc <HAL_SPI_MspInit+0x8c>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a19      	ldr	r2, [pc, #100]	@ (80019fc <HAL_SPI_MspInit+0x8c>)
 8001996:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b17      	ldr	r3, [pc, #92]	@ (80019fc <HAL_SPI_MspInit+0x8c>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a8:	4b14      	ldr	r3, [pc, #80]	@ (80019fc <HAL_SPI_MspInit+0x8c>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	4a13      	ldr	r2, [pc, #76]	@ (80019fc <HAL_SPI_MspInit+0x8c>)
 80019ae:	f043 0304 	orr.w	r3, r3, #4
 80019b2:	6193      	str	r3, [r2, #24]
 80019b4:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <HAL_SPI_MspInit+0x8c>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80019c0:	23a0      	movs	r3, #160	@ 0xa0
 80019c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	4619      	mov	r1, r3
 80019d2:	480b      	ldr	r0, [pc, #44]	@ (8001a00 <HAL_SPI_MspInit+0x90>)
 80019d4:	f000 ffe2 	bl	800299c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019d8:	2340      	movs	r3, #64	@ 0x40
 80019da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e4:	f107 0310 	add.w	r3, r7, #16
 80019e8:	4619      	mov	r1, r3
 80019ea:	4805      	ldr	r0, [pc, #20]	@ (8001a00 <HAL_SPI_MspInit+0x90>)
 80019ec:	f000 ffd6 	bl	800299c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019f0:	bf00      	nop
 80019f2:	3720      	adds	r7, #32
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40013000 	.word	0x40013000
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010800 	.word	0x40010800

08001a04 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a14:	d10b      	bne.n	8001a2e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a16:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <HAL_TIM_Base_MspInit+0x34>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a07      	ldr	r2, [pc, #28]	@ (8001a38 <HAL_TIM_Base_MspInit+0x34>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	61d3      	str	r3, [r2, #28]
 8001a22:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <HAL_TIM_Base_MspInit+0x34>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	40021000 	.word	0x40021000

08001a3c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac8 <HAL_UART_MspInit+0x8c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d131      	bne.n	8001ac0 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001acc <HAL_UART_MspInit+0x90>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4a1a      	ldr	r2, [pc, #104]	@ (8001acc <HAL_UART_MspInit+0x90>)
 8001a62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a66:	6193      	str	r3, [r2, #24]
 8001a68:	4b18      	ldr	r3, [pc, #96]	@ (8001acc <HAL_UART_MspInit+0x90>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a74:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <HAL_UART_MspInit+0x90>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	4a14      	ldr	r2, [pc, #80]	@ (8001acc <HAL_UART_MspInit+0x90>)
 8001a7a:	f043 0304 	orr.w	r3, r3, #4
 8001a7e:	6193      	str	r3, [r2, #24]
 8001a80:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <HAL_UART_MspInit+0x90>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a96:	2303      	movs	r3, #3
 8001a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	480b      	ldr	r0, [pc, #44]	@ (8001ad0 <HAL_UART_MspInit+0x94>)
 8001aa2:	f000 ff7b 	bl	800299c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001aa6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab4:	f107 0310 	add.w	r3, r7, #16
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4805      	ldr	r0, [pc, #20]	@ (8001ad0 <HAL_UART_MspInit+0x94>)
 8001abc:	f000 ff6e 	bl	800299c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ac0:	bf00      	nop
 8001ac2:	3720      	adds	r7, #32
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40013800 	.word	0x40013800
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010800 	.word	0x40010800

08001ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <NMI_Handler+0x4>

08001adc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <HardFault_Handler+0x4>

08001ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <MemManage_Handler+0x4>

08001aec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <BusFault_Handler+0x4>

08001af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <UsageFault_Handler+0x4>

08001afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b24:	f000 f8b4 	bl	8001c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8001b30:	4802      	ldr	r0, [pc, #8]	@ (8001b3c <RTC_IRQHandler+0x10>)
 8001b32:	f002 fd87 	bl	8004644 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//	HAL_Delay(50);
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  /* USER CODE END RTC_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200000d8 	.word	0x200000d8

08001b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b48:	4a14      	ldr	r2, [pc, #80]	@ (8001b9c <_sbrk+0x5c>)
 8001b4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <_sbrk+0x60>)
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b54:	4b13      	ldr	r3, [pc, #76]	@ (8001ba4 <_sbrk+0x64>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d102      	bne.n	8001b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <_sbrk+0x64>)
 8001b5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ba8 <_sbrk+0x68>)
 8001b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b62:	4b10      	ldr	r3, [pc, #64]	@ (8001ba4 <_sbrk+0x64>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d207      	bcs.n	8001b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b70:	f004 feea 	bl	8006948 <__errno>
 8001b74:	4603      	mov	r3, r0
 8001b76:	220c      	movs	r2, #12
 8001b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	e009      	b.n	8001b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b80:	4b08      	ldr	r3, [pc, #32]	@ (8001ba4 <_sbrk+0x64>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b86:	4b07      	ldr	r3, [pc, #28]	@ (8001ba4 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ba4 <_sbrk+0x64>)
 8001b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b92:	68fb      	ldr	r3, [r7, #12]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20002800 	.word	0x20002800
 8001ba0:	00000400 	.word	0x00000400
 8001ba4:	200001f8 	.word	0x200001f8
 8001ba8:	20000380 	.word	0x20000380

08001bac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bb8:	f7ff fff8 	bl	8001bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bbc:	480b      	ldr	r0, [pc, #44]	@ (8001bec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bbe:	490c      	ldr	r1, [pc, #48]	@ (8001bf0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8001bf4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc4:	e002      	b.n	8001bcc <LoopCopyDataInit>

08001bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bca:	3304      	adds	r3, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd0:	d3f9      	bcc.n	8001bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd2:	4a09      	ldr	r2, [pc, #36]	@ (8001bf8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bd4:	4c09      	ldr	r4, [pc, #36]	@ (8001bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd8:	e001      	b.n	8001bde <LoopFillZerobss>

08001bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bdc:	3204      	adds	r2, #4

08001bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be0:	d3fb      	bcc.n	8001bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001be2:	f004 feb7 	bl	8006954 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001be6:	f7ff f9a3 	bl	8000f30 <main>
  bx lr
 8001bea:	4770      	bx	lr
  ldr r0, =_sdata
 8001bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001bf4:	080074fc 	.word	0x080074fc
  ldr r2, =_sbss
 8001bf8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001bfc:	20000380 	.word	0x20000380

08001c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c00:	e7fe      	b.n	8001c00 <ADC1_2_IRQHandler>
	...

08001c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c08:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <HAL_Init+0x28>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a07      	ldr	r2, [pc, #28]	@ (8001c2c <HAL_Init+0x28>)
 8001c0e:	f043 0310 	orr.w	r3, r3, #16
 8001c12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c14:	2003      	movs	r0, #3
 8001c16:	f000 fe7f 	bl	8002918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c1a:	200f      	movs	r0, #15
 8001c1c:	f000 f808 	bl	8001c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c20:	f7ff fdb2 	bl	8001788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40022000 	.word	0x40022000

08001c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c38:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <HAL_InitTick+0x54>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <HAL_InitTick+0x58>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 fe97 	bl	8002982 <HAL_SYSTICK_Config>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00e      	b.n	8001c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b0f      	cmp	r3, #15
 8001c62:	d80a      	bhi.n	8001c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c64:	2200      	movs	r2, #0
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f000 fe5f 	bl	800292e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c70:	4a06      	ldr	r2, [pc, #24]	@ (8001c8c <HAL_InitTick+0x5c>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e000      	b.n	8001c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000000 	.word	0x20000000
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	20000004 	.word	0x20000004

08001c90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <HAL_IncTick+0x1c>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <HAL_IncTick+0x20>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4a03      	ldr	r2, [pc, #12]	@ (8001cb0 <HAL_IncTick+0x20>)
 8001ca2:	6013      	str	r3, [r2, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	200001fc 	.word	0x200001fc

08001cb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb8:	4b02      	ldr	r3, [pc, #8]	@ (8001cc4 <HAL_GetTick+0x10>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	200001fc 	.word	0x200001fc

08001cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7ff fff0 	bl	8001cb4 <HAL_GetTick>
 8001cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce0:	d005      	beq.n	8001cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <HAL_Delay+0x44>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4413      	add	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cee:	bf00      	nop
 8001cf0:	f7ff ffe0 	bl	8001cb4 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d8f7      	bhi.n	8001cf0 <HAL_Delay+0x28>
  {
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000008 	.word	0x20000008

08001d10 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8001d14:	4b02      	ldr	r3, [pc, #8]	@ (8001d20 <HAL_GetUIDw0+0x10>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	1ffff7e8 	.word	0x1ffff7e8

08001d24 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001d28:	4b02      	ldr	r3, [pc, #8]	@ (8001d34 <HAL_GetUIDw1+0x10>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	1ffff7ec 	.word	0x1ffff7ec

08001d38 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001d3c:	4b02      	ldr	r3, [pc, #8]	@ (8001d48 <HAL_GetUIDw2+0x10>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	1ffff7f0 	.word	0x1ffff7f0

08001d4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e0be      	b.n	8001eec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff fd2e 	bl	80017ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 fcb3 	bl	80026fc <ADC_ConversionStop_Disable>
 8001d96:	4603      	mov	r3, r0
 8001d98:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9e:	f003 0310 	and.w	r3, r3, #16
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f040 8099 	bne.w	8001eda <HAL_ADC_Init+0x18e>
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f040 8095 	bne.w	8001eda <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001db8:	f023 0302 	bic.w	r3, r3, #2
 8001dbc:	f043 0202 	orr.w	r2, r3, #2
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dcc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	7b1b      	ldrb	r3, [r3, #12]
 8001dd2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001dd4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001de4:	d003      	beq.n	8001dee <HAL_ADC_Init+0xa2>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d102      	bne.n	8001df4 <HAL_ADC_Init+0xa8>
 8001dee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001df2:	e000      	b.n	8001df6 <HAL_ADC_Init+0xaa>
 8001df4:	2300      	movs	r3, #0
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	7d1b      	ldrb	r3, [r3, #20]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d119      	bne.n	8001e38 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	7b1b      	ldrb	r3, [r3, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d109      	bne.n	8001e20 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	035a      	lsls	r2, r3, #13
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	e00b      	b.n	8001e38 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e24:	f043 0220 	orr.w	r2, r3, #32
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e30:	f043 0201 	orr.w	r2, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	4b28      	ldr	r3, [pc, #160]	@ (8001ef4 <HAL_ADC_Init+0x1a8>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	68b9      	ldr	r1, [r7, #8]
 8001e5c:	430b      	orrs	r3, r1
 8001e5e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e68:	d003      	beq.n	8001e72 <HAL_ADC_Init+0x126>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d104      	bne.n	8001e7c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	051b      	lsls	r3, r3, #20
 8001e7a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e82:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	4b18      	ldr	r3, [pc, #96]	@ (8001ef8 <HAL_ADC_Init+0x1ac>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d10b      	bne.n	8001eb8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eaa:	f023 0303 	bic.w	r3, r3, #3
 8001eae:	f043 0201 	orr.w	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001eb6:	e018      	b.n	8001eea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ebc:	f023 0312 	bic.w	r3, r3, #18
 8001ec0:	f043 0210 	orr.w	r2, r3, #16
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ecc:	f043 0201 	orr.w	r2, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ed8:	e007      	b.n	8001eea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ede:	f043 0210 	orr.w	r2, r3, #16
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	ffe1f7fd 	.word	0xffe1f7fd
 8001ef8:	ff1f0efe 	.word	0xff1f0efe

08001efc <HAL_ADC_DeInit>:
  *         function HAL_ADC_MspDeInit().
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_ADC_DeInit+0x16>
  {
     return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e0ad      	b.n	800206e <HAL_ADC_DeInit+0x172>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f16:	f043 0202 	orr.w	r2, r3, #2
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 fbec 	bl	80026fc <ADC_ConversionStop_Disable>
 8001f24:	4603      	mov	r3, r0
 8001f26:	73fb      	strb	r3, [r7, #15]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status == HAL_OK)
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f040 809a 	bne.w	8002064 <HAL_ADC_DeInit+0x168>




    /* Reset register SR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 021f 	mvn.w	r2, #31
 8001f38:	601a      	str	r2, [r3, #0]
                                ADC_FLAG_JSTRT | ADC_FLAG_STRT));
                         
    /* Reset register CR1 */
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6859      	ldr	r1, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b4c      	ldr	r3, [pc, #304]	@ (8002078 <HAL_ADC_DeInit+0x17c>)
 8001f46:	400b      	ands	r3, r1
 8001f48:	6053      	str	r3, [r2, #4]
                                    ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
                                    ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
                                    ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
    
    /* Reset register CR2 */
    CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6899      	ldr	r1, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b49      	ldr	r3, [pc, #292]	@ (800207c <HAL_ADC_DeInit+0x180>)
 8001f56:	400b      	ands	r3, r1
 8001f58:	6093      	str	r3, [r2, #8]
                                    ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
                                    ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |          
                                    ADC_CR2_ADON                                          ));
    
    /* Reset register SMPR1 */
    CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8001f68:	60da      	str	r2, [r3, #12]
                                      ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
                                      ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10                    ));
    
    /* Reset register SMPR2 */
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8001f78:	611a      	str	r2, [r3, #16]
                                      ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
                                      ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
                                      ADC_SMPR2_SMP0                                    ));

    /* Reset register JOFR1 */
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001f88:	f023 030f 	bic.w	r3, r3, #15
 8001f8c:	6153      	str	r3, [r2, #20]
    /* Reset register JOFR2 */
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001f9c:	f023 030f 	bic.w	r3, r3, #15
 8001fa0:	6193      	str	r3, [r2, #24]
    /* Reset register JOFR3 */
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001fb0:	f023 030f 	bic.w	r3, r3, #15
 8001fb4:	61d3      	str	r3, [r2, #28]
    /* Reset register JOFR4 */
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001fc4:	f023 030f 	bic.w	r3, r3, #15
 8001fc8:	6213      	str	r3, [r2, #32]
    
    /* Reset register HTR */
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001fd8:	f023 030f 	bic.w	r3, r3, #15
 8001fdc:	6253      	str	r3, [r2, #36]	@ 0x24
    /* Reset register LTR */
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001fec:	f023 030f 	bic.w	r3, r3, #15
 8001ff0:	6293      	str	r3, [r2, #40]	@ 0x28
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002000:	62da      	str	r2, [r3, #44]	@ 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002010:	62da      	str	r2, [r3, #44]	@ 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR2 */
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8002020:	631a      	str	r2, [r3, #48]	@ 0x30
                                    ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
    
    /* Reset register SQR3 */
    CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8002030:	635a      	str	r2, [r3, #52]	@ 0x34
                                    ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	0d9b      	lsrs	r3, r3, #22
 800203e:	059b      	lsls	r3, r3, #22
 8002040:	6393      	str	r3, [r2, #56]	@ 0x38
                                    ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
                                    ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	0d9b      	lsrs	r3, r3, #22
 800204e:	059b      	lsls	r3, r3, #22
 8002050:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff fc30 	bl	80018b8 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET; 
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	629a      	str	r2, [r3, #40]	@ 0x28
  
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800206c:	7bfb      	ldrb	r3, [r7, #15]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	ff3f0000 	.word	0xff3f0000
 800207c:	ff0106f0 	.word	0xff0106f0

08002080 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_ADC_Start+0x1a>
 8002096:	2302      	movs	r3, #2
 8002098:	e098      	b.n	80021cc <HAL_ADC_Start+0x14c>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 fad0 	bl	8002648 <ADC_Enable>
 80020a8:	4603      	mov	r3, r0
 80020aa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 8087 	bne.w	80021c2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a41      	ldr	r2, [pc, #260]	@ (80021d4 <HAL_ADC_Start+0x154>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d105      	bne.n	80020de <HAL_ADC_Start+0x5e>
 80020d2:	4b41      	ldr	r3, [pc, #260]	@ (80021d8 <HAL_ADC_Start+0x158>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d115      	bne.n	800210a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d026      	beq.n	8002146 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002100:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002108:	e01d      	b.n	8002146 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a2f      	ldr	r2, [pc, #188]	@ (80021d8 <HAL_ADC_Start+0x158>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d004      	beq.n	800212a <HAL_ADC_Start+0xaa>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a2b      	ldr	r2, [pc, #172]	@ (80021d4 <HAL_ADC_Start+0x154>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d10d      	bne.n	8002146 <HAL_ADC_Start+0xc6>
 800212a:	4b2b      	ldr	r3, [pc, #172]	@ (80021d8 <HAL_ADC_Start+0x158>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002132:	2b00      	cmp	r3, #0
 8002134:	d007      	beq.n	8002146 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800213e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002156:	f023 0206 	bic.w	r2, r3, #6
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800215e:	e002      	b.n	8002166 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f06f 0202 	mvn.w	r2, #2
 8002176:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002182:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002186:	d113      	bne.n	80021b0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800218c:	4a11      	ldr	r2, [pc, #68]	@ (80021d4 <HAL_ADC_Start+0x154>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d105      	bne.n	800219e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002192:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <HAL_ADC_Start+0x158>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800219a:	2b00      	cmp	r3, #0
 800219c:	d108      	bne.n	80021b0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	e00c      	b.n	80021ca <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	e003      	b.n	80021ca <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40012800 	.word	0x40012800
 80021d8:	40012400 	.word	0x40012400

080021dc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_ADC_Stop+0x1a>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e01a      	b.n	800222c <HAL_ADC_Stop+0x50>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fa7c 	bl	80026fc <ADC_ConversionStop_Disable>
 8002204:	4603      	mov	r3, r0
 8002206:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d109      	bne.n	8002222 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002212:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002216:	f023 0301 	bic.w	r3, r3, #1
 800221a:	f043 0201 	orr.w	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800222a:	7bfb      	ldrb	r3, [r7, #15]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002234:	b590      	push	{r4, r7, lr}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800224a:	f7ff fd33 	bl	8001cb4 <HAL_GetTick>
 800224e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00b      	beq.n	8002276 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002262:	f043 0220 	orr.w	r2, r3, #32
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e0d3      	b.n	800241e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d131      	bne.n	80022e8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800228e:	2b00      	cmp	r3, #0
 8002290:	d12a      	bne.n	80022e8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002292:	e021      	b.n	80022d8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229a:	d01d      	beq.n	80022d8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d007      	beq.n	80022b2 <HAL_ADC_PollForConversion+0x7e>
 80022a2:	f7ff fd07 	bl	8001cb4 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d212      	bcs.n	80022d8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10b      	bne.n	80022d8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c4:	f043 0204 	orr.w	r2, r3, #4
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e0a2      	b.n	800241e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0d6      	beq.n	8002294 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80022e6:	e070      	b.n	80023ca <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80022e8:	4b4f      	ldr	r3, [pc, #316]	@ (8002428 <HAL_ADC_PollForConversion+0x1f4>)
 80022ea:	681c      	ldr	r4, [r3, #0]
 80022ec:	2002      	movs	r0, #2
 80022ee:	f001 fa87 	bl	8003800 <HAL_RCCEx_GetPeriphCLKFreq>
 80022f2:	4603      	mov	r3, r0
 80022f4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6919      	ldr	r1, [r3, #16]
 80022fe:	4b4b      	ldr	r3, [pc, #300]	@ (800242c <HAL_ADC_PollForConversion+0x1f8>)
 8002300:	400b      	ands	r3, r1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d118      	bne.n	8002338 <HAL_ADC_PollForConversion+0x104>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68d9      	ldr	r1, [r3, #12]
 800230c:	4b48      	ldr	r3, [pc, #288]	@ (8002430 <HAL_ADC_PollForConversion+0x1fc>)
 800230e:	400b      	ands	r3, r1
 8002310:	2b00      	cmp	r3, #0
 8002312:	d111      	bne.n	8002338 <HAL_ADC_PollForConversion+0x104>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6919      	ldr	r1, [r3, #16]
 800231a:	4b46      	ldr	r3, [pc, #280]	@ (8002434 <HAL_ADC_PollForConversion+0x200>)
 800231c:	400b      	ands	r3, r1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d108      	bne.n	8002334 <HAL_ADC_PollForConversion+0x100>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68d9      	ldr	r1, [r3, #12]
 8002328:	4b43      	ldr	r3, [pc, #268]	@ (8002438 <HAL_ADC_PollForConversion+0x204>)
 800232a:	400b      	ands	r3, r1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_ADC_PollForConversion+0x100>
 8002330:	2314      	movs	r3, #20
 8002332:	e020      	b.n	8002376 <HAL_ADC_PollForConversion+0x142>
 8002334:	2329      	movs	r3, #41	@ 0x29
 8002336:	e01e      	b.n	8002376 <HAL_ADC_PollForConversion+0x142>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6919      	ldr	r1, [r3, #16]
 800233e:	4b3d      	ldr	r3, [pc, #244]	@ (8002434 <HAL_ADC_PollForConversion+0x200>)
 8002340:	400b      	ands	r3, r1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d106      	bne.n	8002354 <HAL_ADC_PollForConversion+0x120>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68d9      	ldr	r1, [r3, #12]
 800234c:	4b3a      	ldr	r3, [pc, #232]	@ (8002438 <HAL_ADC_PollForConversion+0x204>)
 800234e:	400b      	ands	r3, r1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00d      	beq.n	8002370 <HAL_ADC_PollForConversion+0x13c>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6919      	ldr	r1, [r3, #16]
 800235a:	4b38      	ldr	r3, [pc, #224]	@ (800243c <HAL_ADC_PollForConversion+0x208>)
 800235c:	400b      	ands	r3, r1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d108      	bne.n	8002374 <HAL_ADC_PollForConversion+0x140>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68d9      	ldr	r1, [r3, #12]
 8002368:	4b34      	ldr	r3, [pc, #208]	@ (800243c <HAL_ADC_PollForConversion+0x208>)
 800236a:	400b      	ands	r3, r1
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_ADC_PollForConversion+0x140>
 8002370:	2354      	movs	r3, #84	@ 0x54
 8002372:	e000      	b.n	8002376 <HAL_ADC_PollForConversion+0x142>
 8002374:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002376:	fb02 f303 	mul.w	r3, r2, r3
 800237a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800237c:	e021      	b.n	80023c2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d01a      	beq.n	80023bc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d007      	beq.n	800239c <HAL_ADC_PollForConversion+0x168>
 800238c:	f7ff fc92 	bl	8001cb4 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d20f      	bcs.n	80023bc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d90b      	bls.n	80023bc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a8:	f043 0204 	orr.w	r2, r3, #4
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e030      	b.n	800241e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3301      	adds	r3, #1
 80023c0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d8d9      	bhi.n	800237e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f06f 0212 	mvn.w	r2, #18
 80023d2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80023ea:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80023ee:	d115      	bne.n	800241c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d111      	bne.n	800241c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002408:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d105      	bne.n	800241c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002414:	f043 0201 	orr.w	r2, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd90      	pop	{r4, r7, pc}
 8002426:	bf00      	nop
 8002428:	20000000 	.word	0x20000000
 800242c:	24924924 	.word	0x24924924
 8002430:	00924924 	.word	0x00924924
 8002434:	12492492 	.word	0x12492492
 8002438:	00492492 	.word	0x00492492
 800243c:	00249249 	.word	0x00249249

08002440 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x20>
 8002474:	2302      	movs	r3, #2
 8002476:	e0dc      	b.n	8002632 <HAL_ADC_ConfigChannel+0x1da>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b06      	cmp	r3, #6
 8002486:	d81c      	bhi.n	80024c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	3b05      	subs	r3, #5
 800249a:	221f      	movs	r2, #31
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	4019      	ands	r1, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	3b05      	subs	r3, #5
 80024b4:	fa00 f203 	lsl.w	r2, r0, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	635a      	str	r2, [r3, #52]	@ 0x34
 80024c0:	e03c      	b.n	800253c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b0c      	cmp	r3, #12
 80024c8:	d81c      	bhi.n	8002504 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	3b23      	subs	r3, #35	@ 0x23
 80024dc:	221f      	movs	r2, #31
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	4019      	ands	r1, r3
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	3b23      	subs	r3, #35	@ 0x23
 80024f6:	fa00 f203 	lsl.w	r2, r0, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	631a      	str	r2, [r3, #48]	@ 0x30
 8002502:	e01b      	b.n	800253c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	3b41      	subs	r3, #65	@ 0x41
 8002516:	221f      	movs	r2, #31
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	4019      	ands	r1, r3
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	3b41      	subs	r3, #65	@ 0x41
 8002530:	fa00 f203 	lsl.w	r2, r0, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b09      	cmp	r3, #9
 8002542:	d91c      	bls.n	800257e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68d9      	ldr	r1, [r3, #12]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4613      	mov	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	3b1e      	subs	r3, #30
 8002556:	2207      	movs	r2, #7
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	4019      	ands	r1, r3
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	6898      	ldr	r0, [r3, #8]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4613      	mov	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	3b1e      	subs	r3, #30
 8002570:	fa00 f203 	lsl.w	r2, r0, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	60da      	str	r2, [r3, #12]
 800257c:	e019      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6919      	ldr	r1, [r3, #16]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4613      	mov	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4413      	add	r3, r2
 800258e:	2207      	movs	r2, #7
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	4019      	ands	r1, r3
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	6898      	ldr	r0, [r3, #8]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	fa00 f203 	lsl.w	r2, r0, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b10      	cmp	r3, #16
 80025b8:	d003      	beq.n	80025c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025be:	2b11      	cmp	r3, #17
 80025c0:	d132      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a1d      	ldr	r2, [pc, #116]	@ (800263c <HAL_ADC_ConfigChannel+0x1e4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d125      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d126      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80025e8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b10      	cmp	r3, #16
 80025f0:	d11a      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025f2:	4b13      	ldr	r3, [pc, #76]	@ (8002640 <HAL_ADC_ConfigChannel+0x1e8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a13      	ldr	r2, [pc, #76]	@ (8002644 <HAL_ADC_ConfigChannel+0x1ec>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	0c9a      	lsrs	r2, r3, #18
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002608:	e002      	b.n	8002610 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	3b01      	subs	r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f9      	bne.n	800260a <HAL_ADC_ConfigChannel+0x1b2>
 8002616:	e007      	b.n	8002628 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261c:	f043 0220 	orr.w	r2, r3, #32
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002630:	7bfb      	ldrb	r3, [r7, #15]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	40012400 	.word	0x40012400
 8002640:	20000000 	.word	0x20000000
 8002644:	431bde83 	.word	0x431bde83

08002648 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b01      	cmp	r3, #1
 8002664:	d040      	beq.n	80026e8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0201 	orr.w	r2, r2, #1
 8002674:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002676:	4b1f      	ldr	r3, [pc, #124]	@ (80026f4 <ADC_Enable+0xac>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a1f      	ldr	r2, [pc, #124]	@ (80026f8 <ADC_Enable+0xb0>)
 800267c:	fba2 2303 	umull	r2, r3, r2, r3
 8002680:	0c9b      	lsrs	r3, r3, #18
 8002682:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002684:	e002      	b.n	800268c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	3b01      	subs	r3, #1
 800268a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f9      	bne.n	8002686 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002692:	f7ff fb0f 	bl	8001cb4 <HAL_GetTick>
 8002696:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002698:	e01f      	b.n	80026da <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800269a:	f7ff fb0b 	bl	8001cb4 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d918      	bls.n	80026da <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d011      	beq.n	80026da <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ba:	f043 0210 	orr.w	r2, r3, #16
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c6:	f043 0201 	orr.w	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e007      	b.n	80026ea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d1d8      	bne.n	800269a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000000 	.word	0x20000000
 80026f8:	431bde83 	.word	0x431bde83

080026fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b01      	cmp	r3, #1
 8002714:	d12e      	bne.n	8002774 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0201 	bic.w	r2, r2, #1
 8002724:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002726:	f7ff fac5 	bl	8001cb4 <HAL_GetTick>
 800272a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800272c:	e01b      	b.n	8002766 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800272e:	f7ff fac1 	bl	8001cb4 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d914      	bls.n	8002766 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b01      	cmp	r3, #1
 8002748:	d10d      	bne.n	8002766 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274e:	f043 0210 	orr.w	r2, r3, #16
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275a:	f043 0201 	orr.w	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e007      	b.n	8002776 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b01      	cmp	r3, #1
 8002772:	d0dc      	beq.n	800272e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002790:	4b0c      	ldr	r3, [pc, #48]	@ (80027c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800279c:	4013      	ands	r3, r2
 800279e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027b2:	4a04      	ldr	r2, [pc, #16]	@ (80027c4 <__NVIC_SetPriorityGrouping+0x44>)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	60d3      	str	r3, [r2, #12]
}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027cc:	4b04      	ldr	r3, [pc, #16]	@ (80027e0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	0a1b      	lsrs	r3, r3, #8
 80027d2:	f003 0307 	and.w	r3, r3, #7
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	db0b      	blt.n	800280e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	f003 021f 	and.w	r2, r3, #31
 80027fc:	4906      	ldr	r1, [pc, #24]	@ (8002818 <__NVIC_EnableIRQ+0x34>)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	2001      	movs	r0, #1
 8002806:	fa00 f202 	lsl.w	r2, r0, r2
 800280a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr
 8002818:	e000e100 	.word	0xe000e100

0800281c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	6039      	str	r1, [r7, #0]
 8002826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282c:	2b00      	cmp	r3, #0
 800282e:	db0a      	blt.n	8002846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	b2da      	uxtb	r2, r3
 8002834:	490c      	ldr	r1, [pc, #48]	@ (8002868 <__NVIC_SetPriority+0x4c>)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	0112      	lsls	r2, r2, #4
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	440b      	add	r3, r1
 8002840:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002844:	e00a      	b.n	800285c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4908      	ldr	r1, [pc, #32]	@ (800286c <__NVIC_SetPriority+0x50>)
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	3b04      	subs	r3, #4
 8002854:	0112      	lsls	r2, r2, #4
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	440b      	add	r3, r1
 800285a:	761a      	strb	r2, [r3, #24]
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	e000e100 	.word	0xe000e100
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002870:	b480      	push	{r7}
 8002872:	b089      	sub	sp, #36	@ 0x24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f1c3 0307 	rsb	r3, r3, #7
 800288a:	2b04      	cmp	r3, #4
 800288c:	bf28      	it	cs
 800288e:	2304      	movcs	r3, #4
 8002890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3304      	adds	r3, #4
 8002896:	2b06      	cmp	r3, #6
 8002898:	d902      	bls.n	80028a0 <NVIC_EncodePriority+0x30>
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3b03      	subs	r3, #3
 800289e:	e000      	b.n	80028a2 <NVIC_EncodePriority+0x32>
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a4:	f04f 32ff 	mov.w	r2, #4294967295
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43da      	mvns	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	401a      	ands	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b8:	f04f 31ff 	mov.w	r1, #4294967295
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	fa01 f303 	lsl.w	r3, r1, r3
 80028c2:	43d9      	mvns	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c8:	4313      	orrs	r3, r2
         );
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3724      	adds	r7, #36	@ 0x24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3b01      	subs	r3, #1
 80028e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028e4:	d301      	bcc.n	80028ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028e6:	2301      	movs	r3, #1
 80028e8:	e00f      	b.n	800290a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002914 <SysTick_Config+0x40>)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028f2:	210f      	movs	r1, #15
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
 80028f8:	f7ff ff90 	bl	800281c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028fc:	4b05      	ldr	r3, [pc, #20]	@ (8002914 <SysTick_Config+0x40>)
 80028fe:	2200      	movs	r2, #0
 8002900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002902:	4b04      	ldr	r3, [pc, #16]	@ (8002914 <SysTick_Config+0x40>)
 8002904:	2207      	movs	r2, #7
 8002906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	e000e010 	.word	0xe000e010

08002918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff ff2d 	bl	8002780 <__NVIC_SetPriorityGrouping>
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800292e:	b580      	push	{r7, lr}
 8002930:	b086      	sub	sp, #24
 8002932:	af00      	add	r7, sp, #0
 8002934:	4603      	mov	r3, r0
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
 800293a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002940:	f7ff ff42 	bl	80027c8 <__NVIC_GetPriorityGrouping>
 8002944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	6978      	ldr	r0, [r7, #20]
 800294c:	f7ff ff90 	bl	8002870 <NVIC_EncodePriority>
 8002950:	4602      	mov	r2, r0
 8002952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002956:	4611      	mov	r1, r2
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff5f 	bl	800281c <__NVIC_SetPriority>
}
 800295e:	bf00      	nop
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff35 	bl	80027e4 <__NVIC_EnableIRQ>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ffa2 	bl	80028d4 <SysTick_Config>
 8002990:	4603      	mov	r3, r0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800299c:	b480      	push	{r7}
 800299e:	b08b      	sub	sp, #44	@ 0x2c
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029a6:	2300      	movs	r3, #0
 80029a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029aa:	2300      	movs	r3, #0
 80029ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ae:	e161      	b.n	8002c74 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029b0:	2201      	movs	r2, #1
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	f040 8150 	bne.w	8002c6e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4a97      	ldr	r2, [pc, #604]	@ (8002c30 <HAL_GPIO_Init+0x294>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d05e      	beq.n	8002a96 <HAL_GPIO_Init+0xfa>
 80029d8:	4a95      	ldr	r2, [pc, #596]	@ (8002c30 <HAL_GPIO_Init+0x294>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d875      	bhi.n	8002aca <HAL_GPIO_Init+0x12e>
 80029de:	4a95      	ldr	r2, [pc, #596]	@ (8002c34 <HAL_GPIO_Init+0x298>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d058      	beq.n	8002a96 <HAL_GPIO_Init+0xfa>
 80029e4:	4a93      	ldr	r2, [pc, #588]	@ (8002c34 <HAL_GPIO_Init+0x298>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d86f      	bhi.n	8002aca <HAL_GPIO_Init+0x12e>
 80029ea:	4a93      	ldr	r2, [pc, #588]	@ (8002c38 <HAL_GPIO_Init+0x29c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d052      	beq.n	8002a96 <HAL_GPIO_Init+0xfa>
 80029f0:	4a91      	ldr	r2, [pc, #580]	@ (8002c38 <HAL_GPIO_Init+0x29c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d869      	bhi.n	8002aca <HAL_GPIO_Init+0x12e>
 80029f6:	4a91      	ldr	r2, [pc, #580]	@ (8002c3c <HAL_GPIO_Init+0x2a0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d04c      	beq.n	8002a96 <HAL_GPIO_Init+0xfa>
 80029fc:	4a8f      	ldr	r2, [pc, #572]	@ (8002c3c <HAL_GPIO_Init+0x2a0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d863      	bhi.n	8002aca <HAL_GPIO_Init+0x12e>
 8002a02:	4a8f      	ldr	r2, [pc, #572]	@ (8002c40 <HAL_GPIO_Init+0x2a4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d046      	beq.n	8002a96 <HAL_GPIO_Init+0xfa>
 8002a08:	4a8d      	ldr	r2, [pc, #564]	@ (8002c40 <HAL_GPIO_Init+0x2a4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d85d      	bhi.n	8002aca <HAL_GPIO_Init+0x12e>
 8002a0e:	2b12      	cmp	r3, #18
 8002a10:	d82a      	bhi.n	8002a68 <HAL_GPIO_Init+0xcc>
 8002a12:	2b12      	cmp	r3, #18
 8002a14:	d859      	bhi.n	8002aca <HAL_GPIO_Init+0x12e>
 8002a16:	a201      	add	r2, pc, #4	@ (adr r2, 8002a1c <HAL_GPIO_Init+0x80>)
 8002a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1c:	08002a97 	.word	0x08002a97
 8002a20:	08002a71 	.word	0x08002a71
 8002a24:	08002a83 	.word	0x08002a83
 8002a28:	08002ac5 	.word	0x08002ac5
 8002a2c:	08002acb 	.word	0x08002acb
 8002a30:	08002acb 	.word	0x08002acb
 8002a34:	08002acb 	.word	0x08002acb
 8002a38:	08002acb 	.word	0x08002acb
 8002a3c:	08002acb 	.word	0x08002acb
 8002a40:	08002acb 	.word	0x08002acb
 8002a44:	08002acb 	.word	0x08002acb
 8002a48:	08002acb 	.word	0x08002acb
 8002a4c:	08002acb 	.word	0x08002acb
 8002a50:	08002acb 	.word	0x08002acb
 8002a54:	08002acb 	.word	0x08002acb
 8002a58:	08002acb 	.word	0x08002acb
 8002a5c:	08002acb 	.word	0x08002acb
 8002a60:	08002a79 	.word	0x08002a79
 8002a64:	08002a8d 	.word	0x08002a8d
 8002a68:	4a76      	ldr	r2, [pc, #472]	@ (8002c44 <HAL_GPIO_Init+0x2a8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d013      	beq.n	8002a96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a6e:	e02c      	b.n	8002aca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	623b      	str	r3, [r7, #32]
          break;
 8002a76:	e029      	b.n	8002acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	623b      	str	r3, [r7, #32]
          break;
 8002a80:	e024      	b.n	8002acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	3308      	adds	r3, #8
 8002a88:	623b      	str	r3, [r7, #32]
          break;
 8002a8a:	e01f      	b.n	8002acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	330c      	adds	r3, #12
 8002a92:	623b      	str	r3, [r7, #32]
          break;
 8002a94:	e01a      	b.n	8002acc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d102      	bne.n	8002aa4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	623b      	str	r3, [r7, #32]
          break;
 8002aa2:	e013      	b.n	8002acc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d105      	bne.n	8002ab8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002aac:	2308      	movs	r3, #8
 8002aae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	611a      	str	r2, [r3, #16]
          break;
 8002ab6:	e009      	b.n	8002acc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ab8:	2308      	movs	r3, #8
 8002aba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	615a      	str	r2, [r3, #20]
          break;
 8002ac2:	e003      	b.n	8002acc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	623b      	str	r3, [r7, #32]
          break;
 8002ac8:	e000      	b.n	8002acc <HAL_GPIO_Init+0x130>
          break;
 8002aca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	2bff      	cmp	r3, #255	@ 0xff
 8002ad0:	d801      	bhi.n	8002ad6 <HAL_GPIO_Init+0x13a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	e001      	b.n	8002ada <HAL_GPIO_Init+0x13e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	2bff      	cmp	r3, #255	@ 0xff
 8002ae0:	d802      	bhi.n	8002ae8 <HAL_GPIO_Init+0x14c>
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	e002      	b.n	8002aee <HAL_GPIO_Init+0x152>
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aea:	3b08      	subs	r3, #8
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	210f      	movs	r1, #15
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	fa01 f303 	lsl.w	r3, r1, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	401a      	ands	r2, r3
 8002b00:	6a39      	ldr	r1, [r7, #32]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	fa01 f303 	lsl.w	r3, r1, r3
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 80a9 	beq.w	8002c6e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b1c:	4b4a      	ldr	r3, [pc, #296]	@ (8002c48 <HAL_GPIO_Init+0x2ac>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	4a49      	ldr	r2, [pc, #292]	@ (8002c48 <HAL_GPIO_Init+0x2ac>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6193      	str	r3, [r2, #24]
 8002b28:	4b47      	ldr	r3, [pc, #284]	@ (8002c48 <HAL_GPIO_Init+0x2ac>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b34:	4a45      	ldr	r2, [pc, #276]	@ (8002c4c <HAL_GPIO_Init+0x2b0>)
 8002b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b38:	089b      	lsrs	r3, r3, #2
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	220f      	movs	r2, #15
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4013      	ands	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a3d      	ldr	r2, [pc, #244]	@ (8002c50 <HAL_GPIO_Init+0x2b4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d00d      	beq.n	8002b7c <HAL_GPIO_Init+0x1e0>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a3c      	ldr	r2, [pc, #240]	@ (8002c54 <HAL_GPIO_Init+0x2b8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d007      	beq.n	8002b78 <HAL_GPIO_Init+0x1dc>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a3b      	ldr	r2, [pc, #236]	@ (8002c58 <HAL_GPIO_Init+0x2bc>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d101      	bne.n	8002b74 <HAL_GPIO_Init+0x1d8>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e004      	b.n	8002b7e <HAL_GPIO_Init+0x1e2>
 8002b74:	2303      	movs	r3, #3
 8002b76:	e002      	b.n	8002b7e <HAL_GPIO_Init+0x1e2>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <HAL_GPIO_Init+0x1e2>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b80:	f002 0203 	and.w	r2, r2, #3
 8002b84:	0092      	lsls	r2, r2, #2
 8002b86:	4093      	lsls	r3, r2
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b8e:	492f      	ldr	r1, [pc, #188]	@ (8002c4c <HAL_GPIO_Init+0x2b0>)
 8002b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b92:	089b      	lsrs	r3, r3, #2
 8002b94:	3302      	adds	r3, #2
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d006      	beq.n	8002bb6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ba8:	4b2c      	ldr	r3, [pc, #176]	@ (8002c5c <HAL_GPIO_Init+0x2c0>)
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	492b      	ldr	r1, [pc, #172]	@ (8002c5c <HAL_GPIO_Init+0x2c0>)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	608b      	str	r3, [r1, #8]
 8002bb4:	e006      	b.n	8002bc4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bb6:	4b29      	ldr	r3, [pc, #164]	@ (8002c5c <HAL_GPIO_Init+0x2c0>)
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	4927      	ldr	r1, [pc, #156]	@ (8002c5c <HAL_GPIO_Init+0x2c0>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d006      	beq.n	8002bde <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bd0:	4b22      	ldr	r3, [pc, #136]	@ (8002c5c <HAL_GPIO_Init+0x2c0>)
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	4921      	ldr	r1, [pc, #132]	@ (8002c5c <HAL_GPIO_Init+0x2c0>)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60cb      	str	r3, [r1, #12]
 8002bdc:	e006      	b.n	8002bec <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bde:	4b1f      	ldr	r3, [pc, #124]	@ (8002c5c <HAL_GPIO_Init+0x2c0>)
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	43db      	mvns	r3, r3
 8002be6:	491d      	ldr	r1, [pc, #116]	@ (8002c5c <HAL_GPIO_Init+0x2c0>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d006      	beq.n	8002c06 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bf8:	4b18      	ldr	r3, [pc, #96]	@ (8002c5c <HAL_GPIO_Init+0x2c0>)
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	4917      	ldr	r1, [pc, #92]	@ (8002c5c <HAL_GPIO_Init+0x2c0>)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]
 8002c04:	e006      	b.n	8002c14 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c06:	4b15      	ldr	r3, [pc, #84]	@ (8002c5c <HAL_GPIO_Init+0x2c0>)
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	4913      	ldr	r1, [pc, #76]	@ (8002c5c <HAL_GPIO_Init+0x2c0>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d01f      	beq.n	8002c60 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c20:	4b0e      	ldr	r3, [pc, #56]	@ (8002c5c <HAL_GPIO_Init+0x2c0>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	490d      	ldr	r1, [pc, #52]	@ (8002c5c <HAL_GPIO_Init+0x2c0>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	600b      	str	r3, [r1, #0]
 8002c2c:	e01f      	b.n	8002c6e <HAL_GPIO_Init+0x2d2>
 8002c2e:	bf00      	nop
 8002c30:	10320000 	.word	0x10320000
 8002c34:	10310000 	.word	0x10310000
 8002c38:	10220000 	.word	0x10220000
 8002c3c:	10210000 	.word	0x10210000
 8002c40:	10120000 	.word	0x10120000
 8002c44:	10110000 	.word	0x10110000
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40010000 	.word	0x40010000
 8002c50:	40010800 	.word	0x40010800
 8002c54:	40010c00 	.word	0x40010c00
 8002c58:	40011000 	.word	0x40011000
 8002c5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c60:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <HAL_GPIO_Init+0x2f4>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	43db      	mvns	r3, r3
 8002c68:	4909      	ldr	r1, [pc, #36]	@ (8002c90 <HAL_GPIO_Init+0x2f4>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c70:	3301      	adds	r3, #1
 8002c72:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f47f ae96 	bne.w	80029b0 <HAL_GPIO_Init+0x14>
  }
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	372c      	adds	r7, #44	@ 0x2c
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr
 8002c90:	40010400 	.word	0x40010400

08002c94 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b089      	sub	sp, #36	@ 0x24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8002ca2:	e094      	b.n	8002dce <HAL_GPIO_DeInit+0x13a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 8087 	beq.w	8002dc8 <HAL_GPIO_DeInit+0x134>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002cba:	4a4b      	ldr	r2, [pc, #300]	@ (8002de8 <HAL_GPIO_DeInit+0x154>)
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	089b      	lsrs	r3, r3, #2
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	220f      	movs	r2, #15
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a43      	ldr	r2, [pc, #268]	@ (8002dec <HAL_GPIO_DeInit+0x158>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d00d      	beq.n	8002d00 <HAL_GPIO_DeInit+0x6c>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a42      	ldr	r2, [pc, #264]	@ (8002df0 <HAL_GPIO_DeInit+0x15c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d007      	beq.n	8002cfc <HAL_GPIO_DeInit+0x68>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a41      	ldr	r2, [pc, #260]	@ (8002df4 <HAL_GPIO_DeInit+0x160>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d101      	bne.n	8002cf8 <HAL_GPIO_DeInit+0x64>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e004      	b.n	8002d02 <HAL_GPIO_DeInit+0x6e>
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e002      	b.n	8002d02 <HAL_GPIO_DeInit+0x6e>
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <HAL_GPIO_DeInit+0x6e>
 8002d00:	2300      	movs	r3, #0
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	f002 0203 	and.w	r2, r2, #3
 8002d08:	0092      	lsls	r2, r2, #2
 8002d0a:	4093      	lsls	r3, r2
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d132      	bne.n	8002d78 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002d12:	4b39      	ldr	r3, [pc, #228]	@ (8002df8 <HAL_GPIO_DeInit+0x164>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	4937      	ldr	r1, [pc, #220]	@ (8002df8 <HAL_GPIO_DeInit+0x164>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002d20:	4b35      	ldr	r3, [pc, #212]	@ (8002df8 <HAL_GPIO_DeInit+0x164>)
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	4933      	ldr	r1, [pc, #204]	@ (8002df8 <HAL_GPIO_DeInit+0x164>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002d2e:	4b32      	ldr	r3, [pc, #200]	@ (8002df8 <HAL_GPIO_DeInit+0x164>)
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	4930      	ldr	r1, [pc, #192]	@ (8002df8 <HAL_GPIO_DeInit+0x164>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002d3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002df8 <HAL_GPIO_DeInit+0x164>)
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	492c      	ldr	r1, [pc, #176]	@ (8002df8 <HAL_GPIO_DeInit+0x164>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	220f      	movs	r2, #15
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8002d5a:	4a23      	ldr	r2, [pc, #140]	@ (8002de8 <HAL_GPIO_DeInit+0x154>)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	089b      	lsrs	r3, r3, #2
 8002d60:	3302      	adds	r3, #2
 8002d62:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	43da      	mvns	r2, r3
 8002d6a:	481f      	ldr	r0, [pc, #124]	@ (8002de8 <HAL_GPIO_DeInit+0x154>)
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	089b      	lsrs	r3, r3, #2
 8002d70:	400a      	ands	r2, r1
 8002d72:	3302      	adds	r3, #2
 8002d74:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	2bff      	cmp	r3, #255	@ 0xff
 8002d7c:	d801      	bhi.n	8002d82 <HAL_GPIO_DeInit+0xee>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	e001      	b.n	8002d86 <HAL_GPIO_DeInit+0xf2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3304      	adds	r3, #4
 8002d86:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2bff      	cmp	r3, #255	@ 0xff
 8002d8c:	d802      	bhi.n	8002d94 <HAL_GPIO_DeInit+0x100>
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	e002      	b.n	8002d9a <HAL_GPIO_DeInit+0x106>
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	3b08      	subs	r3, #8
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	210f      	movs	r1, #15
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	fa01 f303 	lsl.w	r3, r1, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	401a      	ands	r2, r3
 8002dac:	2104      	movs	r1, #4
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	fa01 f303 	lsl.w	r3, r1, r3
 8002db4:	431a      	orrs	r2, r3
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f47f af64 	bne.w	8002ca4 <HAL_GPIO_DeInit+0x10>
  }
}
 8002ddc:	bf00      	nop
 8002dde:	bf00      	nop
 8002de0:	3724      	adds	r7, #36	@ 0x24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	40010000 	.word	0x40010000
 8002dec:	40010800 	.word	0x40010800
 8002df0:	40010c00 	.word	0x40010c00
 8002df4:	40011000 	.word	0x40011000
 8002df8:	40010400 	.word	0x40010400

08002dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	807b      	strh	r3, [r7, #2]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e0c:	787b      	ldrb	r3, [r7, #1]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e12:	887a      	ldrh	r2, [r7, #2]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e18:	e003      	b.n	8002e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e1a:	887b      	ldrh	r3, [r7, #2]
 8002e1c:	041a      	lsls	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	611a      	str	r2, [r3, #16]
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002e30:	4b03      	ldr	r3, [pc, #12]	@ (8002e40 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	601a      	str	r2, [r3, #0]
}
 8002e36:	bf00      	nop
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	420e0020 	.word	0x420e0020

08002e44 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8002e48:	4b08      	ldr	r3, [pc, #32]	@ (8002e6c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a07      	ldr	r2, [pc, #28]	@ (8002e6c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002e4e:	f043 0302 	orr.w	r3, r3, #2
 8002e52:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002e54:	4b06      	ldr	r3, [pc, #24]	@ (8002e70 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	4a05      	ldr	r2, [pc, #20]	@ (8002e70 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002e5a:	f043 0304 	orr.w	r3, r3, #4
 8002e5e:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8002e60:	bf30      	wfi
}
 8002e62:	bf00      	nop
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40007000 	.word	0x40007000
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e272      	b.n	800336c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 8087 	beq.w	8002fa2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e94:	4b92      	ldr	r3, [pc, #584]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d00c      	beq.n	8002eba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ea0:	4b8f      	ldr	r3, [pc, #572]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 030c 	and.w	r3, r3, #12
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d112      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x5e>
 8002eac:	4b8c      	ldr	r3, [pc, #560]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eb8:	d10b      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eba:	4b89      	ldr	r3, [pc, #548]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d06c      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x12c>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d168      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e24c      	b.n	800336c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eda:	d106      	bne.n	8002eea <HAL_RCC_OscConfig+0x76>
 8002edc:	4b80      	ldr	r3, [pc, #512]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a7f      	ldr	r2, [pc, #508]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	e02e      	b.n	8002f48 <HAL_RCC_OscConfig+0xd4>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10c      	bne.n	8002f0c <HAL_RCC_OscConfig+0x98>
 8002ef2:	4b7b      	ldr	r3, [pc, #492]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a7a      	ldr	r2, [pc, #488]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	4b78      	ldr	r3, [pc, #480]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a77      	ldr	r2, [pc, #476]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	e01d      	b.n	8002f48 <HAL_RCC_OscConfig+0xd4>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCC_OscConfig+0xbc>
 8002f16:	4b72      	ldr	r3, [pc, #456]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a71      	ldr	r2, [pc, #452]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	4b6f      	ldr	r3, [pc, #444]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a6e      	ldr	r2, [pc, #440]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e00b      	b.n	8002f48 <HAL_RCC_OscConfig+0xd4>
 8002f30:	4b6b      	ldr	r3, [pc, #428]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a6a      	ldr	r2, [pc, #424]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002f36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	4b68      	ldr	r3, [pc, #416]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a67      	ldr	r2, [pc, #412]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002f42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d013      	beq.n	8002f78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe feb0 	bl	8001cb4 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fe feac 	bl	8001cb4 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	@ 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e200      	b.n	800336c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6a:	4b5d      	ldr	r3, [pc, #372]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0xe4>
 8002f76:	e014      	b.n	8002fa2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7fe fe9c 	bl	8001cb4 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f80:	f7fe fe98 	bl	8001cb4 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	@ 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e1ec      	b.n	800336c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f92:	4b53      	ldr	r3, [pc, #332]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x10c>
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d063      	beq.n	8003076 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fae:	4b4c      	ldr	r3, [pc, #304]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00b      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fba:	4b49      	ldr	r3, [pc, #292]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d11c      	bne.n	8003000 <HAL_RCC_OscConfig+0x18c>
 8002fc6:	4b46      	ldr	r3, [pc, #280]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d116      	bne.n	8003000 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd2:	4b43      	ldr	r3, [pc, #268]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d005      	beq.n	8002fea <HAL_RCC_OscConfig+0x176>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d001      	beq.n	8002fea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e1c0      	b.n	800336c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fea:	4b3d      	ldr	r3, [pc, #244]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4939      	ldr	r1, [pc, #228]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffe:	e03a      	b.n	8003076 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d020      	beq.n	800304a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003008:	4b36      	ldr	r3, [pc, #216]	@ (80030e4 <HAL_RCC_OscConfig+0x270>)
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300e:	f7fe fe51 	bl	8001cb4 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003016:	f7fe fe4d 	bl	8001cb4 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e1a1      	b.n	800336c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003028:	4b2d      	ldr	r3, [pc, #180]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003034:	4b2a      	ldr	r3, [pc, #168]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	4927      	ldr	r1, [pc, #156]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 8003044:	4313      	orrs	r3, r2
 8003046:	600b      	str	r3, [r1, #0]
 8003048:	e015      	b.n	8003076 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800304a:	4b26      	ldr	r3, [pc, #152]	@ (80030e4 <HAL_RCC_OscConfig+0x270>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003050:	f7fe fe30 	bl	8001cb4 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003058:	f7fe fe2c 	bl	8001cb4 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e180      	b.n	800336c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306a:	4b1d      	ldr	r3, [pc, #116]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d03a      	beq.n	80030f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d019      	beq.n	80030be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800308a:	4b17      	ldr	r3, [pc, #92]	@ (80030e8 <HAL_RCC_OscConfig+0x274>)
 800308c:	2201      	movs	r2, #1
 800308e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003090:	f7fe fe10 	bl	8001cb4 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003098:	f7fe fe0c 	bl	8001cb4 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e160      	b.n	800336c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030aa:	4b0d      	ldr	r3, [pc, #52]	@ (80030e0 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0f0      	beq.n	8003098 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030b6:	2001      	movs	r0, #1
 80030b8:	f000 face 	bl	8003658 <RCC_Delay>
 80030bc:	e01c      	b.n	80030f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030be:	4b0a      	ldr	r3, [pc, #40]	@ (80030e8 <HAL_RCC_OscConfig+0x274>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c4:	f7fe fdf6 	bl	8001cb4 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ca:	e00f      	b.n	80030ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030cc:	f7fe fdf2 	bl	8001cb4 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d908      	bls.n	80030ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e146      	b.n	800336c <HAL_RCC_OscConfig+0x4f8>
 80030de:	bf00      	nop
 80030e0:	40021000 	.word	0x40021000
 80030e4:	42420000 	.word	0x42420000
 80030e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ec:	4b92      	ldr	r3, [pc, #584]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 80030ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1e9      	bne.n	80030cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80a6 	beq.w	8003252 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003106:	2300      	movs	r3, #0
 8003108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800310a:	4b8b      	ldr	r3, [pc, #556]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10d      	bne.n	8003132 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003116:	4b88      	ldr	r3, [pc, #544]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	4a87      	ldr	r2, [pc, #540]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 800311c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003120:	61d3      	str	r3, [r2, #28]
 8003122:	4b85      	ldr	r3, [pc, #532]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800312e:	2301      	movs	r3, #1
 8003130:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003132:	4b82      	ldr	r3, [pc, #520]	@ (800333c <HAL_RCC_OscConfig+0x4c8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d118      	bne.n	8003170 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800313e:	4b7f      	ldr	r3, [pc, #508]	@ (800333c <HAL_RCC_OscConfig+0x4c8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a7e      	ldr	r2, [pc, #504]	@ (800333c <HAL_RCC_OscConfig+0x4c8>)
 8003144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314a:	f7fe fdb3 	bl	8001cb4 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003152:	f7fe fdaf 	bl	8001cb4 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b64      	cmp	r3, #100	@ 0x64
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e103      	b.n	800336c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003164:	4b75      	ldr	r3, [pc, #468]	@ (800333c <HAL_RCC_OscConfig+0x4c8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0f0      	beq.n	8003152 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d106      	bne.n	8003186 <HAL_RCC_OscConfig+0x312>
 8003178:	4b6f      	ldr	r3, [pc, #444]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	4a6e      	ldr	r2, [pc, #440]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	6213      	str	r3, [r2, #32]
 8003184:	e02d      	b.n	80031e2 <HAL_RCC_OscConfig+0x36e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x334>
 800318e:	4b6a      	ldr	r3, [pc, #424]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	4a69      	ldr	r2, [pc, #420]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	6213      	str	r3, [r2, #32]
 800319a:	4b67      	ldr	r3, [pc, #412]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	4a66      	ldr	r2, [pc, #408]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 80031a0:	f023 0304 	bic.w	r3, r3, #4
 80031a4:	6213      	str	r3, [r2, #32]
 80031a6:	e01c      	b.n	80031e2 <HAL_RCC_OscConfig+0x36e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b05      	cmp	r3, #5
 80031ae:	d10c      	bne.n	80031ca <HAL_RCC_OscConfig+0x356>
 80031b0:	4b61      	ldr	r3, [pc, #388]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	4a60      	ldr	r2, [pc, #384]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 80031b6:	f043 0304 	orr.w	r3, r3, #4
 80031ba:	6213      	str	r3, [r2, #32]
 80031bc:	4b5e      	ldr	r3, [pc, #376]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	4a5d      	ldr	r2, [pc, #372]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	6213      	str	r3, [r2, #32]
 80031c8:	e00b      	b.n	80031e2 <HAL_RCC_OscConfig+0x36e>
 80031ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	4a5a      	ldr	r2, [pc, #360]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	6213      	str	r3, [r2, #32]
 80031d6:	4b58      	ldr	r3, [pc, #352]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	4a57      	ldr	r2, [pc, #348]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 80031dc:	f023 0304 	bic.w	r3, r3, #4
 80031e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d015      	beq.n	8003216 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ea:	f7fe fd63 	bl	8001cb4 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f0:	e00a      	b.n	8003208 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f2:	f7fe fd5f 	bl	8001cb4 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003200:	4293      	cmp	r3, r2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e0b1      	b.n	800336c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003208:	4b4b      	ldr	r3, [pc, #300]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0ee      	beq.n	80031f2 <HAL_RCC_OscConfig+0x37e>
 8003214:	e014      	b.n	8003240 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003216:	f7fe fd4d 	bl	8001cb4 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800321c:	e00a      	b.n	8003234 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321e:	f7fe fd49 	bl	8001cb4 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	f241 3288 	movw	r2, #5000	@ 0x1388
 800322c:	4293      	cmp	r3, r2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e09b      	b.n	800336c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003234:	4b40      	ldr	r3, [pc, #256]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1ee      	bne.n	800321e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003240:	7dfb      	ldrb	r3, [r7, #23]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d105      	bne.n	8003252 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003246:	4b3c      	ldr	r3, [pc, #240]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	4a3b      	ldr	r2, [pc, #236]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 800324c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003250:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 8087 	beq.w	800336a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800325c:	4b36      	ldr	r3, [pc, #216]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 030c 	and.w	r3, r3, #12
 8003264:	2b08      	cmp	r3, #8
 8003266:	d061      	beq.n	800332c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d146      	bne.n	80032fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003270:	4b33      	ldr	r3, [pc, #204]	@ (8003340 <HAL_RCC_OscConfig+0x4cc>)
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003276:	f7fe fd1d 	bl	8001cb4 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327e:	f7fe fd19 	bl	8001cb4 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e06d      	b.n	800336c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003290:	4b29      	ldr	r3, [pc, #164]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f0      	bne.n	800327e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a4:	d108      	bne.n	80032b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032a6:	4b24      	ldr	r3, [pc, #144]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	4921      	ldr	r1, [pc, #132]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a19      	ldr	r1, [r3, #32]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c8:	430b      	orrs	r3, r1
 80032ca:	491b      	ldr	r1, [pc, #108]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003340 <HAL_RCC_OscConfig+0x4cc>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d6:	f7fe fced 	bl	8001cb4 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032de:	f7fe fce9 	bl	8001cb4 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e03d      	b.n	800336c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032f0:	4b11      	ldr	r3, [pc, #68]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x46a>
 80032fc:	e035      	b.n	800336a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fe:	4b10      	ldr	r3, [pc, #64]	@ (8003340 <HAL_RCC_OscConfig+0x4cc>)
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003304:	f7fe fcd6 	bl	8001cb4 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330c:	f7fe fcd2 	bl	8001cb4 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e026      	b.n	800336c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331e:	4b06      	ldr	r3, [pc, #24]	@ (8003338 <HAL_RCC_OscConfig+0x4c4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x498>
 800332a:	e01e      	b.n	800336a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d107      	bne.n	8003344 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e019      	b.n	800336c <HAL_RCC_OscConfig+0x4f8>
 8003338:	40021000 	.word	0x40021000
 800333c:	40007000 	.word	0x40007000
 8003340:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003344:	4b0b      	ldr	r3, [pc, #44]	@ (8003374 <HAL_RCC_OscConfig+0x500>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	429a      	cmp	r2, r3
 8003356:	d106      	bne.n	8003366 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003362:	429a      	cmp	r2, r3
 8003364:	d001      	beq.n	800336a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40021000 	.word	0x40021000

08003378 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0d0      	b.n	800352e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800338c:	4b6a      	ldr	r3, [pc, #424]	@ (8003538 <HAL_RCC_ClockConfig+0x1c0>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d910      	bls.n	80033bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339a:	4b67      	ldr	r3, [pc, #412]	@ (8003538 <HAL_RCC_ClockConfig+0x1c0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 0207 	bic.w	r2, r3, #7
 80033a2:	4965      	ldr	r1, [pc, #404]	@ (8003538 <HAL_RCC_ClockConfig+0x1c0>)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033aa:	4b63      	ldr	r3, [pc, #396]	@ (8003538 <HAL_RCC_ClockConfig+0x1c0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d001      	beq.n	80033bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0b8      	b.n	800352e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d020      	beq.n	800340a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033d4:	4b59      	ldr	r3, [pc, #356]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	4a58      	ldr	r2, [pc, #352]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 80033da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033ec:	4b53      	ldr	r3, [pc, #332]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4a52      	ldr	r2, [pc, #328]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 80033f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80033f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f8:	4b50      	ldr	r3, [pc, #320]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	494d      	ldr	r1, [pc, #308]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 8003406:	4313      	orrs	r3, r2
 8003408:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d040      	beq.n	8003498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d107      	bne.n	800342e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341e:	4b47      	ldr	r3, [pc, #284]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d115      	bne.n	8003456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e07f      	b.n	800352e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d107      	bne.n	8003446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003436:	4b41      	ldr	r3, [pc, #260]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e073      	b.n	800352e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003446:	4b3d      	ldr	r3, [pc, #244]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e06b      	b.n	800352e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003456:	4b39      	ldr	r3, [pc, #228]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f023 0203 	bic.w	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	4936      	ldr	r1, [pc, #216]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003468:	f7fe fc24 	bl	8001cb4 <HAL_GetTick>
 800346c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346e:	e00a      	b.n	8003486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003470:	f7fe fc20 	bl	8001cb4 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e053      	b.n	800352e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003486:	4b2d      	ldr	r3, [pc, #180]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f003 020c 	and.w	r2, r3, #12
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	429a      	cmp	r2, r3
 8003496:	d1eb      	bne.n	8003470 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003498:	4b27      	ldr	r3, [pc, #156]	@ (8003538 <HAL_RCC_ClockConfig+0x1c0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d210      	bcs.n	80034c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a6:	4b24      	ldr	r3, [pc, #144]	@ (8003538 <HAL_RCC_ClockConfig+0x1c0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 0207 	bic.w	r2, r3, #7
 80034ae:	4922      	ldr	r1, [pc, #136]	@ (8003538 <HAL_RCC_ClockConfig+0x1c0>)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b6:	4b20      	ldr	r3, [pc, #128]	@ (8003538 <HAL_RCC_ClockConfig+0x1c0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e032      	b.n	800352e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d4:	4b19      	ldr	r3, [pc, #100]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	4916      	ldr	r1, [pc, #88]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d009      	beq.n	8003506 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034f2:	4b12      	ldr	r3, [pc, #72]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	490e      	ldr	r1, [pc, #56]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 8003502:	4313      	orrs	r3, r2
 8003504:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003506:	f000 f821 	bl	800354c <HAL_RCC_GetSysClockFreq>
 800350a:	4602      	mov	r2, r0
 800350c:	4b0b      	ldr	r3, [pc, #44]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	490a      	ldr	r1, [pc, #40]	@ (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 8003518:	5ccb      	ldrb	r3, [r1, r3]
 800351a:	fa22 f303 	lsr.w	r3, r2, r3
 800351e:	4a09      	ldr	r2, [pc, #36]	@ (8003544 <HAL_RCC_ClockConfig+0x1cc>)
 8003520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003522:	4b09      	ldr	r3, [pc, #36]	@ (8003548 <HAL_RCC_ClockConfig+0x1d0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7fe fb82 	bl	8001c30 <HAL_InitTick>

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40022000 	.word	0x40022000
 800353c:	40021000 	.word	0x40021000
 8003540:	08007478 	.word	0x08007478
 8003544:	20000000 	.word	0x20000000
 8003548:	20000004 	.word	0x20000004

0800354c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	2300      	movs	r3, #0
 8003560:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003566:	4b1e      	ldr	r3, [pc, #120]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b04      	cmp	r3, #4
 8003574:	d002      	beq.n	800357c <HAL_RCC_GetSysClockFreq+0x30>
 8003576:	2b08      	cmp	r3, #8
 8003578:	d003      	beq.n	8003582 <HAL_RCC_GetSysClockFreq+0x36>
 800357a:	e027      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800357c:	4b19      	ldr	r3, [pc, #100]	@ (80035e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800357e:	613b      	str	r3, [r7, #16]
      break;
 8003580:	e027      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	0c9b      	lsrs	r3, r3, #18
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	4a17      	ldr	r2, [pc, #92]	@ (80035e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800358c:	5cd3      	ldrb	r3, [r2, r3]
 800358e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d010      	beq.n	80035bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800359a:	4b11      	ldr	r3, [pc, #68]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	0c5b      	lsrs	r3, r3, #17
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	4a11      	ldr	r2, [pc, #68]	@ (80035ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80035a6:	5cd3      	ldrb	r3, [r2, r3]
 80035a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a0d      	ldr	r2, [pc, #52]	@ (80035e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ae:	fb03 f202 	mul.w	r2, r3, r2
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	e004      	b.n	80035c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a0c      	ldr	r2, [pc, #48]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035c0:	fb02 f303 	mul.w	r3, r2, r3
 80035c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	613b      	str	r3, [r7, #16]
      break;
 80035ca:	e002      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035cc:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ce:	613b      	str	r3, [r7, #16]
      break;
 80035d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035d2:	693b      	ldr	r3, [r7, #16]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000
 80035e4:	007a1200 	.word	0x007a1200
 80035e8:	08007490 	.word	0x08007490
 80035ec:	080074a0 	.word	0x080074a0
 80035f0:	003d0900 	.word	0x003d0900

080035f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f8:	4b02      	ldr	r3, [pc, #8]	@ (8003604 <HAL_RCC_GetHCLKFreq+0x10>)
 80035fa:	681b      	ldr	r3, [r3, #0]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr
 8003604:	20000000 	.word	0x20000000

08003608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800360c:	f7ff fff2 	bl	80035f4 <HAL_RCC_GetHCLKFreq>
 8003610:	4602      	mov	r2, r0
 8003612:	4b05      	ldr	r3, [pc, #20]	@ (8003628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	0a1b      	lsrs	r3, r3, #8
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	4903      	ldr	r1, [pc, #12]	@ (800362c <HAL_RCC_GetPCLK1Freq+0x24>)
 800361e:	5ccb      	ldrb	r3, [r1, r3]
 8003620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003624:	4618      	mov	r0, r3
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40021000 	.word	0x40021000
 800362c:	08007488 	.word	0x08007488

08003630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003634:	f7ff ffde 	bl	80035f4 <HAL_RCC_GetHCLKFreq>
 8003638:	4602      	mov	r2, r0
 800363a:	4b05      	ldr	r3, [pc, #20]	@ (8003650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	0adb      	lsrs	r3, r3, #11
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	4903      	ldr	r1, [pc, #12]	@ (8003654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003646:	5ccb      	ldrb	r3, [r1, r3]
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800364c:	4618      	mov	r0, r3
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40021000 	.word	0x40021000
 8003654:	08007488 	.word	0x08007488

08003658 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003660:	4b0a      	ldr	r3, [pc, #40]	@ (800368c <RCC_Delay+0x34>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a0a      	ldr	r2, [pc, #40]	@ (8003690 <RCC_Delay+0x38>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	0a5b      	lsrs	r3, r3, #9
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	fb02 f303 	mul.w	r3, r2, r3
 8003672:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003674:	bf00      	nop
  }
  while (Delay --);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1e5a      	subs	r2, r3, #1
 800367a:	60fa      	str	r2, [r7, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f9      	bne.n	8003674 <RCC_Delay+0x1c>
}
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr
 800368c:	20000000 	.word	0x20000000
 8003690:	10624dd3 	.word	0x10624dd3

08003694 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	613b      	str	r3, [r7, #16]
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d07d      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80036b0:	2300      	movs	r3, #0
 80036b2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036b4:	4b4f      	ldr	r3, [pc, #316]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10d      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c0:	4b4c      	ldr	r3, [pc, #304]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	4a4b      	ldr	r2, [pc, #300]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036ca:	61d3      	str	r3, [r2, #28]
 80036cc:	4b49      	ldr	r3, [pc, #292]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036d8:	2301      	movs	r3, #1
 80036da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036dc:	4b46      	ldr	r3, [pc, #280]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d118      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036e8:	4b43      	ldr	r3, [pc, #268]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a42      	ldr	r2, [pc, #264]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036f4:	f7fe fade 	bl	8001cb4 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fa:	e008      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036fc:	f7fe fada 	bl	8001cb4 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b64      	cmp	r3, #100	@ 0x64
 8003708:	d901      	bls.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e06d      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370e:	4b3a      	ldr	r3, [pc, #232]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f0      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800371a:	4b36      	ldr	r3, [pc, #216]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003722:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d02e      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	429a      	cmp	r2, r3
 8003736:	d027      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003738:	4b2e      	ldr	r3, [pc, #184]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003740:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003742:	4b2e      	ldr	r3, [pc, #184]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003744:	2201      	movs	r2, #1
 8003746:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003748:	4b2c      	ldr	r3, [pc, #176]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800374e:	4a29      	ldr	r2, [pc, #164]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d014      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7fe faa9 	bl	8001cb4 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003764:	e00a      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003766:	f7fe faa5 	bl	8001cb4 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003774:	4293      	cmp	r3, r2
 8003776:	d901      	bls.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e036      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377c:	4b1d      	ldr	r3, [pc, #116]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0ee      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003788:	4b1a      	ldr	r3, [pc, #104]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	4917      	ldr	r1, [pc, #92]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003796:	4313      	orrs	r3, r2
 8003798:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800379a:	7dfb      	ldrb	r3, [r7, #23]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d105      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a0:	4b14      	ldr	r3, [pc, #80]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	4a13      	ldr	r2, [pc, #76]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d008      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037b8:	4b0e      	ldr	r3, [pc, #56]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	490b      	ldr	r1, [pc, #44]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d008      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037d6:	4b07      	ldr	r3, [pc, #28]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	4904      	ldr	r1, [pc, #16]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40007000 	.word	0x40007000
 80037fc:	42420440 	.word	0x42420440

08003800 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	2300      	movs	r3, #0
 800380e:	61fb      	str	r3, [r7, #28]
 8003810:	2300      	movs	r3, #0
 8003812:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	2300      	movs	r3, #0
 800381a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b10      	cmp	r3, #16
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b10      	cmp	r3, #16
 8003826:	f200 808a 	bhi.w	800393e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d045      	beq.n	80038bc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b02      	cmp	r3, #2
 8003834:	d075      	beq.n	8003922 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003836:	e082      	b.n	800393e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003838:	4b46      	ldr	r3, [pc, #280]	@ (8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800383e:	4b45      	ldr	r3, [pc, #276]	@ (8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d07b      	beq.n	8003942 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	0c9b      	lsrs	r3, r3, #18
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	4a41      	ldr	r2, [pc, #260]	@ (8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003854:	5cd3      	ldrb	r3, [r2, r3]
 8003856:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d015      	beq.n	800388e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003862:	4b3c      	ldr	r3, [pc, #240]	@ (8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	0c5b      	lsrs	r3, r3, #17
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	4a3b      	ldr	r2, [pc, #236]	@ (800395c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800386e:	5cd3      	ldrb	r3, [r2, r3]
 8003870:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00d      	beq.n	8003898 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800387c:	4a38      	ldr	r2, [pc, #224]	@ (8003960 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	fbb2 f2f3 	udiv	r2, r2, r3
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	fb02 f303 	mul.w	r3, r2, r3
 800388a:	61fb      	str	r3, [r7, #28]
 800388c:	e004      	b.n	8003898 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4a34      	ldr	r2, [pc, #208]	@ (8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003892:	fb02 f303 	mul.w	r3, r2, r3
 8003896:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003898:	4b2e      	ldr	r3, [pc, #184]	@ (8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038a4:	d102      	bne.n	80038ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	61bb      	str	r3, [r7, #24]
      break;
 80038aa:	e04a      	b.n	8003942 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003968 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	085b      	lsrs	r3, r3, #1
 80038b8:	61bb      	str	r3, [r7, #24]
      break;
 80038ba:	e042      	b.n	8003942 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80038bc:	4b25      	ldr	r3, [pc, #148]	@ (8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038cc:	d108      	bne.n	80038e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80038d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	e01f      	b.n	8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038ea:	d109      	bne.n	8003900 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80038ec:	4b19      	ldr	r3, [pc, #100]	@ (8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80038f8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80038fc:	61bb      	str	r3, [r7, #24]
 80038fe:	e00f      	b.n	8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003906:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800390a:	d11c      	bne.n	8003946 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800390c:	4b11      	ldr	r3, [pc, #68]	@ (8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d016      	beq.n	8003946 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003918:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800391c:	61bb      	str	r3, [r7, #24]
      break;
 800391e:	e012      	b.n	8003946 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003920:	e011      	b.n	8003946 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003922:	f7ff fe85 	bl	8003630 <HAL_RCC_GetPCLK2Freq>
 8003926:	4602      	mov	r2, r0
 8003928:	4b0a      	ldr	r3, [pc, #40]	@ (8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	0b9b      	lsrs	r3, r3, #14
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	3301      	adds	r3, #1
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	fbb2 f3f3 	udiv	r3, r2, r3
 800393a:	61bb      	str	r3, [r7, #24]
      break;
 800393c:	e004      	b.n	8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800393e:	bf00      	nop
 8003940:	e002      	b.n	8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003942:	bf00      	nop
 8003944:	e000      	b.n	8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003946:	bf00      	nop
    }
  }
  return (frequency);
 8003948:	69bb      	ldr	r3, [r7, #24]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3720      	adds	r7, #32
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000
 8003958:	080074a4 	.word	0x080074a4
 800395c:	080074b4 	.word	0x080074b4
 8003960:	007a1200 	.word	0x007a1200
 8003964:	003d0900 	.word	0x003d0900
 8003968:	aaaaaaab 	.word	0xaaaaaaab

0800396c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e07a      	b.n	8003a78 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	7c5b      	ldrb	r3, [r3, #17]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d105      	bne.n	8003998 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fd ffc0 	bl	8001918 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fbae 	bl	8004100 <HAL_RTC_WaitForSynchro>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d004      	beq.n	80039b4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2204      	movs	r2, #4
 80039ae:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e061      	b.n	8003a78 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fc67 	bl	8004288 <RTC_EnterInitMode>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d004      	beq.n	80039ca <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2204      	movs	r2, #4
 80039c4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e056      	b.n	8003a78 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0207 	bic.w	r2, r2, #7
 80039d8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d005      	beq.n	80039ee <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80039e2:	4b27      	ldr	r3, [pc, #156]	@ (8003a80 <HAL_RTC_Init+0x114>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e6:	4a26      	ldr	r2, [pc, #152]	@ (8003a80 <HAL_RTC_Init+0x114>)
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80039ee:	4b24      	ldr	r3, [pc, #144]	@ (8003a80 <HAL_RTC_Init+0x114>)
 80039f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f2:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	4921      	ldr	r1, [pc, #132]	@ (8003a80 <HAL_RTC_Init+0x114>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a08:	d003      	beq.n	8003a12 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	e00e      	b.n	8003a30 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003a12:	2001      	movs	r0, #1
 8003a14:	f7ff fef4 	bl	8003800 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a18:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d104      	bne.n	8003a2a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2204      	movs	r2, #4
 8003a24:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e026      	b.n	8003a78 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	0c1a      	lsrs	r2, r3, #16
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f002 020f 	and.w	r2, r2, #15
 8003a3c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	b292      	uxth	r2, r2
 8003a46:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 fc45 	bl	80042d8 <RTC_ExitInitMode>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d004      	beq.n	8003a5e <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2204      	movs	r2, #4
 8003a58:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e00c      	b.n	8003a78 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003a76:	2300      	movs	r3, #0
  }
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40006c00 	.word	0x40006c00

08003a84 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003a84:	b590      	push	{r4, r7, lr}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	2300      	movs	r3, #0
 8003a96:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_RTC_SetTime+0x20>
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e080      	b.n	8003baa <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	7c1b      	ldrb	r3, [r3, #16]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_RTC_SetTime+0x30>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e07a      	b.n	8003baa <HAL_RTC_SetTime+0x126>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2202      	movs	r2, #2
 8003abe:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d113      	bne.n	8003aee <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003ad0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	785b      	ldrb	r3, [r3, #1]
 8003ad8:	4619      	mov	r1, r3
 8003ada:	460b      	mov	r3, r1
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	1a5b      	subs	r3, r3, r1
 8003ae0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003ae2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003ae8:	4413      	add	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	e01e      	b.n	8003b2c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fc35 	bl	8004362 <RTC_Bcd2ToByte>
 8003af8:	4603      	mov	r3, r0
 8003afa:	461a      	mov	r2, r3
 8003afc:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003b00:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	785b      	ldrb	r3, [r3, #1]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 fc2a 	bl	8004362 <RTC_Bcd2ToByte>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	461a      	mov	r2, r3
 8003b12:	4613      	mov	r3, r2
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003b1a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	789b      	ldrb	r3, [r3, #2]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fc1e 	bl	8004362 <RTC_Bcd2ToByte>
 8003b26:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003b28:	4423      	add	r3, r4
 8003b2a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003b2c:	6979      	ldr	r1, [r7, #20]
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 fb43 	bl	80041ba <RTC_WriteTimeCounter>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d007      	beq.n	8003b4a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e02f      	b.n	8003baa <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0205 	bic.w	r2, r2, #5
 8003b58:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 fb54 	bl	8004208 <RTC_ReadAlarmCounter>
 8003b60:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d018      	beq.n	8003b9c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d214      	bcs.n	8003b9c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003b78:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003b7c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003b7e:	6939      	ldr	r1, [r7, #16]
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fb5a 	bl	800423a <RTC_WriteAlarmCounter>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d007      	beq.n	8003b9c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2204      	movs	r2, #4
 8003b90:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e006      	b.n	8003baa <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
  }
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd90      	pop	{r4, r7, pc}
	...

08003bb4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_RTC_GetTime+0x28>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0b5      	b.n	8003d4c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e0ac      	b.n	8003d4c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 fab1 	bl	800415a <RTC_ReadTimeCounter>
 8003bf8:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	4a55      	ldr	r2, [pc, #340]	@ (8003d54 <HAL_RTC_GetTime+0x1a0>)
 8003bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003c02:	0adb      	lsrs	r3, r3, #11
 8003c04:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4b52      	ldr	r3, [pc, #328]	@ (8003d54 <HAL_RTC_GetTime+0x1a0>)
 8003c0a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c0e:	0adb      	lsrs	r3, r3, #11
 8003c10:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8003c14:	fb01 f303 	mul.w	r3, r1, r3
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	4a4f      	ldr	r2, [pc, #316]	@ (8003d58 <HAL_RTC_GetTime+0x1a4>)
 8003c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c20:	095b      	lsrs	r3, r3, #5
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	4a4a      	ldr	r2, [pc, #296]	@ (8003d54 <HAL_RTC_GetTime+0x1a0>)
 8003c2c:	fba2 1203 	umull	r1, r2, r2, r3
 8003c30:	0ad2      	lsrs	r2, r2, #11
 8003c32:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8003c36:	fb01 f202 	mul.w	r2, r1, r2
 8003c3a:	1a9a      	subs	r2, r3, r2
 8003c3c:	4b46      	ldr	r3, [pc, #280]	@ (8003d58 <HAL_RTC_GetTime+0x1a4>)
 8003c3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003c42:	0959      	lsrs	r1, r3, #5
 8003c44:	460b      	mov	r3, r1
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	1a5b      	subs	r3, r3, r1
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	1ad1      	subs	r1, r2, r3
 8003c4e:	b2ca      	uxtb	r2, r1
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	2b17      	cmp	r3, #23
 8003c58:	d955      	bls.n	8003d06 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4a3f      	ldr	r2, [pc, #252]	@ (8003d5c <HAL_RTC_GetTime+0x1a8>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003c66:	6939      	ldr	r1, [r7, #16]
 8003c68:	4b3c      	ldr	r3, [pc, #240]	@ (8003d5c <HAL_RTC_GetTime+0x1a8>)
 8003c6a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c6e:	091a      	lsrs	r2, r3, #4
 8003c70:	4613      	mov	r3, r2
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	4413      	add	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	1aca      	subs	r2, r1, r3
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 fac1 	bl	8004208 <RTC_ReadAlarmCounter>
 8003c86:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8e:	d008      	beq.n	8003ca2 <HAL_RTC_GetTime+0xee>
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d904      	bls.n	8003ca2 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	61fb      	str	r3, [r7, #28]
 8003ca0:	e002      	b.n	8003ca8 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca6:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	4a2d      	ldr	r2, [pc, #180]	@ (8003d60 <HAL_RTC_GetTime+0x1ac>)
 8003cac:	fb02 f303 	mul.w	r3, r2, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003cb6:	69b9      	ldr	r1, [r7, #24]
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 fa7e 	bl	80041ba <RTC_WriteTimeCounter>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e041      	b.n	8003d4c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cce:	d00c      	beq.n	8003cea <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003cd8:	69f9      	ldr	r1, [r7, #28]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 faad 	bl	800423a <RTC_WriteAlarmCounter>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e030      	b.n	8003d4c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003cea:	69f9      	ldr	r1, [r7, #28]
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 faa4 	bl	800423a <RTC_WriteAlarmCounter>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e027      	b.n	8003d4c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003cfc:	6979      	ldr	r1, [r7, #20]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 fb4c 	bl	800439c <RTC_DateUpdate>
 8003d04:	e003      	b.n	8003d0e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d01a      	beq.n	8003d4a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 fb05 	bl	8004328 <RTC_ByteToBcd2>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	461a      	mov	r2, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	785b      	ldrb	r3, [r3, #1]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fafc 	bl	8004328 <RTC_ByteToBcd2>
 8003d30:	4603      	mov	r3, r0
 8003d32:	461a      	mov	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	789b      	ldrb	r3, [r3, #2]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 faf3 	bl	8004328 <RTC_ByteToBcd2>
 8003d42:	4603      	mov	r3, r0
 8003d44:	461a      	mov	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3720      	adds	r7, #32
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	91a2b3c5 	.word	0x91a2b3c5
 8003d58:	88888889 	.word	0x88888889
 8003d5c:	aaaaaaab 	.word	0xaaaaaaab
 8003d60:	00015180 	.word	0x00015180

08003d64 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61fb      	str	r3, [r7, #28]
 8003d74:	2300      	movs	r3, #0
 8003d76:	61bb      	str	r3, [r7, #24]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_RTC_SetDate+0x24>
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e097      	b.n	8003ebc <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	7c1b      	ldrb	r3, [r3, #16]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <HAL_RTC_SetDate+0x34>
 8003d94:	2302      	movs	r3, #2
 8003d96:	e091      	b.n	8003ebc <HAL_RTC_SetDate+0x158>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2202      	movs	r2, #2
 8003da2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	78da      	ldrb	r2, [r3, #3]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	785a      	ldrb	r2, [r3, #1]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	789a      	ldrb	r2, [r3, #2]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	739a      	strb	r2, [r3, #14]
 8003dc2:	e01a      	b.n	8003dfa <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	78db      	ldrb	r3, [r3, #3]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 faca 	bl	8004362 <RTC_Bcd2ToByte>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	785b      	ldrb	r3, [r3, #1]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fac1 	bl	8004362 <RTC_Bcd2ToByte>
 8003de0:	4603      	mov	r3, r0
 8003de2:	461a      	mov	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	789b      	ldrb	r3, [r3, #2]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fab8 	bl	8004362 <RTC_Bcd2ToByte>
 8003df2:	4603      	mov	r3, r0
 8003df4:	461a      	mov	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	7bdb      	ldrb	r3, [r3, #15]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	7b59      	ldrb	r1, [r3, #13]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	7b9b      	ldrb	r3, [r3, #14]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	f000 fba3 	bl	8004554 <RTC_WeekDayNum>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	461a      	mov	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	7b1a      	ldrb	r2, [r3, #12]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 f99b 	bl	800415a <RTC_ReadTimeCounter>
 8003e24:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	4a26      	ldr	r2, [pc, #152]	@ (8003ec4 <HAL_RTC_SetDate+0x160>)
 8003e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2e:	0adb      	lsrs	r3, r3, #11
 8003e30:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2b18      	cmp	r3, #24
 8003e36:	d93a      	bls.n	8003eae <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	4a23      	ldr	r2, [pc, #140]	@ (8003ec8 <HAL_RTC_SetDate+0x164>)
 8003e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	4a22      	ldr	r2, [pc, #136]	@ (8003ecc <HAL_RTC_SetDate+0x168>)
 8003e44:	fb02 f303 	mul.w	r3, r2, r3
 8003e48:	69fa      	ldr	r2, [r7, #28]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003e4e:	69f9      	ldr	r1, [r7, #28]
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 f9b2 	bl	80041ba <RTC_WriteTimeCounter>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d007      	beq.n	8003e6c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2204      	movs	r2, #4
 8003e60:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e027      	b.n	8003ebc <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f9cb 	bl	8004208 <RTC_ReadAlarmCounter>
 8003e72:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7a:	d018      	beq.n	8003eae <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d214      	bcs.n	8003eae <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003e8a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003e8e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003e90:	69b9      	ldr	r1, [r7, #24]
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 f9d1 	bl	800423a <RTC_WriteAlarmCounter>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d007      	beq.n	8003eae <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e006      	b.n	8003ebc <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3720      	adds	r7, #32
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	91a2b3c5 	.word	0x91a2b3c5
 8003ec8:	aaaaaaab 	.word	0xaaaaaaab
 8003ecc:	00015180 	.word	0x00015180

08003ed0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003ed0:	b590      	push	{r4, r7, lr}
 8003ed2:	b089      	sub	sp, #36	@ 0x24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8003edc:	2300      	movs	r3, #0
 8003ede:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8003ee0:	f107 0314 	add.w	r3, r7, #20
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	460a      	mov	r2, r1
 8003ee8:	801a      	strh	r2, [r3, #0]
 8003eea:	460a      	mov	r2, r1
 8003eec:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <HAL_RTC_SetAlarm_IT+0x2a>
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e099      	b.n	8004032 <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	7c1b      	ldrb	r3, [r3, #16]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <HAL_RTC_SetAlarm_IT+0x3a>
 8003f06:	2302      	movs	r3, #2
 8003f08:	e093      	b.n	8004032 <HAL_RTC_SetAlarm_IT+0x162>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2202      	movs	r2, #2
 8003f14:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003f16:	f107 0314 	add.w	r3, r7, #20
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f7ff fe48 	bl	8003bb4 <HAL_RTC_GetTime>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e081      	b.n	8004032 <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003f2e:	7d3b      	ldrb	r3, [r7, #20]
 8003f30:	461a      	mov	r2, r3
 8003f32:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003f36:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8003f3a:	7d7b      	ldrb	r3, [r7, #21]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	460b      	mov	r3, r1
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	1a5b      	subs	r3, r3, r1
 8003f44:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003f46:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8003f48:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003f4a:	4413      	add	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d113      	bne.n	8003f7c <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003f5e:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	785b      	ldrb	r3, [r3, #1]
 8003f66:	4619      	mov	r1, r3
 8003f68:	460b      	mov	r3, r1
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	1a5b      	subs	r3, r3, r1
 8003f6e:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003f70:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003f76:	4413      	add	r3, r2
 8003f78:	61fb      	str	r3, [r7, #28]
 8003f7a:	e01e      	b.n	8003fba <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 f9ee 	bl	8004362 <RTC_Bcd2ToByte>
 8003f86:	4603      	mov	r3, r0
 8003f88:	461a      	mov	r2, r3
 8003f8a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003f8e:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	785b      	ldrb	r3, [r3, #1]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 f9e3 	bl	8004362 <RTC_Bcd2ToByte>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003fa8:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	789b      	ldrb	r3, [r3, #2]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 f9d7 	bl	8004362 <RTC_Bcd2ToByte>
 8003fb4:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003fb6:	4423      	add	r3, r4
 8003fb8:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8003fba:	69fa      	ldr	r2, [r7, #28]
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d205      	bcs.n	8003fce <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003fc8:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003fcc:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003fce:	69f9      	ldr	r1, [r7, #28]
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f932 	bl	800423a <RTC_WriteAlarmCounter>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d007      	beq.n	8003fec <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2204      	movs	r2, #4
 8003fe0:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e022      	b.n	8004032 <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0202 	bic.w	r2, r2, #2
 8003ffa:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0202 	orr.w	r2, r2, #2
 800400a:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800400c:	4b0b      	ldr	r3, [pc, #44]	@ (800403c <HAL_RTC_SetAlarm_IT+0x16c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0a      	ldr	r2, [pc, #40]	@ (800403c <HAL_RTC_SetAlarm_IT+0x16c>)
 8004012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004016:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004018:	4b08      	ldr	r3, [pc, #32]	@ (800403c <HAL_RTC_SetAlarm_IT+0x16c>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	4a07      	ldr	r2, [pc, #28]	@ (800403c <HAL_RTC_SetAlarm_IT+0x16c>)
 800401e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004022:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004030:	2300      	movs	r3, #0
  }
}
 8004032:	4618      	mov	r0, r3
 8004034:	3724      	adds	r7, #36	@ 0x24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd90      	pop	{r4, r7, pc}
 800403a:	bf00      	nop
 800403c:	40010400 	.word	0x40010400

08004040 <HAL_RTC_DeactivateAlarm>:
  *          This parameter can be one of the following values:
  *            @arg RTC_ALARM_A:  AlarmA
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Check input parameters */
  if (hrtc == NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <HAL_RTC_DeactivateAlarm+0x14>
  {
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e04e      	b.n	80040f2 <HAL_RTC_DeactivateAlarm+0xb2>
  }

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	7c1b      	ldrb	r3, [r3, #16]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_RTC_DeactivateAlarm+0x20>
 800405c:	2302      	movs	r3, #2
 800405e:	e048      	b.n	80040f2 <HAL_RTC_DeactivateAlarm+0xb2>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2202      	movs	r2, #2
 800406a:	745a      	strb	r2, [r3, #17]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0202 	bic.w	r2, r2, #2
 800407a:	601a      	str	r2, [r3, #0]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f903 	bl	8004288 <RTC_EnterInitMode>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d007      	beq.n	8004098 <HAL_RTC_DeactivateAlarm+0x58>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2204      	movs	r2, #4
 800408c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e02c      	b.n	80040f2 <HAL_RTC_DeactivateAlarm+0xb2>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0202 	bic.w	r2, r2, #2
 80040a6:	605a      	str	r2, [r3, #4]

    /* Set to default values ALRH & ALRL registers */
    WRITE_REG(hrtc->Instance->ALRH, RTC_ALARM_RESETVALUE_REGISTER);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80040b0:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, RTC_ALARM_RESETVALUE_REGISTER);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80040ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* RTC Alarm Interrupt Configuration: Disable EXTI configuration */
    __HAL_RTC_ALARM_EXTI_DISABLE_IT();
 80040bc:	4b0f      	ldr	r3, [pc, #60]	@ (80040fc <HAL_RTC_DeactivateAlarm+0xbc>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a0e      	ldr	r2, [pc, #56]	@ (80040fc <HAL_RTC_DeactivateAlarm+0xbc>)
 80040c2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80040c6:	6013      	str	r3, [r2, #0]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f905 	bl	80042d8 <RTC_ExitInitMode>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d007      	beq.n	80040e4 <HAL_RTC_DeactivateAlarm+0xa4>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2204      	movs	r2, #4
 80040d8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e006      	b.n	80040f2 <HAL_RTC_DeactivateAlarm+0xb2>
    }
  }
  hrtc->State = HAL_RTC_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40010400 	.word	0x40010400

08004100 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e01d      	b.n	8004152 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0208 	bic.w	r2, r2, #8
 8004124:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004126:	f7fd fdc5 	bl	8001cb4 <HAL_GetTick>
 800412a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800412c:	e009      	b.n	8004142 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800412e:	f7fd fdc1 	bl	8001cb4 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800413c:	d901      	bls.n	8004142 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e007      	b.n	8004152 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0ee      	beq.n	800412e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800415a:	b480      	push	{r7}
 800415c:	b087      	sub	sp, #28
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	827b      	strh	r3, [r7, #18]
 8004166:	2300      	movs	r3, #0
 8004168:	823b      	strh	r3, [r7, #16]
 800416a:	2300      	movs	r3, #0
 800416c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800418a:	8a7a      	ldrh	r2, [r7, #18]
 800418c:	8a3b      	ldrh	r3, [r7, #16]
 800418e:	429a      	cmp	r2, r3
 8004190:	d008      	beq.n	80041a4 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004192:	8a3b      	ldrh	r3, [r7, #16]
 8004194:	041a      	lsls	r2, r3, #16
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	b29b      	uxth	r3, r3
 800419e:	4313      	orrs	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	e004      	b.n	80041ae <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80041a4:	8a7b      	ldrh	r3, [r7, #18]
 80041a6:	041a      	lsls	r2, r3, #16
 80041a8:	89fb      	ldrh	r3, [r7, #14]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80041ae:	697b      	ldr	r3, [r7, #20]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr

080041ba <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f85d 	bl	8004288 <RTC_EnterInitMode>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
 80041d8:	e011      	b.n	80041fe <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	0c12      	lsrs	r2, r2, #16
 80041e2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	b292      	uxth	r2, r2
 80041ec:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f872 	bl	80042d8 <RTC_ExitInitMode>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	81fb      	strh	r3, [r7, #14]
 8004214:	2300      	movs	r3, #0
 8004216:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004226:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004228:	89fb      	ldrh	r3, [r7, #14]
 800422a:	041a      	lsls	r2, r3, #16
 800422c:	89bb      	ldrh	r3, [r7, #12]
 800422e:	4313      	orrs	r3, r2
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr

0800423a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004244:	2300      	movs	r3, #0
 8004246:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f81d 	bl	8004288 <RTC_EnterInitMode>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	73fb      	strb	r3, [r7, #15]
 8004258:	e011      	b.n	800427e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	0c12      	lsrs	r2, r2, #16
 8004262:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	b292      	uxth	r2, r2
 800426c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f832 	bl	80042d8 <RTC_ExitInitMode>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800427e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004294:	f7fd fd0e 	bl	8001cb4 <HAL_GetTick>
 8004298:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800429a:	e009      	b.n	80042b0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800429c:	f7fd fd0a 	bl	8001cb4 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042aa:	d901      	bls.n	80042b0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e00f      	b.n	80042d0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0ee      	beq.n	800429c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0210 	orr.w	r2, r2, #16
 80042cc:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0210 	bic.w	r2, r2, #16
 80042f2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80042f4:	f7fd fcde 	bl	8001cb4 <HAL_GetTick>
 80042f8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80042fa:	e009      	b.n	8004310 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80042fc:	f7fd fcda 	bl	8001cb4 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800430a:	d901      	bls.n	8004310 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e007      	b.n	8004320 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f003 0320 	and.w	r3, r3, #32
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0ee      	beq.n	80042fc <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	4603      	mov	r3, r0
 8004330:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004336:	e005      	b.n	8004344 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	3301      	adds	r3, #1
 800433c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	3b0a      	subs	r3, #10
 8004342:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	2b09      	cmp	r3, #9
 8004348:	d8f6      	bhi.n	8004338 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	b2da      	uxtb	r2, r3
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	4313      	orrs	r3, r2
 8004356:	b2db      	uxtb	r3, r3
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	bc80      	pop	{r7}
 8004360:	4770      	bx	lr

08004362 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	4603      	mov	r3, r0
 800436a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	091b      	lsrs	r3, r3, #4
 8004374:	b2db      	uxtb	r3, r3
 8004376:	461a      	mov	r2, r3
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	f003 030f 	and.w	r3, r3, #15
 8004388:	b2da      	uxtb	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	b2db      	uxtb	r3, r3
 800438e:	4413      	add	r3, r2
 8004390:	b2db      	uxtb	r3, r3
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr

0800439c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	2300      	movs	r3, #0
 80043ac:	613b      	str	r3, [r7, #16]
 80043ae:	2300      	movs	r3, #0
 80043b0:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	7bdb      	ldrb	r3, [r3, #15]
 80043ba:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	7b5b      	ldrb	r3, [r3, #13]
 80043c0:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	7b9b      	ldrb	r3, [r3, #14]
 80043c6:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80043c8:	2300      	movs	r3, #0
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	e06f      	b.n	80044ae <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d011      	beq.n	80043f8 <RTC_DateUpdate+0x5c>
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d00e      	beq.n	80043f8 <RTC_DateUpdate+0x5c>
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	2b05      	cmp	r3, #5
 80043de:	d00b      	beq.n	80043f8 <RTC_DateUpdate+0x5c>
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	2b07      	cmp	r3, #7
 80043e4:	d008      	beq.n	80043f8 <RTC_DateUpdate+0x5c>
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d005      	beq.n	80043f8 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	2b0a      	cmp	r3, #10
 80043f0:	d002      	beq.n	80043f8 <RTC_DateUpdate+0x5c>
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2b0c      	cmp	r3, #12
 80043f6:	d117      	bne.n	8004428 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b1e      	cmp	r3, #30
 80043fc:	d803      	bhi.n	8004406 <RTC_DateUpdate+0x6a>
      {
        day++;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3301      	adds	r3, #1
 8004402:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004404:	e050      	b.n	80044a8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	2b0c      	cmp	r3, #12
 800440a:	d005      	beq.n	8004418 <RTC_DateUpdate+0x7c>
        {
          month++;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	3301      	adds	r3, #1
 8004410:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004412:	2301      	movs	r3, #1
 8004414:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004416:	e047      	b.n	80044a8 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004418:	2301      	movs	r3, #1
 800441a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800441c:	2301      	movs	r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
          year++;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	3301      	adds	r3, #1
 8004424:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004426:	e03f      	b.n	80044a8 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b04      	cmp	r3, #4
 800442c:	d008      	beq.n	8004440 <RTC_DateUpdate+0xa4>
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	2b06      	cmp	r3, #6
 8004432:	d005      	beq.n	8004440 <RTC_DateUpdate+0xa4>
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	2b09      	cmp	r3, #9
 8004438:	d002      	beq.n	8004440 <RTC_DateUpdate+0xa4>
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2b0b      	cmp	r3, #11
 800443e:	d10c      	bne.n	800445a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b1d      	cmp	r3, #29
 8004444:	d803      	bhi.n	800444e <RTC_DateUpdate+0xb2>
      {
        day++;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3301      	adds	r3, #1
 800444a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800444c:	e02c      	b.n	80044a8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	3301      	adds	r3, #1
 8004452:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004454:	2301      	movs	r3, #1
 8004456:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004458:	e026      	b.n	80044a8 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d123      	bne.n	80044a8 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b1b      	cmp	r3, #27
 8004464:	d803      	bhi.n	800446e <RTC_DateUpdate+0xd2>
      {
        day++;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3301      	adds	r3, #1
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	e01c      	b.n	80044a8 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2b1c      	cmp	r3, #28
 8004472:	d111      	bne.n	8004498 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	b29b      	uxth	r3, r3
 8004478:	4618      	mov	r0, r3
 800447a:	f000 f839 	bl	80044f0 <RTC_IsLeapYear>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <RTC_DateUpdate+0xf0>
        {
          day++;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	3301      	adds	r3, #1
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	e00d      	b.n	80044a8 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	3301      	adds	r3, #1
 8004490:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004492:	2301      	movs	r3, #1
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	e007      	b.n	80044a8 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b1d      	cmp	r3, #29
 800449c:	d104      	bne.n	80044a8 <RTC_DateUpdate+0x10c>
      {
        month++;
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	3301      	adds	r3, #1
 80044a2:	613b      	str	r3, [r7, #16]
        day = 1U;
 80044a4:	2301      	movs	r3, #1
 80044a6:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	3301      	adds	r3, #1
 80044ac:	60bb      	str	r3, [r7, #8]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d38b      	bcc.n	80043ce <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	4619      	mov	r1, r3
 80044d8:	6978      	ldr	r0, [r7, #20]
 80044da:	f000 f83b 	bl	8004554 <RTC_WeekDayNum>
 80044de:	4603      	mov	r3, r0
 80044e0:	461a      	mov	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	731a      	strb	r2, [r3, #12]
}
 80044e6:	bf00      	nop
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	e01d      	b.n	8004546 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800450a:	88fb      	ldrh	r3, [r7, #6]
 800450c:	4a10      	ldr	r2, [pc, #64]	@ (8004550 <RTC_IsLeapYear+0x60>)
 800450e:	fba2 1203 	umull	r1, r2, r2, r3
 8004512:	0952      	lsrs	r2, r2, #5
 8004514:	2164      	movs	r1, #100	@ 0x64
 8004516:	fb01 f202 	mul.w	r2, r1, r2
 800451a:	1a9b      	subs	r3, r3, r2
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004522:	2301      	movs	r3, #1
 8004524:	e00f      	b.n	8004546 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004526:	88fb      	ldrh	r3, [r7, #6]
 8004528:	4a09      	ldr	r2, [pc, #36]	@ (8004550 <RTC_IsLeapYear+0x60>)
 800452a:	fba2 1203 	umull	r1, r2, r2, r3
 800452e:	09d2      	lsrs	r2, r2, #7
 8004530:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8004534:	fb01 f202 	mul.w	r2, r1, r2
 8004538:	1a9b      	subs	r3, r3, r2
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004544:	2300      	movs	r3, #0
  }
}
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr
 8004550:	51eb851f 	.word	0x51eb851f

08004554 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	460b      	mov	r3, r1
 800455e:	70fb      	strb	r3, [r7, #3]
 8004560:	4613      	mov	r3, r2
 8004562:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	60bb      	str	r3, [r7, #8]
 8004568:	2300      	movs	r3, #0
 800456a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8004572:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004574:	78fb      	ldrb	r3, [r7, #3]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d82d      	bhi.n	80045d6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800457a:	78fa      	ldrb	r2, [r7, #3]
 800457c:	4613      	mov	r3, r2
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	4413      	add	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	4a2c      	ldr	r2, [pc, #176]	@ (8004638 <RTC_WeekDayNum+0xe4>)
 8004588:	fba2 2303 	umull	r2, r3, r2, r3
 800458c:	085a      	lsrs	r2, r3, #1
 800458e:	78bb      	ldrb	r3, [r7, #2]
 8004590:	441a      	add	r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	441a      	add	r2, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	3b01      	subs	r3, #1
 800459a:	089b      	lsrs	r3, r3, #2
 800459c:	441a      	add	r2, r3
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	4926      	ldr	r1, [pc, #152]	@ (800463c <RTC_WeekDayNum+0xe8>)
 80045a4:	fba1 1303 	umull	r1, r3, r1, r3
 80045a8:	095b      	lsrs	r3, r3, #5
 80045aa:	1ad2      	subs	r2, r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	4922      	ldr	r1, [pc, #136]	@ (800463c <RTC_WeekDayNum+0xe8>)
 80045b2:	fba1 1303 	umull	r1, r3, r1, r3
 80045b6:	09db      	lsrs	r3, r3, #7
 80045b8:	4413      	add	r3, r2
 80045ba:	1d1a      	adds	r2, r3, #4
 80045bc:	4b20      	ldr	r3, [pc, #128]	@ (8004640 <RTC_WeekDayNum+0xec>)
 80045be:	fba3 1302 	umull	r1, r3, r3, r2
 80045c2:	1ad1      	subs	r1, r2, r3
 80045c4:	0849      	lsrs	r1, r1, #1
 80045c6:	440b      	add	r3, r1
 80045c8:	0899      	lsrs	r1, r3, #2
 80045ca:	460b      	mov	r3, r1
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	1a5b      	subs	r3, r3, r1
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	e029      	b.n	800462a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80045d6:	78fa      	ldrb	r2, [r7, #3]
 80045d8:	4613      	mov	r3, r2
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	4413      	add	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	4a15      	ldr	r2, [pc, #84]	@ (8004638 <RTC_WeekDayNum+0xe4>)
 80045e4:	fba2 2303 	umull	r2, r3, r2, r3
 80045e8:	085a      	lsrs	r2, r3, #1
 80045ea:	78bb      	ldrb	r3, [r7, #2]
 80045ec:	441a      	add	r2, r3
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	441a      	add	r2, r3
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	089b      	lsrs	r3, r3, #2
 80045f6:	441a      	add	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4910      	ldr	r1, [pc, #64]	@ (800463c <RTC_WeekDayNum+0xe8>)
 80045fc:	fba1 1303 	umull	r1, r3, r1, r3
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	1ad2      	subs	r2, r2, r3
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	490d      	ldr	r1, [pc, #52]	@ (800463c <RTC_WeekDayNum+0xe8>)
 8004608:	fba1 1303 	umull	r1, r3, r1, r3
 800460c:	09db      	lsrs	r3, r3, #7
 800460e:	4413      	add	r3, r2
 8004610:	1c9a      	adds	r2, r3, #2
 8004612:	4b0b      	ldr	r3, [pc, #44]	@ (8004640 <RTC_WeekDayNum+0xec>)
 8004614:	fba3 1302 	umull	r1, r3, r3, r2
 8004618:	1ad1      	subs	r1, r2, r3
 800461a:	0849      	lsrs	r1, r1, #1
 800461c:	440b      	add	r3, r1
 800461e:	0899      	lsrs	r1, r3, #2
 8004620:	460b      	mov	r3, r1
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	1a5b      	subs	r3, r3, r1
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	b2db      	uxtb	r3, r3
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr
 8004638:	38e38e39 	.word	0x38e38e39
 800463c:	51eb851f 	.word	0x51eb851f
 8004640:	24924925 	.word	0x24924925

08004644 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d027      	beq.n	80046aa <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d020      	beq.n	80046aa <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00b      	beq.n	800468e <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f824 	bl	80046c4 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f06f 0204 	mvn.w	r2, #4
 8004684:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2204      	movs	r2, #4
 800468a:	745a      	strb	r2, [r3, #17]
 800468c:	e005      	b.n	800469a <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f80f 	bl	80046b2 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0201 	bic.w	r2, r2, #1
 80046a8:	605a      	str	r2, [r3, #4]
    }
  }
}
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr

080046c4 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	4770      	bx	lr

080046d6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b082      	sub	sp, #8
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e076      	b.n	80047d6 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d108      	bne.n	8004702 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046f8:	d009      	beq.n	800470e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	61da      	str	r2, [r3, #28]
 8004700:	e005      	b.n	800470e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d106      	bne.n	800472e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7fd f921 	bl	8001970 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2202      	movs	r2, #2
 8004732:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004744:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004760:	431a      	orrs	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004792:	ea42 0103 	orr.w	r1, r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	0c1a      	lsrs	r2, r3, #16
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f002 0204 	and.w	r2, r2, #4
 80047b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69da      	ldr	r2, [r3, #28]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b088      	sub	sp, #32
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	60f8      	str	r0, [r7, #12]
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	603b      	str	r3, [r7, #0]
 80047ea:	4613      	mov	r3, r2
 80047ec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047ee:	f7fd fa61 	bl	8001cb4 <HAL_GetTick>
 80047f2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80047f4:	88fb      	ldrh	r3, [r7, #6]
 80047f6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b01      	cmp	r3, #1
 8004802:	d001      	beq.n	8004808 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004804:	2302      	movs	r3, #2
 8004806:	e12a      	b.n	8004a5e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <HAL_SPI_Transmit+0x36>
 800480e:	88fb      	ldrh	r3, [r7, #6]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e122      	b.n	8004a5e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800481e:	2b01      	cmp	r3, #1
 8004820:	d101      	bne.n	8004826 <HAL_SPI_Transmit+0x48>
 8004822:	2302      	movs	r3, #2
 8004824:	e11b      	b.n	8004a5e <HAL_SPI_Transmit+0x280>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2203      	movs	r2, #3
 8004832:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	88fa      	ldrh	r2, [r7, #6]
 8004846:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	88fa      	ldrh	r2, [r7, #6]
 800484c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004874:	d10f      	bne.n	8004896 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004884:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004894:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a0:	2b40      	cmp	r3, #64	@ 0x40
 80048a2:	d007      	beq.n	80048b4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048bc:	d152      	bne.n	8004964 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <HAL_SPI_Transmit+0xee>
 80048c6:	8b7b      	ldrh	r3, [r7, #26]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d145      	bne.n	8004958 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d0:	881a      	ldrh	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048dc:	1c9a      	adds	r2, r3, #2
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048f0:	e032      	b.n	8004958 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d112      	bne.n	8004926 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004904:	881a      	ldrh	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004910:	1c9a      	adds	r2, r3, #2
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800491a:	b29b      	uxth	r3, r3
 800491c:	3b01      	subs	r3, #1
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004924:	e018      	b.n	8004958 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004926:	f7fd f9c5 	bl	8001cb4 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d803      	bhi.n	800493e <HAL_SPI_Transmit+0x160>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493c:	d102      	bne.n	8004944 <HAL_SPI_Transmit+0x166>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d109      	bne.n	8004958 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e082      	b.n	8004a5e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1c7      	bne.n	80048f2 <HAL_SPI_Transmit+0x114>
 8004962:	e053      	b.n	8004a0c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <HAL_SPI_Transmit+0x194>
 800496c:	8b7b      	ldrh	r3, [r7, #26]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d147      	bne.n	8004a02 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	330c      	adds	r3, #12
 800497c:	7812      	ldrb	r2, [r2, #0]
 800497e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800498e:	b29b      	uxth	r3, r3
 8004990:	3b01      	subs	r3, #1
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004998:	e033      	b.n	8004a02 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d113      	bne.n	80049d0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	330c      	adds	r3, #12
 80049b2:	7812      	ldrb	r2, [r2, #0]
 80049b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80049ce:	e018      	b.n	8004a02 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049d0:	f7fd f970 	bl	8001cb4 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d803      	bhi.n	80049e8 <HAL_SPI_Transmit+0x20a>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e6:	d102      	bne.n	80049ee <HAL_SPI_Transmit+0x210>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d109      	bne.n	8004a02 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e02d      	b.n	8004a5e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1c6      	bne.n	800499a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	6839      	ldr	r1, [r7, #0]
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 fbd1 	bl	80051b8 <SPI_EndRxTxTransaction>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10a      	bne.n	8004a40 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	617b      	str	r3, [r7, #20]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e000      	b.n	8004a5e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
  }
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3720      	adds	r7, #32
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b088      	sub	sp, #32
 8004a6a:	af02      	add	r7, sp, #8
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	603b      	str	r3, [r7, #0]
 8004a72:	4613      	mov	r3, r2
 8004a74:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d001      	beq.n	8004a86 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004a82:	2302      	movs	r3, #2
 8004a84:	e104      	b.n	8004c90 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a8e:	d112      	bne.n	8004ab6 <HAL_SPI_Receive+0x50>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10e      	bne.n	8004ab6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2204      	movs	r2, #4
 8004a9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004aa0:	88fa      	ldrh	r2, [r7, #6]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	68b9      	ldr	r1, [r7, #8]
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 f8f3 	bl	8004c98 <HAL_SPI_TransmitReceive>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	e0ec      	b.n	8004c90 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ab6:	f7fd f8fd 	bl	8001cb4 <HAL_GetTick>
 8004aba:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <HAL_SPI_Receive+0x62>
 8004ac2:	88fb      	ldrh	r3, [r7, #6]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e0e1      	b.n	8004c90 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_SPI_Receive+0x74>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e0da      	b.n	8004c90 <HAL_SPI_Receive+0x22a>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	88fa      	ldrh	r2, [r7, #6]
 8004afa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	88fa      	ldrh	r2, [r7, #6]
 8004b00:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b28:	d10f      	bne.n	8004b4a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b48:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b54:	2b40      	cmp	r3, #64	@ 0x40
 8004b56:	d007      	beq.n	8004b68 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b66:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d170      	bne.n	8004c52 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b70:	e035      	b.n	8004bde <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d115      	bne.n	8004bac <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f103 020c 	add.w	r2, r3, #12
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8c:	7812      	ldrb	r2, [r2, #0]
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004baa:	e018      	b.n	8004bde <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bac:	f7fd f882 	bl	8001cb4 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d803      	bhi.n	8004bc4 <HAL_SPI_Receive+0x15e>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc2:	d102      	bne.n	8004bca <HAL_SPI_Receive+0x164>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e058      	b.n	8004c90 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1c4      	bne.n	8004b72 <HAL_SPI_Receive+0x10c>
 8004be8:	e038      	b.n	8004c5c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d113      	bne.n	8004c20 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c02:	b292      	uxth	r2, r2
 8004c04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0a:	1c9a      	adds	r2, r3, #2
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c1e:	e018      	b.n	8004c52 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c20:	f7fd f848 	bl	8001cb4 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d803      	bhi.n	8004c38 <HAL_SPI_Receive+0x1d2>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c36:	d102      	bne.n	8004c3e <HAL_SPI_Receive+0x1d8>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d109      	bne.n	8004c52 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e01e      	b.n	8004c90 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1c6      	bne.n	8004bea <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	6839      	ldr	r1, [r7, #0]
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 fa57 	bl	8005114 <SPI_EndRxTransaction>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
  }
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08a      	sub	sp, #40	@ 0x28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004caa:	f7fd f803 	bl	8001cb4 <HAL_GetTick>
 8004cae:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cb6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004cbe:	887b      	ldrh	r3, [r7, #2]
 8004cc0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cc2:	7ffb      	ldrb	r3, [r7, #31]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d00c      	beq.n	8004ce2 <HAL_SPI_TransmitReceive+0x4a>
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cce:	d106      	bne.n	8004cde <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d102      	bne.n	8004cde <HAL_SPI_TransmitReceive+0x46>
 8004cd8:	7ffb      	ldrb	r3, [r7, #31]
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d001      	beq.n	8004ce2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e17f      	b.n	8004fe2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <HAL_SPI_TransmitReceive+0x5c>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <HAL_SPI_TransmitReceive+0x5c>
 8004cee:	887b      	ldrh	r3, [r7, #2]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e174      	b.n	8004fe2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <HAL_SPI_TransmitReceive+0x6e>
 8004d02:	2302      	movs	r3, #2
 8004d04:	e16d      	b.n	8004fe2 <HAL_SPI_TransmitReceive+0x34a>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d003      	beq.n	8004d22 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2205      	movs	r2, #5
 8004d1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	887a      	ldrh	r2, [r7, #2]
 8004d32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	887a      	ldrh	r2, [r7, #2]
 8004d38:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	887a      	ldrh	r2, [r7, #2]
 8004d44:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	887a      	ldrh	r2, [r7, #2]
 8004d4a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d62:	2b40      	cmp	r3, #64	@ 0x40
 8004d64:	d007      	beq.n	8004d76 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d7e:	d17e      	bne.n	8004e7e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <HAL_SPI_TransmitReceive+0xf6>
 8004d88:	8afb      	ldrh	r3, [r7, #22]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d16c      	bne.n	8004e68 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d92:	881a      	ldrh	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9e:	1c9a      	adds	r2, r3, #2
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004db2:	e059      	b.n	8004e68 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d11b      	bne.n	8004dfa <HAL_SPI_TransmitReceive+0x162>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d016      	beq.n	8004dfa <HAL_SPI_TransmitReceive+0x162>
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d113      	bne.n	8004dfa <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd6:	881a      	ldrh	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de2:	1c9a      	adds	r2, r3, #2
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d119      	bne.n	8004e3c <HAL_SPI_TransmitReceive+0x1a4>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d014      	beq.n	8004e3c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1c:	b292      	uxth	r2, r2
 8004e1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e24:	1c9a      	adds	r2, r3, #2
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e3c:	f7fc ff3a 	bl	8001cb4 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d80d      	bhi.n	8004e68 <HAL_SPI_TransmitReceive+0x1d0>
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e52:	d009      	beq.n	8004e68 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e0bc      	b.n	8004fe2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1a0      	bne.n	8004db4 <HAL_SPI_TransmitReceive+0x11c>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d19b      	bne.n	8004db4 <HAL_SPI_TransmitReceive+0x11c>
 8004e7c:	e082      	b.n	8004f84 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <HAL_SPI_TransmitReceive+0x1f4>
 8004e86:	8afb      	ldrh	r3, [r7, #22]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d171      	bne.n	8004f70 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	330c      	adds	r3, #12
 8004e96:	7812      	ldrb	r2, [r2, #0]
 8004e98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eb2:	e05d      	b.n	8004f70 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d11c      	bne.n	8004efc <HAL_SPI_TransmitReceive+0x264>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d017      	beq.n	8004efc <HAL_SPI_TransmitReceive+0x264>
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d114      	bne.n	8004efc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	330c      	adds	r3, #12
 8004edc:	7812      	ldrb	r2, [r2, #0]
 8004ede:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d119      	bne.n	8004f3e <HAL_SPI_TransmitReceive+0x2a6>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d014      	beq.n	8004f3e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f3e:	f7fc feb9 	bl	8001cb4 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d803      	bhi.n	8004f56 <HAL_SPI_TransmitReceive+0x2be>
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f54:	d102      	bne.n	8004f5c <HAL_SPI_TransmitReceive+0x2c4>
 8004f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d109      	bne.n	8004f70 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e038      	b.n	8004fe2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d19c      	bne.n	8004eb4 <HAL_SPI_TransmitReceive+0x21c>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d197      	bne.n	8004eb4 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f84:	6a3a      	ldr	r2, [r7, #32]
 8004f86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f915 	bl	80051b8 <SPI_EndRxTxTransaction>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d008      	beq.n	8004fa6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2220      	movs	r2, #32
 8004f98:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e01d      	b.n	8004fe2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10a      	bne.n	8004fc4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fae:	2300      	movs	r3, #0
 8004fb0:	613b      	str	r3, [r7, #16]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
  }
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3728      	adds	r7, #40	@ 0x28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ff8:	b2db      	uxtb	r3, r3
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc80      	pop	{r7}
 8005002:	4770      	bx	lr

08005004 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	4613      	mov	r3, r2
 8005012:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005014:	f7fc fe4e 	bl	8001cb4 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501c:	1a9b      	subs	r3, r3, r2
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	4413      	add	r3, r2
 8005022:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005024:	f7fc fe46 	bl	8001cb4 <HAL_GetTick>
 8005028:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800502a:	4b39      	ldr	r3, [pc, #228]	@ (8005110 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	015b      	lsls	r3, r3, #5
 8005030:	0d1b      	lsrs	r3, r3, #20
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	fb02 f303 	mul.w	r3, r2, r3
 8005038:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800503a:	e054      	b.n	80050e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005042:	d050      	beq.n	80050e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005044:	f7fc fe36 	bl	8001cb4 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	429a      	cmp	r2, r3
 8005052:	d902      	bls.n	800505a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d13d      	bne.n	80050d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005068:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005072:	d111      	bne.n	8005098 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800507c:	d004      	beq.n	8005088 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005086:	d107      	bne.n	8005098 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005096:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050a0:	d10f      	bne.n	80050c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e017      	b.n	8005106 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	4013      	ands	r3, r2
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	bf0c      	ite	eq
 80050f6:	2301      	moveq	r3, #1
 80050f8:	2300      	movne	r3, #0
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	461a      	mov	r2, r3
 80050fe:	79fb      	ldrb	r3, [r7, #7]
 8005100:	429a      	cmp	r2, r3
 8005102:	d19b      	bne.n	800503c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000000 	.word	0x20000000

08005114 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af02      	add	r7, sp, #8
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005128:	d111      	bne.n	800514e <SPI_EndRxTransaction+0x3a>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005132:	d004      	beq.n	800513e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800513c:	d107      	bne.n	800514e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800514c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005156:	d117      	bne.n	8005188 <SPI_EndRxTransaction+0x74>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005160:	d112      	bne.n	8005188 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	2200      	movs	r2, #0
 800516a:	2101      	movs	r1, #1
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f7ff ff49 	bl	8005004 <SPI_WaitFlagStateUntilTimeout>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d01a      	beq.n	80051ae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800517c:	f043 0220 	orr.w	r2, r3, #32
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e013      	b.n	80051b0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2200      	movs	r2, #0
 8005190:	2180      	movs	r1, #128	@ 0x80
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f7ff ff36 	bl	8005004 <SPI_WaitFlagStateUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d007      	beq.n	80051ae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a2:	f043 0220 	orr.w	r2, r3, #32
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e000      	b.n	80051b0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2201      	movs	r2, #1
 80051cc:	2102      	movs	r1, #2
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f7ff ff18 	bl	8005004 <SPI_WaitFlagStateUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d007      	beq.n	80051ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051de:	f043 0220 	orr.w	r2, r3, #32
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e013      	b.n	8005212 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2200      	movs	r2, #0
 80051f2:	2180      	movs	r1, #128	@ 0x80
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f7ff ff05 	bl	8005004 <SPI_WaitFlagStateUntilTimeout>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d007      	beq.n	8005210 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005204:	f043 0220 	orr.w	r2, r3, #32
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e000      	b.n	8005212 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b082      	sub	sp, #8
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e041      	b.n	80052b0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d106      	bne.n	8005246 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7fc fbdf 	bl	8001a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2202      	movs	r2, #2
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3304      	adds	r3, #4
 8005256:	4619      	mov	r1, r3
 8005258:	4610      	mov	r0, r2
 800525a:	f000 f95f 	bl	800551c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d001      	beq.n	80052d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e02d      	b.n	800532c <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a16      	ldr	r2, [pc, #88]	@ (8005338 <HAL_TIM_Base_Start+0x80>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d009      	beq.n	80052f6 <HAL_TIM_Base_Start+0x3e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ea:	d004      	beq.n	80052f6 <HAL_TIM_Base_Start+0x3e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a12      	ldr	r2, [pc, #72]	@ (800533c <HAL_TIM_Base_Start+0x84>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d111      	bne.n	800531a <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b06      	cmp	r3, #6
 8005306:	d010      	beq.n	800532a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0201 	orr.w	r2, r2, #1
 8005316:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005318:	e007      	b.n	800532a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f042 0201 	orr.w	r2, r2, #1
 8005328:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	bc80      	pop	{r7}
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	40012c00 	.word	0x40012c00
 800533c:	40000400 	.word	0x40000400

08005340 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6a1a      	ldr	r2, [r3, #32]
 800534e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005352:	4013      	ands	r3, r2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10f      	bne.n	8005378 <HAL_TIM_Base_Stop+0x38>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6a1a      	ldr	r2, [r3, #32]
 800535e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005362:	4013      	ands	r3, r2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d107      	bne.n	8005378 <HAL_TIM_Base_Stop+0x38>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0201 	bic.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr

0800538c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <HAL_TIM_ConfigClockSource+0x1c>
 80053a4:	2302      	movs	r3, #2
 80053a6:	e0b4      	b.n	8005512 <HAL_TIM_ConfigClockSource+0x186>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80053c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e0:	d03e      	beq.n	8005460 <HAL_TIM_ConfigClockSource+0xd4>
 80053e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e6:	f200 8087 	bhi.w	80054f8 <HAL_TIM_ConfigClockSource+0x16c>
 80053ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ee:	f000 8086 	beq.w	80054fe <HAL_TIM_ConfigClockSource+0x172>
 80053f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053f6:	d87f      	bhi.n	80054f8 <HAL_TIM_ConfigClockSource+0x16c>
 80053f8:	2b70      	cmp	r3, #112	@ 0x70
 80053fa:	d01a      	beq.n	8005432 <HAL_TIM_ConfigClockSource+0xa6>
 80053fc:	2b70      	cmp	r3, #112	@ 0x70
 80053fe:	d87b      	bhi.n	80054f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005400:	2b60      	cmp	r3, #96	@ 0x60
 8005402:	d050      	beq.n	80054a6 <HAL_TIM_ConfigClockSource+0x11a>
 8005404:	2b60      	cmp	r3, #96	@ 0x60
 8005406:	d877      	bhi.n	80054f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005408:	2b50      	cmp	r3, #80	@ 0x50
 800540a:	d03c      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0xfa>
 800540c:	2b50      	cmp	r3, #80	@ 0x50
 800540e:	d873      	bhi.n	80054f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005410:	2b40      	cmp	r3, #64	@ 0x40
 8005412:	d058      	beq.n	80054c6 <HAL_TIM_ConfigClockSource+0x13a>
 8005414:	2b40      	cmp	r3, #64	@ 0x40
 8005416:	d86f      	bhi.n	80054f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005418:	2b30      	cmp	r3, #48	@ 0x30
 800541a:	d064      	beq.n	80054e6 <HAL_TIM_ConfigClockSource+0x15a>
 800541c:	2b30      	cmp	r3, #48	@ 0x30
 800541e:	d86b      	bhi.n	80054f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005420:	2b20      	cmp	r3, #32
 8005422:	d060      	beq.n	80054e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005424:	2b20      	cmp	r3, #32
 8005426:	d867      	bhi.n	80054f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005428:	2b00      	cmp	r3, #0
 800542a:	d05c      	beq.n	80054e6 <HAL_TIM_ConfigClockSource+0x15a>
 800542c:	2b10      	cmp	r3, #16
 800542e:	d05a      	beq.n	80054e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005430:	e062      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005442:	f000 f946 	bl	80056d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005454:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	609a      	str	r2, [r3, #8]
      break;
 800545e:	e04f      	b.n	8005500 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005470:	f000 f92f 	bl	80056d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005482:	609a      	str	r2, [r3, #8]
      break;
 8005484:	e03c      	b.n	8005500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005492:	461a      	mov	r2, r3
 8005494:	f000 f8a6 	bl	80055e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2150      	movs	r1, #80	@ 0x50
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 f8fd 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 80054a4:	e02c      	b.n	8005500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054b2:	461a      	mov	r2, r3
 80054b4:	f000 f8c4 	bl	8005640 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2160      	movs	r1, #96	@ 0x60
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 f8ed 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 80054c4:	e01c      	b.n	8005500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054d2:	461a      	mov	r2, r3
 80054d4:	f000 f886 	bl	80055e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2140      	movs	r1, #64	@ 0x40
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 f8dd 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 80054e4:	e00c      	b.n	8005500 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4619      	mov	r1, r3
 80054f0:	4610      	mov	r0, r2
 80054f2:	f000 f8d4 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 80054f6:	e003      	b.n	8005500 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	73fb      	strb	r3, [r7, #15]
      break;
 80054fc:	e000      	b.n	8005500 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005510:	7bfb      	ldrb	r3, [r7, #15]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a2b      	ldr	r2, [pc, #172]	@ (80055dc <TIM_Base_SetConfig+0xc0>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d007      	beq.n	8005544 <TIM_Base_SetConfig+0x28>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800553a:	d003      	beq.n	8005544 <TIM_Base_SetConfig+0x28>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a28      	ldr	r2, [pc, #160]	@ (80055e0 <TIM_Base_SetConfig+0xc4>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d108      	bne.n	8005556 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800554a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a20      	ldr	r2, [pc, #128]	@ (80055dc <TIM_Base_SetConfig+0xc0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d007      	beq.n	800556e <TIM_Base_SetConfig+0x52>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005564:	d003      	beq.n	800556e <TIM_Base_SetConfig+0x52>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a1d      	ldr	r2, [pc, #116]	@ (80055e0 <TIM_Base_SetConfig+0xc4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d108      	bne.n	8005580 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a0d      	ldr	r2, [pc, #52]	@ (80055dc <TIM_Base_SetConfig+0xc0>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d103      	bne.n	80055b4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	691a      	ldr	r2, [r3, #16]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d005      	beq.n	80055d2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f023 0201 	bic.w	r2, r3, #1
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	611a      	str	r2, [r3, #16]
  }
}
 80055d2:	bf00      	nop
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bc80      	pop	{r7}
 80055da:	4770      	bx	lr
 80055dc:	40012c00 	.word	0x40012c00
 80055e0:	40000400 	.word	0x40000400

080055e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f023 0201 	bic.w	r2, r3, #1
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800560e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f023 030a 	bic.w	r3, r3, #10
 8005620:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr

08005640 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005640:	b480      	push	{r7}
 8005642:	b087      	sub	sp, #28
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f023 0210 	bic.w	r2, r3, #16
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800566a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	031b      	lsls	r3, r3, #12
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800567c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	621a      	str	r2, [r3, #32]
}
 8005694:	bf00      	nop
 8005696:	371c      	adds	r7, #28
 8005698:	46bd      	mov	sp, r7
 800569a:	bc80      	pop	{r7}
 800569c:	4770      	bx	lr

0800569e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800569e:	b480      	push	{r7}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f043 0307 	orr.w	r3, r3, #7
 80056c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	609a      	str	r2, [r3, #8]
}
 80056c8:	bf00      	nop
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr

080056d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b087      	sub	sp, #28
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	607a      	str	r2, [r7, #4]
 80056de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	021a      	lsls	r2, r3, #8
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	431a      	orrs	r2, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	609a      	str	r2, [r3, #8]
}
 8005706:	bf00      	nop
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr

08005710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005724:	2302      	movs	r3, #2
 8005726:	e041      	b.n	80057ac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800574e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a14      	ldr	r2, [pc, #80]	@ (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d009      	beq.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005774:	d004      	beq.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a10      	ldr	r2, [pc, #64]	@ (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d10c      	bne.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005786:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	4313      	orrs	r3, r2
 8005790:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bc80      	pop	{r7}
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40012c00 	.word	0x40012c00
 80057bc:	40000400 	.word	0x40000400

080057c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e042      	b.n	8005858 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7fc f928 	bl	8001a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2224      	movs	r2, #36	@ 0x24
 80057f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005802:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f971 	bl	8005aec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005818:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	695a      	ldr	r2, [r3, #20]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005828:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68da      	ldr	r2, [r3, #12]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005838:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2220      	movs	r2, #32
 8005844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b08a      	sub	sp, #40	@ 0x28
 8005864:	af02      	add	r7, sp, #8
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	603b      	str	r3, [r7, #0]
 800586c:	4613      	mov	r3, r2
 800586e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b20      	cmp	r3, #32
 800587e:	d175      	bne.n	800596c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <HAL_UART_Transmit+0x2c>
 8005886:	88fb      	ldrh	r3, [r7, #6]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e06e      	b.n	800596e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2221      	movs	r2, #33	@ 0x21
 800589a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800589e:	f7fc fa09 	bl	8001cb4 <HAL_GetTick>
 80058a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	88fa      	ldrh	r2, [r7, #6]
 80058a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	88fa      	ldrh	r2, [r7, #6]
 80058ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058b8:	d108      	bne.n	80058cc <HAL_UART_Transmit+0x6c>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d104      	bne.n	80058cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058c2:	2300      	movs	r3, #0
 80058c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	e003      	b.n	80058d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058d0:	2300      	movs	r3, #0
 80058d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058d4:	e02e      	b.n	8005934 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2200      	movs	r2, #0
 80058de:	2180      	movs	r1, #128	@ 0x80
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 f848 	bl	8005976 <UART_WaitOnFlagUntilTimeout>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e03a      	b.n	800596e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10b      	bne.n	8005916 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800590c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	3302      	adds	r3, #2
 8005912:	61bb      	str	r3, [r7, #24]
 8005914:	e007      	b.n	8005926 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	781a      	ldrb	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	3301      	adds	r3, #1
 8005924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1cb      	bne.n	80058d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2200      	movs	r2, #0
 8005946:	2140      	movs	r1, #64	@ 0x40
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f814 	bl	8005976 <UART_WaitOnFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d005      	beq.n	8005960 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e006      	b.n	800596e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2220      	movs	r2, #32
 8005964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	e000      	b.n	800596e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800596c:	2302      	movs	r3, #2
  }
}
 800596e:	4618      	mov	r0, r3
 8005970:	3720      	adds	r7, #32
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b086      	sub	sp, #24
 800597a:	af00      	add	r7, sp, #0
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	603b      	str	r3, [r7, #0]
 8005982:	4613      	mov	r3, r2
 8005984:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005986:	e03b      	b.n	8005a00 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598e:	d037      	beq.n	8005a00 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005990:	f7fc f990 	bl	8001cb4 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	6a3a      	ldr	r2, [r7, #32]
 800599c:	429a      	cmp	r2, r3
 800599e:	d302      	bcc.n	80059a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e03a      	b.n	8005a20 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d023      	beq.n	8005a00 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2b80      	cmp	r3, #128	@ 0x80
 80059bc:	d020      	beq.n	8005a00 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b40      	cmp	r3, #64	@ 0x40
 80059c2:	d01d      	beq.n	8005a00 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	d116      	bne.n	8005a00 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80059d2:	2300      	movs	r3, #0
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	617b      	str	r3, [r7, #20]
 80059e6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 f81d 	bl	8005a28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2208      	movs	r2, #8
 80059f2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e00f      	b.n	8005a20 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	bf0c      	ite	eq
 8005a10:	2301      	moveq	r3, #1
 8005a12:	2300      	movne	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	79fb      	ldrb	r3, [r7, #7]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d0b4      	beq.n	8005988 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b095      	sub	sp, #84	@ 0x54
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	330c      	adds	r3, #12
 8005a36:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a3a:	e853 3f00 	ldrex	r3, [r3]
 8005a3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	330c      	adds	r3, #12
 8005a4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a50:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a58:	e841 2300 	strex	r3, r2, [r1]
 8005a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1e5      	bne.n	8005a30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3314      	adds	r3, #20
 8005a6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	e853 3f00 	ldrex	r3, [r3]
 8005a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	f023 0301 	bic.w	r3, r3, #1
 8005a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3314      	adds	r3, #20
 8005a82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a8c:	e841 2300 	strex	r3, r2, [r1]
 8005a90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1e5      	bne.n	8005a64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d119      	bne.n	8005ad4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	330c      	adds	r3, #12
 8005aa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	e853 3f00 	ldrex	r3, [r3]
 8005aae:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f023 0310 	bic.w	r3, r3, #16
 8005ab6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	330c      	adds	r3, #12
 8005abe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ac0:	61ba      	str	r2, [r7, #24]
 8005ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac4:	6979      	ldr	r1, [r7, #20]
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	e841 2300 	strex	r3, r2, [r1]
 8005acc:	613b      	str	r3, [r7, #16]
   return(result);
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1e5      	bne.n	8005aa0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ae2:	bf00      	nop
 8005ae4:	3754      	adds	r7, #84	@ 0x54
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bc80      	pop	{r7}
 8005aea:	4770      	bx	lr

08005aec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689a      	ldr	r2, [r3, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005b26:	f023 030c 	bic.w	r3, r3, #12
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6812      	ldr	r2, [r2, #0]
 8005b2e:	68b9      	ldr	r1, [r7, #8]
 8005b30:	430b      	orrs	r3, r1
 8005b32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699a      	ldr	r2, [r3, #24]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a2c      	ldr	r2, [pc, #176]	@ (8005c00 <UART_SetConfig+0x114>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d103      	bne.n	8005b5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b54:	f7fd fd6c 	bl	8003630 <HAL_RCC_GetPCLK2Freq>
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	e002      	b.n	8005b62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b5c:	f7fd fd54 	bl	8003608 <HAL_RCC_GetPCLK1Freq>
 8005b60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	009a      	lsls	r2, r3, #2
 8005b6c:	441a      	add	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b78:	4a22      	ldr	r2, [pc, #136]	@ (8005c04 <UART_SetConfig+0x118>)
 8005b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	0119      	lsls	r1, r3, #4
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	009a      	lsls	r2, r3, #2
 8005b8c:	441a      	add	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b98:	4b1a      	ldr	r3, [pc, #104]	@ (8005c04 <UART_SetConfig+0x118>)
 8005b9a:	fba3 0302 	umull	r0, r3, r3, r2
 8005b9e:	095b      	lsrs	r3, r3, #5
 8005ba0:	2064      	movs	r0, #100	@ 0x64
 8005ba2:	fb00 f303 	mul.w	r3, r0, r3
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	011b      	lsls	r3, r3, #4
 8005baa:	3332      	adds	r3, #50	@ 0x32
 8005bac:	4a15      	ldr	r2, [pc, #84]	@ (8005c04 <UART_SetConfig+0x118>)
 8005bae:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb2:	095b      	lsrs	r3, r3, #5
 8005bb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bb8:	4419      	add	r1, r3
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009a      	lsls	r2, r3, #2
 8005bc4:	441a      	add	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8005c04 <UART_SetConfig+0x118>)
 8005bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	2064      	movs	r0, #100	@ 0x64
 8005bda:	fb00 f303 	mul.w	r3, r0, r3
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	3332      	adds	r3, #50	@ 0x32
 8005be4:	4a07      	ldr	r2, [pc, #28]	@ (8005c04 <UART_SetConfig+0x118>)
 8005be6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bea:	095b      	lsrs	r3, r3, #5
 8005bec:	f003 020f 	and.w	r2, r3, #15
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005bf8:	bf00      	nop
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	40013800 	.word	0x40013800
 8005c04:	51eb851f 	.word	0x51eb851f

08005c08 <set_alarm>:
#include "AlarmReset.h"
#include "stm32f1xx_hal.h"

extern RTC_HandleTypeDef hrtc;

void set_alarm(uint8_t sec) {
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	71fb      	strb	r3, [r7, #7]
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 8005c12:	4b19      	ldr	r3, [pc, #100]	@ (8005c78 <set_alarm+0x70>)
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d10f      	bne.n	8005c3e <set_alarm+0x36>
		// MCU проснулся из Standby
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8005c1e:	4b16      	ldr	r3, [pc, #88]	@ (8005c78 <set_alarm+0x70>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a15      	ldr	r2, [pc, #84]	@ (8005c78 <set_alarm+0x70>)
 8005c24:	f043 0308 	orr.w	r3, r3, #8
 8005c28:	6013      	str	r3, [r2, #0]
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8005c2a:	4b13      	ldr	r3, [pc, #76]	@ (8005c78 <set_alarm+0x70>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a12      	ldr	r2, [pc, #72]	@ (8005c78 <set_alarm+0x70>)
 8005c30:	f043 0304 	orr.w	r3, r3, #4
 8005c34:	6013      	str	r3, [r2, #0]

		// ОЧИСТИТЬ БУДИЛЬНИК
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8005c36:	2100      	movs	r1, #0
 8005c38:	4810      	ldr	r0, [pc, #64]	@ (8005c7c <set_alarm+0x74>)
 8005c3a:	f7fe fa01 	bl	8004040 <HAL_RTC_DeactivateAlarm>
	}

	RTC_AlarmTypeDef sAlarm = { 0 };
 8005c3e:	f107 0308 	add.w	r3, r7, #8
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	605a      	str	r2, [r3, #4]

	sAlarm.AlarmTime.Hours = 0;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = 0;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = sec;
 8005c50:	79fb      	ldrb	r3, [r7, #7]
 8005c52:	72bb      	strb	r3, [r7, #10]
	sAlarm.Alarm = RTC_ALARM_A;
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 8005c58:	f107 0308 	add.w	r3, r7, #8
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4806      	ldr	r0, [pc, #24]	@ (8005c7c <set_alarm+0x74>)
 8005c62:	f7fe f935 	bl	8003ed0 <HAL_RTC_SetAlarm_IT>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <set_alarm+0x68>
		Error_Handler();
 8005c6c:	f7fb fd86 	bl	800177c <Error_Handler>
	}

}
 8005c70:	bf00      	nop
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	40007000 	.word	0x40007000
 8005c7c:	200000d8 	.word	0x200000d8

08005c80 <get_battery_level>:

extern Battery_t Battery;

static uint8_t battery_percent_from_voltage(float);

Battery_t get_battery_level() {
 8005c80:	b590      	push	{r4, r7, lr}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]

	HAL_ADC_Start(&hadc1);
 8005c88:	4821      	ldr	r0, [pc, #132]	@ (8005d10 <get_battery_level+0x90>)
 8005c8a:	f7fc f9f9 	bl	8002080 <HAL_ADC_Start>

	uint32_t adc_val;
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8005c8e:	f04f 31ff 	mov.w	r1, #4294967295
 8005c92:	481f      	ldr	r0, [pc, #124]	@ (8005d10 <get_battery_level+0x90>)
 8005c94:	f7fc face 	bl	8002234 <HAL_ADC_PollForConversion>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d103      	bne.n	8005ca6 <get_battery_level+0x26>
		adc_val = HAL_ADC_GetValue(&hadc1);
 8005c9e:	481c      	ldr	r0, [pc, #112]	@ (8005d10 <get_battery_level+0x90>)
 8005ca0:	f7fc fbce 	bl	8002440 <HAL_ADC_GetValue>
 8005ca4:	60f8      	str	r0, [r7, #12]
	}

	HAL_ADC_Stop(&hadc1);
 8005ca6:	481a      	ldr	r0, [pc, #104]	@ (8005d10 <get_battery_level+0x90>)
 8005ca8:	f7fc fa98 	bl	80021dc <HAL_ADC_Stop>
	 *  R2=3.3K
	 *  k=1.675
	 *  => Vmax = 2.7V
	 */

	float vref = 3.3f;
 8005cac:	4b19      	ldr	r3, [pc, #100]	@ (8005d14 <get_battery_level+0x94>)
 8005cae:	60bb      	str	r3, [r7, #8]

	Battery.vdd = (vref / 2.7f) * vref * adc_val / 4096.0f;
 8005cb0:	4919      	ldr	r1, [pc, #100]	@ (8005d18 <get_battery_level+0x98>)
 8005cb2:	68b8      	ldr	r0, [r7, #8]
 8005cb4:	f7fb f80a 	bl	8000ccc <__aeabi_fdiv>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	68b9      	ldr	r1, [r7, #8]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fa ff51 	bl	8000b64 <__aeabi_fmul>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	461c      	mov	r4, r3
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f7fa fef4 	bl	8000ab4 <__aeabi_ui2f>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f7fa ff47 	bl	8000b64 <__aeabi_fmul>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7fa fff5 	bl	8000ccc <__aeabi_fdiv>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d1c <get_battery_level+0x9c>)
 8005ce8:	601a      	str	r2, [r3, #0]

	Battery.charge_percent = battery_percent_from_voltage(Battery.vdd);
 8005cea:	4b0c      	ldr	r3, [pc, #48]	@ (8005d1c <get_battery_level+0x9c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 f816 	bl	8005d20 <battery_percent_from_voltage>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	4b08      	ldr	r3, [pc, #32]	@ (8005d1c <get_battery_level+0x9c>)
 8005cfa:	711a      	strb	r2, [r3, #4]

	return Battery;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a07      	ldr	r2, [pc, #28]	@ (8005d1c <get_battery_level+0x9c>)
 8005d00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d04:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd90      	pop	{r4, r7, pc}
 8005d10:	20000078 	.word	0x20000078
 8005d14:	40533333 	.word	0x40533333
 8005d18:	402ccccd 	.word	0x402ccccd
 8005d1c:	200001e0 	.word	0x200001e0

08005d20 <battery_percent_from_voltage>:

static uint8_t battery_percent_from_voltage(float voltage) {
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]

	if (voltage >= 3.2f)
 8005d28:	4937      	ldr	r1, [pc, #220]	@ (8005e08 <battery_percent_from_voltage+0xe8>)
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fb f8cc 	bl	8000ec8 <__aeabi_fcmpge>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <battery_percent_from_voltage+0x1a>
		return 100;
 8005d36:	2364      	movs	r3, #100	@ 0x64
 8005d38:	e061      	b.n	8005dfe <battery_percent_from_voltage+0xde>
	else if (voltage >= 2.9f)
 8005d3a:	4934      	ldr	r1, [pc, #208]	@ (8005e0c <battery_percent_from_voltage+0xec>)
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7fb f8c3 	bl	8000ec8 <__aeabi_fcmpge>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d019      	beq.n	8005d7c <battery_percent_from_voltage+0x5c>
		return (uint8_t) (80 + (voltage - 2.9f) / 0.3f * 20);
 8005d48:	4930      	ldr	r1, [pc, #192]	@ (8005e0c <battery_percent_from_voltage+0xec>)
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7fa fe00 	bl	8000950 <__aeabi_fsub>
 8005d50:	4603      	mov	r3, r0
 8005d52:	492f      	ldr	r1, [pc, #188]	@ (8005e10 <battery_percent_from_voltage+0xf0>)
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fa ffb9 	bl	8000ccc <__aeabi_fdiv>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	492d      	ldr	r1, [pc, #180]	@ (8005e14 <battery_percent_from_voltage+0xf4>)
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fa ff00 	bl	8000b64 <__aeabi_fmul>
 8005d64:	4603      	mov	r3, r0
 8005d66:	492c      	ldr	r1, [pc, #176]	@ (8005e18 <battery_percent_from_voltage+0xf8>)
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7fa fdf3 	bl	8000954 <__addsf3>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7fb f8bd 	bl	8000ef0 <__aeabi_f2uiz>
 8005d76:	4603      	mov	r3, r0
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	e040      	b.n	8005dfe <battery_percent_from_voltage+0xde>
	else if (voltage >= 2.5f)
 8005d7c:	4927      	ldr	r1, [pc, #156]	@ (8005e1c <battery_percent_from_voltage+0xfc>)
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7fb f8a2 	bl	8000ec8 <__aeabi_fcmpge>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d019      	beq.n	8005dbe <battery_percent_from_voltage+0x9e>
		return (uint8_t) (20 + (voltage - 2.5f) / 0.4f * 60);
 8005d8a:	4924      	ldr	r1, [pc, #144]	@ (8005e1c <battery_percent_from_voltage+0xfc>)
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7fa fddf 	bl	8000950 <__aeabi_fsub>
 8005d92:	4603      	mov	r3, r0
 8005d94:	4922      	ldr	r1, [pc, #136]	@ (8005e20 <battery_percent_from_voltage+0x100>)
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fa ff98 	bl	8000ccc <__aeabi_fdiv>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	4921      	ldr	r1, [pc, #132]	@ (8005e24 <battery_percent_from_voltage+0x104>)
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7fa fedf 	bl	8000b64 <__aeabi_fmul>
 8005da6:	4603      	mov	r3, r0
 8005da8:	491a      	ldr	r1, [pc, #104]	@ (8005e14 <battery_percent_from_voltage+0xf4>)
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fa fdd2 	bl	8000954 <__addsf3>
 8005db0:	4603      	mov	r3, r0
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fb f89c 	bl	8000ef0 <__aeabi_f2uiz>
 8005db8:	4603      	mov	r3, r0
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	e01f      	b.n	8005dfe <battery_percent_from_voltage+0xde>
	else if (voltage >= 2.0f)
 8005dbe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7fb f880 	bl	8000ec8 <__aeabi_fcmpge>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d016      	beq.n	8005dfc <battery_percent_from_voltage+0xdc>
		return (uint8_t) ((voltage - 2.0f) / 0.5f * 20);
 8005dce:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7fa fdbc 	bl	8000950 <__aeabi_fsub>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fa ff74 	bl	8000ccc <__aeabi_fdiv>
 8005de4:	4603      	mov	r3, r0
 8005de6:	490b      	ldr	r1, [pc, #44]	@ (8005e14 <battery_percent_from_voltage+0xf4>)
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fa febb 	bl	8000b64 <__aeabi_fmul>
 8005dee:	4603      	mov	r3, r0
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7fb f87d 	bl	8000ef0 <__aeabi_f2uiz>
 8005df6:	4603      	mov	r3, r0
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	e000      	b.n	8005dfe <battery_percent_from_voltage+0xde>
	else
		return 0;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	404ccccd 	.word	0x404ccccd
 8005e0c:	4039999a 	.word	0x4039999a
 8005e10:	3e99999a 	.word	0x3e99999a
 8005e14:	41a00000 	.word	0x41a00000
 8005e18:	42a00000 	.word	0x42a00000
 8005e1c:	40200000 	.word	0x40200000
 8005e20:	3ecccccd 	.word	0x3ecccccd
 8005e24:	42700000 	.word	0x42700000

08005e28 <debug_init>:
#include <string.h>
#include "main.h"

static UART_HandleTypeDef *huart;

void debug_init(UART_HandleTypeDef *hu) {
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
	huart = hu;
 8005e30:	4a03      	ldr	r2, [pc, #12]	@ (8005e40 <debug_init+0x18>)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6013      	str	r3, [r2, #0]
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bc80      	pop	{r7}
 8005e3e:	4770      	bx	lr
 8005e40:	20000200 	.word	0x20000200

08005e44 <debug>:

void debug(const char *format, ...) {
 8005e44:	b40f      	push	{r0, r1, r2, r3}
 8005e46:	b590      	push	{r4, r7, lr}
 8005e48:	b0bd      	sub	sp, #244	@ 0xf4
 8005e4a:	af02      	add	r7, sp, #8
	char buffer[128];

	char msg[96];

	va_list args;
	va_start(args, format);
 8005e4c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8005e50:	607b      	str	r3, [r7, #4]
	vsnprintf(msg, sizeof(msg), format, args);
 8005e52:	f107 0008 	add.w	r0, r7, #8
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8005e5c:	2160      	movs	r1, #96	@ 0x60
 8005e5e:	f000 fd5d 	bl	800691c <vsniprintf>
	va_end(args);

	snprintf(buffer, sizeof(buffer), "[%4lu ms] %s\n\r", HAL_GetTick(), msg);
 8005e62:	f7fb ff27 	bl	8001cb4 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8005e6c:	f107 0308 	add.w	r3, r7, #8
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	4613      	mov	r3, r2
 8005e74:	4a0d      	ldr	r2, [pc, #52]	@ (8005eac <debug+0x68>)
 8005e76:	2180      	movs	r1, #128	@ 0x80
 8005e78:	f000 fcec 	bl	8006854 <sniprintf>

	HAL_UART_Transmit(huart, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8005e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005eb0 <debug+0x6c>)
 8005e7e:	681c      	ldr	r4, [r3, #0]
 8005e80:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fa f961 	bl	800014c <strlen>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8005e92:	f04f 33ff 	mov.w	r3, #4294967295
 8005e96:	4620      	mov	r0, r4
 8005e98:	f7ff fce2 	bl	8005860 <HAL_UART_Transmit>
}
 8005e9c:	bf00      	nop
 8005e9e:	37ec      	adds	r7, #236	@ 0xec
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005ea6:	b004      	add	sp, #16
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	08007414 	.word	0x08007414
 8005eb0:	20000200 	.word	0x20000200

08005eb4 <TIM2_Delay_us>:
#include <stdint.h>
#include "stm32f1xx_hal.h"

extern TIM_HandleTypeDef htim2;

void TIM2_Delay_us(uint32_t us) {
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]

	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8005ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee8 <TIM2_Delay_us+0x34>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_Base_Start(&htim2);
 8005ec4:	4808      	ldr	r0, [pc, #32]	@ (8005ee8 <TIM2_Delay_us+0x34>)
 8005ec6:	f7ff f9f7 	bl	80052b8 <HAL_TIM_Base_Start>

	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8005eca:	bf00      	nop
 8005ecc:	4b06      	ldr	r3, [pc, #24]	@ (8005ee8 <TIM2_Delay_us+0x34>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d8f9      	bhi.n	8005ecc <TIM2_Delay_us+0x18>
		;

	HAL_TIM_Base_Stop(&htim2);
 8005ed8:	4803      	ldr	r0, [pc, #12]	@ (8005ee8 <TIM2_Delay_us+0x34>)
 8005eda:	f7ff fa31 	bl	8005340 <HAL_TIM_Base_Stop>
}
 8005ede:	bf00      	nop
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	20000144 	.word	0x20000144

08005eec <poll_sensor>:
#include "Delay_ns.h"

static ADC_HandleTypeDef *hadc;
static float alarm_level;

uint32_t poll_sensor(uint8_t times) {
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	71fb      	strb	r3, [r7, #7]

	uint32_t adc_V0 = 0;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 1; i <= times; i++) {
 8005efa:	2301      	movs	r3, #1
 8005efc:	74fb      	strb	r3, [r7, #19]
 8005efe:	e034      	b.n	8005f6a <poll_sensor+0x7e>

		HAL_GPIO_WritePin(V_LED_GPIO_Port, V_LED_Pin, GPIO_PIN_RESET);
 8005f00:	2200      	movs	r2, #0
 8005f02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f06:	4826      	ldr	r0, [pc, #152]	@ (8005fa0 <poll_sensor+0xb4>)
 8005f08:	f7fc ff78 	bl	8002dfc <HAL_GPIO_WritePin>

		TIM2_Delay_us(280);
 8005f0c:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8005f10:	f7ff ffd0 	bl	8005eb4 <TIM2_Delay_us>

		HAL_ADC_Start(hadc);
 8005f14:	4b23      	ldr	r3, [pc, #140]	@ (8005fa4 <poll_sensor+0xb8>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fc f8b1 	bl	8002080 <HAL_ADC_Start>

		HAL_ADC_PollForConversion(hadc, 10);
 8005f1e:	4b21      	ldr	r3, [pc, #132]	@ (8005fa4 <poll_sensor+0xb8>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	210a      	movs	r1, #10
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fc f985 	bl	8002234 <HAL_ADC_PollForConversion>

		uint32_t v_temp = HAL_ADC_GetValue(hadc);
 8005f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8005fa4 <poll_sensor+0xb8>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fc fa86 	bl	8002440 <HAL_ADC_GetValue>
 8005f34:	60f8      	str	r0, [r7, #12]

		HAL_ADC_Stop(hadc);
 8005f36:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa4 <poll_sensor+0xb8>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fc f94e 	bl	80021dc <HAL_ADC_Stop>

		if (v_temp > adc_V0)
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d901      	bls.n	8005f4c <poll_sensor+0x60>
			adc_V0 = v_temp;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	617b      	str	r3, [r7, #20]

		TIM2_Delay_us(40);
 8005f4c:	2028      	movs	r0, #40	@ 0x28
 8005f4e:	f7ff ffb1 	bl	8005eb4 <TIM2_Delay_us>

		HAL_GPIO_WritePin(V_LED_GPIO_Port, V_LED_Pin, GPIO_PIN_SET);
 8005f52:	2201      	movs	r2, #1
 8005f54:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f58:	4811      	ldr	r0, [pc, #68]	@ (8005fa0 <poll_sensor+0xb4>)
 8005f5a:	f7fc ff4f 	bl	8002dfc <HAL_GPIO_WritePin>

		HAL_Delay(10);
 8005f5e:	200a      	movs	r0, #10
 8005f60:	f7fb feb2 	bl	8001cc8 <HAL_Delay>
	for (uint8_t i = 1; i <= times; i++) {
 8005f64:	7cfb      	ldrb	r3, [r7, #19]
 8005f66:	3301      	adds	r3, #1
 8005f68:	74fb      	strb	r3, [r7, #19]
 8005f6a:	7cfa      	ldrb	r2, [r7, #19]
 8005f6c:	79fb      	ldrb	r3, [r7, #7]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d9c6      	bls.n	8005f00 <poll_sensor+0x14>
	 *  R2=10k
	 *  k=0.5
	 *
	 */

	return adc_V0 / 4095.0f * 3.3f;
 8005f72:	6978      	ldr	r0, [r7, #20]
 8005f74:	f7fa fd9e 	bl	8000ab4 <__aeabi_ui2f>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	490b      	ldr	r1, [pc, #44]	@ (8005fa8 <poll_sensor+0xbc>)
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fa fea5 	bl	8000ccc <__aeabi_fdiv>
 8005f82:	4603      	mov	r3, r0
 8005f84:	4909      	ldr	r1, [pc, #36]	@ (8005fac <poll_sensor+0xc0>)
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fa fdec 	bl	8000b64 <__aeabi_fmul>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fa ffae 	bl	8000ef0 <__aeabi_f2uiz>
 8005f94:	4603      	mov	r3, r0

}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	40010c00 	.word	0x40010c00
 8005fa4:	20000204 	.word	0x20000204
 8005fa8:	457ff000 	.word	0x457ff000
 8005fac:	40533333 	.word	0x40533333

08005fb0 <get_infra_sensor_data>:

float get_infra_sensor_data(ADC_HandleTypeDef *ha, float alarm_lvl) {
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]

	hadc = ha;
 8005fba:	4a15      	ldr	r2, [pc, #84]	@ (8006010 <get_infra_sensor_data+0x60>)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6013      	str	r3, [r2, #0]
	alarm_level = alarm_lvl;
 8005fc0:	4a14      	ldr	r2, [pc, #80]	@ (8006014 <get_infra_sensor_data+0x64>)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	6013      	str	r3, [r2, #0]

	// Sensor stabilization for 100ms
	HAL_Delay(200);
 8005fc6:	20c8      	movs	r0, #200	@ 0xc8
 8005fc8:	f7fb fe7e 	bl	8001cc8 <HAL_Delay>

	uint32_t real_adc_V0;

	real_adc_V0 = poll_sensor(1) * 2;
 8005fcc:	2001      	movs	r0, #1
 8005fce:	f7ff ff8d 	bl	8005eec <poll_sensor>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	60fb      	str	r3, [r7, #12]

	// Recheck when alarm threshold is exceeded
	if (real_adc_V0 >= alarm_level) {
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f7fa fd6b 	bl	8000ab4 <__aeabi_ui2f>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8006014 <get_infra_sensor_data+0x64>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4610      	mov	r0, r2
 8005fe8:	f7fa ff6e 	bl	8000ec8 <__aeabi_fcmpge>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d005      	beq.n	8005ffe <get_infra_sensor_data+0x4e>
		real_adc_V0 = poll_sensor(3) * 2;
 8005ff2:	2003      	movs	r0, #3
 8005ff4:	f7ff ff7a 	bl	8005eec <poll_sensor>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	60fb      	str	r3, [r7, #12]
	}

	return (float) real_adc_V0;
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f7fa fd58 	bl	8000ab4 <__aeabi_ui2f>
 8006004:	4603      	mov	r3, r0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	20000204 	.word	0x20000204
 8006014:	20000208 	.word	0x20000208

08006018 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8006018:	b4b0      	push	{r4, r5, r7}
 800601a:	b08f      	sub	sp, #60	@ 0x3c
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8006020:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8006024:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8006026:	2307      	movs	r3, #7
 8006028:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 800602c:	2307      	movs	r3, #7
 800602e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8006032:	2301      	movs	r3, #1
 8006034:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8006038:	23ff      	movs	r3, #255	@ 0xff
 800603a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 800603e:	2364      	movs	r3, #100	@ 0x64
 8006040:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8006044:	2308      	movs	r3, #8
 8006046:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	461d      	mov	r5, r3
 800604c:	f107 040c 	add.w	r4, r7, #12
 8006050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006058:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800605c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	373c      	adds	r7, #60	@ 0x3c
 8006064:	46bd      	mov	sp, r7
 8006066:	bcb0      	pop	{r4, r5, r7}
 8006068:	4770      	bx	lr

0800606a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8006074:	2101      	movs	r1, #1
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f9ff 	bl	800647a <LoRa_read>
 800607c:	4603      	mov	r3, r0
 800607e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8006080:	7bbb      	ldrb	r3, [r7, #14]
 8006082:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d107      	bne.n	800609a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800608a:	7bbb      	ldrb	r3, [r7, #14]
 800608c:	f023 0307 	bic.w	r3, r3, #7
 8006090:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	61da      	str	r2, [r3, #28]
 8006098:	e03e      	b.n	8006118 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d10c      	bne.n	80060ba <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80060a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060a4:	f023 0307 	bic.w	r3, r3, #7
 80060a8:	b25b      	sxtb	r3, r3
 80060aa:	f043 0301 	orr.w	r3, r3, #1
 80060ae:	b25b      	sxtb	r3, r3
 80060b0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	61da      	str	r2, [r3, #28]
 80060b8:	e02e      	b.n	8006118 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b03      	cmp	r3, #3
 80060be:	d10c      	bne.n	80060da <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80060c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060c4:	f023 0307 	bic.w	r3, r3, #7
 80060c8:	b25b      	sxtb	r3, r3
 80060ca:	f043 0303 	orr.w	r3, r3, #3
 80060ce:	b25b      	sxtb	r3, r3
 80060d0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2203      	movs	r2, #3
 80060d6:	61da      	str	r2, [r3, #28]
 80060d8:	e01e      	b.n	8006118 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	2b05      	cmp	r3, #5
 80060de:	d10c      	bne.n	80060fa <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80060e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060e4:	f023 0307 	bic.w	r3, r3, #7
 80060e8:	b25b      	sxtb	r3, r3
 80060ea:	f043 0305 	orr.w	r3, r3, #5
 80060ee:	b25b      	sxtb	r3, r3
 80060f0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2205      	movs	r2, #5
 80060f6:	61da      	str	r2, [r3, #28]
 80060f8:	e00e      	b.n	8006118 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b06      	cmp	r3, #6
 80060fe:	d10b      	bne.n	8006118 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8006100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006104:	f023 0307 	bic.w	r3, r3, #7
 8006108:	b25b      	sxtb	r3, r3
 800610a:	f043 0306 	orr.w	r3, r3, #6
 800610e:	b25b      	sxtb	r3, r3
 8006110:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2206      	movs	r2, #6
 8006116:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8006118:	7bfb      	ldrb	r3, [r7, #15]
 800611a:	461a      	mov	r2, r3
 800611c:	2101      	movs	r1, #1
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f9c5 	bl	80064ae <LoRa_write>
	//HAL_Delay(10);
}
 8006124:	bf00      	nop
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	603b      	str	r3, [r7, #0]
 8006138:	4613      	mov	r3, r2
 800613a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6818      	ldr	r0, [r3, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	889b      	ldrh	r3, [r3, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	4619      	mov	r1, r3
 8006148:	f7fc fe58 	bl	8002dfc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6998      	ldr	r0, [r3, #24]
 8006150:	88fa      	ldrh	r2, [r7, #6]
 8006152:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8006156:	68b9      	ldr	r1, [r7, #8]
 8006158:	f7fe fb41 	bl	80047de <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800615c:	bf00      	nop
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	4618      	mov	r0, r3
 8006164:	f7fe ff41 	bl	8004fea <HAL_SPI_GetState>
 8006168:	4603      	mov	r3, r0
 800616a:	2b01      	cmp	r3, #1
 800616c:	d1f7      	bne.n	800615e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6998      	ldr	r0, [r3, #24]
 8006172:	8b3a      	ldrh	r2, [r7, #24]
 8006174:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8006178:	6839      	ldr	r1, [r7, #0]
 800617a:	f7fe fc74 	bl	8004a66 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800617e:	bf00      	nop
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	4618      	mov	r0, r3
 8006186:	f7fe ff30 	bl	8004fea <HAL_SPI_GetState>
 800618a:	4603      	mov	r3, r0
 800618c:	2b01      	cmp	r3, #1
 800618e:	d1f7      	bne.n	8006180 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6818      	ldr	r0, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	889b      	ldrh	r3, [r3, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	4619      	mov	r1, r3
 800619c:	f7fc fe2e 	bl	8002dfc <HAL_GPIO_WritePin>
}
 80061a0:	bf00      	nop
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	603b      	str	r3, [r7, #0]
 80061b4:	4613      	mov	r3, r2
 80061b6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6818      	ldr	r0, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	889b      	ldrh	r3, [r3, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	4619      	mov	r1, r3
 80061c4:	f7fc fe1a 	bl	8002dfc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6998      	ldr	r0, [r3, #24]
 80061cc:	88fa      	ldrh	r2, [r7, #6]
 80061ce:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80061d2:	68b9      	ldr	r1, [r7, #8]
 80061d4:	f7fe fb03 	bl	80047de <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80061d8:	bf00      	nop
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fe ff03 	bl	8004fea <HAL_SPI_GetState>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d1f7      	bne.n	80061da <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6998      	ldr	r0, [r3, #24]
 80061ee:	8b3a      	ldrh	r2, [r7, #24]
 80061f0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80061f4:	6839      	ldr	r1, [r7, #0]
 80061f6:	f7fe faf2 	bl	80047de <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80061fa:	bf00      	nop
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	4618      	mov	r0, r3
 8006202:	f7fe fef2 	bl	8004fea <HAL_SPI_GetState>
 8006206:	4603      	mov	r3, r0
 8006208:	2b01      	cmp	r3, #1
 800620a:	d1f7      	bne.n	80061fc <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6818      	ldr	r0, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	889b      	ldrh	r3, [r3, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	4619      	mov	r1, r3
 8006218:	f7fc fdf0 	bl	8002dfc <HAL_GPIO_WritePin>
}
 800621c:	bf00      	nop
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	460b      	mov	r3, r1
 800622e:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8006230:	2126      	movs	r1, #38	@ 0x26
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f921 	bl	800647a <LoRa_read>
 8006238:	4603      	mov	r3, r0
 800623a:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 800623c:	78fb      	ldrb	r3, [r7, #3]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d004      	beq.n	800624c <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8006242:	7bbb      	ldrb	r3, [r7, #14]
 8006244:	f043 0308 	orr.w	r3, r3, #8
 8006248:	73fb      	strb	r3, [r7, #15]
 800624a:	e003      	b.n	8006254 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 800624c:	7bbb      	ldrb	r3, [r7, #14]
 800624e:	f023 0308 	bic.w	r3, r3, #8
 8006252:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8006254:	7bfb      	ldrb	r3, [r7, #15]
 8006256:	461a      	mov	r2, r3
 8006258:	2126      	movs	r1, #38	@ 0x26
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f927 	bl	80064ae <LoRa_write>
	HAL_Delay(10);
 8006260:	200a      	movs	r0, #10
 8006262:	f7fb fd31 	bl	8001cc8 <HAL_Delay>
}
 8006266:	bf00      	nop
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8006270:	b580      	push	{r7, lr}
 8006272:	b096      	sub	sp, #88	@ 0x58
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8006278:	4a17      	ldr	r2, [pc, #92]	@ (80062d8 <LoRa_setAutoLDO+0x68>)
 800627a:	f107 0308 	add.w	r3, r7, #8
 800627e:	4611      	mov	r1, r2
 8006280:	2250      	movs	r2, #80	@ 0x50
 8006282:	4618      	mov	r0, r3
 8006284:	f000 fb8c 	bl	80069a0 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800628e:	461a      	mov	r2, r3
 8006290:	2301      	movs	r3, #1
 8006292:	4093      	lsls	r3, r2
 8006294:	4618      	mov	r0, r3
 8006296:	f7fa f8b3 	bl	8000400 <__aeabi_i2d>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80062a0:	00db      	lsls	r3, r3, #3
 80062a2:	3358      	adds	r3, #88	@ 0x58
 80062a4:	443b      	add	r3, r7
 80062a6:	3b50      	subs	r3, #80	@ 0x50
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	f7fa fa3c 	bl	8000728 <__aeabi_ddiv>
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	4610      	mov	r0, r2
 80062b6:	4619      	mov	r1, r3
 80062b8:	f7fa fb1e 	bl	80008f8 <__aeabi_d2iz>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b10      	cmp	r3, #16
 80062c0:	bfcc      	ite	gt
 80062c2:	2301      	movgt	r3, #1
 80062c4:	2300      	movle	r3, #0
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	4619      	mov	r1, r3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7ff ffaa 	bl	8006224 <LoRa_setLowDaraRateOptimization>
}
 80062d0:	bf00      	nop
 80062d2:	3758      	adds	r7, #88	@ 0x58
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	08007428 	.word	0x08007428

080062dc <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	04db      	lsls	r3, r3, #19
 80062ea:	115b      	asrs	r3, r3, #5
 80062ec:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	0c1b      	lsrs	r3, r3, #16
 80062f2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80062f4:	7afb      	ldrb	r3, [r7, #11]
 80062f6:	461a      	mov	r2, r3
 80062f8:	2106      	movs	r1, #6
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f8d7 	bl	80064ae <LoRa_write>
	HAL_Delay(5);
 8006300:	2005      	movs	r0, #5
 8006302:	f7fb fce1 	bl	8001cc8 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	0a1b      	lsrs	r3, r3, #8
 800630a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 800630c:	7afb      	ldrb	r3, [r7, #11]
 800630e:	461a      	mov	r2, r3
 8006310:	2107      	movs	r1, #7
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f8cb 	bl	80064ae <LoRa_write>
	HAL_Delay(5);
 8006318:	2005      	movs	r0, #5
 800631a:	f7fb fcd5 	bl	8001cc8 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8006322:	7afb      	ldrb	r3, [r7, #11]
 8006324:	461a      	mov	r2, r3
 8006326:	2108      	movs	r1, #8
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f8c0 	bl	80064ae <LoRa_write>
	HAL_Delay(5);
 800632e:	2005      	movs	r0, #5
 8006330:	f7fb fcca 	bl	8001cc8 <HAL_Delay>
}
 8006334:	bf00      	nop
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b0c      	cmp	r3, #12
 800634a:	dd01      	ble.n	8006350 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 800634c:	230c      	movs	r3, #12
 800634e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b06      	cmp	r3, #6
 8006354:	dc01      	bgt.n	800635a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8006356:	2307      	movs	r3, #7
 8006358:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800635a:	211e      	movs	r1, #30
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f88c 	bl	800647a <LoRa_read>
 8006362:	4603      	mov	r3, r0
 8006364:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8006366:	200a      	movs	r0, #10
 8006368:	f7fb fcae 	bl	8001cc8 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	b2db      	uxtb	r3, r3
 8006370:	011b      	lsls	r3, r3, #4
 8006372:	b2da      	uxtb	r2, r3
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	f003 030f 	and.w	r3, r3, #15
 800637a:	b2db      	uxtb	r3, r3
 800637c:	4413      	add	r3, r2
 800637e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8006380:	7bbb      	ldrb	r3, [r7, #14]
 8006382:	461a      	mov	r2, r3
 8006384:	211e      	movs	r1, #30
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f891 	bl	80064ae <LoRa_write>
	HAL_Delay(10);
 800638c:	200a      	movs	r0, #10
 800638e:	f7fb fc9b 	bl	8001cc8 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7ff ff6c 	bl	8006270 <LoRa_setAutoLDO>
}
 8006398:	bf00      	nop
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	460b      	mov	r3, r1
 80063aa:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80063ac:	78fb      	ldrb	r3, [r7, #3]
 80063ae:	461a      	mov	r2, r3
 80063b0:	2109      	movs	r1, #9
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f87b 	bl	80064ae <LoRa_write>
	HAL_Delay(10);
 80063b8:	200a      	movs	r0, #10
 80063ba:	f7fb fc85 	bl	8001cc8 <HAL_Delay>
}
 80063be:	bf00      	nop
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
	...

080063c8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80063d4:	2300      	movs	r3, #0
 80063d6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80063d8:	78fb      	ldrb	r3, [r7, #3]
 80063da:	2b2c      	cmp	r3, #44	@ 0x2c
 80063dc:	d801      	bhi.n	80063e2 <LoRa_setOCP+0x1a>
		current = 45;
 80063de:	232d      	movs	r3, #45	@ 0x2d
 80063e0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80063e2:	78fb      	ldrb	r3, [r7, #3]
 80063e4:	2bf0      	cmp	r3, #240	@ 0xf0
 80063e6:	d901      	bls.n	80063ec <LoRa_setOCP+0x24>
		current = 240;
 80063e8:	23f0      	movs	r3, #240	@ 0xf0
 80063ea:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80063ec:	78fb      	ldrb	r3, [r7, #3]
 80063ee:	2b78      	cmp	r3, #120	@ 0x78
 80063f0:	d809      	bhi.n	8006406 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80063f2:	78fb      	ldrb	r3, [r7, #3]
 80063f4:	3b2d      	subs	r3, #45	@ 0x2d
 80063f6:	4a12      	ldr	r2, [pc, #72]	@ (8006440 <LoRa_setOCP+0x78>)
 80063f8:	fb82 1203 	smull	r1, r2, r2, r3
 80063fc:	1052      	asrs	r2, r2, #1
 80063fe:	17db      	asrs	r3, r3, #31
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	73fb      	strb	r3, [r7, #15]
 8006404:	e00b      	b.n	800641e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8006406:	78fb      	ldrb	r3, [r7, #3]
 8006408:	2bf0      	cmp	r3, #240	@ 0xf0
 800640a:	d808      	bhi.n	800641e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800640c:	78fb      	ldrb	r3, [r7, #3]
 800640e:	331e      	adds	r3, #30
 8006410:	4a0b      	ldr	r2, [pc, #44]	@ (8006440 <LoRa_setOCP+0x78>)
 8006412:	fb82 1203 	smull	r1, r2, r2, r3
 8006416:	1092      	asrs	r2, r2, #2
 8006418:	17db      	asrs	r3, r3, #31
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	3320      	adds	r3, #32
 8006422:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8006424:	7bfb      	ldrb	r3, [r7, #15]
 8006426:	461a      	mov	r2, r3
 8006428:	210b      	movs	r1, #11
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f83f 	bl	80064ae <LoRa_write>
	HAL_Delay(10);
 8006430:	200a      	movs	r0, #10
 8006432:	f7fb fc49 	bl	8001cc8 <HAL_Delay>
}
 8006436:	bf00      	nop
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	66666667 	.word	0x66666667

08006444 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800644c:	211e      	movs	r1, #30
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f813 	bl	800647a <LoRa_read>
 8006454:	4603      	mov	r3, r0
 8006456:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8006458:	7bfb      	ldrb	r3, [r7, #15]
 800645a:	f043 0307 	orr.w	r3, r3, #7
 800645e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	461a      	mov	r2, r3
 8006464:	211e      	movs	r1, #30
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f821 	bl	80064ae <LoRa_write>
	HAL_Delay(10);
 800646c:	200a      	movs	r0, #10
 800646e:	f7fb fc2b 	bl	8001cc8 <HAL_Delay>
}
 8006472:	bf00      	nop
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 800647a:	b580      	push	{r7, lr}
 800647c:	b086      	sub	sp, #24
 800647e:	af02      	add	r7, sp, #8
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	460b      	mov	r3, r1
 8006484:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8006486:	78fb      	ldrb	r3, [r7, #3]
 8006488:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800648c:	b2db      	uxtb	r3, r3
 800648e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8006490:	f107 030f 	add.w	r3, r7, #15
 8006494:	f107 010e 	add.w	r1, r7, #14
 8006498:	2201      	movs	r2, #1
 800649a:	9200      	str	r2, [sp, #0]
 800649c:	2201      	movs	r2, #1
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7ff fe44 	bl	800612c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b086      	sub	sp, #24
 80064b2:	af02      	add	r7, sp, #8
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	460b      	mov	r3, r1
 80064b8:	70fb      	strb	r3, [r7, #3]
 80064ba:	4613      	mov	r3, r2
 80064bc:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80064be:	78fb      	ldrb	r3, [r7, #3]
 80064c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	73bb      	strb	r3, [r7, #14]
	data = value;
 80064c8:	78bb      	ldrb	r3, [r7, #2]
 80064ca:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80064cc:	f107 030f 	add.w	r3, r7, #15
 80064d0:	f107 010e 	add.w	r1, r7, #14
 80064d4:	2201      	movs	r2, #1
 80064d6:	9200      	str	r2, [sp, #0]
 80064d8:	2201      	movs	r2, #1
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7ff fe64 	bl	80061a8 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80064e0:	bf00      	nop
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	607a      	str	r2, [r7, #4]
 80064f2:	461a      	mov	r2, r3
 80064f4:	460b      	mov	r3, r1
 80064f6:	72fb      	strb	r3, [r7, #11]
 80064f8:	4613      	mov	r3, r2
 80064fa:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 80064fc:	7afb      	ldrb	r3, [r7, #11]
 80064fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006502:	b2db      	uxtb	r3, r3
 8006504:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6818      	ldr	r0, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	889b      	ldrh	r3, [r3, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	4619      	mov	r1, r3
 8006512:	f7fc fc73 	bl	8002dfc <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6998      	ldr	r0, [r3, #24]
 800651a:	f107 0117 	add.w	r1, r7, #23
 800651e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8006522:	2201      	movs	r2, #1
 8006524:	f7fe f95b 	bl	80047de <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8006528:	bf00      	nop
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe fd5b 	bl	8004fea <HAL_SPI_GetState>
 8006534:	4603      	mov	r3, r0
 8006536:	2b01      	cmp	r3, #1
 8006538:	d1f7      	bne.n	800652a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6998      	ldr	r0, [r3, #24]
 800653e:	7abb      	ldrb	r3, [r7, #10]
 8006540:	b29a      	uxth	r2, r3
 8006542:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	f7fe f949 	bl	80047de <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800654c:	bf00      	nop
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	4618      	mov	r0, r3
 8006554:	f7fe fd49 	bl	8004fea <HAL_SPI_GetState>
 8006558:	4603      	mov	r3, r0
 800655a:	2b01      	cmp	r3, #1
 800655c:	d1f7      	bne.n	800654e <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6818      	ldr	r0, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	889b      	ldrh	r3, [r3, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	4619      	mov	r1, r3
 800656a:	f7fc fc47 	bl	8002dfc <HAL_GPIO_WritePin>
}
 800656e:	bf00      	nop
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]

	return 1;
 800657e:	2301      	movs	r3, #1
}
 8006580:	4618      	mov	r0, r3
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	bc80      	pop	{r7}
 8006588:	4770      	bx	lr

0800658a <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 800658a:	b580      	push	{r7, lr}
 800658c:	b086      	sub	sp, #24
 800658e:	af00      	add	r7, sp, #0
 8006590:	60f8      	str	r0, [r7, #12]
 8006592:	60b9      	str	r1, [r7, #8]
 8006594:	4611      	mov	r1, r2
 8006596:	461a      	mov	r2, r3
 8006598:	460b      	mov	r3, r1
 800659a:	71fb      	strb	r3, [r7, #7]
 800659c:	4613      	mov	r3, r2
 800659e:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80065a6:	2101      	movs	r1, #1
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f7ff fd5e 	bl	800606a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80065ae:	210e      	movs	r1, #14
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f7ff ff62 	bl	800647a <LoRa_read>
 80065b6:	4603      	mov	r3, r0
 80065b8:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80065ba:	7cfb      	ldrb	r3, [r7, #19]
 80065bc:	461a      	mov	r2, r3
 80065be:	210d      	movs	r1, #13
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f7ff ff74 	bl	80064ae <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80065c6:	79fb      	ldrb	r3, [r7, #7]
 80065c8:	461a      	mov	r2, r3
 80065ca:	2122      	movs	r1, #34	@ 0x22
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f7ff ff6e 	bl	80064ae <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80065d2:	79fb      	ldrb	r3, [r7, #7]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	2100      	movs	r1, #0
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f7ff ff85 	bl	80064e8 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80065de:	2103      	movs	r1, #3
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f7ff fd42 	bl	800606a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80065e6:	2112      	movs	r1, #18
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f7ff ff46 	bl	800647a <LoRa_read>
 80065ee:	4603      	mov	r3, r0
 80065f0:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 80065f2:	7cfb      	ldrb	r3, [r7, #19]
 80065f4:	f003 0308 	and.w	r3, r3, #8
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00a      	beq.n	8006612 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80065fc:	22ff      	movs	r2, #255	@ 0xff
 80065fe:	2112      	movs	r1, #18
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f7ff ff54 	bl	80064ae <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8006606:	6979      	ldr	r1, [r7, #20]
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f7ff fd2e 	bl	800606a <LoRa_gotoMode>
			return 1;
 800660e:	2301      	movs	r3, #1
 8006610:	e00f      	b.n	8006632 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8006612:	88bb      	ldrh	r3, [r7, #4]
 8006614:	3b01      	subs	r3, #1
 8006616:	80bb      	strh	r3, [r7, #4]
 8006618:	88bb      	ldrh	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d105      	bne.n	800662a <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 800661e:	6979      	ldr	r1, [r7, #20]
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f7ff fd22 	bl	800606a <LoRa_gotoMode>
				return 0;
 8006626:	2300      	movs	r3, #0
 8006628:	e003      	b.n	8006632 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 800662a:	2001      	movs	r0, #1
 800662c:	f7fb fb4c 	bl	8001cc8 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8006630:	e7d9      	b.n	80065e6 <LoRa_transmit+0x5c>
	}
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800663a:	b580      	push	{r7, lr}
 800663c:	b084      	sub	sp, #16
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7ff ff97 	bl	8006576 <LoRa_isvalid>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 8096 	beq.w	800677c <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8006650:	2100      	movs	r1, #0
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7ff fd09 	bl	800606a <LoRa_gotoMode>
			HAL_Delay(10);
 8006658:	200a      	movs	r0, #10
 800665a:	f7fb fb35 	bl	8001cc8 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 800665e:	2101      	movs	r1, #1
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff ff0a 	bl	800647a <LoRa_read>
 8006666:	4603      	mov	r3, r0
 8006668:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 800666a:	200a      	movs	r0, #10
 800666c:	f7fb fb2c 	bl	8001cc8 <HAL_Delay>
			data = read | 0x80;
 8006670:	7bfb      	ldrb	r3, [r7, #15]
 8006672:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006676:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8006678:	7bbb      	ldrb	r3, [r7, #14]
 800667a:	461a      	mov	r2, r3
 800667c:	2101      	movs	r1, #1
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7ff ff15 	bl	80064ae <LoRa_write>
			HAL_Delay(100);
 8006684:	2064      	movs	r0, #100	@ 0x64
 8006686:	f7fb fb1f 	bl	8001cc8 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	4619      	mov	r1, r3
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f7ff fe23 	bl	80062dc <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800669c:	4619      	mov	r1, r3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff fe7e 	bl	80063a0 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80066aa:	4619      	mov	r1, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f7ff fe8b 	bl	80063c8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80066b2:	2223      	movs	r2, #35	@ 0x23
 80066b4:	210c      	movs	r1, #12
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7ff fef9 	bl	80064ae <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff fec1 	bl	8006444 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80066c8:	4619      	mov	r1, r3
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff fe36 	bl	800633c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80066d0:	22ff      	movs	r2, #255	@ 0xff
 80066d2:	211f      	movs	r1, #31
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f7ff feea 	bl	80064ae <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80066da:	2300      	movs	r3, #0
 80066dc:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80066e4:	011b      	lsls	r3, r3, #4
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	4413      	add	r3, r2
 80066f4:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80066f6:	7bbb      	ldrb	r3, [r7, #14]
 80066f8:	461a      	mov	r2, r3
 80066fa:	211d      	movs	r1, #29
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7ff fed6 	bl	80064ae <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7ff fdb4 	bl	8006270 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800670c:	0a1b      	lsrs	r3, r3, #8
 800670e:	b29b      	uxth	r3, r3
 8006710:	b2db      	uxtb	r3, r3
 8006712:	461a      	mov	r2, r3
 8006714:	2120      	movs	r1, #32
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7ff fec9 	bl	80064ae <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006720:	b2db      	uxtb	r3, r3
 8006722:	461a      	mov	r2, r3
 8006724:	2121      	movs	r1, #33	@ 0x21
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7ff fec1 	bl	80064ae <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 800672c:	2140      	movs	r1, #64	@ 0x40
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7ff fea3 	bl	800647a <LoRa_read>
 8006734:	4603      	mov	r3, r0
 8006736:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 800673e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	461a      	mov	r2, r3
 8006744:	2140      	movs	r1, #64	@ 0x40
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff feb1 	bl	80064ae <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 800674c:	2101      	movs	r1, #1
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7ff fc8b 	bl	800606a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 800675a:	200a      	movs	r0, #10
 800675c:	f7fb fab4 	bl	8001cc8 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8006760:	2142      	movs	r1, #66	@ 0x42
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7ff fe89 	bl	800647a <LoRa_read>
 8006768:	4603      	mov	r3, r0
 800676a:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 800676c:	7bfb      	ldrb	r3, [r7, #15]
 800676e:	2b12      	cmp	r3, #18
 8006770:	d101      	bne.n	8006776 <LoRa_init+0x13c>
				return LORA_OK;
 8006772:	23c8      	movs	r3, #200	@ 0xc8
 8006774:	e004      	b.n	8006780 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8006776:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 800677a:	e001      	b.n	8006780 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 800677c:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <SX1278_Init>:

extern SPI_HandleTypeDef hspi1;

LoRa myLoRa;

void SX1278_Init(void) {
 8006788:	b5b0      	push	{r4, r5, r7, lr}
 800678a:	b08c      	sub	sp, #48	@ 0x30
 800678c:	af00      	add	r7, sp, #0
	myLoRa = newLoRa();
 800678e:	4c15      	ldr	r4, [pc, #84]	@ (80067e4 <SX1278_Init+0x5c>)
 8006790:	463b      	mov	r3, r7
 8006792:	4618      	mov	r0, r3
 8006794:	f7ff fc40 	bl	8006018 <newLoRa>
 8006798:	4625      	mov	r5, r4
 800679a:	463c      	mov	r4, r7
 800679c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800679e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067a4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80067a8:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	myLoRa.CS_port = NSS_SIGNAL_GPIO_Port;
 80067ac:	4b0d      	ldr	r3, [pc, #52]	@ (80067e4 <SX1278_Init+0x5c>)
 80067ae:	4a0e      	ldr	r2, [pc, #56]	@ (80067e8 <SX1278_Init+0x60>)
 80067b0:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin = NSS_SIGNAL_Pin;
 80067b2:	4b0c      	ldr	r3, [pc, #48]	@ (80067e4 <SX1278_Init+0x5c>)
 80067b4:	2210      	movs	r2, #16
 80067b6:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port = GPIOB;
 80067b8:	4b0a      	ldr	r3, [pc, #40]	@ (80067e4 <SX1278_Init+0x5c>)
 80067ba:	4a0c      	ldr	r2, [pc, #48]	@ (80067ec <SX1278_Init+0x64>)
 80067bc:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin = RST_SIGNAL_Pin;
 80067be:	4b09      	ldr	r3, [pc, #36]	@ (80067e4 <SX1278_Init+0x5c>)
 80067c0:	2202      	movs	r2, #2
 80067c2:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port = DIO0_INT_GPIO_Port;
 80067c4:	4b07      	ldr	r3, [pc, #28]	@ (80067e4 <SX1278_Init+0x5c>)
 80067c6:	4a09      	ldr	r2, [pc, #36]	@ (80067ec <SX1278_Init+0x64>)
 80067c8:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin = DIO0_INT_Pin;
 80067ca:	4b06      	ldr	r3, [pc, #24]	@ (80067e4 <SX1278_Init+0x5c>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx = &hspi1;
 80067d0:	4b04      	ldr	r3, [pc, #16]	@ (80067e4 <SX1278_Init+0x5c>)
 80067d2:	4a07      	ldr	r2, [pc, #28]	@ (80067f0 <SX1278_Init+0x68>)
 80067d4:	619a      	str	r2, [r3, #24]

	LoRa_init(&myLoRa);
 80067d6:	4803      	ldr	r0, [pc, #12]	@ (80067e4 <SX1278_Init+0x5c>)
 80067d8:	f7ff ff2f 	bl	800663a <LoRa_init>
}
 80067dc:	bf00      	nop
 80067de:	3730      	adds	r7, #48	@ 0x30
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bdb0      	pop	{r4, r5, r7, pc}
 80067e4:	2000020c 	.word	0x2000020c
 80067e8:	40010800 	.word	0x40010800
 80067ec:	40010c00 	.word	0x40010c00
 80067f0:	200000ec 	.word	0x200000ec

080067f4 <send_packet>:

void send_packet(SendPacket_t packet) {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	1d3b      	adds	r3, r7, #4
 80067fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	SX1278_Init();
 8006800:	f7ff ffc2 	bl	8006788 <SX1278_Init>

	LoRa_transmit(&myLoRa, (uint8_t*) &packet, sizeof(SendPacket_t), 100);
 8006804:	1d39      	adds	r1, r7, #4
 8006806:	2364      	movs	r3, #100	@ 0x64
 8006808:	220c      	movs	r2, #12
 800680a:	4803      	ldr	r0, [pc, #12]	@ (8006818 <send_packet+0x24>)
 800680c:	f7ff febd 	bl	800658a <LoRa_transmit>
//	SX1278_Transmit((uint8_t*) &packet, sizeof(SendPacket_t));
}
 8006810:	bf00      	nop
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	2000020c 	.word	0x2000020c

0800681c <get_serial_number>:
 */

#include "SerialNumber.h"
#include "stm32f1xx_hal.h"

SerialNumber_t get_serial_number() {
 800681c:	b590      	push	{r4, r7, lr}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]

	SerialNumber_t Serial;

	Serial.byte_0 = HAL_GetUIDw0();
 8006824:	f7fb fa74 	bl	8001d10 <HAL_GetUIDw0>
 8006828:	4603      	mov	r3, r0
 800682a:	60fb      	str	r3, [r7, #12]
	Serial.byte_1 = HAL_GetUIDw1();
 800682c:	f7fb fa7a 	bl	8001d24 <HAL_GetUIDw1>
 8006830:	4603      	mov	r3, r0
 8006832:	613b      	str	r3, [r7, #16]
	Serial.byte_2 = HAL_GetUIDw2();
 8006834:	f7fb fa80 	bl	8001d38 <HAL_GetUIDw2>
 8006838:	4603      	mov	r3, r0
 800683a:	617b      	str	r3, [r7, #20]

	return Serial;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	461c      	mov	r4, r3
 8006840:	f107 030c 	add.w	r3, r7, #12
 8006844:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006848:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	371c      	adds	r7, #28
 8006850:	46bd      	mov	sp, r7
 8006852:	bd90      	pop	{r4, r7, pc}

08006854 <sniprintf>:
 8006854:	b40c      	push	{r2, r3}
 8006856:	b530      	push	{r4, r5, lr}
 8006858:	4b18      	ldr	r3, [pc, #96]	@ (80068bc <sniprintf+0x68>)
 800685a:	1e0c      	subs	r4, r1, #0
 800685c:	681d      	ldr	r5, [r3, #0]
 800685e:	b09d      	sub	sp, #116	@ 0x74
 8006860:	da08      	bge.n	8006874 <sniprintf+0x20>
 8006862:	238b      	movs	r3, #139	@ 0x8b
 8006864:	f04f 30ff 	mov.w	r0, #4294967295
 8006868:	602b      	str	r3, [r5, #0]
 800686a:	b01d      	add	sp, #116	@ 0x74
 800686c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006870:	b002      	add	sp, #8
 8006872:	4770      	bx	lr
 8006874:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006878:	f8ad 3014 	strh.w	r3, [sp, #20]
 800687c:	f04f 0300 	mov.w	r3, #0
 8006880:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006882:	bf0c      	ite	eq
 8006884:	4623      	moveq	r3, r4
 8006886:	f104 33ff 	addne.w	r3, r4, #4294967295
 800688a:	9304      	str	r3, [sp, #16]
 800688c:	9307      	str	r3, [sp, #28]
 800688e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006892:	9002      	str	r0, [sp, #8]
 8006894:	9006      	str	r0, [sp, #24]
 8006896:	f8ad 3016 	strh.w	r3, [sp, #22]
 800689a:	4628      	mov	r0, r5
 800689c:	ab21      	add	r3, sp, #132	@ 0x84
 800689e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80068a0:	a902      	add	r1, sp, #8
 80068a2:	9301      	str	r3, [sp, #4]
 80068a4:	f000 f9dc 	bl	8006c60 <_svfiprintf_r>
 80068a8:	1c43      	adds	r3, r0, #1
 80068aa:	bfbc      	itt	lt
 80068ac:	238b      	movlt	r3, #139	@ 0x8b
 80068ae:	602b      	strlt	r3, [r5, #0]
 80068b0:	2c00      	cmp	r4, #0
 80068b2:	d0da      	beq.n	800686a <sniprintf+0x16>
 80068b4:	2200      	movs	r2, #0
 80068b6:	9b02      	ldr	r3, [sp, #8]
 80068b8:	701a      	strb	r2, [r3, #0]
 80068ba:	e7d6      	b.n	800686a <sniprintf+0x16>
 80068bc:	2000000c 	.word	0x2000000c

080068c0 <_vsniprintf_r>:
 80068c0:	b530      	push	{r4, r5, lr}
 80068c2:	4614      	mov	r4, r2
 80068c4:	2c00      	cmp	r4, #0
 80068c6:	4605      	mov	r5, r0
 80068c8:	461a      	mov	r2, r3
 80068ca:	b09b      	sub	sp, #108	@ 0x6c
 80068cc:	da05      	bge.n	80068da <_vsniprintf_r+0x1a>
 80068ce:	238b      	movs	r3, #139	@ 0x8b
 80068d0:	6003      	str	r3, [r0, #0]
 80068d2:	f04f 30ff 	mov.w	r0, #4294967295
 80068d6:	b01b      	add	sp, #108	@ 0x6c
 80068d8:	bd30      	pop	{r4, r5, pc}
 80068da:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80068de:	f8ad 300c 	strh.w	r3, [sp, #12]
 80068e2:	f04f 0300 	mov.w	r3, #0
 80068e6:	9319      	str	r3, [sp, #100]	@ 0x64
 80068e8:	bf0c      	ite	eq
 80068ea:	4623      	moveq	r3, r4
 80068ec:	f104 33ff 	addne.w	r3, r4, #4294967295
 80068f0:	9302      	str	r3, [sp, #8]
 80068f2:	9305      	str	r3, [sp, #20]
 80068f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80068f8:	9100      	str	r1, [sp, #0]
 80068fa:	9104      	str	r1, [sp, #16]
 80068fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006900:	4669      	mov	r1, sp
 8006902:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006904:	f000 f9ac 	bl	8006c60 <_svfiprintf_r>
 8006908:	1c43      	adds	r3, r0, #1
 800690a:	bfbc      	itt	lt
 800690c:	238b      	movlt	r3, #139	@ 0x8b
 800690e:	602b      	strlt	r3, [r5, #0]
 8006910:	2c00      	cmp	r4, #0
 8006912:	d0e0      	beq.n	80068d6 <_vsniprintf_r+0x16>
 8006914:	2200      	movs	r2, #0
 8006916:	9b00      	ldr	r3, [sp, #0]
 8006918:	701a      	strb	r2, [r3, #0]
 800691a:	e7dc      	b.n	80068d6 <_vsniprintf_r+0x16>

0800691c <vsniprintf>:
 800691c:	b507      	push	{r0, r1, r2, lr}
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	4613      	mov	r3, r2
 8006922:	460a      	mov	r2, r1
 8006924:	4601      	mov	r1, r0
 8006926:	4803      	ldr	r0, [pc, #12]	@ (8006934 <vsniprintf+0x18>)
 8006928:	6800      	ldr	r0, [r0, #0]
 800692a:	f7ff ffc9 	bl	80068c0 <_vsniprintf_r>
 800692e:	b003      	add	sp, #12
 8006930:	f85d fb04 	ldr.w	pc, [sp], #4
 8006934:	2000000c 	.word	0x2000000c

08006938 <memset>:
 8006938:	4603      	mov	r3, r0
 800693a:	4402      	add	r2, r0
 800693c:	4293      	cmp	r3, r2
 800693e:	d100      	bne.n	8006942 <memset+0xa>
 8006940:	4770      	bx	lr
 8006942:	f803 1b01 	strb.w	r1, [r3], #1
 8006946:	e7f9      	b.n	800693c <memset+0x4>

08006948 <__errno>:
 8006948:	4b01      	ldr	r3, [pc, #4]	@ (8006950 <__errno+0x8>)
 800694a:	6818      	ldr	r0, [r3, #0]
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	2000000c 	.word	0x2000000c

08006954 <__libc_init_array>:
 8006954:	b570      	push	{r4, r5, r6, lr}
 8006956:	2600      	movs	r6, #0
 8006958:	4d0c      	ldr	r5, [pc, #48]	@ (800698c <__libc_init_array+0x38>)
 800695a:	4c0d      	ldr	r4, [pc, #52]	@ (8006990 <__libc_init_array+0x3c>)
 800695c:	1b64      	subs	r4, r4, r5
 800695e:	10a4      	asrs	r4, r4, #2
 8006960:	42a6      	cmp	r6, r4
 8006962:	d109      	bne.n	8006978 <__libc_init_array+0x24>
 8006964:	f000 fc76 	bl	8007254 <_init>
 8006968:	2600      	movs	r6, #0
 800696a:	4d0a      	ldr	r5, [pc, #40]	@ (8006994 <__libc_init_array+0x40>)
 800696c:	4c0a      	ldr	r4, [pc, #40]	@ (8006998 <__libc_init_array+0x44>)
 800696e:	1b64      	subs	r4, r4, r5
 8006970:	10a4      	asrs	r4, r4, #2
 8006972:	42a6      	cmp	r6, r4
 8006974:	d105      	bne.n	8006982 <__libc_init_array+0x2e>
 8006976:	bd70      	pop	{r4, r5, r6, pc}
 8006978:	f855 3b04 	ldr.w	r3, [r5], #4
 800697c:	4798      	blx	r3
 800697e:	3601      	adds	r6, #1
 8006980:	e7ee      	b.n	8006960 <__libc_init_array+0xc>
 8006982:	f855 3b04 	ldr.w	r3, [r5], #4
 8006986:	4798      	blx	r3
 8006988:	3601      	adds	r6, #1
 800698a:	e7f2      	b.n	8006972 <__libc_init_array+0x1e>
 800698c:	080074f4 	.word	0x080074f4
 8006990:	080074f4 	.word	0x080074f4
 8006994:	080074f4 	.word	0x080074f4
 8006998:	080074f8 	.word	0x080074f8

0800699c <__retarget_lock_acquire_recursive>:
 800699c:	4770      	bx	lr

0800699e <__retarget_lock_release_recursive>:
 800699e:	4770      	bx	lr

080069a0 <memcpy>:
 80069a0:	440a      	add	r2, r1
 80069a2:	4291      	cmp	r1, r2
 80069a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80069a8:	d100      	bne.n	80069ac <memcpy+0xc>
 80069aa:	4770      	bx	lr
 80069ac:	b510      	push	{r4, lr}
 80069ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069b2:	4291      	cmp	r1, r2
 80069b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069b8:	d1f9      	bne.n	80069ae <memcpy+0xe>
 80069ba:	bd10      	pop	{r4, pc}

080069bc <_free_r>:
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	4605      	mov	r5, r0
 80069c0:	2900      	cmp	r1, #0
 80069c2:	d040      	beq.n	8006a46 <_free_r+0x8a>
 80069c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069c8:	1f0c      	subs	r4, r1, #4
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	bfb8      	it	lt
 80069ce:	18e4      	addlt	r4, r4, r3
 80069d0:	f000 f8de 	bl	8006b90 <__malloc_lock>
 80069d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006a48 <_free_r+0x8c>)
 80069d6:	6813      	ldr	r3, [r2, #0]
 80069d8:	b933      	cbnz	r3, 80069e8 <_free_r+0x2c>
 80069da:	6063      	str	r3, [r4, #4]
 80069dc:	6014      	str	r4, [r2, #0]
 80069de:	4628      	mov	r0, r5
 80069e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069e4:	f000 b8da 	b.w	8006b9c <__malloc_unlock>
 80069e8:	42a3      	cmp	r3, r4
 80069ea:	d908      	bls.n	80069fe <_free_r+0x42>
 80069ec:	6820      	ldr	r0, [r4, #0]
 80069ee:	1821      	adds	r1, r4, r0
 80069f0:	428b      	cmp	r3, r1
 80069f2:	bf01      	itttt	eq
 80069f4:	6819      	ldreq	r1, [r3, #0]
 80069f6:	685b      	ldreq	r3, [r3, #4]
 80069f8:	1809      	addeq	r1, r1, r0
 80069fa:	6021      	streq	r1, [r4, #0]
 80069fc:	e7ed      	b.n	80069da <_free_r+0x1e>
 80069fe:	461a      	mov	r2, r3
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	b10b      	cbz	r3, 8006a08 <_free_r+0x4c>
 8006a04:	42a3      	cmp	r3, r4
 8006a06:	d9fa      	bls.n	80069fe <_free_r+0x42>
 8006a08:	6811      	ldr	r1, [r2, #0]
 8006a0a:	1850      	adds	r0, r2, r1
 8006a0c:	42a0      	cmp	r0, r4
 8006a0e:	d10b      	bne.n	8006a28 <_free_r+0x6c>
 8006a10:	6820      	ldr	r0, [r4, #0]
 8006a12:	4401      	add	r1, r0
 8006a14:	1850      	adds	r0, r2, r1
 8006a16:	4283      	cmp	r3, r0
 8006a18:	6011      	str	r1, [r2, #0]
 8006a1a:	d1e0      	bne.n	80069de <_free_r+0x22>
 8006a1c:	6818      	ldr	r0, [r3, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	4408      	add	r0, r1
 8006a22:	6010      	str	r0, [r2, #0]
 8006a24:	6053      	str	r3, [r2, #4]
 8006a26:	e7da      	b.n	80069de <_free_r+0x22>
 8006a28:	d902      	bls.n	8006a30 <_free_r+0x74>
 8006a2a:	230c      	movs	r3, #12
 8006a2c:	602b      	str	r3, [r5, #0]
 8006a2e:	e7d6      	b.n	80069de <_free_r+0x22>
 8006a30:	6820      	ldr	r0, [r4, #0]
 8006a32:	1821      	adds	r1, r4, r0
 8006a34:	428b      	cmp	r3, r1
 8006a36:	bf01      	itttt	eq
 8006a38:	6819      	ldreq	r1, [r3, #0]
 8006a3a:	685b      	ldreq	r3, [r3, #4]
 8006a3c:	1809      	addeq	r1, r1, r0
 8006a3e:	6021      	streq	r1, [r4, #0]
 8006a40:	6063      	str	r3, [r4, #4]
 8006a42:	6054      	str	r4, [r2, #4]
 8006a44:	e7cb      	b.n	80069de <_free_r+0x22>
 8006a46:	bd38      	pop	{r3, r4, r5, pc}
 8006a48:	2000037c 	.word	0x2000037c

08006a4c <sbrk_aligned>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	4e0f      	ldr	r6, [pc, #60]	@ (8006a8c <sbrk_aligned+0x40>)
 8006a50:	460c      	mov	r4, r1
 8006a52:	6831      	ldr	r1, [r6, #0]
 8006a54:	4605      	mov	r5, r0
 8006a56:	b911      	cbnz	r1, 8006a5e <sbrk_aligned+0x12>
 8006a58:	f000 fba8 	bl	80071ac <_sbrk_r>
 8006a5c:	6030      	str	r0, [r6, #0]
 8006a5e:	4621      	mov	r1, r4
 8006a60:	4628      	mov	r0, r5
 8006a62:	f000 fba3 	bl	80071ac <_sbrk_r>
 8006a66:	1c43      	adds	r3, r0, #1
 8006a68:	d103      	bne.n	8006a72 <sbrk_aligned+0x26>
 8006a6a:	f04f 34ff 	mov.w	r4, #4294967295
 8006a6e:	4620      	mov	r0, r4
 8006a70:	bd70      	pop	{r4, r5, r6, pc}
 8006a72:	1cc4      	adds	r4, r0, #3
 8006a74:	f024 0403 	bic.w	r4, r4, #3
 8006a78:	42a0      	cmp	r0, r4
 8006a7a:	d0f8      	beq.n	8006a6e <sbrk_aligned+0x22>
 8006a7c:	1a21      	subs	r1, r4, r0
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f000 fb94 	bl	80071ac <_sbrk_r>
 8006a84:	3001      	adds	r0, #1
 8006a86:	d1f2      	bne.n	8006a6e <sbrk_aligned+0x22>
 8006a88:	e7ef      	b.n	8006a6a <sbrk_aligned+0x1e>
 8006a8a:	bf00      	nop
 8006a8c:	20000378 	.word	0x20000378

08006a90 <_malloc_r>:
 8006a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a94:	1ccd      	adds	r5, r1, #3
 8006a96:	f025 0503 	bic.w	r5, r5, #3
 8006a9a:	3508      	adds	r5, #8
 8006a9c:	2d0c      	cmp	r5, #12
 8006a9e:	bf38      	it	cc
 8006aa0:	250c      	movcc	r5, #12
 8006aa2:	2d00      	cmp	r5, #0
 8006aa4:	4606      	mov	r6, r0
 8006aa6:	db01      	blt.n	8006aac <_malloc_r+0x1c>
 8006aa8:	42a9      	cmp	r1, r5
 8006aaa:	d904      	bls.n	8006ab6 <_malloc_r+0x26>
 8006aac:	230c      	movs	r3, #12
 8006aae:	6033      	str	r3, [r6, #0]
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ab6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b8c <_malloc_r+0xfc>
 8006aba:	f000 f869 	bl	8006b90 <__malloc_lock>
 8006abe:	f8d8 3000 	ldr.w	r3, [r8]
 8006ac2:	461c      	mov	r4, r3
 8006ac4:	bb44      	cbnz	r4, 8006b18 <_malloc_r+0x88>
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f7ff ffbf 	bl	8006a4c <sbrk_aligned>
 8006ace:	1c43      	adds	r3, r0, #1
 8006ad0:	4604      	mov	r4, r0
 8006ad2:	d158      	bne.n	8006b86 <_malloc_r+0xf6>
 8006ad4:	f8d8 4000 	ldr.w	r4, [r8]
 8006ad8:	4627      	mov	r7, r4
 8006ada:	2f00      	cmp	r7, #0
 8006adc:	d143      	bne.n	8006b66 <_malloc_r+0xd6>
 8006ade:	2c00      	cmp	r4, #0
 8006ae0:	d04b      	beq.n	8006b7a <_malloc_r+0xea>
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	4639      	mov	r1, r7
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	eb04 0903 	add.w	r9, r4, r3
 8006aec:	f000 fb5e 	bl	80071ac <_sbrk_r>
 8006af0:	4581      	cmp	r9, r0
 8006af2:	d142      	bne.n	8006b7a <_malloc_r+0xea>
 8006af4:	6821      	ldr	r1, [r4, #0]
 8006af6:	4630      	mov	r0, r6
 8006af8:	1a6d      	subs	r5, r5, r1
 8006afa:	4629      	mov	r1, r5
 8006afc:	f7ff ffa6 	bl	8006a4c <sbrk_aligned>
 8006b00:	3001      	adds	r0, #1
 8006b02:	d03a      	beq.n	8006b7a <_malloc_r+0xea>
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	442b      	add	r3, r5
 8006b08:	6023      	str	r3, [r4, #0]
 8006b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	bb62      	cbnz	r2, 8006b6c <_malloc_r+0xdc>
 8006b12:	f8c8 7000 	str.w	r7, [r8]
 8006b16:	e00f      	b.n	8006b38 <_malloc_r+0xa8>
 8006b18:	6822      	ldr	r2, [r4, #0]
 8006b1a:	1b52      	subs	r2, r2, r5
 8006b1c:	d420      	bmi.n	8006b60 <_malloc_r+0xd0>
 8006b1e:	2a0b      	cmp	r2, #11
 8006b20:	d917      	bls.n	8006b52 <_malloc_r+0xc2>
 8006b22:	1961      	adds	r1, r4, r5
 8006b24:	42a3      	cmp	r3, r4
 8006b26:	6025      	str	r5, [r4, #0]
 8006b28:	bf18      	it	ne
 8006b2a:	6059      	strne	r1, [r3, #4]
 8006b2c:	6863      	ldr	r3, [r4, #4]
 8006b2e:	bf08      	it	eq
 8006b30:	f8c8 1000 	streq.w	r1, [r8]
 8006b34:	5162      	str	r2, [r4, r5]
 8006b36:	604b      	str	r3, [r1, #4]
 8006b38:	4630      	mov	r0, r6
 8006b3a:	f000 f82f 	bl	8006b9c <__malloc_unlock>
 8006b3e:	f104 000b 	add.w	r0, r4, #11
 8006b42:	1d23      	adds	r3, r4, #4
 8006b44:	f020 0007 	bic.w	r0, r0, #7
 8006b48:	1ac2      	subs	r2, r0, r3
 8006b4a:	bf1c      	itt	ne
 8006b4c:	1a1b      	subne	r3, r3, r0
 8006b4e:	50a3      	strne	r3, [r4, r2]
 8006b50:	e7af      	b.n	8006ab2 <_malloc_r+0x22>
 8006b52:	6862      	ldr	r2, [r4, #4]
 8006b54:	42a3      	cmp	r3, r4
 8006b56:	bf0c      	ite	eq
 8006b58:	f8c8 2000 	streq.w	r2, [r8]
 8006b5c:	605a      	strne	r2, [r3, #4]
 8006b5e:	e7eb      	b.n	8006b38 <_malloc_r+0xa8>
 8006b60:	4623      	mov	r3, r4
 8006b62:	6864      	ldr	r4, [r4, #4]
 8006b64:	e7ae      	b.n	8006ac4 <_malloc_r+0x34>
 8006b66:	463c      	mov	r4, r7
 8006b68:	687f      	ldr	r7, [r7, #4]
 8006b6a:	e7b6      	b.n	8006ada <_malloc_r+0x4a>
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	42a3      	cmp	r3, r4
 8006b72:	d1fb      	bne.n	8006b6c <_malloc_r+0xdc>
 8006b74:	2300      	movs	r3, #0
 8006b76:	6053      	str	r3, [r2, #4]
 8006b78:	e7de      	b.n	8006b38 <_malloc_r+0xa8>
 8006b7a:	230c      	movs	r3, #12
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	6033      	str	r3, [r6, #0]
 8006b80:	f000 f80c 	bl	8006b9c <__malloc_unlock>
 8006b84:	e794      	b.n	8006ab0 <_malloc_r+0x20>
 8006b86:	6005      	str	r5, [r0, #0]
 8006b88:	e7d6      	b.n	8006b38 <_malloc_r+0xa8>
 8006b8a:	bf00      	nop
 8006b8c:	2000037c 	.word	0x2000037c

08006b90 <__malloc_lock>:
 8006b90:	4801      	ldr	r0, [pc, #4]	@ (8006b98 <__malloc_lock+0x8>)
 8006b92:	f7ff bf03 	b.w	800699c <__retarget_lock_acquire_recursive>
 8006b96:	bf00      	nop
 8006b98:	20000374 	.word	0x20000374

08006b9c <__malloc_unlock>:
 8006b9c:	4801      	ldr	r0, [pc, #4]	@ (8006ba4 <__malloc_unlock+0x8>)
 8006b9e:	f7ff befe 	b.w	800699e <__retarget_lock_release_recursive>
 8006ba2:	bf00      	nop
 8006ba4:	20000374 	.word	0x20000374

08006ba8 <__ssputs_r>:
 8006ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bac:	461f      	mov	r7, r3
 8006bae:	688e      	ldr	r6, [r1, #8]
 8006bb0:	4682      	mov	sl, r0
 8006bb2:	42be      	cmp	r6, r7
 8006bb4:	460c      	mov	r4, r1
 8006bb6:	4690      	mov	r8, r2
 8006bb8:	680b      	ldr	r3, [r1, #0]
 8006bba:	d82d      	bhi.n	8006c18 <__ssputs_r+0x70>
 8006bbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bc0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006bc4:	d026      	beq.n	8006c14 <__ssputs_r+0x6c>
 8006bc6:	6965      	ldr	r5, [r4, #20]
 8006bc8:	6909      	ldr	r1, [r1, #16]
 8006bca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bce:	eba3 0901 	sub.w	r9, r3, r1
 8006bd2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bd6:	1c7b      	adds	r3, r7, #1
 8006bd8:	444b      	add	r3, r9
 8006bda:	106d      	asrs	r5, r5, #1
 8006bdc:	429d      	cmp	r5, r3
 8006bde:	bf38      	it	cc
 8006be0:	461d      	movcc	r5, r3
 8006be2:	0553      	lsls	r3, r2, #21
 8006be4:	d527      	bpl.n	8006c36 <__ssputs_r+0x8e>
 8006be6:	4629      	mov	r1, r5
 8006be8:	f7ff ff52 	bl	8006a90 <_malloc_r>
 8006bec:	4606      	mov	r6, r0
 8006bee:	b360      	cbz	r0, 8006c4a <__ssputs_r+0xa2>
 8006bf0:	464a      	mov	r2, r9
 8006bf2:	6921      	ldr	r1, [r4, #16]
 8006bf4:	f7ff fed4 	bl	80069a0 <memcpy>
 8006bf8:	89a3      	ldrh	r3, [r4, #12]
 8006bfa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c02:	81a3      	strh	r3, [r4, #12]
 8006c04:	6126      	str	r6, [r4, #16]
 8006c06:	444e      	add	r6, r9
 8006c08:	6026      	str	r6, [r4, #0]
 8006c0a:	463e      	mov	r6, r7
 8006c0c:	6165      	str	r5, [r4, #20]
 8006c0e:	eba5 0509 	sub.w	r5, r5, r9
 8006c12:	60a5      	str	r5, [r4, #8]
 8006c14:	42be      	cmp	r6, r7
 8006c16:	d900      	bls.n	8006c1a <__ssputs_r+0x72>
 8006c18:	463e      	mov	r6, r7
 8006c1a:	4632      	mov	r2, r6
 8006c1c:	4641      	mov	r1, r8
 8006c1e:	6820      	ldr	r0, [r4, #0]
 8006c20:	f000 faaa 	bl	8007178 <memmove>
 8006c24:	2000      	movs	r0, #0
 8006c26:	68a3      	ldr	r3, [r4, #8]
 8006c28:	1b9b      	subs	r3, r3, r6
 8006c2a:	60a3      	str	r3, [r4, #8]
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	4433      	add	r3, r6
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c36:	462a      	mov	r2, r5
 8006c38:	f000 fad6 	bl	80071e8 <_realloc_r>
 8006c3c:	4606      	mov	r6, r0
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d1e0      	bne.n	8006c04 <__ssputs_r+0x5c>
 8006c42:	4650      	mov	r0, sl
 8006c44:	6921      	ldr	r1, [r4, #16]
 8006c46:	f7ff feb9 	bl	80069bc <_free_r>
 8006c4a:	230c      	movs	r3, #12
 8006c4c:	f8ca 3000 	str.w	r3, [sl]
 8006c50:	89a3      	ldrh	r3, [r4, #12]
 8006c52:	f04f 30ff 	mov.w	r0, #4294967295
 8006c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c5a:	81a3      	strh	r3, [r4, #12]
 8006c5c:	e7e9      	b.n	8006c32 <__ssputs_r+0x8a>
	...

08006c60 <_svfiprintf_r>:
 8006c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c64:	4698      	mov	r8, r3
 8006c66:	898b      	ldrh	r3, [r1, #12]
 8006c68:	4607      	mov	r7, r0
 8006c6a:	061b      	lsls	r3, r3, #24
 8006c6c:	460d      	mov	r5, r1
 8006c6e:	4614      	mov	r4, r2
 8006c70:	b09d      	sub	sp, #116	@ 0x74
 8006c72:	d510      	bpl.n	8006c96 <_svfiprintf_r+0x36>
 8006c74:	690b      	ldr	r3, [r1, #16]
 8006c76:	b973      	cbnz	r3, 8006c96 <_svfiprintf_r+0x36>
 8006c78:	2140      	movs	r1, #64	@ 0x40
 8006c7a:	f7ff ff09 	bl	8006a90 <_malloc_r>
 8006c7e:	6028      	str	r0, [r5, #0]
 8006c80:	6128      	str	r0, [r5, #16]
 8006c82:	b930      	cbnz	r0, 8006c92 <_svfiprintf_r+0x32>
 8006c84:	230c      	movs	r3, #12
 8006c86:	603b      	str	r3, [r7, #0]
 8006c88:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8c:	b01d      	add	sp, #116	@ 0x74
 8006c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c92:	2340      	movs	r3, #64	@ 0x40
 8006c94:	616b      	str	r3, [r5, #20]
 8006c96:	2300      	movs	r3, #0
 8006c98:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c9a:	2320      	movs	r3, #32
 8006c9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ca0:	2330      	movs	r3, #48	@ 0x30
 8006ca2:	f04f 0901 	mov.w	r9, #1
 8006ca6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006caa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006e44 <_svfiprintf_r+0x1e4>
 8006cae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006cb2:	4623      	mov	r3, r4
 8006cb4:	469a      	mov	sl, r3
 8006cb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cba:	b10a      	cbz	r2, 8006cc0 <_svfiprintf_r+0x60>
 8006cbc:	2a25      	cmp	r2, #37	@ 0x25
 8006cbe:	d1f9      	bne.n	8006cb4 <_svfiprintf_r+0x54>
 8006cc0:	ebba 0b04 	subs.w	fp, sl, r4
 8006cc4:	d00b      	beq.n	8006cde <_svfiprintf_r+0x7e>
 8006cc6:	465b      	mov	r3, fp
 8006cc8:	4622      	mov	r2, r4
 8006cca:	4629      	mov	r1, r5
 8006ccc:	4638      	mov	r0, r7
 8006cce:	f7ff ff6b 	bl	8006ba8 <__ssputs_r>
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	f000 80a7 	beq.w	8006e26 <_svfiprintf_r+0x1c6>
 8006cd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cda:	445a      	add	r2, fp
 8006cdc:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cde:	f89a 3000 	ldrb.w	r3, [sl]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 809f 	beq.w	8006e26 <_svfiprintf_r+0x1c6>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	f04f 32ff 	mov.w	r2, #4294967295
 8006cee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cf2:	f10a 0a01 	add.w	sl, sl, #1
 8006cf6:	9304      	str	r3, [sp, #16]
 8006cf8:	9307      	str	r3, [sp, #28]
 8006cfa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006cfe:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d00:	4654      	mov	r4, sl
 8006d02:	2205      	movs	r2, #5
 8006d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d08:	484e      	ldr	r0, [pc, #312]	@ (8006e44 <_svfiprintf_r+0x1e4>)
 8006d0a:	f000 fa5f 	bl	80071cc <memchr>
 8006d0e:	9a04      	ldr	r2, [sp, #16]
 8006d10:	b9d8      	cbnz	r0, 8006d4a <_svfiprintf_r+0xea>
 8006d12:	06d0      	lsls	r0, r2, #27
 8006d14:	bf44      	itt	mi
 8006d16:	2320      	movmi	r3, #32
 8006d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d1c:	0711      	lsls	r1, r2, #28
 8006d1e:	bf44      	itt	mi
 8006d20:	232b      	movmi	r3, #43	@ 0x2b
 8006d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d26:	f89a 3000 	ldrb.w	r3, [sl]
 8006d2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d2c:	d015      	beq.n	8006d5a <_svfiprintf_r+0xfa>
 8006d2e:	4654      	mov	r4, sl
 8006d30:	2000      	movs	r0, #0
 8006d32:	f04f 0c0a 	mov.w	ip, #10
 8006d36:	9a07      	ldr	r2, [sp, #28]
 8006d38:	4621      	mov	r1, r4
 8006d3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d3e:	3b30      	subs	r3, #48	@ 0x30
 8006d40:	2b09      	cmp	r3, #9
 8006d42:	d94b      	bls.n	8006ddc <_svfiprintf_r+0x17c>
 8006d44:	b1b0      	cbz	r0, 8006d74 <_svfiprintf_r+0x114>
 8006d46:	9207      	str	r2, [sp, #28]
 8006d48:	e014      	b.n	8006d74 <_svfiprintf_r+0x114>
 8006d4a:	eba0 0308 	sub.w	r3, r0, r8
 8006d4e:	fa09 f303 	lsl.w	r3, r9, r3
 8006d52:	4313      	orrs	r3, r2
 8006d54:	46a2      	mov	sl, r4
 8006d56:	9304      	str	r3, [sp, #16]
 8006d58:	e7d2      	b.n	8006d00 <_svfiprintf_r+0xa0>
 8006d5a:	9b03      	ldr	r3, [sp, #12]
 8006d5c:	1d19      	adds	r1, r3, #4
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	9103      	str	r1, [sp, #12]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	bfbb      	ittet	lt
 8006d66:	425b      	neglt	r3, r3
 8006d68:	f042 0202 	orrlt.w	r2, r2, #2
 8006d6c:	9307      	strge	r3, [sp, #28]
 8006d6e:	9307      	strlt	r3, [sp, #28]
 8006d70:	bfb8      	it	lt
 8006d72:	9204      	strlt	r2, [sp, #16]
 8006d74:	7823      	ldrb	r3, [r4, #0]
 8006d76:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d78:	d10a      	bne.n	8006d90 <_svfiprintf_r+0x130>
 8006d7a:	7863      	ldrb	r3, [r4, #1]
 8006d7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d7e:	d132      	bne.n	8006de6 <_svfiprintf_r+0x186>
 8006d80:	9b03      	ldr	r3, [sp, #12]
 8006d82:	3402      	adds	r4, #2
 8006d84:	1d1a      	adds	r2, r3, #4
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	9203      	str	r2, [sp, #12]
 8006d8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d8e:	9305      	str	r3, [sp, #20]
 8006d90:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006e48 <_svfiprintf_r+0x1e8>
 8006d94:	2203      	movs	r2, #3
 8006d96:	4650      	mov	r0, sl
 8006d98:	7821      	ldrb	r1, [r4, #0]
 8006d9a:	f000 fa17 	bl	80071cc <memchr>
 8006d9e:	b138      	cbz	r0, 8006db0 <_svfiprintf_r+0x150>
 8006da0:	2240      	movs	r2, #64	@ 0x40
 8006da2:	9b04      	ldr	r3, [sp, #16]
 8006da4:	eba0 000a 	sub.w	r0, r0, sl
 8006da8:	4082      	lsls	r2, r0
 8006daa:	4313      	orrs	r3, r2
 8006dac:	3401      	adds	r4, #1
 8006dae:	9304      	str	r3, [sp, #16]
 8006db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006db4:	2206      	movs	r2, #6
 8006db6:	4825      	ldr	r0, [pc, #148]	@ (8006e4c <_svfiprintf_r+0x1ec>)
 8006db8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006dbc:	f000 fa06 	bl	80071cc <memchr>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	d036      	beq.n	8006e32 <_svfiprintf_r+0x1d2>
 8006dc4:	4b22      	ldr	r3, [pc, #136]	@ (8006e50 <_svfiprintf_r+0x1f0>)
 8006dc6:	bb1b      	cbnz	r3, 8006e10 <_svfiprintf_r+0x1b0>
 8006dc8:	9b03      	ldr	r3, [sp, #12]
 8006dca:	3307      	adds	r3, #7
 8006dcc:	f023 0307 	bic.w	r3, r3, #7
 8006dd0:	3308      	adds	r3, #8
 8006dd2:	9303      	str	r3, [sp, #12]
 8006dd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dd6:	4433      	add	r3, r6
 8006dd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dda:	e76a      	b.n	8006cb2 <_svfiprintf_r+0x52>
 8006ddc:	460c      	mov	r4, r1
 8006dde:	2001      	movs	r0, #1
 8006de0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006de4:	e7a8      	b.n	8006d38 <_svfiprintf_r+0xd8>
 8006de6:	2300      	movs	r3, #0
 8006de8:	f04f 0c0a 	mov.w	ip, #10
 8006dec:	4619      	mov	r1, r3
 8006dee:	3401      	adds	r4, #1
 8006df0:	9305      	str	r3, [sp, #20]
 8006df2:	4620      	mov	r0, r4
 8006df4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006df8:	3a30      	subs	r2, #48	@ 0x30
 8006dfa:	2a09      	cmp	r2, #9
 8006dfc:	d903      	bls.n	8006e06 <_svfiprintf_r+0x1a6>
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d0c6      	beq.n	8006d90 <_svfiprintf_r+0x130>
 8006e02:	9105      	str	r1, [sp, #20]
 8006e04:	e7c4      	b.n	8006d90 <_svfiprintf_r+0x130>
 8006e06:	4604      	mov	r4, r0
 8006e08:	2301      	movs	r3, #1
 8006e0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e0e:	e7f0      	b.n	8006df2 <_svfiprintf_r+0x192>
 8006e10:	ab03      	add	r3, sp, #12
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	462a      	mov	r2, r5
 8006e16:	4638      	mov	r0, r7
 8006e18:	4b0e      	ldr	r3, [pc, #56]	@ (8006e54 <_svfiprintf_r+0x1f4>)
 8006e1a:	a904      	add	r1, sp, #16
 8006e1c:	f3af 8000 	nop.w
 8006e20:	1c42      	adds	r2, r0, #1
 8006e22:	4606      	mov	r6, r0
 8006e24:	d1d6      	bne.n	8006dd4 <_svfiprintf_r+0x174>
 8006e26:	89ab      	ldrh	r3, [r5, #12]
 8006e28:	065b      	lsls	r3, r3, #25
 8006e2a:	f53f af2d 	bmi.w	8006c88 <_svfiprintf_r+0x28>
 8006e2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e30:	e72c      	b.n	8006c8c <_svfiprintf_r+0x2c>
 8006e32:	ab03      	add	r3, sp, #12
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	462a      	mov	r2, r5
 8006e38:	4638      	mov	r0, r7
 8006e3a:	4b06      	ldr	r3, [pc, #24]	@ (8006e54 <_svfiprintf_r+0x1f4>)
 8006e3c:	a904      	add	r1, sp, #16
 8006e3e:	f000 f87d 	bl	8006f3c <_printf_i>
 8006e42:	e7ed      	b.n	8006e20 <_svfiprintf_r+0x1c0>
 8006e44:	080074b6 	.word	0x080074b6
 8006e48:	080074bc 	.word	0x080074bc
 8006e4c:	080074c0 	.word	0x080074c0
 8006e50:	00000000 	.word	0x00000000
 8006e54:	08006ba9 	.word	0x08006ba9

08006e58 <_printf_common>:
 8006e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e5c:	4616      	mov	r6, r2
 8006e5e:	4698      	mov	r8, r3
 8006e60:	688a      	ldr	r2, [r1, #8]
 8006e62:	690b      	ldr	r3, [r1, #16]
 8006e64:	4607      	mov	r7, r0
 8006e66:	4293      	cmp	r3, r2
 8006e68:	bfb8      	it	lt
 8006e6a:	4613      	movlt	r3, r2
 8006e6c:	6033      	str	r3, [r6, #0]
 8006e6e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e72:	460c      	mov	r4, r1
 8006e74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e78:	b10a      	cbz	r2, 8006e7e <_printf_common+0x26>
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	6033      	str	r3, [r6, #0]
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	0699      	lsls	r1, r3, #26
 8006e82:	bf42      	ittt	mi
 8006e84:	6833      	ldrmi	r3, [r6, #0]
 8006e86:	3302      	addmi	r3, #2
 8006e88:	6033      	strmi	r3, [r6, #0]
 8006e8a:	6825      	ldr	r5, [r4, #0]
 8006e8c:	f015 0506 	ands.w	r5, r5, #6
 8006e90:	d106      	bne.n	8006ea0 <_printf_common+0x48>
 8006e92:	f104 0a19 	add.w	sl, r4, #25
 8006e96:	68e3      	ldr	r3, [r4, #12]
 8006e98:	6832      	ldr	r2, [r6, #0]
 8006e9a:	1a9b      	subs	r3, r3, r2
 8006e9c:	42ab      	cmp	r3, r5
 8006e9e:	dc2b      	bgt.n	8006ef8 <_printf_common+0xa0>
 8006ea0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ea4:	6822      	ldr	r2, [r4, #0]
 8006ea6:	3b00      	subs	r3, #0
 8006ea8:	bf18      	it	ne
 8006eaa:	2301      	movne	r3, #1
 8006eac:	0692      	lsls	r2, r2, #26
 8006eae:	d430      	bmi.n	8006f12 <_printf_common+0xba>
 8006eb0:	4641      	mov	r1, r8
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006eb8:	47c8      	blx	r9
 8006eba:	3001      	adds	r0, #1
 8006ebc:	d023      	beq.n	8006f06 <_printf_common+0xae>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	6922      	ldr	r2, [r4, #16]
 8006ec2:	f003 0306 	and.w	r3, r3, #6
 8006ec6:	2b04      	cmp	r3, #4
 8006ec8:	bf14      	ite	ne
 8006eca:	2500      	movne	r5, #0
 8006ecc:	6833      	ldreq	r3, [r6, #0]
 8006ece:	f04f 0600 	mov.w	r6, #0
 8006ed2:	bf08      	it	eq
 8006ed4:	68e5      	ldreq	r5, [r4, #12]
 8006ed6:	f104 041a 	add.w	r4, r4, #26
 8006eda:	bf08      	it	eq
 8006edc:	1aed      	subeq	r5, r5, r3
 8006ede:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006ee2:	bf08      	it	eq
 8006ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	bfc4      	itt	gt
 8006eec:	1a9b      	subgt	r3, r3, r2
 8006eee:	18ed      	addgt	r5, r5, r3
 8006ef0:	42b5      	cmp	r5, r6
 8006ef2:	d11a      	bne.n	8006f2a <_printf_common+0xd2>
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	e008      	b.n	8006f0a <_printf_common+0xb2>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	4652      	mov	r2, sl
 8006efc:	4641      	mov	r1, r8
 8006efe:	4638      	mov	r0, r7
 8006f00:	47c8      	blx	r9
 8006f02:	3001      	adds	r0, #1
 8006f04:	d103      	bne.n	8006f0e <_printf_common+0xb6>
 8006f06:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f0e:	3501      	adds	r5, #1
 8006f10:	e7c1      	b.n	8006e96 <_printf_common+0x3e>
 8006f12:	2030      	movs	r0, #48	@ 0x30
 8006f14:	18e1      	adds	r1, r4, r3
 8006f16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f1a:	1c5a      	adds	r2, r3, #1
 8006f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f20:	4422      	add	r2, r4
 8006f22:	3302      	adds	r3, #2
 8006f24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f28:	e7c2      	b.n	8006eb0 <_printf_common+0x58>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	4622      	mov	r2, r4
 8006f2e:	4641      	mov	r1, r8
 8006f30:	4638      	mov	r0, r7
 8006f32:	47c8      	blx	r9
 8006f34:	3001      	adds	r0, #1
 8006f36:	d0e6      	beq.n	8006f06 <_printf_common+0xae>
 8006f38:	3601      	adds	r6, #1
 8006f3a:	e7d9      	b.n	8006ef0 <_printf_common+0x98>

08006f3c <_printf_i>:
 8006f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f40:	7e0f      	ldrb	r7, [r1, #24]
 8006f42:	4691      	mov	r9, r2
 8006f44:	2f78      	cmp	r7, #120	@ 0x78
 8006f46:	4680      	mov	r8, r0
 8006f48:	460c      	mov	r4, r1
 8006f4a:	469a      	mov	sl, r3
 8006f4c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f52:	d807      	bhi.n	8006f64 <_printf_i+0x28>
 8006f54:	2f62      	cmp	r7, #98	@ 0x62
 8006f56:	d80a      	bhi.n	8006f6e <_printf_i+0x32>
 8006f58:	2f00      	cmp	r7, #0
 8006f5a:	f000 80d1 	beq.w	8007100 <_printf_i+0x1c4>
 8006f5e:	2f58      	cmp	r7, #88	@ 0x58
 8006f60:	f000 80b8 	beq.w	80070d4 <_printf_i+0x198>
 8006f64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f6c:	e03a      	b.n	8006fe4 <_printf_i+0xa8>
 8006f6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f72:	2b15      	cmp	r3, #21
 8006f74:	d8f6      	bhi.n	8006f64 <_printf_i+0x28>
 8006f76:	a101      	add	r1, pc, #4	@ (adr r1, 8006f7c <_printf_i+0x40>)
 8006f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f7c:	08006fd5 	.word	0x08006fd5
 8006f80:	08006fe9 	.word	0x08006fe9
 8006f84:	08006f65 	.word	0x08006f65
 8006f88:	08006f65 	.word	0x08006f65
 8006f8c:	08006f65 	.word	0x08006f65
 8006f90:	08006f65 	.word	0x08006f65
 8006f94:	08006fe9 	.word	0x08006fe9
 8006f98:	08006f65 	.word	0x08006f65
 8006f9c:	08006f65 	.word	0x08006f65
 8006fa0:	08006f65 	.word	0x08006f65
 8006fa4:	08006f65 	.word	0x08006f65
 8006fa8:	080070e7 	.word	0x080070e7
 8006fac:	08007013 	.word	0x08007013
 8006fb0:	080070a1 	.word	0x080070a1
 8006fb4:	08006f65 	.word	0x08006f65
 8006fb8:	08006f65 	.word	0x08006f65
 8006fbc:	08007109 	.word	0x08007109
 8006fc0:	08006f65 	.word	0x08006f65
 8006fc4:	08007013 	.word	0x08007013
 8006fc8:	08006f65 	.word	0x08006f65
 8006fcc:	08006f65 	.word	0x08006f65
 8006fd0:	080070a9 	.word	0x080070a9
 8006fd4:	6833      	ldr	r3, [r6, #0]
 8006fd6:	1d1a      	adds	r2, r3, #4
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6032      	str	r2, [r6, #0]
 8006fdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fe0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e09c      	b.n	8007122 <_printf_i+0x1e6>
 8006fe8:	6833      	ldr	r3, [r6, #0]
 8006fea:	6820      	ldr	r0, [r4, #0]
 8006fec:	1d19      	adds	r1, r3, #4
 8006fee:	6031      	str	r1, [r6, #0]
 8006ff0:	0606      	lsls	r6, r0, #24
 8006ff2:	d501      	bpl.n	8006ff8 <_printf_i+0xbc>
 8006ff4:	681d      	ldr	r5, [r3, #0]
 8006ff6:	e003      	b.n	8007000 <_printf_i+0xc4>
 8006ff8:	0645      	lsls	r5, r0, #25
 8006ffa:	d5fb      	bpl.n	8006ff4 <_printf_i+0xb8>
 8006ffc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007000:	2d00      	cmp	r5, #0
 8007002:	da03      	bge.n	800700c <_printf_i+0xd0>
 8007004:	232d      	movs	r3, #45	@ 0x2d
 8007006:	426d      	negs	r5, r5
 8007008:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800700c:	230a      	movs	r3, #10
 800700e:	4858      	ldr	r0, [pc, #352]	@ (8007170 <_printf_i+0x234>)
 8007010:	e011      	b.n	8007036 <_printf_i+0xfa>
 8007012:	6821      	ldr	r1, [r4, #0]
 8007014:	6833      	ldr	r3, [r6, #0]
 8007016:	0608      	lsls	r0, r1, #24
 8007018:	f853 5b04 	ldr.w	r5, [r3], #4
 800701c:	d402      	bmi.n	8007024 <_printf_i+0xe8>
 800701e:	0649      	lsls	r1, r1, #25
 8007020:	bf48      	it	mi
 8007022:	b2ad      	uxthmi	r5, r5
 8007024:	2f6f      	cmp	r7, #111	@ 0x6f
 8007026:	6033      	str	r3, [r6, #0]
 8007028:	bf14      	ite	ne
 800702a:	230a      	movne	r3, #10
 800702c:	2308      	moveq	r3, #8
 800702e:	4850      	ldr	r0, [pc, #320]	@ (8007170 <_printf_i+0x234>)
 8007030:	2100      	movs	r1, #0
 8007032:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007036:	6866      	ldr	r6, [r4, #4]
 8007038:	2e00      	cmp	r6, #0
 800703a:	60a6      	str	r6, [r4, #8]
 800703c:	db05      	blt.n	800704a <_printf_i+0x10e>
 800703e:	6821      	ldr	r1, [r4, #0]
 8007040:	432e      	orrs	r6, r5
 8007042:	f021 0104 	bic.w	r1, r1, #4
 8007046:	6021      	str	r1, [r4, #0]
 8007048:	d04b      	beq.n	80070e2 <_printf_i+0x1a6>
 800704a:	4616      	mov	r6, r2
 800704c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007050:	fb03 5711 	mls	r7, r3, r1, r5
 8007054:	5dc7      	ldrb	r7, [r0, r7]
 8007056:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800705a:	462f      	mov	r7, r5
 800705c:	42bb      	cmp	r3, r7
 800705e:	460d      	mov	r5, r1
 8007060:	d9f4      	bls.n	800704c <_printf_i+0x110>
 8007062:	2b08      	cmp	r3, #8
 8007064:	d10b      	bne.n	800707e <_printf_i+0x142>
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	07df      	lsls	r7, r3, #31
 800706a:	d508      	bpl.n	800707e <_printf_i+0x142>
 800706c:	6923      	ldr	r3, [r4, #16]
 800706e:	6861      	ldr	r1, [r4, #4]
 8007070:	4299      	cmp	r1, r3
 8007072:	bfde      	ittt	le
 8007074:	2330      	movle	r3, #48	@ 0x30
 8007076:	f806 3c01 	strble.w	r3, [r6, #-1]
 800707a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800707e:	1b92      	subs	r2, r2, r6
 8007080:	6122      	str	r2, [r4, #16]
 8007082:	464b      	mov	r3, r9
 8007084:	4621      	mov	r1, r4
 8007086:	4640      	mov	r0, r8
 8007088:	f8cd a000 	str.w	sl, [sp]
 800708c:	aa03      	add	r2, sp, #12
 800708e:	f7ff fee3 	bl	8006e58 <_printf_common>
 8007092:	3001      	adds	r0, #1
 8007094:	d14a      	bne.n	800712c <_printf_i+0x1f0>
 8007096:	f04f 30ff 	mov.w	r0, #4294967295
 800709a:	b004      	add	sp, #16
 800709c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	f043 0320 	orr.w	r3, r3, #32
 80070a6:	6023      	str	r3, [r4, #0]
 80070a8:	2778      	movs	r7, #120	@ 0x78
 80070aa:	4832      	ldr	r0, [pc, #200]	@ (8007174 <_printf_i+0x238>)
 80070ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070b0:	6823      	ldr	r3, [r4, #0]
 80070b2:	6831      	ldr	r1, [r6, #0]
 80070b4:	061f      	lsls	r7, r3, #24
 80070b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80070ba:	d402      	bmi.n	80070c2 <_printf_i+0x186>
 80070bc:	065f      	lsls	r7, r3, #25
 80070be:	bf48      	it	mi
 80070c0:	b2ad      	uxthmi	r5, r5
 80070c2:	6031      	str	r1, [r6, #0]
 80070c4:	07d9      	lsls	r1, r3, #31
 80070c6:	bf44      	itt	mi
 80070c8:	f043 0320 	orrmi.w	r3, r3, #32
 80070cc:	6023      	strmi	r3, [r4, #0]
 80070ce:	b11d      	cbz	r5, 80070d8 <_printf_i+0x19c>
 80070d0:	2310      	movs	r3, #16
 80070d2:	e7ad      	b.n	8007030 <_printf_i+0xf4>
 80070d4:	4826      	ldr	r0, [pc, #152]	@ (8007170 <_printf_i+0x234>)
 80070d6:	e7e9      	b.n	80070ac <_printf_i+0x170>
 80070d8:	6823      	ldr	r3, [r4, #0]
 80070da:	f023 0320 	bic.w	r3, r3, #32
 80070de:	6023      	str	r3, [r4, #0]
 80070e0:	e7f6      	b.n	80070d0 <_printf_i+0x194>
 80070e2:	4616      	mov	r6, r2
 80070e4:	e7bd      	b.n	8007062 <_printf_i+0x126>
 80070e6:	6833      	ldr	r3, [r6, #0]
 80070e8:	6825      	ldr	r5, [r4, #0]
 80070ea:	1d18      	adds	r0, r3, #4
 80070ec:	6961      	ldr	r1, [r4, #20]
 80070ee:	6030      	str	r0, [r6, #0]
 80070f0:	062e      	lsls	r6, r5, #24
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	d501      	bpl.n	80070fa <_printf_i+0x1be>
 80070f6:	6019      	str	r1, [r3, #0]
 80070f8:	e002      	b.n	8007100 <_printf_i+0x1c4>
 80070fa:	0668      	lsls	r0, r5, #25
 80070fc:	d5fb      	bpl.n	80070f6 <_printf_i+0x1ba>
 80070fe:	8019      	strh	r1, [r3, #0]
 8007100:	2300      	movs	r3, #0
 8007102:	4616      	mov	r6, r2
 8007104:	6123      	str	r3, [r4, #16]
 8007106:	e7bc      	b.n	8007082 <_printf_i+0x146>
 8007108:	6833      	ldr	r3, [r6, #0]
 800710a:	2100      	movs	r1, #0
 800710c:	1d1a      	adds	r2, r3, #4
 800710e:	6032      	str	r2, [r6, #0]
 8007110:	681e      	ldr	r6, [r3, #0]
 8007112:	6862      	ldr	r2, [r4, #4]
 8007114:	4630      	mov	r0, r6
 8007116:	f000 f859 	bl	80071cc <memchr>
 800711a:	b108      	cbz	r0, 8007120 <_printf_i+0x1e4>
 800711c:	1b80      	subs	r0, r0, r6
 800711e:	6060      	str	r0, [r4, #4]
 8007120:	6863      	ldr	r3, [r4, #4]
 8007122:	6123      	str	r3, [r4, #16]
 8007124:	2300      	movs	r3, #0
 8007126:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800712a:	e7aa      	b.n	8007082 <_printf_i+0x146>
 800712c:	4632      	mov	r2, r6
 800712e:	4649      	mov	r1, r9
 8007130:	4640      	mov	r0, r8
 8007132:	6923      	ldr	r3, [r4, #16]
 8007134:	47d0      	blx	sl
 8007136:	3001      	adds	r0, #1
 8007138:	d0ad      	beq.n	8007096 <_printf_i+0x15a>
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	079b      	lsls	r3, r3, #30
 800713e:	d413      	bmi.n	8007168 <_printf_i+0x22c>
 8007140:	68e0      	ldr	r0, [r4, #12]
 8007142:	9b03      	ldr	r3, [sp, #12]
 8007144:	4298      	cmp	r0, r3
 8007146:	bfb8      	it	lt
 8007148:	4618      	movlt	r0, r3
 800714a:	e7a6      	b.n	800709a <_printf_i+0x15e>
 800714c:	2301      	movs	r3, #1
 800714e:	4632      	mov	r2, r6
 8007150:	4649      	mov	r1, r9
 8007152:	4640      	mov	r0, r8
 8007154:	47d0      	blx	sl
 8007156:	3001      	adds	r0, #1
 8007158:	d09d      	beq.n	8007096 <_printf_i+0x15a>
 800715a:	3501      	adds	r5, #1
 800715c:	68e3      	ldr	r3, [r4, #12]
 800715e:	9903      	ldr	r1, [sp, #12]
 8007160:	1a5b      	subs	r3, r3, r1
 8007162:	42ab      	cmp	r3, r5
 8007164:	dcf2      	bgt.n	800714c <_printf_i+0x210>
 8007166:	e7eb      	b.n	8007140 <_printf_i+0x204>
 8007168:	2500      	movs	r5, #0
 800716a:	f104 0619 	add.w	r6, r4, #25
 800716e:	e7f5      	b.n	800715c <_printf_i+0x220>
 8007170:	080074c7 	.word	0x080074c7
 8007174:	080074d8 	.word	0x080074d8

08007178 <memmove>:
 8007178:	4288      	cmp	r0, r1
 800717a:	b510      	push	{r4, lr}
 800717c:	eb01 0402 	add.w	r4, r1, r2
 8007180:	d902      	bls.n	8007188 <memmove+0x10>
 8007182:	4284      	cmp	r4, r0
 8007184:	4623      	mov	r3, r4
 8007186:	d807      	bhi.n	8007198 <memmove+0x20>
 8007188:	1e43      	subs	r3, r0, #1
 800718a:	42a1      	cmp	r1, r4
 800718c:	d008      	beq.n	80071a0 <memmove+0x28>
 800718e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007192:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007196:	e7f8      	b.n	800718a <memmove+0x12>
 8007198:	4601      	mov	r1, r0
 800719a:	4402      	add	r2, r0
 800719c:	428a      	cmp	r2, r1
 800719e:	d100      	bne.n	80071a2 <memmove+0x2a>
 80071a0:	bd10      	pop	{r4, pc}
 80071a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071aa:	e7f7      	b.n	800719c <memmove+0x24>

080071ac <_sbrk_r>:
 80071ac:	b538      	push	{r3, r4, r5, lr}
 80071ae:	2300      	movs	r3, #0
 80071b0:	4d05      	ldr	r5, [pc, #20]	@ (80071c8 <_sbrk_r+0x1c>)
 80071b2:	4604      	mov	r4, r0
 80071b4:	4608      	mov	r0, r1
 80071b6:	602b      	str	r3, [r5, #0]
 80071b8:	f7fa fcc2 	bl	8001b40 <_sbrk>
 80071bc:	1c43      	adds	r3, r0, #1
 80071be:	d102      	bne.n	80071c6 <_sbrk_r+0x1a>
 80071c0:	682b      	ldr	r3, [r5, #0]
 80071c2:	b103      	cbz	r3, 80071c6 <_sbrk_r+0x1a>
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	bd38      	pop	{r3, r4, r5, pc}
 80071c8:	20000370 	.word	0x20000370

080071cc <memchr>:
 80071cc:	4603      	mov	r3, r0
 80071ce:	b510      	push	{r4, lr}
 80071d0:	b2c9      	uxtb	r1, r1
 80071d2:	4402      	add	r2, r0
 80071d4:	4293      	cmp	r3, r2
 80071d6:	4618      	mov	r0, r3
 80071d8:	d101      	bne.n	80071de <memchr+0x12>
 80071da:	2000      	movs	r0, #0
 80071dc:	e003      	b.n	80071e6 <memchr+0x1a>
 80071de:	7804      	ldrb	r4, [r0, #0]
 80071e0:	3301      	adds	r3, #1
 80071e2:	428c      	cmp	r4, r1
 80071e4:	d1f6      	bne.n	80071d4 <memchr+0x8>
 80071e6:	bd10      	pop	{r4, pc}

080071e8 <_realloc_r>:
 80071e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ec:	4607      	mov	r7, r0
 80071ee:	4614      	mov	r4, r2
 80071f0:	460d      	mov	r5, r1
 80071f2:	b921      	cbnz	r1, 80071fe <_realloc_r+0x16>
 80071f4:	4611      	mov	r1, r2
 80071f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071fa:	f7ff bc49 	b.w	8006a90 <_malloc_r>
 80071fe:	b92a      	cbnz	r2, 800720c <_realloc_r+0x24>
 8007200:	f7ff fbdc 	bl	80069bc <_free_r>
 8007204:	4625      	mov	r5, r4
 8007206:	4628      	mov	r0, r5
 8007208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800720c:	f000 f81a 	bl	8007244 <_malloc_usable_size_r>
 8007210:	4284      	cmp	r4, r0
 8007212:	4606      	mov	r6, r0
 8007214:	d802      	bhi.n	800721c <_realloc_r+0x34>
 8007216:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800721a:	d8f4      	bhi.n	8007206 <_realloc_r+0x1e>
 800721c:	4621      	mov	r1, r4
 800721e:	4638      	mov	r0, r7
 8007220:	f7ff fc36 	bl	8006a90 <_malloc_r>
 8007224:	4680      	mov	r8, r0
 8007226:	b908      	cbnz	r0, 800722c <_realloc_r+0x44>
 8007228:	4645      	mov	r5, r8
 800722a:	e7ec      	b.n	8007206 <_realloc_r+0x1e>
 800722c:	42b4      	cmp	r4, r6
 800722e:	4622      	mov	r2, r4
 8007230:	4629      	mov	r1, r5
 8007232:	bf28      	it	cs
 8007234:	4632      	movcs	r2, r6
 8007236:	f7ff fbb3 	bl	80069a0 <memcpy>
 800723a:	4629      	mov	r1, r5
 800723c:	4638      	mov	r0, r7
 800723e:	f7ff fbbd 	bl	80069bc <_free_r>
 8007242:	e7f1      	b.n	8007228 <_realloc_r+0x40>

08007244 <_malloc_usable_size_r>:
 8007244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007248:	1f18      	subs	r0, r3, #4
 800724a:	2b00      	cmp	r3, #0
 800724c:	bfbc      	itt	lt
 800724e:	580b      	ldrlt	r3, [r1, r0]
 8007250:	18c0      	addlt	r0, r0, r3
 8007252:	4770      	bx	lr

08007254 <_init>:
 8007254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007256:	bf00      	nop
 8007258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725a:	bc08      	pop	{r3}
 800725c:	469e      	mov	lr, r3
 800725e:	4770      	bx	lr

08007260 <_fini>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	bf00      	nop
 8007264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007266:	bc08      	pop	{r3}
 8007268:	469e      	mov	lr, r3
 800726a:	4770      	bx	lr
